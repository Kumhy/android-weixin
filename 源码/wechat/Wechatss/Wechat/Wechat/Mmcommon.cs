// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System;
using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace mm.command
{

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class MMCommon
    {

        #region Extension registration
        public static void RegisterAllExtensions(pb::ExtensionRegistry registry)
        {
        }
        #endregion
        #region Static variables
        internal static pbd::MessageDescriptor internal__static_mm_command_SKBuiltinString_t__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SKBuiltinString_t, global::mm.command.SKBuiltinString_t.Builder> internal__static_mm_command_SKBuiltinString_t__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_SKBuiltinBuffer_t__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SKBuiltinBuffer_t, global::mm.command.SKBuiltinBuffer_t.Builder> internal__static_mm_command_SKBuiltinBuffer_t__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_BaseRequest__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.BaseRequest, global::mm.command.BaseRequest.Builder> internal__static_mm_command_BaseRequest__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_BaseResponse__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.BaseResponse, global::mm.command.BaseResponse.Builder> internal__static_mm_command_BaseResponse__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_DnsInfoType__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.DnsInfoType, global::mm.command.DnsInfoType.Builder> internal__static_mm_command_DnsInfoType__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_NewHostListType__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewHostListType, global::mm.command.NewHostListType.Builder> internal__static_mm_command_NewHostListType__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_NewHost__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewHost, global::mm.command.NewHost.Builder> internal__static_mm_command_NewHost__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_PluginKeyListType__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.PluginKeyListType, global::mm.command.PluginKeyListType.Builder> internal__static_mm_command_PluginKeyListType__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_PluginKey__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.PluginKey, global::mm.command.PluginKey.Builder> internal__static_mm_command_PluginKey__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_NetworkControlType__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NetworkControlType, global::mm.command.NetworkControlType.Builder> internal__static_mm_command_NetworkControlType__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_IPList__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.IPList, global::mm.command.IPList.Builder> internal__static_mm_command_IPList__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_IPEnd__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.IPEnd, global::mm.command.IPEnd.Builder> internal__static_mm_command_IPEnd__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_NewMsgResponseBody__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewMsgResponseBody, global::mm.command.NewMsgResponseBody.Builder> internal__static_mm_command_NewMsgResponseBody__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_NewMsgRequestBody__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewMsgRequestBody, global::mm.command.NewMsgRequestBody.Builder> internal__static_mm_command_NewMsgRequestBody__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_MsgResponseBody__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MsgResponseBody, global::mm.command.MsgResponseBody.Builder> internal__static_mm_command_MsgResponseBody__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_MsgRequestBody__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MsgRequestBody, global::mm.command.MsgRequestBody.Builder> internal__static_mm_command_MsgRequestBody__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_CmdList__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.CmdList, global::mm.command.CmdList.Builder> internal__static_mm_command_CmdList__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_SyncKey__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SyncKey, global::mm.command.SyncKey.Builder> internal__static_mm_command_SyncKey__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_KeyValPair__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.KeyValPair, global::mm.command.KeyValPair.Builder> internal__static_mm_command_KeyValPair__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_CmdItem__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.CmdItem, global::mm.command.CmdItem.Builder> internal__static_mm_command_CmdItem__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ParsePacket__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ParsePacket, global::mm.command.ParsePacket.Builder> internal__static_mm_command_ParsePacket__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ContactObject__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ContactObject, global::mm.command.ContactObject.Builder> internal__static_mm_command_ContactObject__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_SnsUser__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SnsUser, global::mm.command.SnsUser.Builder> internal__static_mm_command_SnsUser__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_CustomInfo__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.CustomInfo, global::mm.command.CustomInfo.Builder> internal__static_mm_command_CustomInfo__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_UserProfile__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UserProfile, global::mm.command.UserProfile.Builder> internal__static_mm_command_UserProfile__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_DisturbSetting__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.DisturbSetting, global::mm.command.DisturbSetting.Builder> internal__static_mm_command_DisturbSetting__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_TimeSpan__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.TimeSpan, global::mm.command.TimeSpan.Builder> internal__static_mm_command_TimeSpan__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_GMailList__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GMailList, global::mm.command.GMailList.Builder> internal__static_mm_command_GMailList__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_GMailObj__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GMailObj, global::mm.command.GMailObj.Builder> internal__static_mm_command_GMailObj__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_VerifyUserObj__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.VerifyUserObj, global::mm.command.VerifyUserObj.Builder> internal__static_mm_command_VerifyUserObj__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_CustomizedInfoObj__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.CustomizedInfoObj, global::mm.command.CustomizedInfoObj.Builder> internal__static_mm_command_CustomizedInfoObj__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_SearchContact__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SearchContact, global::mm.command.SearchContact.Builder> internal__static_mm_command_SearchContact__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_RoomInfo__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.RoomInfo, global::mm.command.RoomInfo.Builder> internal__static_mm_command_RoomInfo__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ContactProfile__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ContactProfile, global::mm.command.ContactProfile.Builder> internal__static_mm_command_ContactProfile__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_MsgTip__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MsgTip, global::mm.command.MsgTip.Builder> internal__static_mm_command_MsgTip__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_MsgTip2__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MsgTip2, global::mm.command.MsgTip2.Builder> internal__static_mm_command_MsgTip2__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_SafeDevice__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SafeDevice, global::mm.command.SafeDevice.Builder> internal__static_mm_command_SafeDevice__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_SafeDeviceObj__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SafeDeviceObj, global::mm.command.SafeDeviceObj.Builder> internal__static_mm_command_SafeDeviceObj__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_Msg__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.Msg, global::mm.command.Msg.Builder> internal__static_mm_command_Msg__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_HeadImg__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.HeadImg, global::mm.command.HeadImg.Builder> internal__static_mm_command_HeadImg__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_UpdateSomething__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UpdateSomething, global::mm.command.UpdateSomething.Builder> internal__static_mm_command_UpdateSomething__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_KeyValuePairString__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.KeyValuePairString, global::mm.command.KeyValuePairString.Builder> internal__static_mm_command_KeyValuePairString__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_OptionItem__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.OptionItem, global::mm.command.OptionItem.Builder> internal__static_mm_command_OptionItem__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_PackegeInfo__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.PackegeInfo, global::mm.command.PackegeInfo.Builder> internal__static_mm_command_PackegeInfo__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_VUserInfo__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.VUserInfo, global::mm.command.VUserInfo.Builder> internal__static_mm_command_VUserInfo__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_FBInfo__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.FBInfo, global::mm.command.FBInfo.Builder> internal__static_mm_command_FBInfo__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_FriendObj__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.FriendObj, global::mm.command.FriendObj.Builder> internal__static_mm_command_FriendObj__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_UserObject__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UserObject, global::mm.command.UserObject.Builder> internal__static_mm_command_UserObject__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_GroupObject__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GroupObject, global::mm.command.GroupObject.Builder> internal__static_mm_command_GroupObject__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_PageObject__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.PageObject, global::mm.command.PageObject.Builder> internal__static_mm_command_PageObject__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_GeneralControlBitSet__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GeneralControlBitSet, global::mm.command.GeneralControlBitSet.Builder> internal__static_mm_command_GeneralControlBitSet__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_JSAPIPermission__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.JSAPIPermission, global::mm.command.JSAPIPermission.Builder> internal__static_mm_command_JSAPIPermission__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_TwitterInfoObj__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.TwitterInfoObj, global::mm.command.TwitterInfoObj.Builder> internal__static_mm_command_TwitterInfoObj__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_BufferUrlObj__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.BufferUrlObj, global::mm.command.BufferUrlObj.Builder> internal__static_mm_command_BufferUrlObj__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_AppMsgObject__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.AppMsgObject, global::mm.command.AppMsgObject.Builder> internal__static_mm_command_AppMsgObject__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_RemoveFriendObject__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.RemoveFriendObject, global::mm.command.RemoveFriendObject.Builder> internal__static_mm_command_RemoveFriendObject__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ShakeGetObj__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ShakeGetObj, global::mm.command.ShakeGetObj.Builder> internal__static_mm_command_ShakeGetObj__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_CardInfo__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.CardInfo, global::mm.command.CardInfo.Builder> internal__static_mm_command_CardInfo__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ChatRoomItem__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ChatRoomItem, global::mm.command.ChatRoomItem.Builder> internal__static_mm_command_ChatRoomItem__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_MemberInfo__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MemberInfo, global::mm.command.MemberInfo.Builder> internal__static_mm_command_MemberInfo__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ECDHKey__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ECDHKey, global::mm.command.ECDHKey.Builder> internal__static_mm_command_ECDHKey__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_InitKey__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.InitKey, global::mm.command.InitKey.Builder> internal__static_mm_command_InitKey__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_AutoAuthRsaReqData__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.AutoAuthRsaReqData, global::mm.command.AutoAuthRsaReqData.Builder> internal__static_mm_command_AutoAuthRsaReqData__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_DataItem__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.DataItem, global::mm.command.DataItem.Builder> internal__static_mm_command_DataItem__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_DataItem2__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.DataItem2, global::mm.command.DataItem2.Builder> internal__static_mm_command_DataItem2__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ExtData__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtData, global::mm.command.ExtData.Builder> internal__static_mm_command_ExtData__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_KSidData__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.KSidData, global::mm.command.KSidData.Builder> internal__static_mm_command_KSidData__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ImgPic__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ImgPic, global::mm.command.ImgPic.Builder> internal__static_mm_command_ImgPic__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ShowStyleKey__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ShowStyleKey, global::mm.command.ShowStyleKey.Builder> internal__static_mm_command_ShowStyleKey__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_StyleKeyItem__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.StyleKeyItem, global::mm.command.StyleKeyItem.Builder> internal__static_mm_command_StyleKeyItem__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_AuthData__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.AuthData, global::mm.command.AuthData.Builder> internal__static_mm_command_AuthData__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_AccountInfo__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.AccountInfo, global::mm.command.AccountInfo.Builder> internal__static_mm_command_AccountInfo__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ServerInfo__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ServerInfo, global::mm.command.ServerInfo.Builder> internal__static_mm_command_ServerInfo__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_SecAuthRegKeySect__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SecAuthRegKeySect, global::mm.command.SecAuthRegKeySect.Builder> internal__static_mm_command_SecAuthRegKeySect__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_LoginQRCodeNotifyPkg__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.LoginQRCodeNotifyPkg, global::mm.command.LoginQRCodeNotifyPkg.Builder> internal__static_mm_command_LoginQRCodeNotifyPkg__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_NotifyMsg__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NotifyMsg, global::mm.command.NotifyMsg.Builder> internal__static_mm_command_NotifyMsg__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_HTTPHeader__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.HTTPHeader, global::mm.command.HTTPHeader.Builder> internal__static_mm_command_HTTPHeader__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_DeepLinkBitSet__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.DeepLinkBitSet, global::mm.command.DeepLinkBitSet.Builder> internal__static_mm_command_DeepLinkBitSet__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ChatRoomMemberData__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ChatRoomMemberData, global::mm.command.ChatRoomMemberData.Builder> internal__static_mm_command_ChatRoomMemberData__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ChatroomMemberInfo__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ChatroomMemberInfo, global::mm.command.ChatroomMemberInfo.Builder> internal__static_mm_command_ChatroomMemberInfo__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ExitChatroomObject__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ExitChatroomObject, global::mm.command.ExitChatroomObject.Builder> internal__static_mm_command_ExitChatroomObject__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ExtDeviceLoginConfirmErrorRet__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmErrorRet, global::mm.command.ExtDeviceLoginConfirmErrorRet.Builder> internal__static_mm_command_ExtDeviceLoginConfirmErrorRet__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ExtDeviceLoginConfirmExpiredRet__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmExpiredRet, global::mm.command.ExtDeviceLoginConfirmExpiredRet.Builder> internal__static_mm_command_ExtDeviceLoginConfirmExpiredRet__FieldAccessorTable;
        internal static pbd::MessageDescriptor internal__static_mm_command_ExtDeviceLoginConfirmOKRet__Descriptor;
        internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmOKRet, global::mm.command.ExtDeviceLoginConfirmOKRet.Builder> internal__static_mm_command_ExtDeviceLoginConfirmOKRet__FieldAccessorTable;
        #endregion
        #region Descriptor
        public static pbd::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbd::FileDescriptor descriptor;

        static MMCommon()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                "Cg5NTUNvbW1vbi5wcm90bxIKbW0uY29tbWFuZCIjChFTS0J1aWx0aW5TdHJp" +
                "bmdfdBIOCgZTdHJpbmcYASABKAkiMQoRU0tCdWlsdGluQnVmZmVyX3QSDAoE" +
                "aUxlbhgBIAIoBRIOCgZCdWZmZXIYAiABKAwiegoLQmFzZVJlcXVlc3QSEgoK" +
                "U2Vzc2lvbktleRgBIAIoDBILCgNVaW4YAiACKA0SEAoIRGV2aWNlSUQYAyAC" +
                "KAwSFQoNQ2xpZW50VmVyc2lvbhgEIAIoBRISCgpEZXZpY2VUeXBlGAUgAigM" +
                "Eg0KBVNjZW5lGAYgASgFIkoKDEJhc2VSZXNwb25zZRILCgNSZXQYASACKAUS" +
                "LQoGRXJyTXNnGAIgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdf" +
                "dCKyAgoLRG5zSW5mb1R5cGUSCwoDVmVyGAEgAigFEgsKA1VpbhgCIAIoDRIS" +
                "CgpFeHBpcmVUaW1lGAMgAigFEg8KB0Zyb250SUQYBCACKAUSFAoMRnJvbnRJ" +
                "UENvdW50GAUgAigFEjIKC0Zyb250SVBMaXN0GAYgAygLMh0ubW0uY29tbWFu" +
                "ZC5TS0J1aWx0aW5TdHJpbmdfdBISCgpab25lRG9tYWluGAcgASgJEi4KB0F1" +
                "dGhLZXkYCCACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90Eg4K" +
                "BlpvbmVJRBgJIAIoBRITCgtab25lSVBDb3VudBgKIAIoBRIxCgpab25lSVBM" +
                "aXN0GAsgAygLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdCJDCg9O" +
                "ZXdIb3N0TGlzdFR5cGUSDQoFQ291bnQYASACKAUSIQoETGlzdBgCIAMoCzIT" +
                "Lm1tLmNvbW1hbmQuTmV3SG9zdCI7CgdOZXdIb3N0Eg4KBk9yaWdpbhgBIAEo" +
                "CRISCgpTdWJzdGl0dXRlGAIgASgJEgwKBFR5cGUYAyABKAUiRwoRUGx1Z2lu" +
                "S2V5TGlzdFR5cGUSDQoFQ291bnQYASACKAUSIwoETGlzdBgCIAMoCzIVLm1t" +
                "LmNvbW1hbmQuUGx1Z2luS2V5IiQKCVBsdWdpbktleRILCgNLZXkYASABKAkS" +
                "CgoCSWQYAiABKAUiiQEKEk5ldHdvcmtDb250cm9sVHlwZRIQCghQb3J0TGlz" +
                "dBgBIAEoCRITCgtUaW1lb3V0TGlzdBgCIAEoCRIXCg9NaW5Ob29wSW50ZXJ2" +
                "YWwYAyABKAUSFwoPTWF4Tm9vcEludGVydmFsGAQgASgFEgwKBGludDUYBSAB" +
                "KAUSDAoEaW50NhgGIAEoBSKrAQoGSVBMaXN0EhoKEkxvbmdDb25uZWN0SVBD" +
                "b3VudBgBIAIoBRIbChNTaG9ydENvbm5lY3RJUENvdW50GAIgAigFEiwKEUxv" +
                "bmdDb25uZWN0SVBMaXN0GAMgAygLMhEubW0uY29tbWFuZC5JUEVuZBItChJT" +
                "aG9ydENvbm5lY3RJUExpc3QYBCADKAsyES5tbS5jb21tYW5kLklQRW5kEgsK" +
                "A1NlcRgFIAIoBSI9CgVJUEVuZBIMCgR0eXBlGAEgAigFEgwKBHBvcnQYAiAC" +
                "KAUSCgoCSVAYAyACKAwSDAoESG9zdBgEIAEoDCLAAQoSTmV3TXNnUmVzcG9u" +
                "c2VCb2R5EgsKA1JldBgBIAIoBRIxCgpUb1VzZXJOYW1lGAIgAigLMh0ubW0u" +
                "Y29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBINCgVNc2dJZBgDIAIoDRITCgtD" +
                "bGllbnRNc2dJZBgEIAEoDRISCgpDcmVhdGVUaW1lGAUgAigNEhIKClNlcnZl" +
                "clRpbWUYBiACKA0SDAoEVHlwZRgHIAEoDRIQCghOZXdNc2dJRBgIIAEoBCKy" +
                "AQoRTmV3TXNnUmVxdWVzdEJvZHkSMQoKVG9Vc2VyTmFtZRgBIAIoCzIdLm1t" +
                "LmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSDwoHQ29udGVudBgCIAEoCRIM" +
                "CgRUeXBlGAMgAigNEhIKCkNyZWF0ZVRpbWUYBCACKA0SEwoLQ2xpZW50TXNn" +
                "SWQYBSABKA0SEQoJbXNnU291cmNlGAYgASgJEg8KB0N0cmxCaXQYByABKA0i" +
                "zAEKD01zZ1Jlc3BvbnNlQm9keRILCgNSZXQYASACKAUSMwoMRnJvbVVzZXJO" +
                "YW1lGAIgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIxCgpU" +
                "b1VzZXJOYW1lGAMgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdf" +
                "dBINCgVNc2dJZBgEIAIoBRITCgtDbGllbnRNc2dJZBgFIAEoCRISCgpDcmVh" +
                "dGVUaW1lGAYgAigFEgwKBFR5cGUYByABKAUi5gEKDk1zZ1JlcXVlc3RCb2R5" +
                "EjMKDEZyb21Vc2VyTmFtZRgBIAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGlu" +
                "U3RyaW5nX3QSMQoKVG9Vc2VyTmFtZRgCIAIoCzIdLm1tLmNvbW1hbmQuU0tC" +
                "dWlsdGluU3RyaW5nX3QSDAoEVHlwZRgDIAIoBRIPCgdDb250ZW50GAQgASgJ" +
                "EhIKCkNyZWF0ZVRpbWUYBSACKAUSEwoLQ2xpZW50TXNnSWQYBiABKAkSEQoJ" +
                "bXNnU291cmNlGAcgASgJEhEKCUVtb2ppRmxhZxgIIAEoBSI7CgdDbWRMaXN0" +
                "Eg0KBUNvdW50GAEgAigFEiEKBExpc3QYAiADKAsyEy5tbS5jb21tYW5kLkNt" +
                "ZEl0ZW0iPwoHU3luY0tleRIPCgdLZXlOdW1iGAEgAigFEiMKA0tleRgCIAMo" +
                "CzIWLm1tLmNvbW1hbmQuS2V5VmFsUGFpciImCgpLZXlWYWxQYWlyEgsKA0tl" +
                "eRgBIAIoBRILCgNWYWwYAiACKAUiRwoHQ21kSXRlbRINCgVDbWRJZBgBIAIo" +
                "BRItCgZDbWRCdWYYAiACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZl" +
                "cl90Ig0KC1BhcnNlUGFja2V0Iv8DCg1Db250YWN0T2JqZWN0EhAKCFVzZXJO" +
                "YW1lGAEgASgJEhAKCE5pY2tOYW1lGAIgASgJEhAKCFByb3ZpbmNlGAMgASgJ" +
                "EgwKBENpdHkYBCABKAkSEQoJU2lnbmF0dXJlGAUgASgJEhAKCERpc3RhbmNl" +
                "GAYgASgJEgsKA1NleBgHIAIoBRIRCglJbWdTdGF0dXMYCCACKAUSEgoKVmVy" +
                "aWZ5RmxhZxgJIAEoBRISCgpWZXJpZnlJbmZvGAogASgJEhUKDVZlcmlmeUNv" +
                "bnRlbnQYCyABKAkSDQoFQWxpYXMYDCABKAkSDQoFV2VpYm8YDSABKAkSFQoN" +
                "V2VpYm9OaWNrbmFtZRgOIAEoCRIRCglXZWlib0ZsYWcYDyABKAUSFgoOSGVh" +
                "ZEltZ1ZlcnNpb24YEyABKAUSKAoLU25zVXNlckluZm8YFCABKAsyEy5tbS5j" +
                "b21tYW5kLlNuc1VzZXISDwoHQ291bnRyeRgVIAEoCRIVCg1CaWdIZWFkSW1n" +
                "VXJsGBYgASgJEhcKD1NtYWxsSGVhZEltZ1VybBgXIAEoCRITCgtNeUJyYW5k" +
                "TGlzdBgYIAEoCRIuCg5DdXN0b21pemVkSW5mbxgZIAEoCzIWLm1tLmNvbW1h" +
                "bmQuQ3VzdG9tSW5mbxIWCg5hbnRpc3BhbVRpY2tldBgaIAEoCSJYCgdTbnNV" +
                "c2VyEg8KB1Nuc0ZsYWcYASACKAUSEgoKU25zQkdJbWdJRBgCIAEoCRIVCg1T" +
                "bnNCR09iamVjdElEGAMgASgDEhEKCVNuc0ZsYWdFeBgEIAEoBSJeCgpDdXN0" +
                "b21JbmZvEhEKCUJyYW5kRmxhZxgBIAIoBRIUCgxFeHRlcm5hbEluZm8YAiAB" +
                "KAkSEQoJQnJhbmRJbmZvGAMgASgJEhQKDEJyYW5kSWNvblVSTBgEIAEoCSKE" +
                "BwoLVXNlclByb2ZpbGUSDwoHQml0RmxhZxgBIAIoDRIvCghVc2VyTmFtZRgC" +
                "IAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSLwoITmlja05h" +
                "bWUYAyACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0cmluZ190Eg8KB0Jp" +
                "bmRVaW4YBCACKA0SMAoJQmluZEVtYWlsGAUgAigLMh0ubW0uY29tbWFuZC5T" +
                "S0J1aWx0aW5TdHJpbmdfdBIxCgpCaW5kTW9iaWxlGAYgAigLMh0ubW0uY29t" +
                "bWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIOCgZTdGF0dXMYByACKAUSDgoGSW1n" +
                "TGVuGAggAigFEg4KBkltZ0J1ZhgJIAEoDBILCgNTZXgYCiABKAUSEAoIUHJv" +
                "dmluY2UYCyABKAkSDAoEQ2l0eRgMIAEoCRIRCglTaWduYXR1cmUYDSABKAkS" +
                "FAoMUGVyc29uYWxDYXJkGA4gASgFEjIKDkRpc3R1cmJTZXR0aW5nGA8gASgL" +
                "MhoubW0uY29tbWFuZC5EaXN0dXJiU2V0dGluZxISCgpQbHVnaW5GbGFnGBAg" +
                "ASgFEhIKClZlcmlmeUZsYWcYESABKAUSEgoKVmVyaWZ5SW5mbxgSIAEoCRIN" +
                "CgVQb2ludBgTIAEoBRISCgpFeHBlcmllbmNlGBQgASgFEg0KBUxldmVsGBUg" +
                "ASgFEhMKC0xldmVsTG93RXhwGBYgASgFEhQKDExldmVsSGlnaEV4cBgXIAEo" +
                "BRINCgVXZWlibxgYIAEoCRIUCgxQbHVnaW5Td2l0Y2gYGSABKAUSKAoJR21h" +
                "aWxMaXN0GBogASgLMhUubW0uY29tbWFuZC5HTWFpbExpc3QSDQoFQWxpYXMY" +
                "GyABKAkSFQoNV2VpYm9OaWNrbmFtZRgcIAEoCRIRCglXZWlib0ZsYWcYHSAB" +
                "KAUSFAoMRmFjZUJvb2tGbGFnGB4gASgFEhAKCEZCVXNlcklEGB8gASgDEhIK" +
                "CkZCVXNlck5hbWUYICABKAkSEgoKQWxidW1TdHlsZRghIAEoBRIRCglBbGJ1" +
                "bUZsYWcYIiABKAUSFAoMQWxidW1CR0ltZ0lEGCMgASgJEhYKDlRYTmV3c0Nh" +
                "dGVnb3J5GCQgASgFEg8KB0ZCVG9rZW4YJSABKAkSDwoHQ291bnRyeRgmIAEo" +
                "CSKQAQoORGlzdHVyYlNldHRpbmcSFAoMTmlnaHRTZXR0aW5nGAEgAigFEicK" +
                "CU5pZ2h0VGltZRgCIAIoCzIULm1tLmNvbW1hbmQuVGltZVNwYW4SFQoNQWxs" +
                "RGF5U2V0dGluZxgDIAIoBRIoCgpBbGxEYXlUaW1lGAQgAigLMhQubW0uY29t" +
                "bWFuZC5UaW1lU3BhbiIuCghUaW1lU3BhbhIRCglCZWdpblRpbWUYASACKAUS" +
                "DwoHRW5kVGltZRgCIAIoBSI+CglHTWFpbExpc3QSDQoFQ291bnQYASACKAUS" +
                "IgoETGlzdBgCIAMoCzIULm1tLmNvbW1hbmQuR01haWxPYmoiSAoIR01haWxP" +
                "YmoSEQoJR21haWxBY2N0GAEgASgJEhMKC0dtYWlsU3dpdGNoGAIgAigFEhQK" +
                "DEdtYWlsRXJyQ29kZRgDIAIoBSKuAQoNVmVyaWZ5VXNlck9iahINCgVWYWx1" +
                "ZRgBIAIoCRIYChBWZXJpZnlVc2VyVGlja2V0GAIgAigJEhYKDkFudGlTcGFt" +
                "VGlja2V0GAMgASgJEhIKCkZyaWVuZEZsYWcYBCABKA0SGAoQQ2hhdFJvb21V" +
                "c2VyTmFtZRgFIAEoCRIWCg5Tb3VyY2VVc2VyTmFtZRgGIAEoCRIWCg5Tb3Vy" +
                "Y2VOaWNrTmFtZRgHIAEoCSJlChFDdXN0b21pemVkSW5mb09iahIRCglCcmFu" +
                "ZEZsYWcYASACKAUSFAoMRXh0ZXJuYWxJbmZvGAIgASgJEhEKCUJyYW5kSW5m" +
                "bxgDIAEoCRIUCgxCcmFuZEljb25VUkwYBCABKAkivAUKDVNlYXJjaENvbnRh" +
                "Y3QSLwoIVXNlck5hbWUYASACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0" +
                "cmluZ190Ei8KCE5pY2tOYW1lGAIgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0" +
                "aW5TdHJpbmdfdBIwCglQWUluaXRpYWwYAyACKAsyHS5tbS5jb21tYW5kLlNL" +
                "QnVpbHRpblN0cmluZ190Ei4KB1F1YW5QaW4YBCACKAsyHS5tbS5jb21tYW5k" +
                "LlNLQnVpbHRpblN0cmluZ190EgsKA1NleBgFIAIoBRItCgZJbWdCdWYYBiAC" +
                "KAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90EhAKCFByb3ZpbmNl" +
                "GAcgASgJEgwKBENpdHkYCCABKAkSEQoJU2lnbmF0dXJlGAkgASgJEhQKDFBl" +
                "cnNvbmFsQ2FyZBgKIAEoBRISCgpWZXJpZnlGbGFnGAsgASgFEhIKClZlcmlm" +
                "eUluZm8YDCABKAkSDQoFV2VpYm8YDSABKAkSDQoFQWxpYXMYDiABKAkSFQoN" +
                "V2VpYm9OaWNrbmFtZRgPIAEoCRIRCglXZWlib0ZsYWcYECABKAUSEgoKQWxi" +
                "dW1TdHlsZRgRIAEoBRIRCglBbGJ1bUZsYWcYEiABKAUSFAoMQWxidW1CR0lt" +
                "Z0lEGBMgASgJEigKC1Nuc1VzZXJJbmZvGBQgASgLMhMubW0uY29tbWFuZC5T" +
                "bnNVc2VyEg8KB0NvdW50cnkYFSABKAkSEwoLTXlCcmFuZExpc3QYFiABKAkS" +
                "NQoOQ3VzdG9taXplZEluZm8YFyABKAsyHS5tbS5jb21tYW5kLkN1c3RvbWl6" +
                "ZWRJbmZvT2JqEhUKDUJpZ0hlYWRJbWdVcmwYGCABKAkSFwoPU21hbGxIZWFk" +
                "SW1nVXJsGBkgASgJImwKCFJvb21JbmZvEi8KCFVzZXJOYW1lGAEgAigLMh0u" +
                "bW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIvCghOaWNrTmFtZRgCIAIo" +
                "CzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3Qi7QkKDkNvbnRhY3RQ" +
                "cm9maWxlEi8KCFVzZXJOYW1lGAEgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0" +
                "aW5TdHJpbmdfdBIvCghOaWNrTmFtZRgCIAIoCzIdLm1tLmNvbW1hbmQuU0tC" +
                "dWlsdGluU3RyaW5nX3QSMAoJUFlJbml0aWFsGAMgAigLMh0ubW0uY29tbWFu" +
                "ZC5TS0J1aWx0aW5TdHJpbmdfdBIuCgdRdWFuUGluGAQgAigLMh0ubW0uY29t" +
                "bWFuZC5TS0J1aWx0aW5TdHJpbmdfdBILCgNTZXgYBSACKAUSLQoGSW1nQnVm" +
                "GAYgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdBIPCgdCaXRN" +
                "YXNrGAcgAigFEg4KBkJpdFZhbBgIIAIoBRIPCgdJbWdGbGFnGAkgAigFEi0K" +
                "BlJlbWFyaxgKIAEoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QS" +
                "NgoPUmVtYXJrUFlJbml0aWFsGAsgASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0" +
                "aW5TdHJpbmdfdBI0Cg1SZW1hcmtRdWFuUGluGAwgASgLMh0ubW0uY29tbWFu" +
                "ZC5TS0J1aWx0aW5TdHJpbmdfdBITCgtDb250YWN0VHlwZRgNIAEoBRIVCg1S" +
                "b29tSW5mb0NvdW50GA4gASgFEioKDFJvb21JbmZvTGlzdBgPIAMoCzIULm1t" +
                "LmNvbW1hbmQuUm9vbUluZm8SMQoKRG9tYWluTGlzdBgQIAEoCzIdLm1tLmNv" +
                "bW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSFgoOQ2hhdFJvb21Ob3RpZnkYESAB" +
                "KAUSFwoPQWRkQ29udGFjdFNjZW5lGBIgASgFEhAKCFByb3ZpbmNlGBMgASgJ" +
                "EgwKBENpdHkYFCABKAkSEQoJU2lnbmF0dXJlGBUgASgJEhQKDFBlcnNvbmFs" +
                "Q2FyZBgWIAEoBRIaChJIYXNXZWlYaW5IZEhlYWRJbWcYFyABKAUSEgoKVmVy" +
                "aWZ5RmxhZxgYIAEoBRISCgpWZXJpZnlJbmZvGBkgASgJEg0KBUxldmVsGBog" +
                "ASgFEg4KBlNvdXJjZRgbIAEoBRINCgVXZWlibxgcIAEoCRIVCg1WZXJpZnlD" +
                "b250ZW50GB0gASgJEg0KBUFsaWFzGB4gASgJEhUKDUNoYXRSb29tT3duZXIY" +
                "HyABKAkSFQoNV2VpYm9OaWNrbmFtZRggIAEoCRIRCglXZWlib0ZsYWcYISAB" +
                "KAUSEgoKQWxidW1TdHlsZRgiIAEoBRIRCglBbGJ1bUZsYWcYIyABKAUSFAoM" +
                "QWxidW1CR0ltZ0lEGCQgASgJEigKC1Nuc1VzZXJJbmZvGCUgASgLMhMubW0u" +
                "Y29tbWFuZC5TbnNVc2VyEg8KB0NvdW50cnkYJiABKAkSFQoNQmlnSGVhZElt" +
                "Z1VybBgnIAEoCRIXCg9TbWFsbEhlYWRJbWdVcmwYKCABKAkSEwoLTXlCcmFu" +
                "ZExpc3QYKSABKAkSLgoOQ3VzdG9taXplZEluZm8YKiABKAsyFi5tbS5jb21t" +
                "YW5kLkN1c3RvbUluZm8SFAoMQ2hhdFJvb21EYXRhGCsgASgJEhIKCkhlYWRJ" +
                "bWdNZDUYLCABKAkSFwoPRW5jcnlwdFVzZXJOYW1lGC0gASgJIo8BCgZNc2dU" +
                "aXASDQoFTXNnSWQYASACKAUSMwoMRnJvbVVzZXJOYW1lGAIgAigLMh0ubW0u" +
                "Y29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIxCgpUb1VzZXJOYW1lGAMgAigL" +
                "Mh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIOCgZTdGF0dXMYBCAC" +
                "KAUipwMKB01zZ1RpcDISKAoLU25zVXNlckluZm8YASACKAsyEy5tbS5jb21t" +
                "YW5kLlNuc1VzZXISEwoLTXlCcmFuZExpc3QYAiABKAkSFAoMTXNnUHVzaFNv" +
                "dW5kGAMgASgJEhUKDVZvaXBQdXNoU291bmQYBCABKAkSFwoPQmlnQ2hhdFJv" +
                "b21TaXplGAUgASgFEhgKEEJpZ0NoYXRSb29tUXVvdGEYBiABKAUSGQoRQmln" +
                "Q2hhdFJvb21JbnZpdGUYByABKAUSEgoKU2FmZU1vYmlsZRgIIAEoCRIVCg1C" +
                "aWdIZWFkSW1nVXJsGAkgASgJEhcKD1NtYWxsSGVhZEltZ1VybBgKIAEoCRIU" +
                "CgxNYWluQWNjdFR5cGUYCyABKAUSLQoGRXh0WG1sGAwgASgLMh0ubW0uY29t" +
                "bWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIuCg5TYWZlRGV2aWNlTGlzdBgNIAEo" +
                "CzIWLm1tLmNvbW1hbmQuU2FmZURldmljZRISCgpTYWZlRGV2aWNlGA4gASgF" +
                "EhUKDUdyYXlzY2FsZUZsYWcYDyABKAUiRAoKU2FmZURldmljZRINCgVDb3Vu" +
                "dBgBIAIoBRInCgRMaXN0GAIgAygLMhkubW0uY29tbWFuZC5TYWZlRGV2aWNl" +
                "T2JqIlMKDVNhZmVEZXZpY2VPYmoSDAoETmFtZRgBIAEoCRIMCgRVdWlkGAIg" +
                "ASgJEhIKCkRldmljZVR5cGUYAyABKAkSEgoKQ3JlYXRlVGltZRgEIAIoBSLL" +
                "AgoDTXNnEg0KBU1zZ0lkGAEgAigFEjMKDEZyb21Vc2VyTmFtZRgCIAIoCzId" +
                "Lm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSMQoKVG9Vc2VyTmFtZRgD" +
                "IAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSDwoHTXNnVHlw" +
                "ZRgEIAIoBRIuCgdDb250ZW50GAUgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0" +
                "aW5TdHJpbmdfdBIOCgZTdGF0dXMYBiACKAUSEQoJSW1nU3RhdHVzGAcgAigF" +
                "Ei0KBkltZ0J1ZhgIIAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluQnVmZmVy" +
                "X3QSEgoKQ3JlYXRlVGltZRgJIAIoBRIRCglNc2dTb3VyY2UYCiABKAkSEwoL" +
                "UHVzaENvbnRlbnQYCyABKAkiegoHSGVhZEltZxIPCgdJbWdUeXBlGAEgAigF" +
                "Eg4KBkltZ0xlbhgCIAIoBRIOCgZJbWdCdWYYAyABKAwSDgoGSW1nTWQ1GAQg" +
                "ASgJEhUKDUJpZ0hlYWRJbWdVcmwYBSABKAkSFwoPU21hbGxIZWFkSW1nVXJs" +
                "GAYgASgJIjoKD1VwZGF0ZVNvbWV0aGluZxISCgpGdW5jdGlvbklkGAEgAigF" +
                "EhMKC1N3aXRjaFZhbHVlGAIgAigFIjAKEktleVZhbHVlUGFpclN0cmluZxIL" +
                "CgNLZXkYASACKAUSDQoFVmFsdWUYAiACKAkiSQoKT3B0aW9uSXRlbRINCgVD" +
                "b3VudBgBIAIoBRIsCgRMaXN0GAIgAygLMh4ubW0uY29tbWFuZC5LZXlWYWx1" +
                "ZVBhaXJTdHJpbmcisgEKC1BhY2tlZ2VJbmZvEgoKAklkGAEgAigFEg8KB1Zl" +
                "cnNpb24YAiACKAUSDAoETmFtZRgDIAEoCRIMCgRTaXplGAQgASgFEiwKBVRo" +
                "dW1iGAUgASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdBIQCghQ" +
                "YWNrTmFtZRgGIAEoCRIqCgNFeHQYByABKAsyHS5tbS5jb21tYW5kLlNLQnVp" +
                "bHRpbkJ1ZmZlcl90IoEBCglWVXNlckluZm8SCgoCSUQYASACKAUSDAoERGVz" +
                "YxgCIAEoCRIrCgRJY29uGAMgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5C" +
                "dWZmZXJfdBItCgZIREljb24YBCACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRp" +
                "bkJ1ZmZlcl90IjIKBkZCSW5mbxIKCgJJRBgBIAIoAxIMCgROYW1lGAIgASgJ" +
                "Eg4KBkltZ0tleRgDIAIoBSLmAwoJRnJpZW5kT2JqEhAKCFVzZXJuYW1lGAEg" +
                "ASgJEhAKCE5pY2tuYW1lGAIgASgJEhEKCU1vYmlsZU1ENRgDIAEoCRILCgNT" +
                "ZXgYBCABKAUSEAoIUHJvdmluY2UYBSABKAkSDAoEQ2l0eRgGIAEoCRIRCglT" +
                "aWduYXR1cmUYByABKAkSFAoMUGVyc29uYWxDYXJkGAggASgFEg0KBUFsaWFz" +
                "GAkgASgJEiMKB0ZCSW5mb3MYCiABKAsyEi5tbS5jb21tYW5kLkZCSW5mbxIR" +
                "CglBbGJ1bUZsYWcYCyABKAUSEgoKQWxidW1TdHlsZRgMIAEoBRIUCgxBbGJ1" +
                "bUJHSW1nSUQYDSABKAkSKAoLU25zVXNlckluZm8YDiABKAsyEy5tbS5jb21t" +
                "YW5kLlNuc1VzZXISDwoHQ291bnRyeRgPIAEoCRITCgtNeUJyYW5kTGlzdBgQ" +
                "IAEoCRIuCg5DdXN0b21pemVkSW5mbxgRIAEoCzIWLm1tLmNvbW1hbmQuQ3Vz" +
                "dG9tSW5mbxIVCg1CaWdIZWFkSW1nVXJsGBIgASgJEhcKD1NtYWxsSGVhZElt" +
                "Z1VybBgTIAEoCRINCgVzdHIyMBgUIAEoCRINCgVzdHIyMRgVIAEoCRINCgVz" +
                "dHIyMhgWIAEoCSLMAQoKVXNlck9iamVjdBIQCghVc2VybmFtZRgBIAEoCRIQ" +
                "CghOaWNrbmFtZRgCIAEoCRIOCgZTb3VyY2UYAyACKAUSDAoEVHlwZRgEIAIo" +
                "BRIPCgdDb250ZW50GAUgASgJEhIKCkNyZWF0ZVRpbWUYBiACKAUSEQoJQ29t" +
                "bWVudElkGAcgASgFEhYKDlJlcGx5Q29tbWVudElkGAggASgFEhUKDVJlcGx5" +
                "VXNlcm5hbWUYCSABKAkSFQoNSXNOb3RSaWNoVGV4dBgKIAEoBSIeCgtHcm91" +
                "cE9iamVjdBIPCgdHcm91cElkGAEgAigDIsYECgpQYWdlT2JqZWN0EgoKAklk" +
                "GAEgAigDEhAKCFVzZXJuYW1lGAIgASgJEhAKCE5pY2tuYW1lGAMgASgJEhIK" +
                "CkNyZWF0ZVRpbWUYBCACKAUSMQoKT2JqZWN0RGVzYxgFIAIoCzIdLm1tLmNv" +
                "bW1hbmQuU0tCdWlsdGluQnVmZmVyX3QSEAoITGlrZUZsYWcYBiACKAUSEQoJ" +
                "TGlrZUNvdW50GAcgAigFEhkKEUxpa2VVc2VyTGlzdENvdW50GAggAigFEigK" +
                "CExpa2VVc2VyGAkgAygLMhYubW0uY29tbWFuZC5Vc2VyT2JqZWN0EhQKDENv" +
                "bW1lbnRDb3VudBgKIAIoBRIcChRDb21tZW50VXNlckxpc3RDb3VudBgLIAIo" +
                "BRIrCgtDb21tZW50VXNlchgMIAMoCzIWLm1tLmNvbW1hbmQuVXNlck9iamVj" +
                "dBIUCgxXaXRoVXNlck51bWIYDSACKAUSGQoRV2l0aFVzZXJMaXN0Q291bnQY" +
                "DiACKAUSKAoIV2l0aFVzZXIYDyADKAsyFi5tbS5jb21tYW5kLlVzZXJPYmpl" +
                "Y3QSDwoHRXh0RmxhZxgQIAEoBRIQCghOb0NoYW5nZRgRIAEoBRIRCglHcm91" +
                "cE51bWIYEiABKAUSJgoFR3JvdXAYEyADKAsyFy5tbS5jb21tYW5kLkdyb3Vw" +
                "T2JqZWN0EhUKDUlzTm90UmljaFRleHQYFCABKAUSFQoNUmVmZXJVc2VybmFt" +
                "ZRgVIAEoCRIPCgdSZWZlcklkGBYgASgDIigKFEdlbmVyYWxDb250cm9sQml0" +
                "U2V0EhAKCEJpdFZhbHVlGAEgAigFIiMKD0pTQVBJUGVybWlzc2lvbhIQCghC" +
                "aXRWYWx1ZRgBIAIoBSJBCg5Ud2l0dGVySW5mb09iahITCgtPYXV0aF9Ub2tl" +
                "bhgBIAEoCRIaChJPYXV0aF9Ub2tlbl9TZWNyZXQYAiABKAkiKQoMQnVmZmVy" +
                "VXJsT2JqEgsKA1VybBgBIAEoCRIMCgRUeXBlGAIgAigFIoYCCgxBcHBNc2dP" +
                "YmplY3QSFAoMRnJvbVVzZXJOYW1lGAEgASgJEg0KBUFwcElkGAIgASgJEhIK" +
                "ClNka1ZlcnNpb24YAyACKAUSEgoKVG9Vc2VybmFtZRgEIAEoCRIMCgRUeXBl" +
                "GAUgAigFEg8KB0NvbnRlbnQYBiABKAkSEgoKQ3JlYXRlVGltZRgHIAIoBRIT" +
                "CgtDbGllbnRNc2dJZBgIIAEoCRIsCgVUaHVtYhgJIAEoCzIdLm1tLmNvbW1h" +
                "bmQuU0tCdWlsdGluQnVmZmVyX3QSDgoGU291cmNlGAogASgFEhAKCFJlbWlu" +
                "ZElkGAsgASgFEhEKCU1zZ1NvdXJjZRgMIAEoCSJFChJSZW1vdmVGcmllbmRP" +
                "YmplY3QSLwoIVXNlck5hbWUYASACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRp" +
                "blN0cmluZ190Iq8ECgtTaGFrZUdldE9iahIQCghVc2VyTmFtZRgBIAEoCRIQ" +
                "CghOaWNrTmFtZRgCIAEoCRIQCghQcm92aW5jZRgDIAEoCRIMCgRDaXR5GAQg" +
                "ASgJEhEKCVNpZ25hdHVyZRgFIAEoCRIQCghEaXN0YW5jZRgGIAEoCRILCgNT" +
                "ZXgYByACKAUSEQoJSW1nU3RhdHVzGAggAigFEhAKCEhhc0hESW1nGAkgAigF" +
                "EjAKCUltZ0J1ZmZlchgKIAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluQnVm" +
                "ZmVyX3QSEwoLTnVtRGlzdGFuY2UYCyACKAUSDQoFV2VpYm8YDCABKAkSFQoN" +
                "V2VpYm9OaWNrbmFtZRgNIAEoCRIRCglXZWlib0ZsYWcYDiABKAUSEgoKVmVy" +
                "aWZ5RmxhZxgPIAEoBRISCgpWZXJpZnlJbmZvGBAgASgJEhUKDVZlcmlmeUNv" +
                "bnRlbnQYESABKAkSFgoOSGVhZEltZ1ZlcnNpb24YFSABKAUSKAoLU25zVXNl" +
                "ckluZm8YFiABKAsyEy5tbS5jb21tYW5kLlNuc1VzZXISDwoHQ291bnRyeRgX" +
                "IAEoCRIVCg1CaWdIZWFkSW1nVXJsGBggASgJEhcKD1NtYWxsSGVhZEltZ1Vy" +
                "bBgZIAEoCRITCgtNeUJyYW5kTGlzdBgaIAEoCRIuCg5DdXN0b21pemVkSW5m" +
                "bxgbIAEoCzIWLm1tLmNvbW1hbmQuQ3VzdG9tSW5mbyJUCghDYXJkSW5mbxIO" +
                "CgZDYXJkSUQYASACKAkSCwoDc2VxGAIgASgNEg0KBWl0bWUzGAMgASgNEg0K" +
                "BWl0bWU0GAQgASgNEg0KBWl0bWU1GAUgASgNIkEKDENoYXRSb29tSXRlbRIx" +
                "CgpNZW1iZXJOYW1lGAEgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJp" +
                "bmdfdCKpBAoKTWVtYmVySW5mbxIxCgpNZW1iZXJOYW1lGAEgASgLMh0ubW0u" +
                "Y29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIUCgxNZW1iZXJTdGF0dXMYAiAB" +
                "KAUSLwoITmlja05hbWUYAyABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0" +
                "cmluZ190EjAKCVBZSW5pdGlhbBgEIAEoCzIdLm1tLmNvbW1hbmQuU0tCdWls" +
                "dGluU3RyaW5nX3QSLgoHUXVhblBpbhgFIAEoCzIdLm1tLmNvbW1hbmQuU0tC" +
                "dWlsdGluU3RyaW5nX3QSCwoDU2V4GAYgASgFEi0KBlJlbWFyaxgHIAEoCzId" +
                "Lm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSNgoPUmVtYXJrUFlJbml0" +
                "aWFsGAggASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBI0Cg1S" +
                "ZW1hcmtRdWFuUGluGAkgASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJp" +
                "bmdfdBITCgtDb250YWN0VHlwZRgKIAEoBRIQCghQcm92aW5jZRgLIAEoCRIM" +
                "CgRDaXR5GAwgASgJEhEKCVNpZ25hdHVyZRgNIAEoCRIUCgxQZXJzb25hbENh" +
                "cmQYDiABKAUSEgoKVmVyaWZ5RmxhZxgPIAEoBRISCgpWZXJpZnlJbmZvGBAg" +
                "ASgJEg8KB0NvdW50cnkYESABKAkiQgoHRUNESEtleRILCgNOSUQYASACKAUS" +
                "KgoDS2V5GAIgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdCKY" +
                "AQoHSW5pdEtleRI1Cg5SYW5kb21FbmNyeUtleRgBIAIoCzIdLm1tLmNvbW1h" +
                "bmQuU0tCdWlsdGluQnVmZmVyX3QSKgoNQ2xpUHViRUNESEtleRgCIAIoCzIT" +
                "Lm1tLmNvbW1hbmQuRUNESEtleRIPCgdBY2NvdW50GAMgASgJEgsKA1B3ZBgE" +
                "IAEoCRIMCgRQd2QyGAUgASgJInYKEkF1dG9BdXRoUnNhUmVxRGF0YRI0Cg1B" +
                "ZXNFbmNyeXB0S2V5GAEgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZm" +
                "ZXJfdBIqCg1DbGlQdWJFQ0RIS2V5GAIgAigLMhMubW0uY29tbWFuZC5FQ0RI" +
                "S2V5ImEKCERhdGFJdGVtEgwKBHN0cjEYASABKAkSDAoEc3RyMhgCIAEoCRIM" +
                "CgRzdHIzGAMgASgJEisKBEtTaWQYBCACKAsyHS5tbS5jb21tYW5kLlNLQnVp" +
                "bHRpbkJ1ZmZlcl90IicKCURhdGFJdGVtMhIMCgRzdHIxGAEgASgJEgwKBHN0" +
                "cjIYAiABKAki/wEKB0V4dERhdGESLgoHQnVmZmVyMRgBIAEoCzIdLm1tLmNv" +
                "bW1hbmQuU0tCdWlsdGluQnVmZmVyX3QSIgoES1NpZBgCIAEoCzIULm1tLmNv" +
                "bW1hbmQuRGF0YUl0ZW0SJAoFRGF0YTMYAyABKAsyFS5tbS5jb21tYW5kLkRh" +
                "dGFJdGVtMhIuCgdCdWZmZXI0GAQgASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0" +
                "aW5CdWZmZXJfdBIuCgdCdWZmZXI1GAUgASgLMh0ubW0uY29tbWFuZC5TS0J1" +
                "aWx0aW5CdWZmZXJfdBIMCgRpbnQ2GAYgASgFEgwKBHN0cjcYByABKAkiggEK" +
                "CEtTaWREYXRhEgwKBHN0cjEYASABKAkSKwoES1NpZBgCIAEoCzIdLm1tLmNv" +
                "bW1hbmQuU0tCdWlsdGluQnVmZmVyX3QSDAoEc3RyMxgDIAEoCRItCgZJbWdC" +
                "dWYYBCABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90IkkKBklt" +
                "Z1BpYxIMCgRkYXRhGAEgASgJEjEKClZlcmlmeUJ1ZmYYAiACKAsyHS5tbS5j" +
                "b21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90IkYKDFNob3dTdHlsZUtleRIPCgdL" +
                "ZXlOdW1iGAEgAigFEiUKA0tleRgCIAMoCzIYLm1tLmNvbW1hbmQuU3R5bGVL" +
                "ZXlJdGVtIioKDFN0eWxlS2V5SXRlbRIMCgRpbnQxGAEgASgFEgwKBHN0cjIY" +
                "AiABKAki2wQKCEF1dGhEYXRhEgsKA1VpbhgBIAIoDRIqCg1TdnJQdWJFQ0RI" +
                "S2V5GAIgASgLMhMubW0uY29tbWFuZC5FQ0RIS2V5EjEKClNlc3Npb25LZXkY" +
                "AyABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90EjIKC0F1dG9B" +
                "dXRoS2V5GAQgASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdBIM" +
                "CgRpbnQ1GAUgAigFEi4KB0J1ZmZlcjYYBiABKAsyHS5tbS5jb21tYW5kLlNL" +
                "QnVpbHRpbkJ1ZmZlcl90EiIKBEtTaWQYByABKAsyFC5tbS5jb21tYW5kLktT" +
                "aWREYXRhEiMKB1BpY0RhdGEYCCABKAsyEi5tbS5jb21tYW5kLkltZ1BpYxIu" +
                "CgdCdWZmZXI5GAkgASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJf" +
                "dBIvCghCdWZmZXIxMBgKIAEoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluQnVm" +
                "ZmVyX3QSDQoFc3RyMTEYCyABKAkSLwoIQnVmZmVyMTIYDCABKAsyHS5tbS5j" +
                "b21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90Eg0KBXN0cjE0GA4gASgJEigKBml0" +
                "ZW0xNRgPIAEoCzIYLm1tLmNvbW1hbmQuU2hvd1N0eWxlS2V5Eg0KBXN0cjE2" +
                "GBAgASgJEhIKCk5ld1ZlcnNpb24YESACKAUSDQoFaW50MTgYEiACKAUSDQoF" +
                "aW50MTkYEyACKAUSDQoFRlNVUkwYFCABKAkilQIKC0FjY291bnRJbmZvEhAK" +
                "CFVzZXJOYW1lGAEgASgJEhAKCE5pY2tOYW1lGAIgASgJEg8KB0JpbmRVaW4Y" +
                "AyABKA0SEQoJQmluZEVtYWlsGAQgASgJEhIKCkJpbmRNb2JpbGUYBSABKAkS" +
                "DQoFQWxpYXMYBiABKAkSDgoGU3RhdHVzGAggAigFEgwKBGludDkYCSACKAUS" +
                "DQoFaW50MTAYCiACKAUSDQoFc3RyMTEYCyABKAkSDQoFaW50MTIYDCACKAUS" +
                "GAoQT2ZmaWNpYWxVc2VyTmFtZRgNIAEoCRIYChBPZmZpY2lhbE5pY2tOYW1l" +
                "GA4gASgJEg0KBWludDE1GA8gASgFEg0KBUZTVVJMGBAgASgJIqEBCgpTZXJ2" +
                "ZXJJbmZvEjAKC05ld0hvc3RMaXN0GAEgASgLMhsubW0uY29tbWFuZC5OZXdI" +
                "b3N0TGlzdFR5cGUSNgoOTmV0d29ya0NvbnRyb2wYAiABKAsyHi5tbS5jb21t" +
                "YW5kLk5ldHdvcmtDb250cm9sVHlwZRIpCg1CdWlsdGluSVBMaXN0GAMgASgL" +
                "MhIubW0uY29tbWFuZC5JUExpc3QivgEKEVNlY0F1dGhSZWdLZXlTZWN0EjIK" +
                "C2F1dG9BdXRoS2V5GAEgASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZm" +
                "ZXJfdBIqCg1zdnJQdWJFY2Roa2V5GAIgASgLMhMubW0uY29tbWFuZC5FQ0RI" +
                "S2V5EjEKCnNlc3Npb25LZXkYAyABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRp" +
                "bkJ1ZmZlcl90EhYKDmF1dGhSZXN1bHRGbGFnGAQgASgNIlkKFExvZ2luUVJD" +
                "b2RlTm90aWZ5UGtnEjEKCk5vdGlmeURhdGEYASACKAsyHS5tbS5jb21tYW5k" +
                "LlNLQnVpbHRpbkJ1ZmZlcl90Eg4KBm9wY29kZRgCIAIoDSK6AQoJTm90aWZ5" +
                "TXNnEgwKBHV1aWQYASACKAkSDgoGb3Bjb2RlGAIgAigNEhAKCHVzZXJuYW1l" +
                "GAMgASgJEgwKBHBhc3MYBCABKAkSDgoGaW1ndXJsGAUgASgJEhIKCnVua293" +
                "bmludDYYBiABKA0SEAoIbmlja25hbWUYByABKAkSEgoKdW5rb3duaW50OBgI" +
                "IAEoDRITCgt1bmtvd25pbnQxMBgKIAEoDRIQCghwbGF0Zm9ybRgLIAEoCSIo" +
                "CgpIVFRQSGVhZGVyEgsKA2tleRgBIAIoCRINCgV2YWx1ZRgCIAIoCSIiCg5E" +
                "ZWVwTGlua0JpdFNldBIQCghiaXRWYWx1ZRgBIAIoBCJzChJDaGF0Um9vbU1l" +
                "bWJlckRhdGESEwoLbWVtYmVyQ291bnQYASACKA0SNgoOY2hhdHJvb21NZW1i" +
                "ZXIYAiADKAsyHi5tbS5jb21tYW5kLkNoYXRyb29tTWVtYmVySW5mbxIQCghp" +
                "bmZvTWFzaxgDIAEoDSKTAQoSQ2hhdHJvb21NZW1iZXJJbmZvEhAKCHVzZXJO" +
                "YW1lGAEgAigJEhAKCG5pY2tOYW1lGAIgASgJEhUKDWJpZ0hlYWRJbWdVcmwY" +
                "BCABKAkSFwoPc21hbGxIZWFkSW1nVXJsGAUgASgJEgwKBGludDYYBiABKA0S" +
                "DQoFb3duZXIYByABKAkSDAoEaW50OBgIIAEoDSJ2ChJFeGl0Q2hhdHJvb21P" +
                "YmplY3QSLwoIQ2hhdHJvb20YASACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRp" +
                "blN0cmluZ190Ei8KCFVzZXJOYW1lGAIgAigLMh0ubW0uY29tbWFuZC5TS0J1" +
                "aWx0aW5TdHJpbmdfdCJFCh1FeHREZXZpY2VMb2dpbkNvbmZpcm1FcnJvclJl" +
                "dBIQCghpY29uVHlwZRgBIAEoDRISCgpjb250ZW50U3RyGAIgASgJIloKH0V4" +
                "dERldmljZUxvZ2luQ29uZmlybUV4cGlyZWRSZXQSEAoIaWNvblR5cGUYASAB" +
                "KA0SEgoKY29udGVudFN0chgCIAEoCRIRCglidXR0b25TdHIYAyABKAki3gEK" +
                "GkV4dERldmljZUxvZ2luQ29uZmlybU9LUmV0EhAKCGljb25UeXBlGAEgASgN" +
                "EhIKCmNvbnRlbnRTdHIYAiABKAkSEwoLYnV0dG9uT0tTdHIYAyABKAkSFwoP" +
                "YnV0dG9uQ2FuY2VsU3RyGAQgASgJEhcKD3JlcVNlc3Npb25MaW1pdBgFIAEo" +
                "DRIWCg5jb25maXJtVGltZU91dBgGIAEoDRIVCg1sb2dpbmVkRGV2VGlwGAcg" +
                "ASgJEhAKCHRpdGxlU3RyGAggASgJEhIKCndhcm1pbmdTdHIYCSABKAk=");
            pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root)
            {
                descriptor = root;
                internal__static_mm_command_SKBuiltinString_t__Descriptor = Descriptor.MessageTypes[0];
                internal__static_mm_command_SKBuiltinString_t__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.SKBuiltinString_t, global::mm.command.SKBuiltinString_t.Builder>(internal__static_mm_command_SKBuiltinString_t__Descriptor,
                        new string[] { "String", });
                internal__static_mm_command_SKBuiltinBuffer_t__Descriptor = Descriptor.MessageTypes[1];
                internal__static_mm_command_SKBuiltinBuffer_t__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.SKBuiltinBuffer_t, global::mm.command.SKBuiltinBuffer_t.Builder>(internal__static_mm_command_SKBuiltinBuffer_t__Descriptor,
                        new string[] { "ILen", "Buffer", });
                internal__static_mm_command_BaseRequest__Descriptor = Descriptor.MessageTypes[2];
                internal__static_mm_command_BaseRequest__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.BaseRequest, global::mm.command.BaseRequest.Builder>(internal__static_mm_command_BaseRequest__Descriptor,
                        new string[] { "SessionKey", "Uin", "DeviceID", "ClientVersion", "DeviceType", "Scene", });
                internal__static_mm_command_BaseResponse__Descriptor = Descriptor.MessageTypes[3];
                internal__static_mm_command_BaseResponse__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.BaseResponse, global::mm.command.BaseResponse.Builder>(internal__static_mm_command_BaseResponse__Descriptor,
                        new string[] { "Ret", "ErrMsg", });
                internal__static_mm_command_DnsInfoType__Descriptor = Descriptor.MessageTypes[4];
                internal__static_mm_command_DnsInfoType__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.DnsInfoType, global::mm.command.DnsInfoType.Builder>(internal__static_mm_command_DnsInfoType__Descriptor,
                        new string[] { "Ver", "Uin", "ExpireTime", "FrontID", "FrontIPCount", "FrontIPList", "ZoneDomain", "AuthKey", "ZoneID", "ZoneIPCount", "ZoneIPList", });
                internal__static_mm_command_NewHostListType__Descriptor = Descriptor.MessageTypes[5];
                internal__static_mm_command_NewHostListType__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewHostListType, global::mm.command.NewHostListType.Builder>(internal__static_mm_command_NewHostListType__Descriptor,
                        new string[] { "Count", "List", });
                internal__static_mm_command_NewHost__Descriptor = Descriptor.MessageTypes[6];
                internal__static_mm_command_NewHost__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewHost, global::mm.command.NewHost.Builder>(internal__static_mm_command_NewHost__Descriptor,
                        new string[] { "Origin", "Substitute", "Type", });
                internal__static_mm_command_PluginKeyListType__Descriptor = Descriptor.MessageTypes[7];
                internal__static_mm_command_PluginKeyListType__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.PluginKeyListType, global::mm.command.PluginKeyListType.Builder>(internal__static_mm_command_PluginKeyListType__Descriptor,
                        new string[] { "Count", "List", });
                internal__static_mm_command_PluginKey__Descriptor = Descriptor.MessageTypes[8];
                internal__static_mm_command_PluginKey__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.PluginKey, global::mm.command.PluginKey.Builder>(internal__static_mm_command_PluginKey__Descriptor,
                        new string[] { "Key", "Id", });
                internal__static_mm_command_NetworkControlType__Descriptor = Descriptor.MessageTypes[9];
                internal__static_mm_command_NetworkControlType__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.NetworkControlType, global::mm.command.NetworkControlType.Builder>(internal__static_mm_command_NetworkControlType__Descriptor,
                        new string[] { "PortList", "TimeoutList", "MinNoopInterval", "MaxNoopInterval", "Int5", "Int6", });
                internal__static_mm_command_IPList__Descriptor = Descriptor.MessageTypes[10];
                internal__static_mm_command_IPList__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.IPList, global::mm.command.IPList.Builder>(internal__static_mm_command_IPList__Descriptor,
                        new string[] { "LongConnectIPCount", "ShortConnectIPCount", "LongConnectIPList", "ShortConnectIPList", "Seq", });
                internal__static_mm_command_IPEnd__Descriptor = Descriptor.MessageTypes[11];
                internal__static_mm_command_IPEnd__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.IPEnd, global::mm.command.IPEnd.Builder>(internal__static_mm_command_IPEnd__Descriptor,
                        new string[] { "Type", "Port", "IP", "Host", });
                internal__static_mm_command_NewMsgResponseBody__Descriptor = Descriptor.MessageTypes[12];
                internal__static_mm_command_NewMsgResponseBody__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewMsgResponseBody, global::mm.command.NewMsgResponseBody.Builder>(internal__static_mm_command_NewMsgResponseBody__Descriptor,
                        new string[] { "Ret", "ToUserName", "MsgId", "ClientMsgId", "CreateTime", "ServerTime", "Type", "NewMsgID", });
                internal__static_mm_command_NewMsgRequestBody__Descriptor = Descriptor.MessageTypes[13];
                internal__static_mm_command_NewMsgRequestBody__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewMsgRequestBody, global::mm.command.NewMsgRequestBody.Builder>(internal__static_mm_command_NewMsgRequestBody__Descriptor,
                        new string[] { "ToUserName", "Content", "Type", "CreateTime", "ClientMsgId", "MsgSource", "CtrlBit", });
                internal__static_mm_command_MsgResponseBody__Descriptor = Descriptor.MessageTypes[14];
                internal__static_mm_command_MsgResponseBody__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.MsgResponseBody, global::mm.command.MsgResponseBody.Builder>(internal__static_mm_command_MsgResponseBody__Descriptor,
                        new string[] { "Ret", "FromUserName", "ToUserName", "MsgId", "ClientMsgId", "CreateTime", "Type", });
                internal__static_mm_command_MsgRequestBody__Descriptor = Descriptor.MessageTypes[15];
                internal__static_mm_command_MsgRequestBody__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.MsgRequestBody, global::mm.command.MsgRequestBody.Builder>(internal__static_mm_command_MsgRequestBody__Descriptor,
                        new string[] { "FromUserName", "ToUserName", "Type", "Content", "CreateTime", "ClientMsgId", "MsgSource", "EmojiFlag", });
                internal__static_mm_command_CmdList__Descriptor = Descriptor.MessageTypes[16];
                internal__static_mm_command_CmdList__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.CmdList, global::mm.command.CmdList.Builder>(internal__static_mm_command_CmdList__Descriptor,
                        new string[] { "Count", "List", });
                internal__static_mm_command_SyncKey__Descriptor = Descriptor.MessageTypes[17];
                internal__static_mm_command_SyncKey__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.SyncKey, global::mm.command.SyncKey.Builder>(internal__static_mm_command_SyncKey__Descriptor,
                        new string[] { "KeyNumb", "Key", });
                internal__static_mm_command_KeyValPair__Descriptor = Descriptor.MessageTypes[18];
                internal__static_mm_command_KeyValPair__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.KeyValPair, global::mm.command.KeyValPair.Builder>(internal__static_mm_command_KeyValPair__Descriptor,
                        new string[] { "Key", "Val", });
                internal__static_mm_command_CmdItem__Descriptor = Descriptor.MessageTypes[19];
                internal__static_mm_command_CmdItem__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.CmdItem, global::mm.command.CmdItem.Builder>(internal__static_mm_command_CmdItem__Descriptor,
                        new string[] { "CmdId", "CmdBuf", });
                internal__static_mm_command_ParsePacket__Descriptor = Descriptor.MessageTypes[20];
                internal__static_mm_command_ParsePacket__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ParsePacket, global::mm.command.ParsePacket.Builder>(internal__static_mm_command_ParsePacket__Descriptor,
                        new string[] { });
                internal__static_mm_command_ContactObject__Descriptor = Descriptor.MessageTypes[21];
                internal__static_mm_command_ContactObject__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ContactObject, global::mm.command.ContactObject.Builder>(internal__static_mm_command_ContactObject__Descriptor,
                        new string[] { "UserName", "NickName", "Province", "City", "Signature", "Distance", "Sex", "ImgStatus", "VerifyFlag", "VerifyInfo", "VerifyContent", "Alias", "Weibo", "WeiboNickname", "WeiboFlag", "HeadImgVersion", "SnsUserInfo", "Country", "BigHeadImgUrl", "SmallHeadImgUrl", "MyBrandList", "CustomizedInfo", "AntispamTicket", });
                internal__static_mm_command_SnsUser__Descriptor = Descriptor.MessageTypes[22];
                internal__static_mm_command_SnsUser__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.SnsUser, global::mm.command.SnsUser.Builder>(internal__static_mm_command_SnsUser__Descriptor,
                        new string[] { "SnsFlag", "SnsBGImgID", "SnsBGObjectID", "SnsFlagEx", });
                internal__static_mm_command_CustomInfo__Descriptor = Descriptor.MessageTypes[23];
                internal__static_mm_command_CustomInfo__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.CustomInfo, global::mm.command.CustomInfo.Builder>(internal__static_mm_command_CustomInfo__Descriptor,
                        new string[] { "BrandFlag", "ExternalInfo", "BrandInfo", "BrandIconURL", });
                internal__static_mm_command_UserProfile__Descriptor = Descriptor.MessageTypes[24];
                internal__static_mm_command_UserProfile__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.UserProfile, global::mm.command.UserProfile.Builder>(internal__static_mm_command_UserProfile__Descriptor,
                        new string[] { "BitFlag", "UserName", "NickName", "BindUin", "BindEmail", "BindMobile", "Status", "ImgLen", "ImgBuf", "Sex", "Province", "City", "Signature", "PersonalCard", "DisturbSetting", "PluginFlag", "VerifyFlag", "VerifyInfo", "Point", "Experience", "Level", "LevelLowExp", "LevelHighExp", "Weibo", "PluginSwitch", "GmailList", "Alias", "WeiboNickname", "WeiboFlag", "FaceBookFlag", "FBUserID", "FBUserName", "AlbumStyle", "AlbumFlag", "AlbumBGImgID", "TXNewsCategory", "FBToken", "Country", });
                internal__static_mm_command_DisturbSetting__Descriptor = Descriptor.MessageTypes[25];
                internal__static_mm_command_DisturbSetting__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.DisturbSetting, global::mm.command.DisturbSetting.Builder>(internal__static_mm_command_DisturbSetting__Descriptor,
                        new string[] { "NightSetting", "NightTime", "AllDaySetting", "AllDayTime", });
                internal__static_mm_command_TimeSpan__Descriptor = Descriptor.MessageTypes[26];
                internal__static_mm_command_TimeSpan__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.TimeSpan, global::mm.command.TimeSpan.Builder>(internal__static_mm_command_TimeSpan__Descriptor,
                        new string[] { "BeginTime", "EndTime", });
                internal__static_mm_command_GMailList__Descriptor = Descriptor.MessageTypes[27];
                internal__static_mm_command_GMailList__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.GMailList, global::mm.command.GMailList.Builder>(internal__static_mm_command_GMailList__Descriptor,
                        new string[] { "Count", "List", });
                internal__static_mm_command_GMailObj__Descriptor = Descriptor.MessageTypes[28];
                internal__static_mm_command_GMailObj__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.GMailObj, global::mm.command.GMailObj.Builder>(internal__static_mm_command_GMailObj__Descriptor,
                        new string[] { "GmailAcct", "GmailSwitch", "GmailErrCode", });
                internal__static_mm_command_VerifyUserObj__Descriptor = Descriptor.MessageTypes[29];
                internal__static_mm_command_VerifyUserObj__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.VerifyUserObj, global::mm.command.VerifyUserObj.Builder>(internal__static_mm_command_VerifyUserObj__Descriptor,
                        new string[] { "Value", "VerifyUserTicket", "AntiSpamTicket", "FriendFlag", "ChatRoomUserName", "SourceUserName", "SourceNickName", });
                internal__static_mm_command_CustomizedInfoObj__Descriptor = Descriptor.MessageTypes[30];
                internal__static_mm_command_CustomizedInfoObj__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.CustomizedInfoObj, global::mm.command.CustomizedInfoObj.Builder>(internal__static_mm_command_CustomizedInfoObj__Descriptor,
                        new string[] { "BrandFlag", "ExternalInfo", "BrandInfo", "BrandIconURL", });
                internal__static_mm_command_SearchContact__Descriptor = Descriptor.MessageTypes[31];
                internal__static_mm_command_SearchContact__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.SearchContact, global::mm.command.SearchContact.Builder>(internal__static_mm_command_SearchContact__Descriptor,
                        new string[] { "UserName", "NickName", "PYInitial", "QuanPin", "Sex", "ImgBuf", "Province", "City", "Signature", "PersonalCard", "VerifyFlag", "VerifyInfo", "Weibo", "Alias", "WeiboNickname", "WeiboFlag", "AlbumStyle", "AlbumFlag", "AlbumBGImgID", "SnsUserInfo", "Country", "MyBrandList", "CustomizedInfo", "BigHeadImgUrl", "SmallHeadImgUrl", });
                internal__static_mm_command_RoomInfo__Descriptor = Descriptor.MessageTypes[32];
                internal__static_mm_command_RoomInfo__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.RoomInfo, global::mm.command.RoomInfo.Builder>(internal__static_mm_command_RoomInfo__Descriptor,
                        new string[] { "UserName", "NickName", });
                internal__static_mm_command_ContactProfile__Descriptor = Descriptor.MessageTypes[33];
                internal__static_mm_command_ContactProfile__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ContactProfile, global::mm.command.ContactProfile.Builder>(internal__static_mm_command_ContactProfile__Descriptor,
                        new string[] { "UserName", "NickName", "PYInitial", "QuanPin", "Sex", "ImgBuf", "BitMask", "BitVal", "ImgFlag", "Remark", "RemarkPYInitial", "RemarkQuanPin", "ContactType", "RoomInfoCount", "RoomInfoList", "DomainList", "ChatRoomNotify", "AddContactScene", "Province", "City", "Signature", "PersonalCard", "HasWeiXinHdHeadImg", "VerifyFlag", "VerifyInfo", "Level", "Source", "Weibo", "VerifyContent", "Alias", "ChatRoomOwner", "WeiboNickname", "WeiboFlag", "AlbumStyle", "AlbumFlag", "AlbumBGImgID", "SnsUserInfo", "Country", "BigHeadImgUrl", "SmallHeadImgUrl", "MyBrandList", "CustomizedInfo", "ChatRoomData", "HeadImgMd5", "EncryptUserName", });
                internal__static_mm_command_MsgTip__Descriptor = Descriptor.MessageTypes[34];
                internal__static_mm_command_MsgTip__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.MsgTip, global::mm.command.MsgTip.Builder>(internal__static_mm_command_MsgTip__Descriptor,
                        new string[] { "MsgId", "FromUserName", "ToUserName", "Status", });
                internal__static_mm_command_MsgTip2__Descriptor = Descriptor.MessageTypes[35];
                internal__static_mm_command_MsgTip2__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.MsgTip2, global::mm.command.MsgTip2.Builder>(internal__static_mm_command_MsgTip2__Descriptor,
                        new string[] { "SnsUserInfo", "MyBrandList", "MsgPushSound", "VoipPushSound", "BigChatRoomSize", "BigChatRoomQuota", "BigChatRoomInvite", "SafeMobile", "BigHeadImgUrl", "SmallHeadImgUrl", "MainAcctType", "ExtXml", "SafeDeviceList", "SafeDevice", "GrayscaleFlag", });
                internal__static_mm_command_SafeDevice__Descriptor = Descriptor.MessageTypes[36];
                internal__static_mm_command_SafeDevice__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.SafeDevice, global::mm.command.SafeDevice.Builder>(internal__static_mm_command_SafeDevice__Descriptor,
                        new string[] { "Count", "List", });
                internal__static_mm_command_SafeDeviceObj__Descriptor = Descriptor.MessageTypes[37];
                internal__static_mm_command_SafeDeviceObj__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.SafeDeviceObj, global::mm.command.SafeDeviceObj.Builder>(internal__static_mm_command_SafeDeviceObj__Descriptor,
                        new string[] { "Name", "Uuid", "DeviceType", "CreateTime", });
                internal__static_mm_command_Msg__Descriptor = Descriptor.MessageTypes[38];
                internal__static_mm_command_Msg__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.Msg, global::mm.command.Msg.Builder>(internal__static_mm_command_Msg__Descriptor,
                        new string[] { "MsgId", "FromUserName", "ToUserName", "MsgType", "Content", "Status", "ImgStatus", "ImgBuf", "CreateTime", "MsgSource", "PushContent", });
                internal__static_mm_command_HeadImg__Descriptor = Descriptor.MessageTypes[39];
                internal__static_mm_command_HeadImg__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.HeadImg, global::mm.command.HeadImg.Builder>(internal__static_mm_command_HeadImg__Descriptor,
                        new string[] { "ImgType", "ImgLen", "ImgBuf", "ImgMd5", "BigHeadImgUrl", "SmallHeadImgUrl", });
                internal__static_mm_command_UpdateSomething__Descriptor = Descriptor.MessageTypes[40];
                internal__static_mm_command_UpdateSomething__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.UpdateSomething, global::mm.command.UpdateSomething.Builder>(internal__static_mm_command_UpdateSomething__Descriptor,
                        new string[] { "FunctionId", "SwitchValue", });
                internal__static_mm_command_KeyValuePairString__Descriptor = Descriptor.MessageTypes[41];
                internal__static_mm_command_KeyValuePairString__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.KeyValuePairString, global::mm.command.KeyValuePairString.Builder>(internal__static_mm_command_KeyValuePairString__Descriptor,
                        new string[] { "Key", "Value", });
                internal__static_mm_command_OptionItem__Descriptor = Descriptor.MessageTypes[42];
                internal__static_mm_command_OptionItem__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.OptionItem, global::mm.command.OptionItem.Builder>(internal__static_mm_command_OptionItem__Descriptor,
                        new string[] { "Count", "List", });
                internal__static_mm_command_PackegeInfo__Descriptor = Descriptor.MessageTypes[43];
                internal__static_mm_command_PackegeInfo__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.PackegeInfo, global::mm.command.PackegeInfo.Builder>(internal__static_mm_command_PackegeInfo__Descriptor,
                        new string[] { "Id", "Version", "Name", "Size", "Thumb", "PackName", "Ext", });
                internal__static_mm_command_VUserInfo__Descriptor = Descriptor.MessageTypes[44];
                internal__static_mm_command_VUserInfo__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.VUserInfo, global::mm.command.VUserInfo.Builder>(internal__static_mm_command_VUserInfo__Descriptor,
                        new string[] { "ID", "Desc", "Icon", "HDIcon", });
                internal__static_mm_command_FBInfo__Descriptor = Descriptor.MessageTypes[45];
                internal__static_mm_command_FBInfo__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.FBInfo, global::mm.command.FBInfo.Builder>(internal__static_mm_command_FBInfo__Descriptor,
                        new string[] { "ID", "Name", "ImgKey", });
                internal__static_mm_command_FriendObj__Descriptor = Descriptor.MessageTypes[46];
                internal__static_mm_command_FriendObj__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.FriendObj, global::mm.command.FriendObj.Builder>(internal__static_mm_command_FriendObj__Descriptor,
                        new string[] { "Username", "Nickname", "MobileMD5", "Sex", "Province", "City", "Signature", "PersonalCard", "Alias", "FBInfos", "AlbumFlag", "AlbumStyle", "AlbumBGImgID", "SnsUserInfo", "Country", "MyBrandList", "CustomizedInfo", "BigHeadImgUrl", "SmallHeadImgUrl", "Str20", "Str21", "Str22", });
                internal__static_mm_command_UserObject__Descriptor = Descriptor.MessageTypes[47];
                internal__static_mm_command_UserObject__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.UserObject, global::mm.command.UserObject.Builder>(internal__static_mm_command_UserObject__Descriptor,
                        new string[] { "Username", "Nickname", "Source", "Type", "Content", "CreateTime", "CommentId", "ReplyCommentId", "ReplyUsername", "IsNotRichText", });
                internal__static_mm_command_GroupObject__Descriptor = Descriptor.MessageTypes[48];
                internal__static_mm_command_GroupObject__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.GroupObject, global::mm.command.GroupObject.Builder>(internal__static_mm_command_GroupObject__Descriptor,
                        new string[] { "GroupId", });
                internal__static_mm_command_PageObject__Descriptor = Descriptor.MessageTypes[49];
                internal__static_mm_command_PageObject__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.PageObject, global::mm.command.PageObject.Builder>(internal__static_mm_command_PageObject__Descriptor,
                        new string[] { "Id", "Username", "Nickname", "CreateTime", "ObjectDesc", "LikeFlag", "LikeCount", "LikeUserListCount", "LikeUser", "CommentCount", "CommentUserListCount", "CommentUser", "WithUserNumb", "WithUserListCount", "WithUser", "ExtFlag", "NoChange", "GroupNumb", "Group", "IsNotRichText", "ReferUsername", "ReferId", });
                internal__static_mm_command_GeneralControlBitSet__Descriptor = Descriptor.MessageTypes[50];
                internal__static_mm_command_GeneralControlBitSet__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.GeneralControlBitSet, global::mm.command.GeneralControlBitSet.Builder>(internal__static_mm_command_GeneralControlBitSet__Descriptor,
                        new string[] { "BitValue", });
                internal__static_mm_command_JSAPIPermission__Descriptor = Descriptor.MessageTypes[51];
                internal__static_mm_command_JSAPIPermission__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.JSAPIPermission, global::mm.command.JSAPIPermission.Builder>(internal__static_mm_command_JSAPIPermission__Descriptor,
                        new string[] { "BitValue", });
                internal__static_mm_command_TwitterInfoObj__Descriptor = Descriptor.MessageTypes[52];
                internal__static_mm_command_TwitterInfoObj__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.TwitterInfoObj, global::mm.command.TwitterInfoObj.Builder>(internal__static_mm_command_TwitterInfoObj__Descriptor,
                        new string[] { "OauthToken", "OauthTokenSecret", });
                internal__static_mm_command_BufferUrlObj__Descriptor = Descriptor.MessageTypes[53];
                internal__static_mm_command_BufferUrlObj__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.BufferUrlObj, global::mm.command.BufferUrlObj.Builder>(internal__static_mm_command_BufferUrlObj__Descriptor,
                        new string[] { "Url", "Type", });
                internal__static_mm_command_AppMsgObject__Descriptor = Descriptor.MessageTypes[54];
                internal__static_mm_command_AppMsgObject__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.AppMsgObject, global::mm.command.AppMsgObject.Builder>(internal__static_mm_command_AppMsgObject__Descriptor,
                        new string[] { "FromUserName", "AppId", "SdkVersion", "ToUsername", "Type", "Content", "CreateTime", "ClientMsgId", "Thumb", "Source", "RemindId", "MsgSource", });
                internal__static_mm_command_RemoveFriendObject__Descriptor = Descriptor.MessageTypes[55];
                internal__static_mm_command_RemoveFriendObject__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.RemoveFriendObject, global::mm.command.RemoveFriendObject.Builder>(internal__static_mm_command_RemoveFriendObject__Descriptor,
                        new string[] { "UserName", });
                internal__static_mm_command_ShakeGetObj__Descriptor = Descriptor.MessageTypes[56];
                internal__static_mm_command_ShakeGetObj__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ShakeGetObj, global::mm.command.ShakeGetObj.Builder>(internal__static_mm_command_ShakeGetObj__Descriptor,
                        new string[] { "UserName", "NickName", "Province", "City", "Signature", "Distance", "Sex", "ImgStatus", "HasHDImg", "ImgBuffer", "NumDistance", "Weibo", "WeiboNickname", "WeiboFlag", "VerifyFlag", "VerifyInfo", "VerifyContent", "HeadImgVersion", "SnsUserInfo", "Country", "BigHeadImgUrl", "SmallHeadImgUrl", "MyBrandList", "CustomizedInfo", });
                internal__static_mm_command_CardInfo__Descriptor = Descriptor.MessageTypes[57];
                internal__static_mm_command_CardInfo__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.CardInfo, global::mm.command.CardInfo.Builder>(internal__static_mm_command_CardInfo__Descriptor,
                        new string[] { "CardID", "Seq", "Itme3", "Itme4", "Itme5", });
                internal__static_mm_command_ChatRoomItem__Descriptor = Descriptor.MessageTypes[58];
                internal__static_mm_command_ChatRoomItem__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ChatRoomItem, global::mm.command.ChatRoomItem.Builder>(internal__static_mm_command_ChatRoomItem__Descriptor,
                        new string[] { "MemberName", });
                internal__static_mm_command_MemberInfo__Descriptor = Descriptor.MessageTypes[59];
                internal__static_mm_command_MemberInfo__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.MemberInfo, global::mm.command.MemberInfo.Builder>(internal__static_mm_command_MemberInfo__Descriptor,
                        new string[] { "MemberName", "MemberStatus", "NickName", "PYInitial", "QuanPin", "Sex", "Remark", "RemarkPYInitial", "RemarkQuanPin", "ContactType", "Province", "City", "Signature", "PersonalCard", "VerifyFlag", "VerifyInfo", "Country", });
                internal__static_mm_command_ECDHKey__Descriptor = Descriptor.MessageTypes[60];
                internal__static_mm_command_ECDHKey__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ECDHKey, global::mm.command.ECDHKey.Builder>(internal__static_mm_command_ECDHKey__Descriptor,
                        new string[] { "NID", "Key", });
                internal__static_mm_command_InitKey__Descriptor = Descriptor.MessageTypes[61];
                internal__static_mm_command_InitKey__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.InitKey, global::mm.command.InitKey.Builder>(internal__static_mm_command_InitKey__Descriptor,
                        new string[] { "RandomEncryKey", "CliPubECDHKey", "Account", "Pwd", "Pwd2", });
                internal__static_mm_command_AutoAuthRsaReqData__Descriptor = Descriptor.MessageTypes[62];
                internal__static_mm_command_AutoAuthRsaReqData__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.AutoAuthRsaReqData, global::mm.command.AutoAuthRsaReqData.Builder>(internal__static_mm_command_AutoAuthRsaReqData__Descriptor,
                        new string[] { "AesEncryptKey", "CliPubECDHKey", });
                internal__static_mm_command_DataItem__Descriptor = Descriptor.MessageTypes[63];
                internal__static_mm_command_DataItem__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.DataItem, global::mm.command.DataItem.Builder>(internal__static_mm_command_DataItem__Descriptor,
                        new string[] { "Str1", "Str2", "Str3", "KSid", });
                internal__static_mm_command_DataItem2__Descriptor = Descriptor.MessageTypes[64];
                internal__static_mm_command_DataItem2__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.DataItem2, global::mm.command.DataItem2.Builder>(internal__static_mm_command_DataItem2__Descriptor,
                        new string[] { "Str1", "Str2", });
                internal__static_mm_command_ExtData__Descriptor = Descriptor.MessageTypes[65];
                internal__static_mm_command_ExtData__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtData, global::mm.command.ExtData.Builder>(internal__static_mm_command_ExtData__Descriptor,
                        new string[] { "Buffer1", "KSid", "Data3", "Buffer4", "Buffer5", "Int6", "Str7", });
                internal__static_mm_command_KSidData__Descriptor = Descriptor.MessageTypes[66];
                internal__static_mm_command_KSidData__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.KSidData, global::mm.command.KSidData.Builder>(internal__static_mm_command_KSidData__Descriptor,
                        new string[] { "Str1", "KSid", "Str3", "ImgBuf", });
                internal__static_mm_command_ImgPic__Descriptor = Descriptor.MessageTypes[67];
                internal__static_mm_command_ImgPic__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ImgPic, global::mm.command.ImgPic.Builder>(internal__static_mm_command_ImgPic__Descriptor,
                        new string[] { "Data", "VerifyBuff", });
                internal__static_mm_command_ShowStyleKey__Descriptor = Descriptor.MessageTypes[68];
                internal__static_mm_command_ShowStyleKey__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ShowStyleKey, global::mm.command.ShowStyleKey.Builder>(internal__static_mm_command_ShowStyleKey__Descriptor,
                        new string[] { "KeyNumb", "Key", });
                internal__static_mm_command_StyleKeyItem__Descriptor = Descriptor.MessageTypes[69];
                internal__static_mm_command_StyleKeyItem__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.StyleKeyItem, global::mm.command.StyleKeyItem.Builder>(internal__static_mm_command_StyleKeyItem__Descriptor,
                        new string[] { "Int1", "Str2", });
                internal__static_mm_command_AuthData__Descriptor = Descriptor.MessageTypes[70];
                internal__static_mm_command_AuthData__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.AuthData, global::mm.command.AuthData.Builder>(internal__static_mm_command_AuthData__Descriptor,
                        new string[] { "Uin", "SvrPubECDHKey", "SessionKey", "AutoAuthKey", "Int5", "Buffer6", "KSid", "PicData", "Buffer9", "Buffer10", "Str11", "Buffer12", "Str14", "Item15", "Str16", "NewVersion", "Int18", "Int19", "FSURL", });
                internal__static_mm_command_AccountInfo__Descriptor = Descriptor.MessageTypes[71];
                internal__static_mm_command_AccountInfo__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.AccountInfo, global::mm.command.AccountInfo.Builder>(internal__static_mm_command_AccountInfo__Descriptor,
                        new string[] { "UserName", "NickName", "BindUin", "BindEmail", "BindMobile", "Alias", "Status", "Int9", "Int10", "Str11", "Int12", "OfficialUserName", "OfficialNickName", "Int15", "FSURL", });
                internal__static_mm_command_ServerInfo__Descriptor = Descriptor.MessageTypes[72];
                internal__static_mm_command_ServerInfo__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ServerInfo, global::mm.command.ServerInfo.Builder>(internal__static_mm_command_ServerInfo__Descriptor,
                        new string[] { "NewHostList", "NetworkControl", "BuiltinIPList", });
                internal__static_mm_command_SecAuthRegKeySect__Descriptor = Descriptor.MessageTypes[73];
                internal__static_mm_command_SecAuthRegKeySect__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.SecAuthRegKeySect, global::mm.command.SecAuthRegKeySect.Builder>(internal__static_mm_command_SecAuthRegKeySect__Descriptor,
                        new string[] { "AutoAuthKey", "SvrPubEcdhkey", "SessionKey", "AuthResultFlag", });
                internal__static_mm_command_LoginQRCodeNotifyPkg__Descriptor = Descriptor.MessageTypes[74];
                internal__static_mm_command_LoginQRCodeNotifyPkg__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.LoginQRCodeNotifyPkg, global::mm.command.LoginQRCodeNotifyPkg.Builder>(internal__static_mm_command_LoginQRCodeNotifyPkg__Descriptor,
                        new string[] { "NotifyData", "Opcode", });
                internal__static_mm_command_NotifyMsg__Descriptor = Descriptor.MessageTypes[75];
                internal__static_mm_command_NotifyMsg__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.NotifyMsg, global::mm.command.NotifyMsg.Builder>(internal__static_mm_command_NotifyMsg__Descriptor,
                        new string[] { "Uuid", "Opcode", "Username", "Pass", "Imgurl", "Unkownint6", "Nickname", "Unkownint8", "Unkownint10", "Platform", });
                internal__static_mm_command_HTTPHeader__Descriptor = Descriptor.MessageTypes[76];
                internal__static_mm_command_HTTPHeader__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.HTTPHeader, global::mm.command.HTTPHeader.Builder>(internal__static_mm_command_HTTPHeader__Descriptor,
                        new string[] { "Key", "Value", });
                internal__static_mm_command_DeepLinkBitSet__Descriptor = Descriptor.MessageTypes[77];
                internal__static_mm_command_DeepLinkBitSet__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.DeepLinkBitSet, global::mm.command.DeepLinkBitSet.Builder>(internal__static_mm_command_DeepLinkBitSet__Descriptor,
                        new string[] { "BitValue", });
                internal__static_mm_command_ChatRoomMemberData__Descriptor = Descriptor.MessageTypes[78];
                internal__static_mm_command_ChatRoomMemberData__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ChatRoomMemberData, global::mm.command.ChatRoomMemberData.Builder>(internal__static_mm_command_ChatRoomMemberData__Descriptor,
                        new string[] { "MemberCount", "ChatroomMember", "InfoMask", });
                internal__static_mm_command_ChatroomMemberInfo__Descriptor = Descriptor.MessageTypes[79];
                internal__static_mm_command_ChatroomMemberInfo__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ChatroomMemberInfo, global::mm.command.ChatroomMemberInfo.Builder>(internal__static_mm_command_ChatroomMemberInfo__Descriptor,
                        new string[] { "UserName", "NickName", "BigHeadImgUrl", "SmallHeadImgUrl", "Int6", "Owner", "Int8", });
                internal__static_mm_command_ExitChatroomObject__Descriptor = Descriptor.MessageTypes[80];
                internal__static_mm_command_ExitChatroomObject__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ExitChatroomObject, global::mm.command.ExitChatroomObject.Builder>(internal__static_mm_command_ExitChatroomObject__Descriptor,
                        new string[] { "Chatroom", "UserName", });
                internal__static_mm_command_ExtDeviceLoginConfirmErrorRet__Descriptor = Descriptor.MessageTypes[81];
                internal__static_mm_command_ExtDeviceLoginConfirmErrorRet__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmErrorRet, global::mm.command.ExtDeviceLoginConfirmErrorRet.Builder>(internal__static_mm_command_ExtDeviceLoginConfirmErrorRet__Descriptor,
                        new string[] { "IconType", "ContentStr", });
                internal__static_mm_command_ExtDeviceLoginConfirmExpiredRet__Descriptor = Descriptor.MessageTypes[82];
                internal__static_mm_command_ExtDeviceLoginConfirmExpiredRet__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmExpiredRet, global::mm.command.ExtDeviceLoginConfirmExpiredRet.Builder>(internal__static_mm_command_ExtDeviceLoginConfirmExpiredRet__Descriptor,
                        new string[] { "IconType", "ContentStr", "ButtonStr", });
                internal__static_mm_command_ExtDeviceLoginConfirmOKRet__Descriptor = Descriptor.MessageTypes[83];
                internal__static_mm_command_ExtDeviceLoginConfirmOKRet__FieldAccessorTable =
                    new pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmOKRet, global::mm.command.ExtDeviceLoginConfirmOKRet.Builder>(internal__static_mm_command_ExtDeviceLoginConfirmOKRet__Descriptor,
                        new string[] { "IconType", "ContentStr", "ButtonOKStr", "ButtonCancelStr", "ReqSessionLimit", "ConfirmTimeOut", "LoginedDevTip", "TitleStr", "WarmingStr", });
                return null;
            };
            pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
                new pbd::FileDescriptor[] {
          }, assigner);
        }
        #endregion

    }
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SKBuiltinString_t : pb::GeneratedMessage<SKBuiltinString_t, SKBuiltinString_t.Builder>
    {
        private SKBuiltinString_t() { }
        private static readonly SKBuiltinString_t defaultInstance = new SKBuiltinString_t().MakeReadOnly();
        private static readonly string[] _sKBuiltinStringTFieldNames = new string[] { "String" };
        private static readonly uint[] _sKBuiltinStringTFieldTags = new uint[] { 10 };
        public static SKBuiltinString_t DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override SKBuiltinString_t DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override SKBuiltinString_t ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SKBuiltinString_t__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<SKBuiltinString_t, SKBuiltinString_t.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SKBuiltinString_t__FieldAccessorTable; }
        }

        public const int StringFieldNumber = 1;
        private bool hasString;
        private string string_ = "";
        public bool HasString
        {
            get { return hasString; }
        }
        public string String
        {
            get { return string_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _sKBuiltinStringTFieldNames;
            if (hasString)
            {
                output.WriteString(1, field_names[0], String);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasString)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, String);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static SKBuiltinString_t ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SKBuiltinString_t ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SKBuiltinString_t ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SKBuiltinString_t ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SKBuiltinString_t ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SKBuiltinString_t ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SKBuiltinString_t ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SKBuiltinString_t ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SKBuiltinString_t ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SKBuiltinString_t ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SKBuiltinString_t MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SKBuiltinString_t prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SKBuiltinString_t, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(SKBuiltinString_t cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private SKBuiltinString_t result;

            private SKBuiltinString_t PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    SKBuiltinString_t original = result;
                    result = new SKBuiltinString_t();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override SKBuiltinString_t MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.SKBuiltinString_t.Descriptor; }
            }

            public override SKBuiltinString_t DefaultInstanceForType
            {
                get { return global::mm.command.SKBuiltinString_t.DefaultInstance; }
            }

            public override SKBuiltinString_t BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is SKBuiltinString_t)
                {
                    return MergeFrom((SKBuiltinString_t)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(SKBuiltinString_t other)
            {
                if (other == global::mm.command.SKBuiltinString_t.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasString)
                {
                    String = other.String;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_sKBuiltinStringTFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _sKBuiltinStringTFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasString = input.ReadString(ref result.string_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasString
            {
                get { return result.hasString; }
            }
            public string String
            {
                get { return result.String; }
                set { SetString(value); }
            }
            public Builder SetString(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasString = true;
                result.string_ = value;
                return this;
            }
            public Builder ClearString()
            {
                PrepareBuilder();
                result.hasString = false;
                result.string_ = "";
                return this;
            }
        }
        static SKBuiltinString_t()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SKBuiltinBuffer_t : pb::GeneratedMessage<SKBuiltinBuffer_t, SKBuiltinBuffer_t.Builder>
    {
        private SKBuiltinBuffer_t() { }
        private static readonly SKBuiltinBuffer_t defaultInstance = new SKBuiltinBuffer_t().MakeReadOnly();
        private static readonly string[] _sKBuiltinBufferTFieldNames = new string[] { "Buffer", "iLen" };
        private static readonly uint[] _sKBuiltinBufferTFieldTags = new uint[] { 18, 8 };
        public static SKBuiltinBuffer_t DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override SKBuiltinBuffer_t DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override SKBuiltinBuffer_t ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SKBuiltinBuffer_t__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<SKBuiltinBuffer_t, SKBuiltinBuffer_t.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SKBuiltinBuffer_t__FieldAccessorTable; }
        }

        public const int ILenFieldNumber = 1;
        private bool hasILen;
        private int iLen_;
        public bool HasILen
        {
            get { return hasILen; }
        }
        public int ILen
        {
            get { return iLen_; }
        }

        public const int BufferFieldNumber = 2;
        private bool hasBuffer;
        private pb::ByteString buffer_ = pb::ByteString.Empty;
        public bool HasBuffer
        {
            get { return hasBuffer; }
        }
        public pb::ByteString Buffer
        {
            get { return buffer_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasILen) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _sKBuiltinBufferTFieldNames;
            if (hasILen)
            {
                output.WriteInt32(1, field_names[1], ILen);
            }
            if (hasBuffer)
            {
                output.WriteBytes(2, field_names[0], Buffer);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasILen)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, ILen);
                }
                if (hasBuffer)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(2, Buffer);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static SKBuiltinBuffer_t ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SKBuiltinBuffer_t ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SKBuiltinBuffer_t ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SKBuiltinBuffer_t ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SKBuiltinBuffer_t ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SKBuiltinBuffer_t ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SKBuiltinBuffer_t ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SKBuiltinBuffer_t ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SKBuiltinBuffer_t ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SKBuiltinBuffer_t ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SKBuiltinBuffer_t MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SKBuiltinBuffer_t prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SKBuiltinBuffer_t, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(SKBuiltinBuffer_t cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private SKBuiltinBuffer_t result;

            private SKBuiltinBuffer_t PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    SKBuiltinBuffer_t original = result;
                    result = new SKBuiltinBuffer_t();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override SKBuiltinBuffer_t MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.SKBuiltinBuffer_t.Descriptor; }
            }

            public override SKBuiltinBuffer_t DefaultInstanceForType
            {
                get { return global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
            }

            public override SKBuiltinBuffer_t BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is SKBuiltinBuffer_t)
                {
                    return MergeFrom((SKBuiltinBuffer_t)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(SKBuiltinBuffer_t other)
            {
                if (other == global::mm.command.SKBuiltinBuffer_t.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasILen)
                {
                    ILen = other.ILen;
                }
                if (other.HasBuffer)
                {
                    Buffer = other.Buffer;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_sKBuiltinBufferTFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _sKBuiltinBufferTFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasILen = input.ReadInt32(ref result.iLen_);
                                break;
                            }
                        case 18:
                            {
                                result.hasBuffer = input.ReadBytes(ref result.buffer_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasILen
            {
                get { return result.hasILen; }
            }
            public int ILen
            {
                get { return result.ILen; }
                set { SetILen(value); }
            }
            public Builder SetILen(int value)
            {
                PrepareBuilder();
                result.hasILen = true;
                result.iLen_ = value;
                return this;
            }
            public Builder ClearILen()
            {
                PrepareBuilder();
                result.hasILen = false;
                result.iLen_ = 0;
                return this;
            }

            public bool HasBuffer
            {
                get { return result.hasBuffer; }
            }
            public pb::ByteString Buffer
            {
                get { return result.Buffer; }
                set { SetBuffer(value); }
            }
            public Builder SetBuffer(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBuffer = true;
                result.buffer_ = value;
                return this;
            }
            public Builder ClearBuffer()
            {
                PrepareBuilder();
                result.hasBuffer = false;
                result.buffer_ = pb::ByteString.Empty;
                return this;
            }
        }
        static SKBuiltinBuffer_t()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }

        public static implicit operator SKBuiltinBuffer_t(Builder v)
        {
            throw new NotImplementedException();
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class BaseRequest : pb::GeneratedMessage<BaseRequest, BaseRequest.Builder>
    {
        private BaseRequest() { }
        private static readonly BaseRequest defaultInstance = new BaseRequest().MakeReadOnly();
        private static readonly string[] _baseRequestFieldNames = new string[] { "ClientVersion", "DeviceID", "DeviceType", "Scene", "SessionKey", "Uin" };
        private static readonly uint[] _baseRequestFieldTags = new uint[] { 32, 26, 42, 48, 10, 16 };
        public static BaseRequest DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override BaseRequest DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override BaseRequest ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_BaseRequest__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<BaseRequest, BaseRequest.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_BaseRequest__FieldAccessorTable; }
        }

        public const int SessionKeyFieldNumber = 1;
        private bool hasSessionKey;
        private pb::ByteString sessionKey_ = pb::ByteString.Empty;
        public bool HasSessionKey
        {
            get { return hasSessionKey; }
        }
        public pb::ByteString SessionKey
        {
            get { return sessionKey_; }
        }

        public const int UinFieldNumber = 2;
        private bool hasUin;
        private uint uin_;
        public bool HasUin
        {
            get { return hasUin; }
        }
        [global::System.CLSCompliant(false)]
        public uint Uin
        {
            get { return uin_; }
        }

        public const int DeviceIDFieldNumber = 3;
        private bool hasDeviceID;
        private pb::ByteString deviceID_ = pb::ByteString.Empty;
        public bool HasDeviceID
        {
            get { return hasDeviceID; }
        }
        public pb::ByteString DeviceID
        {
            get { return deviceID_; }
        }

        public const int ClientVersionFieldNumber = 4;
        private bool hasClientVersion;
        private int clientVersion_;
        public bool HasClientVersion
        {
            get { return hasClientVersion; }
        }
        public int ClientVersion
        {
            get { return clientVersion_; }
        }

        public const int DeviceTypeFieldNumber = 5;
        private bool hasDeviceType;
        private pb::ByteString deviceType_ = pb::ByteString.Empty;
        public bool HasDeviceType
        {
            get { return hasDeviceType; }
        }
        public pb::ByteString DeviceType
        {
            get { return deviceType_; }
        }

        public const int SceneFieldNumber = 6;
        private bool hasScene;
        private int scene_;
        public bool HasScene
        {
            get { return hasScene; }
        }
        public int Scene
        {
            get { return scene_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasSessionKey) return false;
                if (!hasUin) return false;
                if (!hasDeviceID) return false;
                if (!hasClientVersion) return false;
                if (!hasDeviceType) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _baseRequestFieldNames;
            if (hasSessionKey)
            {
                output.WriteBytes(1, field_names[4], SessionKey);
            }
            if (hasUin)
            {
                output.WriteUInt32(2, field_names[5], Uin);
            }
            if (hasDeviceID)
            {
                output.WriteBytes(3, field_names[1], DeviceID);
            }
            if (hasClientVersion)
            {
                output.WriteInt32(4, field_names[0], ClientVersion);
            }
            if (hasDeviceType)
            {
                output.WriteBytes(5, field_names[2], DeviceType);
            }
            if (hasScene)
            {
                output.WriteInt32(6, field_names[3], Scene);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasSessionKey)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(1, SessionKey);
                }
                if (hasUin)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(2, Uin);
                }
                if (hasDeviceID)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, DeviceID);
                }
                if (hasClientVersion)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, ClientVersion);
                }
                if (hasDeviceType)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(5, DeviceType);
                }
                if (hasScene)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(6, Scene);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static BaseRequest ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BaseRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BaseRequest ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BaseRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BaseRequest ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BaseRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static BaseRequest ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static BaseRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static BaseRequest ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BaseRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private BaseRequest MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(BaseRequest prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<BaseRequest, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(BaseRequest cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private BaseRequest result;

            private BaseRequest PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    BaseRequest original = result;
                    result = new BaseRequest();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override BaseRequest MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.BaseRequest.Descriptor; }
            }

            public override BaseRequest DefaultInstanceForType
            {
                get { return global::mm.command.BaseRequest.DefaultInstance; }
            }

            public override BaseRequest BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is BaseRequest)
                {
                    return MergeFrom((BaseRequest)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(BaseRequest other)
            {
                if (other == global::mm.command.BaseRequest.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasSessionKey)
                {
                    SessionKey = other.SessionKey;
                }
                if (other.HasUin)
                {
                    Uin = other.Uin;
                }
                if (other.HasDeviceID)
                {
                    DeviceID = other.DeviceID;
                }
                if (other.HasClientVersion)
                {
                    ClientVersion = other.ClientVersion;
                }
                if (other.HasDeviceType)
                {
                    DeviceType = other.DeviceType;
                }
                if (other.HasScene)
                {
                    Scene = other.Scene;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_baseRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _baseRequestFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasSessionKey = input.ReadBytes(ref result.sessionKey_);
                                break;
                            }
                        case 16:
                            {
                                result.hasUin = input.ReadUInt32(ref result.uin_);
                                break;
                            }
                        case 26:
                            {
                                result.hasDeviceID = input.ReadBytes(ref result.deviceID_);
                                break;
                            }
                        case 32:
                            {
                                result.hasClientVersion = input.ReadInt32(ref result.clientVersion_);
                                break;
                            }
                        case 42:
                            {
                                result.hasDeviceType = input.ReadBytes(ref result.deviceType_);
                                break;
                            }
                        case 48:
                            {
                                result.hasScene = input.ReadInt32(ref result.scene_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasSessionKey
            {
                get { return result.hasSessionKey; }
            }
            public pb::ByteString SessionKey
            {
                get { return result.SessionKey; }
                set { SetSessionKey(value); }
            }
            public Builder SetSessionKey(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSessionKey = true;
                result.sessionKey_ = value;
                return this;
            }
            public Builder ClearSessionKey()
            {
                PrepareBuilder();
                result.hasSessionKey = false;
                result.sessionKey_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasUin
            {
                get { return result.hasUin; }
            }
            [global::System.CLSCompliant(false)]
            public uint Uin
            {
                get { return result.Uin; }
                set { SetUin(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetUin(uint value)
            {
                PrepareBuilder();
                result.hasUin = true;
                result.uin_ = value;
                return this;
            }
            public Builder ClearUin()
            {
                PrepareBuilder();
                result.hasUin = false;
                result.uin_ = 0;
                return this;
            }

            public bool HasDeviceID
            {
                get { return result.hasDeviceID; }
            }
            public pb::ByteString DeviceID
            {
                get { return result.DeviceID; }
                set { SetDeviceID(value); }
            }
            public Builder SetDeviceID(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasDeviceID = true;
                result.deviceID_ = value;
                return this;
            }
            public Builder ClearDeviceID()
            {
                PrepareBuilder();
                result.hasDeviceID = false;
                result.deviceID_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasClientVersion
            {
                get { return result.hasClientVersion; }
            }
            public int ClientVersion
            {
                get { return result.ClientVersion; }
                set { SetClientVersion(value); }
            }
            public Builder SetClientVersion(int value)
            {
                PrepareBuilder();
                result.hasClientVersion = true;
                result.clientVersion_ = value;
                return this;
            }
            public Builder ClearClientVersion()
            {
                PrepareBuilder();
                result.hasClientVersion = false;
                result.clientVersion_ = 0;
                return this;
            }

            public bool HasDeviceType
            {
                get { return result.hasDeviceType; }
            }
            public pb::ByteString DeviceType
            {
                get { return result.DeviceType; }
                set { SetDeviceType(value); }
            }
            public Builder SetDeviceType(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasDeviceType = true;
                result.deviceType_ = value;
                return this;
            }
            public Builder ClearDeviceType()
            {
                PrepareBuilder();
                result.hasDeviceType = false;
                result.deviceType_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasScene
            {
                get { return result.hasScene; }
            }
            public int Scene
            {
                get { return result.Scene; }
                set { SetScene(value); }
            }
            public Builder SetScene(int value)
            {
                PrepareBuilder();
                result.hasScene = true;
                result.scene_ = value;
                return this;
            }
            public Builder ClearScene()
            {
                PrepareBuilder();
                result.hasScene = false;
                result.scene_ = 0;
                return this;
            }
        }
        static BaseRequest()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class BaseResponse : pb::GeneratedMessage<BaseResponse, BaseResponse.Builder>
    {
        private BaseResponse() { }
        private static readonly BaseResponse defaultInstance = new BaseResponse().MakeReadOnly();
        private static readonly string[] _baseResponseFieldNames = new string[] { "ErrMsg", "Ret" };
        private static readonly uint[] _baseResponseFieldTags = new uint[] { 18, 8 };
        public static BaseResponse DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override BaseResponse DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override BaseResponse ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_BaseResponse__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<BaseResponse, BaseResponse.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_BaseResponse__FieldAccessorTable; }
        }

        public const int RetFieldNumber = 1;
        private bool hasRet;
        private int ret_;
        public bool HasRet
        {
            get { return hasRet; }
        }
        public int Ret
        {
            get { return ret_; }
        }

        public const int ErrMsgFieldNumber = 2;
        private bool hasErrMsg;
        private global::mm.command.SKBuiltinString_t errMsg_;
        public bool HasErrMsg
        {
            get { return hasErrMsg; }
        }
        public global::mm.command.SKBuiltinString_t ErrMsg
        {
            get { return errMsg_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasRet) return false;
                if (!hasErrMsg) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _baseResponseFieldNames;
            if (hasRet)
            {
                output.WriteInt32(1, field_names[1], Ret);
            }
            if (hasErrMsg)
            {
                output.WriteMessage(2, field_names[0], ErrMsg);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasRet)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Ret);
                }
                if (hasErrMsg)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, ErrMsg);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static BaseResponse ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BaseResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BaseResponse ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BaseResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BaseResponse ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BaseResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static BaseResponse ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static BaseResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static BaseResponse ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BaseResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private BaseResponse MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(BaseResponse prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<BaseResponse, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(BaseResponse cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private BaseResponse result;

            private BaseResponse PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    BaseResponse original = result;
                    result = new BaseResponse();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override BaseResponse MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.BaseResponse.Descriptor; }
            }

            public override BaseResponse DefaultInstanceForType
            {
                get { return global::mm.command.BaseResponse.DefaultInstance; }
            }

            public override BaseResponse BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is BaseResponse)
                {
                    return MergeFrom((BaseResponse)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(BaseResponse other)
            {
                if (other == global::mm.command.BaseResponse.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasRet)
                {
                    Ret = other.Ret;
                }
                if (other.HasErrMsg)
                {
                    MergeErrMsg(other.ErrMsg);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_baseResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _baseResponseFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasRet = input.ReadInt32(ref result.ret_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasErrMsg)
                                {
                                    subBuilder.MergeFrom(ErrMsg);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ErrMsg = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasRet
            {
                get { return result.hasRet; }
            }
            public int Ret
            {
                get { return result.Ret; }
                set { SetRet(value); }
            }
            public Builder SetRet(int value)
            {
                PrepareBuilder();
                result.hasRet = true;
                result.ret_ = value;
                return this;
            }
            public Builder ClearRet()
            {
                PrepareBuilder();
                result.hasRet = false;
                result.ret_ = 0;
                return this;
            }

            public bool HasErrMsg
            {
                get { return result.hasErrMsg; }
            }
            public global::mm.command.SKBuiltinString_t ErrMsg
            {
                get { return result.ErrMsg; }
                set { SetErrMsg(value); }
            }
            public Builder SetErrMsg(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasErrMsg = true;
                result.errMsg_ = value;
                return this;
            }
            public Builder SetErrMsg(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasErrMsg = true;
                result.errMsg_ = builderForValue.Build();
                return this;
            }
            public Builder MergeErrMsg(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasErrMsg &&
                    result.errMsg_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.errMsg_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.errMsg_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.errMsg_ = value;
                }
                result.hasErrMsg = true;
                return this;
            }
            public Builder ClearErrMsg()
            {
                PrepareBuilder();
                result.hasErrMsg = false;
                result.errMsg_ = null;
                return this;
            }
        }
        static BaseResponse()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class DnsInfoType : pb::GeneratedMessage<DnsInfoType, DnsInfoType.Builder>
    {
        private DnsInfoType() { }
        private static readonly DnsInfoType defaultInstance = new DnsInfoType().MakeReadOnly();
        private static readonly string[] _dnsInfoTypeFieldNames = new string[] { "AuthKey", "ExpireTime", "FrontID", "FrontIPCount", "FrontIPList", "Uin", "Ver", "ZoneDomain", "ZoneID", "ZoneIPCount", "ZoneIPList" };
        private static readonly uint[] _dnsInfoTypeFieldTags = new uint[] { 66, 24, 32, 40, 50, 16, 8, 58, 72, 80, 90 };
        public static DnsInfoType DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override DnsInfoType DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override DnsInfoType ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_DnsInfoType__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<DnsInfoType, DnsInfoType.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_DnsInfoType__FieldAccessorTable; }
        }

        public const int VerFieldNumber = 1;
        private bool hasVer;
        private int ver_;
        public bool HasVer
        {
            get { return hasVer; }
        }
        public int Ver
        {
            get { return ver_; }
        }

        public const int UinFieldNumber = 2;
        private bool hasUin;
        private uint uin_;
        public bool HasUin
        {
            get { return hasUin; }
        }
        [global::System.CLSCompliant(false)]
        public uint Uin
        {
            get { return uin_; }
        }

        public const int ExpireTimeFieldNumber = 3;
        private bool hasExpireTime;
        private int expireTime_;
        public bool HasExpireTime
        {
            get { return hasExpireTime; }
        }
        public int ExpireTime
        {
            get { return expireTime_; }
        }

        public const int FrontIDFieldNumber = 4;
        private bool hasFrontID;
        private int frontID_;
        public bool HasFrontID
        {
            get { return hasFrontID; }
        }
        public int FrontID
        {
            get { return frontID_; }
        }

        public const int FrontIPCountFieldNumber = 5;
        private bool hasFrontIPCount;
        private int frontIPCount_;
        public bool HasFrontIPCount
        {
            get { return hasFrontIPCount; }
        }
        public int FrontIPCount
        {
            get { return frontIPCount_; }
        }

        public const int FrontIPListFieldNumber = 6;
        private pbc::PopsicleList<global::mm.command.SKBuiltinString_t> frontIPList_ = new pbc::PopsicleList<global::mm.command.SKBuiltinString_t>();
        public scg::IList<global::mm.command.SKBuiltinString_t> FrontIPListList
        {
            get { return frontIPList_; }
        }
        public int FrontIPListCount
        {
            get { return frontIPList_.Count; }
        }
        public global::mm.command.SKBuiltinString_t GetFrontIPList(int index)
        {
            return frontIPList_[index];
        }

        public const int ZoneDomainFieldNumber = 7;
        private bool hasZoneDomain;
        private string zoneDomain_ = "";
        public bool HasZoneDomain
        {
            get { return hasZoneDomain; }
        }
        public string ZoneDomain
        {
            get { return zoneDomain_; }
        }

        public const int AuthKeyFieldNumber = 8;
        private bool hasAuthKey;
        private global::mm.command.SKBuiltinBuffer_t authKey_;
        public bool HasAuthKey
        {
            get { return hasAuthKey; }
        }
        public global::mm.command.SKBuiltinBuffer_t AuthKey
        {
            get { return authKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int ZoneIDFieldNumber = 9;
        private bool hasZoneID;
        private int zoneID_;
        public bool HasZoneID
        {
            get { return hasZoneID; }
        }
        public int ZoneID
        {
            get { return zoneID_; }
        }

        public const int ZoneIPCountFieldNumber = 10;
        private bool hasZoneIPCount;
        private int zoneIPCount_;
        public bool HasZoneIPCount
        {
            get { return hasZoneIPCount; }
        }
        public int ZoneIPCount
        {
            get { return zoneIPCount_; }
        }

        public const int ZoneIPListFieldNumber = 11;
        private pbc::PopsicleList<global::mm.command.SKBuiltinString_t> zoneIPList_ = new pbc::PopsicleList<global::mm.command.SKBuiltinString_t>();
        public scg::IList<global::mm.command.SKBuiltinString_t> ZoneIPListList
        {
            get { return zoneIPList_; }
        }
        public int ZoneIPListCount
        {
            get { return zoneIPList_.Count; }
        }
        public global::mm.command.SKBuiltinString_t GetZoneIPList(int index)
        {
            return zoneIPList_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasVer) return false;
                if (!hasUin) return false;
                if (!hasExpireTime) return false;
                if (!hasFrontID) return false;
                if (!hasFrontIPCount) return false;
                if (!hasAuthKey) return false;
                if (!hasZoneID) return false;
                if (!hasZoneIPCount) return false;
                if (!AuthKey.IsInitialized) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _dnsInfoTypeFieldNames;
            if (hasVer)
            {
                output.WriteInt32(1, field_names[6], Ver);
            }
            if (hasUin)
            {
                output.WriteUInt32(2, field_names[5], Uin);
            }
            if (hasExpireTime)
            {
                output.WriteInt32(3, field_names[1], ExpireTime);
            }
            if (hasFrontID)
            {
                output.WriteInt32(4, field_names[2], FrontID);
            }
            if (hasFrontIPCount)
            {
                output.WriteInt32(5, field_names[3], FrontIPCount);
            }
            if (frontIPList_.Count > 0)
            {
                output.WriteMessageArray(6, field_names[4], frontIPList_);
            }
            if (hasZoneDomain)
            {
                output.WriteString(7, field_names[7], ZoneDomain);
            }
            if (hasAuthKey)
            {
                output.WriteMessage(8, field_names[0], AuthKey);
            }
            if (hasZoneID)
            {
                output.WriteInt32(9, field_names[8], ZoneID);
            }
            if (hasZoneIPCount)
            {
                output.WriteInt32(10, field_names[9], ZoneIPCount);
            }
            if (zoneIPList_.Count > 0)
            {
                output.WriteMessageArray(11, field_names[10], zoneIPList_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasVer)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Ver);
                }
                if (hasUin)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(2, Uin);
                }
                if (hasExpireTime)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(3, ExpireTime);
                }
                if (hasFrontID)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, FrontID);
                }
                if (hasFrontIPCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(5, FrontIPCount);
                }
                foreach (global::mm.command.SKBuiltinString_t element in FrontIPListList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(6, element);
                }
                if (hasZoneDomain)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(7, ZoneDomain);
                }
                if (hasAuthKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(8, AuthKey);
                }
                if (hasZoneID)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(9, ZoneID);
                }
                if (hasZoneIPCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(10, ZoneIPCount);
                }
                foreach (global::mm.command.SKBuiltinString_t element in ZoneIPListList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(11, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static DnsInfoType ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DnsInfoType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DnsInfoType ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DnsInfoType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DnsInfoType ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DnsInfoType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DnsInfoType ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DnsInfoType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DnsInfoType ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DnsInfoType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DnsInfoType MakeReadOnly()
        {
            frontIPList_.MakeReadOnly();
            zoneIPList_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DnsInfoType prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<DnsInfoType, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(DnsInfoType cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private DnsInfoType result;

            private DnsInfoType PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    DnsInfoType original = result;
                    result = new DnsInfoType();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override DnsInfoType MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.DnsInfoType.Descriptor; }
            }

            public override DnsInfoType DefaultInstanceForType
            {
                get { return global::mm.command.DnsInfoType.DefaultInstance; }
            }

            public override DnsInfoType BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is DnsInfoType)
                {
                    return MergeFrom((DnsInfoType)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(DnsInfoType other)
            {
                if (other == global::mm.command.DnsInfoType.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasVer)
                {
                    Ver = other.Ver;
                }
                if (other.HasUin)
                {
                    Uin = other.Uin;
                }
                if (other.HasExpireTime)
                {
                    ExpireTime = other.ExpireTime;
                }
                if (other.HasFrontID)
                {
                    FrontID = other.FrontID;
                }
                if (other.HasFrontIPCount)
                {
                    FrontIPCount = other.FrontIPCount;
                }
                if (other.frontIPList_.Count != 0)
                {
                    result.frontIPList_.Add(other.frontIPList_);
                }
                if (other.HasZoneDomain)
                {
                    ZoneDomain = other.ZoneDomain;
                }
                if (other.HasAuthKey)
                {
                    MergeAuthKey(other.AuthKey);
                }
                if (other.HasZoneID)
                {
                    ZoneID = other.ZoneID;
                }
                if (other.HasZoneIPCount)
                {
                    ZoneIPCount = other.ZoneIPCount;
                }
                if (other.zoneIPList_.Count != 0)
                {
                    result.zoneIPList_.Add(other.zoneIPList_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_dnsInfoTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _dnsInfoTypeFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasVer = input.ReadInt32(ref result.ver_);
                                break;
                            }
                        case 16:
                            {
                                result.hasUin = input.ReadUInt32(ref result.uin_);
                                break;
                            }
                        case 24:
                            {
                                result.hasExpireTime = input.ReadInt32(ref result.expireTime_);
                                break;
                            }
                        case 32:
                            {
                                result.hasFrontID = input.ReadInt32(ref result.frontID_);
                                break;
                            }
                        case 40:
                            {
                                result.hasFrontIPCount = input.ReadInt32(ref result.frontIPCount_);
                                break;
                            }
                        case 50:
                            {
                                input.ReadMessageArray(tag, field_name, result.frontIPList_, global::mm.command.SKBuiltinString_t.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 58:
                            {
                                result.hasZoneDomain = input.ReadString(ref result.zoneDomain_);
                                break;
                            }
                        case 66:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasAuthKey)
                                {
                                    subBuilder.MergeFrom(AuthKey);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                AuthKey = subBuilder.BuildPartial();
                                break;
                            }
                        case 72:
                            {
                                result.hasZoneID = input.ReadInt32(ref result.zoneID_);
                                break;
                            }
                        case 80:
                            {
                                result.hasZoneIPCount = input.ReadInt32(ref result.zoneIPCount_);
                                break;
                            }
                        case 90:
                            {
                                input.ReadMessageArray(tag, field_name, result.zoneIPList_, global::mm.command.SKBuiltinString_t.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasVer
            {
                get { return result.hasVer; }
            }
            public int Ver
            {
                get { return result.Ver; }
                set { SetVer(value); }
            }
            public Builder SetVer(int value)
            {
                PrepareBuilder();
                result.hasVer = true;
                result.ver_ = value;
                return this;
            }
            public Builder ClearVer()
            {
                PrepareBuilder();
                result.hasVer = false;
                result.ver_ = 0;
                return this;
            }

            public bool HasUin
            {
                get { return result.hasUin; }
            }
            [global::System.CLSCompliant(false)]
            public uint Uin
            {
                get { return result.Uin; }
                set { SetUin(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetUin(uint value)
            {
                PrepareBuilder();
                result.hasUin = true;
                result.uin_ = value;
                return this;
            }
            public Builder ClearUin()
            {
                PrepareBuilder();
                result.hasUin = false;
                result.uin_ = 0;
                return this;
            }

            public bool HasExpireTime
            {
                get { return result.hasExpireTime; }
            }
            public int ExpireTime
            {
                get { return result.ExpireTime; }
                set { SetExpireTime(value); }
            }
            public Builder SetExpireTime(int value)
            {
                PrepareBuilder();
                result.hasExpireTime = true;
                result.expireTime_ = value;
                return this;
            }
            public Builder ClearExpireTime()
            {
                PrepareBuilder();
                result.hasExpireTime = false;
                result.expireTime_ = 0;
                return this;
            }

            public bool HasFrontID
            {
                get { return result.hasFrontID; }
            }
            public int FrontID
            {
                get { return result.FrontID; }
                set { SetFrontID(value); }
            }
            public Builder SetFrontID(int value)
            {
                PrepareBuilder();
                result.hasFrontID = true;
                result.frontID_ = value;
                return this;
            }
            public Builder ClearFrontID()
            {
                PrepareBuilder();
                result.hasFrontID = false;
                result.frontID_ = 0;
                return this;
            }

            public bool HasFrontIPCount
            {
                get { return result.hasFrontIPCount; }
            }
            public int FrontIPCount
            {
                get { return result.FrontIPCount; }
                set { SetFrontIPCount(value); }
            }
            public Builder SetFrontIPCount(int value)
            {
                PrepareBuilder();
                result.hasFrontIPCount = true;
                result.frontIPCount_ = value;
                return this;
            }
            public Builder ClearFrontIPCount()
            {
                PrepareBuilder();
                result.hasFrontIPCount = false;
                result.frontIPCount_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.SKBuiltinString_t> FrontIPListList
            {
                get { return PrepareBuilder().frontIPList_; }
            }
            public int FrontIPListCount
            {
                get { return result.FrontIPListCount; }
            }
            public global::mm.command.SKBuiltinString_t GetFrontIPList(int index)
            {
                return result.GetFrontIPList(index);
            }
            public Builder SetFrontIPList(int index, global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.frontIPList_[index] = value;
                return this;
            }
            public Builder SetFrontIPList(int index, global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.frontIPList_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddFrontIPList(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.frontIPList_.Add(value);
                return this;
            }
            public Builder AddFrontIPList(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.frontIPList_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeFrontIPList(scg::IEnumerable<global::mm.command.SKBuiltinString_t> values)
            {
                PrepareBuilder();
                result.frontIPList_.Add(values);
                return this;
            }
            public Builder ClearFrontIPList()
            {
                PrepareBuilder();
                result.frontIPList_.Clear();
                return this;
            }

            public bool HasZoneDomain
            {
                get { return result.hasZoneDomain; }
            }
            public string ZoneDomain
            {
                get { return result.ZoneDomain; }
                set { SetZoneDomain(value); }
            }
            public Builder SetZoneDomain(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasZoneDomain = true;
                result.zoneDomain_ = value;
                return this;
            }
            public Builder ClearZoneDomain()
            {
                PrepareBuilder();
                result.hasZoneDomain = false;
                result.zoneDomain_ = "";
                return this;
            }

            public bool HasAuthKey
            {
                get { return result.hasAuthKey; }
            }
            public global::mm.command.SKBuiltinBuffer_t AuthKey
            {
                get { return result.AuthKey; }
                set { SetAuthKey(value); }
            }
            public Builder SetAuthKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAuthKey = true;
                result.authKey_ = value;
                return this;
            }
            public Builder SetAuthKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasAuthKey = true;
                result.authKey_ = builderForValue.Build();
                return this;
            }
            public Builder MergeAuthKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasAuthKey &&
                    result.authKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.authKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.authKey_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.authKey_ = value;
                }
                result.hasAuthKey = true;
                return this;
            }
            public Builder ClearAuthKey()
            {
                PrepareBuilder();
                result.hasAuthKey = false;
                result.authKey_ = null;
                return this;
            }

            public bool HasZoneID
            {
                get { return result.hasZoneID; }
            }
            public int ZoneID
            {
                get { return result.ZoneID; }
                set { SetZoneID(value); }
            }
            public Builder SetZoneID(int value)
            {
                PrepareBuilder();
                result.hasZoneID = true;
                result.zoneID_ = value;
                return this;
            }
            public Builder ClearZoneID()
            {
                PrepareBuilder();
                result.hasZoneID = false;
                result.zoneID_ = 0;
                return this;
            }

            public bool HasZoneIPCount
            {
                get { return result.hasZoneIPCount; }
            }
            public int ZoneIPCount
            {
                get { return result.ZoneIPCount; }
                set { SetZoneIPCount(value); }
            }
            public Builder SetZoneIPCount(int value)
            {
                PrepareBuilder();
                result.hasZoneIPCount = true;
                result.zoneIPCount_ = value;
                return this;
            }
            public Builder ClearZoneIPCount()
            {
                PrepareBuilder();
                result.hasZoneIPCount = false;
                result.zoneIPCount_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.SKBuiltinString_t> ZoneIPListList
            {
                get { return PrepareBuilder().zoneIPList_; }
            }
            public int ZoneIPListCount
            {
                get { return result.ZoneIPListCount; }
            }
            public global::mm.command.SKBuiltinString_t GetZoneIPList(int index)
            {
                return result.GetZoneIPList(index);
            }
            public Builder SetZoneIPList(int index, global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.zoneIPList_[index] = value;
                return this;
            }
            public Builder SetZoneIPList(int index, global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.zoneIPList_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddZoneIPList(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.zoneIPList_.Add(value);
                return this;
            }
            public Builder AddZoneIPList(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.zoneIPList_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeZoneIPList(scg::IEnumerable<global::mm.command.SKBuiltinString_t> values)
            {
                PrepareBuilder();
                result.zoneIPList_.Add(values);
                return this;
            }
            public Builder ClearZoneIPList()
            {
                PrepareBuilder();
                result.zoneIPList_.Clear();
                return this;
            }
        }
        static DnsInfoType()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class NewHostListType : pb::GeneratedMessage<NewHostListType, NewHostListType.Builder>
    {
        private NewHostListType() { }
        private static readonly NewHostListType defaultInstance = new NewHostListType().MakeReadOnly();
        private static readonly string[] _newHostListTypeFieldNames = new string[] { "Count", "List" };
        private static readonly uint[] _newHostListTypeFieldTags = new uint[] { 8, 18 };
        public static NewHostListType DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override NewHostListType DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override NewHostListType ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NewHostListType__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<NewHostListType, NewHostListType.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NewHostListType__FieldAccessorTable; }
        }

        public const int CountFieldNumber = 1;
        private bool hasCount;
        private int count_;
        public bool HasCount
        {
            get { return hasCount; }
        }
        public int Count
        {
            get { return count_; }
        }

        public const int ListFieldNumber = 2;
        private pbc::PopsicleList<global::mm.command.NewHost> list_ = new pbc::PopsicleList<global::mm.command.NewHost>();
        public scg::IList<global::mm.command.NewHost> ListList
        {
            get { return list_; }
        }
        public int ListCount
        {
            get { return list_.Count; }
        }
        public global::mm.command.NewHost GetList(int index)
        {
            return list_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasCount) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _newHostListTypeFieldNames;
            if (hasCount)
            {
                output.WriteInt32(1, field_names[0], Count);
            }
            if (list_.Count > 0)
            {
                output.WriteMessageArray(2, field_names[1], list_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
                }
                foreach (global::mm.command.NewHost element in ListList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static NewHostListType ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NewHostListType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NewHostListType ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NewHostListType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NewHostListType ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NewHostListType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static NewHostListType ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static NewHostListType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static NewHostListType ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NewHostListType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private NewHostListType MakeReadOnly()
        {
            list_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(NewHostListType prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<NewHostListType, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(NewHostListType cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private NewHostListType result;

            private NewHostListType PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    NewHostListType original = result;
                    result = new NewHostListType();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override NewHostListType MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.NewHostListType.Descriptor; }
            }

            public override NewHostListType DefaultInstanceForType
            {
                get { return global::mm.command.NewHostListType.DefaultInstance; }
            }

            public override NewHostListType BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is NewHostListType)
                {
                    return MergeFrom((NewHostListType)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(NewHostListType other)
            {
                if (other == global::mm.command.NewHostListType.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasCount)
                {
                    Count = other.Count;
                }
                if (other.list_.Count != 0)
                {
                    result.list_.Add(other.list_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_newHostListTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _newHostListTypeFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasCount = input.ReadInt32(ref result.count_);
                                break;
                            }
                        case 18:
                            {
                                input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.NewHost.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasCount
            {
                get { return result.hasCount; }
            }
            public int Count
            {
                get { return result.Count; }
                set { SetCount(value); }
            }
            public Builder SetCount(int value)
            {
                PrepareBuilder();
                result.hasCount = true;
                result.count_ = value;
                return this;
            }
            public Builder ClearCount()
            {
                PrepareBuilder();
                result.hasCount = false;
                result.count_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.NewHost> ListList
            {
                get { return PrepareBuilder().list_; }
            }
            public int ListCount
            {
                get { return result.ListCount; }
            }
            public global::mm.command.NewHost GetList(int index)
            {
                return result.GetList(index);
            }
            public Builder SetList(int index, global::mm.command.NewHost value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_[index] = value;
                return this;
            }
            public Builder SetList(int index, global::mm.command.NewHost.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddList(global::mm.command.NewHost value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_.Add(value);
                return this;
            }
            public Builder AddList(global::mm.command.NewHost.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeList(scg::IEnumerable<global::mm.command.NewHost> values)
            {
                PrepareBuilder();
                result.list_.Add(values);
                return this;
            }
            public Builder ClearList()
            {
                PrepareBuilder();
                result.list_.Clear();
                return this;
            }
        }
        static NewHostListType()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class NewHost : pb::GeneratedMessage<NewHost, NewHost.Builder>
    {
        private NewHost() { }
        private static readonly NewHost defaultInstance = new NewHost().MakeReadOnly();
        private static readonly string[] _newHostFieldNames = new string[] { "Origin", "Substitute", "Type" };
        private static readonly uint[] _newHostFieldTags = new uint[] { 10, 18, 24 };
        public static NewHost DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override NewHost DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override NewHost ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NewHost__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<NewHost, NewHost.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NewHost__FieldAccessorTable; }
        }

        public const int OriginFieldNumber = 1;
        private bool hasOrigin;
        private string origin_ = "";
        public bool HasOrigin
        {
            get { return hasOrigin; }
        }
        public string Origin
        {
            get { return origin_; }
        }

        public const int SubstituteFieldNumber = 2;
        private bool hasSubstitute;
        private string substitute_ = "";
        public bool HasSubstitute
        {
            get { return hasSubstitute; }
        }
        public string Substitute
        {
            get { return substitute_; }
        }

        public const int TypeFieldNumber = 3;
        private bool hasType;
        private int type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public int Type
        {
            get { return type_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _newHostFieldNames;
            if (hasOrigin)
            {
                output.WriteString(1, field_names[0], Origin);
            }
            if (hasSubstitute)
            {
                output.WriteString(2, field_names[1], Substitute);
            }
            if (hasType)
            {
                output.WriteInt32(3, field_names[2], Type);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasOrigin)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Origin);
                }
                if (hasSubstitute)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Substitute);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(3, Type);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static NewHost ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NewHost ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NewHost ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NewHost ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NewHost ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NewHost ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static NewHost ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static NewHost ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static NewHost ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NewHost ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private NewHost MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(NewHost prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<NewHost, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(NewHost cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private NewHost result;

            private NewHost PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    NewHost original = result;
                    result = new NewHost();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override NewHost MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.NewHost.Descriptor; }
            }

            public override NewHost DefaultInstanceForType
            {
                get { return global::mm.command.NewHost.DefaultInstance; }
            }

            public override NewHost BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is NewHost)
                {
                    return MergeFrom((NewHost)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(NewHost other)
            {
                if (other == global::mm.command.NewHost.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasOrigin)
                {
                    Origin = other.Origin;
                }
                if (other.HasSubstitute)
                {
                    Substitute = other.Substitute;
                }
                if (other.HasType)
                {
                    Type = other.Type;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_newHostFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _newHostFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasOrigin = input.ReadString(ref result.origin_);
                                break;
                            }
                        case 18:
                            {
                                result.hasSubstitute = input.ReadString(ref result.substitute_);
                                break;
                            }
                        case 24:
                            {
                                result.hasType = input.ReadInt32(ref result.type_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasOrigin
            {
                get { return result.hasOrigin; }
            }
            public string Origin
            {
                get { return result.Origin; }
                set { SetOrigin(value); }
            }
            public Builder SetOrigin(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasOrigin = true;
                result.origin_ = value;
                return this;
            }
            public Builder ClearOrigin()
            {
                PrepareBuilder();
                result.hasOrigin = false;
                result.origin_ = "";
                return this;
            }

            public bool HasSubstitute
            {
                get { return result.hasSubstitute; }
            }
            public string Substitute
            {
                get { return result.Substitute; }
                set { SetSubstitute(value); }
            }
            public Builder SetSubstitute(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSubstitute = true;
                result.substitute_ = value;
                return this;
            }
            public Builder ClearSubstitute()
            {
                PrepareBuilder();
                result.hasSubstitute = false;
                result.substitute_ = "";
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            public int Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(int value)
            {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = 0;
                return this;
            }
        }
        static NewHost()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PluginKeyListType : pb::GeneratedMessage<PluginKeyListType, PluginKeyListType.Builder>
    {
        private PluginKeyListType() { }
        private static readonly PluginKeyListType defaultInstance = new PluginKeyListType().MakeReadOnly();
        private static readonly string[] _pluginKeyListTypeFieldNames = new string[] { "Count", "List" };
        private static readonly uint[] _pluginKeyListTypeFieldTags = new uint[] { 8, 18 };
        public static PluginKeyListType DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override PluginKeyListType DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override PluginKeyListType ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_PluginKeyListType__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<PluginKeyListType, PluginKeyListType.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_PluginKeyListType__FieldAccessorTable; }
        }

        public const int CountFieldNumber = 1;
        private bool hasCount;
        private int count_;
        public bool HasCount
        {
            get { return hasCount; }
        }
        public int Count
        {
            get { return count_; }
        }

        public const int ListFieldNumber = 2;
        private pbc::PopsicleList<global::mm.command.PluginKey> list_ = new pbc::PopsicleList<global::mm.command.PluginKey>();
        public scg::IList<global::mm.command.PluginKey> ListList
        {
            get { return list_; }
        }
        public int ListCount
        {
            get { return list_.Count; }
        }
        public global::mm.command.PluginKey GetList(int index)
        {
            return list_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasCount) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _pluginKeyListTypeFieldNames;
            if (hasCount)
            {
                output.WriteInt32(1, field_names[0], Count);
            }
            if (list_.Count > 0)
            {
                output.WriteMessageArray(2, field_names[1], list_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
                }
                foreach (global::mm.command.PluginKey element in ListList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static PluginKeyListType ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PluginKeyListType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PluginKeyListType ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PluginKeyListType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PluginKeyListType ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PluginKeyListType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static PluginKeyListType ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static PluginKeyListType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static PluginKeyListType ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PluginKeyListType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private PluginKeyListType MakeReadOnly()
        {
            list_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(PluginKeyListType prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<PluginKeyListType, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(PluginKeyListType cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private PluginKeyListType result;

            private PluginKeyListType PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    PluginKeyListType original = result;
                    result = new PluginKeyListType();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override PluginKeyListType MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.PluginKeyListType.Descriptor; }
            }

            public override PluginKeyListType DefaultInstanceForType
            {
                get { return global::mm.command.PluginKeyListType.DefaultInstance; }
            }

            public override PluginKeyListType BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is PluginKeyListType)
                {
                    return MergeFrom((PluginKeyListType)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(PluginKeyListType other)
            {
                if (other == global::mm.command.PluginKeyListType.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasCount)
                {
                    Count = other.Count;
                }
                if (other.list_.Count != 0)
                {
                    result.list_.Add(other.list_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_pluginKeyListTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _pluginKeyListTypeFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasCount = input.ReadInt32(ref result.count_);
                                break;
                            }
                        case 18:
                            {
                                input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.PluginKey.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasCount
            {
                get { return result.hasCount; }
            }
            public int Count
            {
                get { return result.Count; }
                set { SetCount(value); }
            }
            public Builder SetCount(int value)
            {
                PrepareBuilder();
                result.hasCount = true;
                result.count_ = value;
                return this;
            }
            public Builder ClearCount()
            {
                PrepareBuilder();
                result.hasCount = false;
                result.count_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.PluginKey> ListList
            {
                get { return PrepareBuilder().list_; }
            }
            public int ListCount
            {
                get { return result.ListCount; }
            }
            public global::mm.command.PluginKey GetList(int index)
            {
                return result.GetList(index);
            }
            public Builder SetList(int index, global::mm.command.PluginKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_[index] = value;
                return this;
            }
            public Builder SetList(int index, global::mm.command.PluginKey.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddList(global::mm.command.PluginKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_.Add(value);
                return this;
            }
            public Builder AddList(global::mm.command.PluginKey.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeList(scg::IEnumerable<global::mm.command.PluginKey> values)
            {
                PrepareBuilder();
                result.list_.Add(values);
                return this;
            }
            public Builder ClearList()
            {
                PrepareBuilder();
                result.list_.Clear();
                return this;
            }
        }
        static PluginKeyListType()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PluginKey : pb::GeneratedMessage<PluginKey, PluginKey.Builder>
    {
        private PluginKey() { }
        private static readonly PluginKey defaultInstance = new PluginKey().MakeReadOnly();
        private static readonly string[] _pluginKeyFieldNames = new string[] { "Id", "Key" };
        private static readonly uint[] _pluginKeyFieldTags = new uint[] { 16, 10 };
        public static PluginKey DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override PluginKey DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override PluginKey ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_PluginKey__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<PluginKey, PluginKey.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_PluginKey__FieldAccessorTable; }
        }

        public const int KeyFieldNumber = 1;
        private bool hasKey;
        private string key_ = "";
        public bool HasKey
        {
            get { return hasKey; }
        }
        public string Key
        {
            get { return key_; }
        }

        public const int IdFieldNumber = 2;
        private bool hasId;
        private int id_;
        public bool HasId
        {
            get { return hasId; }
        }
        public int Id
        {
            get { return id_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _pluginKeyFieldNames;
            if (hasKey)
            {
                output.WriteString(1, field_names[1], Key);
            }
            if (hasId)
            {
                output.WriteInt32(2, field_names[0], Id);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasKey)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Key);
                }
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(2, Id);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static PluginKey ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PluginKey ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PluginKey ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PluginKey ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PluginKey ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PluginKey ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static PluginKey ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static PluginKey ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static PluginKey ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PluginKey ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private PluginKey MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(PluginKey prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<PluginKey, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(PluginKey cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private PluginKey result;

            private PluginKey PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    PluginKey original = result;
                    result = new PluginKey();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override PluginKey MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.PluginKey.Descriptor; }
            }

            public override PluginKey DefaultInstanceForType
            {
                get { return global::mm.command.PluginKey.DefaultInstance; }
            }

            public override PluginKey BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is PluginKey)
                {
                    return MergeFrom((PluginKey)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(PluginKey other)
            {
                if (other == global::mm.command.PluginKey.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasKey)
                {
                    Key = other.Key;
                }
                if (other.HasId)
                {
                    Id = other.Id;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_pluginKeyFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _pluginKeyFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasKey = input.ReadString(ref result.key_);
                                break;
                            }
                        case 16:
                            {
                                result.hasId = input.ReadInt32(ref result.id_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasKey
            {
                get { return result.hasKey; }
            }
            public string Key
            {
                get { return result.Key; }
                set { SetKey(value); }
            }
            public Builder SetKey(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasKey = true;
                result.key_ = value;
                return this;
            }
            public Builder ClearKey()
            {
                PrepareBuilder();
                result.hasKey = false;
                result.key_ = "";
                return this;
            }

            public bool HasId
            {
                get { return result.hasId; }
            }
            public int Id
            {
                get { return result.Id; }
                set { SetId(value); }
            }
            public Builder SetId(int value)
            {
                PrepareBuilder();
                result.hasId = true;
                result.id_ = value;
                return this;
            }
            public Builder ClearId()
            {
                PrepareBuilder();
                result.hasId = false;
                result.id_ = 0;
                return this;
            }
        }
        static PluginKey()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class NetworkControlType : pb::GeneratedMessage<NetworkControlType, NetworkControlType.Builder>
    {
        private NetworkControlType() { }
        private static readonly NetworkControlType defaultInstance = new NetworkControlType().MakeReadOnly();
        private static readonly string[] _networkControlTypeFieldNames = new string[] { "MaxNoopInterval", "MinNoopInterval", "PortList", "TimeoutList", "int5", "int6" };
        private static readonly uint[] _networkControlTypeFieldTags = new uint[] { 32, 24, 10, 18, 40, 48 };
        public static NetworkControlType DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override NetworkControlType DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override NetworkControlType ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NetworkControlType__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<NetworkControlType, NetworkControlType.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NetworkControlType__FieldAccessorTable; }
        }

        public const int PortListFieldNumber = 1;
        private bool hasPortList;
        private string portList_ = "";
        public bool HasPortList
        {
            get { return hasPortList; }
        }
        public string PortList
        {
            get { return portList_; }
        }

        public const int TimeoutListFieldNumber = 2;
        private bool hasTimeoutList;
        private string timeoutList_ = "";
        public bool HasTimeoutList
        {
            get { return hasTimeoutList; }
        }
        public string TimeoutList
        {
            get { return timeoutList_; }
        }

        public const int MinNoopIntervalFieldNumber = 3;
        private bool hasMinNoopInterval;
        private int minNoopInterval_;
        public bool HasMinNoopInterval
        {
            get { return hasMinNoopInterval; }
        }
        public int MinNoopInterval
        {
            get { return minNoopInterval_; }
        }

        public const int MaxNoopIntervalFieldNumber = 4;
        private bool hasMaxNoopInterval;
        private int maxNoopInterval_;
        public bool HasMaxNoopInterval
        {
            get { return hasMaxNoopInterval; }
        }
        public int MaxNoopInterval
        {
            get { return maxNoopInterval_; }
        }

        public const int Int5FieldNumber = 5;
        private bool hasInt5;
        private int int5_;
        public bool HasInt5
        {
            get { return hasInt5; }
        }
        public int Int5
        {
            get { return int5_; }
        }

        public const int Int6FieldNumber = 6;
        private bool hasInt6;
        private int int6_;
        public bool HasInt6
        {
            get { return hasInt6; }
        }
        public int Int6
        {
            get { return int6_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _networkControlTypeFieldNames;
            if (hasPortList)
            {
                output.WriteString(1, field_names[2], PortList);
            }
            if (hasTimeoutList)
            {
                output.WriteString(2, field_names[3], TimeoutList);
            }
            if (hasMinNoopInterval)
            {
                output.WriteInt32(3, field_names[1], MinNoopInterval);
            }
            if (hasMaxNoopInterval)
            {
                output.WriteInt32(4, field_names[0], MaxNoopInterval);
            }
            if (hasInt5)
            {
                output.WriteInt32(5, field_names[4], Int5);
            }
            if (hasInt6)
            {
                output.WriteInt32(6, field_names[5], Int6);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasPortList)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, PortList);
                }
                if (hasTimeoutList)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, TimeoutList);
                }
                if (hasMinNoopInterval)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(3, MinNoopInterval);
                }
                if (hasMaxNoopInterval)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, MaxNoopInterval);
                }
                if (hasInt5)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(5, Int5);
                }
                if (hasInt6)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(6, Int6);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static NetworkControlType ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NetworkControlType ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NetworkControlType ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NetworkControlType ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NetworkControlType ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NetworkControlType ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static NetworkControlType ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static NetworkControlType ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static NetworkControlType ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NetworkControlType ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private NetworkControlType MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(NetworkControlType prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<NetworkControlType, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(NetworkControlType cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private NetworkControlType result;

            private NetworkControlType PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    NetworkControlType original = result;
                    result = new NetworkControlType();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override NetworkControlType MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.NetworkControlType.Descriptor; }
            }

            public override NetworkControlType DefaultInstanceForType
            {
                get { return global::mm.command.NetworkControlType.DefaultInstance; }
            }

            public override NetworkControlType BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is NetworkControlType)
                {
                    return MergeFrom((NetworkControlType)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(NetworkControlType other)
            {
                if (other == global::mm.command.NetworkControlType.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasPortList)
                {
                    PortList = other.PortList;
                }
                if (other.HasTimeoutList)
                {
                    TimeoutList = other.TimeoutList;
                }
                if (other.HasMinNoopInterval)
                {
                    MinNoopInterval = other.MinNoopInterval;
                }
                if (other.HasMaxNoopInterval)
                {
                    MaxNoopInterval = other.MaxNoopInterval;
                }
                if (other.HasInt5)
                {
                    Int5 = other.Int5;
                }
                if (other.HasInt6)
                {
                    Int6 = other.Int6;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_networkControlTypeFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _networkControlTypeFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasPortList = input.ReadString(ref result.portList_);
                                break;
                            }
                        case 18:
                            {
                                result.hasTimeoutList = input.ReadString(ref result.timeoutList_);
                                break;
                            }
                        case 24:
                            {
                                result.hasMinNoopInterval = input.ReadInt32(ref result.minNoopInterval_);
                                break;
                            }
                        case 32:
                            {
                                result.hasMaxNoopInterval = input.ReadInt32(ref result.maxNoopInterval_);
                                break;
                            }
                        case 40:
                            {
                                result.hasInt5 = input.ReadInt32(ref result.int5_);
                                break;
                            }
                        case 48:
                            {
                                result.hasInt6 = input.ReadInt32(ref result.int6_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasPortList
            {
                get { return result.hasPortList; }
            }
            public string PortList
            {
                get { return result.PortList; }
                set { SetPortList(value); }
            }
            public Builder SetPortList(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPortList = true;
                result.portList_ = value;
                return this;
            }
            public Builder ClearPortList()
            {
                PrepareBuilder();
                result.hasPortList = false;
                result.portList_ = "";
                return this;
            }

            public bool HasTimeoutList
            {
                get { return result.hasTimeoutList; }
            }
            public string TimeoutList
            {
                get { return result.TimeoutList; }
                set { SetTimeoutList(value); }
            }
            public Builder SetTimeoutList(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasTimeoutList = true;
                result.timeoutList_ = value;
                return this;
            }
            public Builder ClearTimeoutList()
            {
                PrepareBuilder();
                result.hasTimeoutList = false;
                result.timeoutList_ = "";
                return this;
            }

            public bool HasMinNoopInterval
            {
                get { return result.hasMinNoopInterval; }
            }
            public int MinNoopInterval
            {
                get { return result.MinNoopInterval; }
                set { SetMinNoopInterval(value); }
            }
            public Builder SetMinNoopInterval(int value)
            {
                PrepareBuilder();
                result.hasMinNoopInterval = true;
                result.minNoopInterval_ = value;
                return this;
            }
            public Builder ClearMinNoopInterval()
            {
                PrepareBuilder();
                result.hasMinNoopInterval = false;
                result.minNoopInterval_ = 0;
                return this;
            }

            public bool HasMaxNoopInterval
            {
                get { return result.hasMaxNoopInterval; }
            }
            public int MaxNoopInterval
            {
                get { return result.MaxNoopInterval; }
                set { SetMaxNoopInterval(value); }
            }
            public Builder SetMaxNoopInterval(int value)
            {
                PrepareBuilder();
                result.hasMaxNoopInterval = true;
                result.maxNoopInterval_ = value;
                return this;
            }
            public Builder ClearMaxNoopInterval()
            {
                PrepareBuilder();
                result.hasMaxNoopInterval = false;
                result.maxNoopInterval_ = 0;
                return this;
            }

            public bool HasInt5
            {
                get { return result.hasInt5; }
            }
            public int Int5
            {
                get { return result.Int5; }
                set { SetInt5(value); }
            }
            public Builder SetInt5(int value)
            {
                PrepareBuilder();
                result.hasInt5 = true;
                result.int5_ = value;
                return this;
            }
            public Builder ClearInt5()
            {
                PrepareBuilder();
                result.hasInt5 = false;
                result.int5_ = 0;
                return this;
            }

            public bool HasInt6
            {
                get { return result.hasInt6; }
            }
            public int Int6
            {
                get { return result.Int6; }
                set { SetInt6(value); }
            }
            public Builder SetInt6(int value)
            {
                PrepareBuilder();
                result.hasInt6 = true;
                result.int6_ = value;
                return this;
            }
            public Builder ClearInt6()
            {
                PrepareBuilder();
                result.hasInt6 = false;
                result.int6_ = 0;
                return this;
            }
        }
        static NetworkControlType()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class IPList : pb::GeneratedMessage<IPList, IPList.Builder>
    {
        private IPList() { }
        private static readonly IPList defaultInstance = new IPList().MakeReadOnly();
        private static readonly string[] _iPListFieldNames = new string[] { "LongConnectIPCount", "LongConnectIPList", "Seq", "ShortConnectIPCount", "ShortConnectIPList" };
        private static readonly uint[] _iPListFieldTags = new uint[] { 8, 26, 40, 16, 34 };
        public static IPList DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override IPList DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override IPList ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_IPList__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<IPList, IPList.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_IPList__FieldAccessorTable; }
        }

        public const int LongConnectIPCountFieldNumber = 1;
        private bool hasLongConnectIPCount;
        private int longConnectIPCount_;
        public bool HasLongConnectIPCount
        {
            get { return hasLongConnectIPCount; }
        }
        public int LongConnectIPCount
        {
            get { return longConnectIPCount_; }
        }

        public const int ShortConnectIPCountFieldNumber = 2;
        private bool hasShortConnectIPCount;
        private int shortConnectIPCount_;
        public bool HasShortConnectIPCount
        {
            get { return hasShortConnectIPCount; }
        }
        public int ShortConnectIPCount
        {
            get { return shortConnectIPCount_; }
        }

        public const int LongConnectIPListFieldNumber = 3;
        private pbc::PopsicleList<global::mm.command.IPEnd> longConnectIPList_ = new pbc::PopsicleList<global::mm.command.IPEnd>();
        public scg::IList<global::mm.command.IPEnd> LongConnectIPListList
        {
            get { return longConnectIPList_; }
        }
        public int LongConnectIPListCount
        {
            get { return longConnectIPList_.Count; }
        }
        public global::mm.command.IPEnd GetLongConnectIPList(int index)
        {
            return longConnectIPList_[index];
        }

        public const int ShortConnectIPListFieldNumber = 4;
        private pbc::PopsicleList<global::mm.command.IPEnd> shortConnectIPList_ = new pbc::PopsicleList<global::mm.command.IPEnd>();
        public scg::IList<global::mm.command.IPEnd> ShortConnectIPListList
        {
            get { return shortConnectIPList_; }
        }
        public int ShortConnectIPListCount
        {
            get { return shortConnectIPList_.Count; }
        }
        public global::mm.command.IPEnd GetShortConnectIPList(int index)
        {
            return shortConnectIPList_[index];
        }

        public const int SeqFieldNumber = 5;
        private bool hasSeq;
        private int seq_;
        public bool HasSeq
        {
            get { return hasSeq; }
        }
        public int Seq
        {
            get { return seq_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasLongConnectIPCount) return false;
                if (!hasShortConnectIPCount) return false;
                if (!hasSeq) return false;
                foreach (global::mm.command.IPEnd element in LongConnectIPListList)
                {
                    if (!element.IsInitialized) return false;
                }
                foreach (global::mm.command.IPEnd element in ShortConnectIPListList)
                {
                    if (!element.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _iPListFieldNames;
            if (hasLongConnectIPCount)
            {
                output.WriteInt32(1, field_names[0], LongConnectIPCount);
            }
            if (hasShortConnectIPCount)
            {
                output.WriteInt32(2, field_names[3], ShortConnectIPCount);
            }
            if (longConnectIPList_.Count > 0)
            {
                output.WriteMessageArray(3, field_names[1], longConnectIPList_);
            }
            if (shortConnectIPList_.Count > 0)
            {
                output.WriteMessageArray(4, field_names[4], shortConnectIPList_);
            }
            if (hasSeq)
            {
                output.WriteInt32(5, field_names[2], Seq);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasLongConnectIPCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, LongConnectIPCount);
                }
                if (hasShortConnectIPCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(2, ShortConnectIPCount);
                }
                foreach (global::mm.command.IPEnd element in LongConnectIPListList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, element);
                }
                foreach (global::mm.command.IPEnd element in ShortConnectIPListList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, element);
                }
                if (hasSeq)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(5, Seq);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static IPList ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static IPList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static IPList ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static IPList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static IPList ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static IPList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static IPList ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static IPList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static IPList ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static IPList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private IPList MakeReadOnly()
        {
            longConnectIPList_.MakeReadOnly();
            shortConnectIPList_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(IPList prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<IPList, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(IPList cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private IPList result;

            private IPList PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    IPList original = result;
                    result = new IPList();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override IPList MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.IPList.Descriptor; }
            }

            public override IPList DefaultInstanceForType
            {
                get { return global::mm.command.IPList.DefaultInstance; }
            }

            public override IPList BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is IPList)
                {
                    return MergeFrom((IPList)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(IPList other)
            {
                if (other == global::mm.command.IPList.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasLongConnectIPCount)
                {
                    LongConnectIPCount = other.LongConnectIPCount;
                }
                if (other.HasShortConnectIPCount)
                {
                    ShortConnectIPCount = other.ShortConnectIPCount;
                }
                if (other.longConnectIPList_.Count != 0)
                {
                    result.longConnectIPList_.Add(other.longConnectIPList_);
                }
                if (other.shortConnectIPList_.Count != 0)
                {
                    result.shortConnectIPList_.Add(other.shortConnectIPList_);
                }
                if (other.HasSeq)
                {
                    Seq = other.Seq;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_iPListFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _iPListFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasLongConnectIPCount = input.ReadInt32(ref result.longConnectIPCount_);
                                break;
                            }
                        case 16:
                            {
                                result.hasShortConnectIPCount = input.ReadInt32(ref result.shortConnectIPCount_);
                                break;
                            }
                        case 26:
                            {
                                input.ReadMessageArray(tag, field_name, result.longConnectIPList_, global::mm.command.IPEnd.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 34:
                            {
                                input.ReadMessageArray(tag, field_name, result.shortConnectIPList_, global::mm.command.IPEnd.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 40:
                            {
                                result.hasSeq = input.ReadInt32(ref result.seq_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasLongConnectIPCount
            {
                get { return result.hasLongConnectIPCount; }
            }
            public int LongConnectIPCount
            {
                get { return result.LongConnectIPCount; }
                set { SetLongConnectIPCount(value); }
            }
            public Builder SetLongConnectIPCount(int value)
            {
                PrepareBuilder();
                result.hasLongConnectIPCount = true;
                result.longConnectIPCount_ = value;
                return this;
            }
            public Builder ClearLongConnectIPCount()
            {
                PrepareBuilder();
                result.hasLongConnectIPCount = false;
                result.longConnectIPCount_ = 0;
                return this;
            }

            public bool HasShortConnectIPCount
            {
                get { return result.hasShortConnectIPCount; }
            }
            public int ShortConnectIPCount
            {
                get { return result.ShortConnectIPCount; }
                set { SetShortConnectIPCount(value); }
            }
            public Builder SetShortConnectIPCount(int value)
            {
                PrepareBuilder();
                result.hasShortConnectIPCount = true;
                result.shortConnectIPCount_ = value;
                return this;
            }
            public Builder ClearShortConnectIPCount()
            {
                PrepareBuilder();
                result.hasShortConnectIPCount = false;
                result.shortConnectIPCount_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.IPEnd> LongConnectIPListList
            {
                get { return PrepareBuilder().longConnectIPList_; }
            }
            public int LongConnectIPListCount
            {
                get { return result.LongConnectIPListCount; }
            }
            public global::mm.command.IPEnd GetLongConnectIPList(int index)
            {
                return result.GetLongConnectIPList(index);
            }
            public Builder SetLongConnectIPList(int index, global::mm.command.IPEnd value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.longConnectIPList_[index] = value;
                return this;
            }
            public Builder SetLongConnectIPList(int index, global::mm.command.IPEnd.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.longConnectIPList_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddLongConnectIPList(global::mm.command.IPEnd value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.longConnectIPList_.Add(value);
                return this;
            }
            public Builder AddLongConnectIPList(global::mm.command.IPEnd.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.longConnectIPList_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeLongConnectIPList(scg::IEnumerable<global::mm.command.IPEnd> values)
            {
                PrepareBuilder();
                result.longConnectIPList_.Add(values);
                return this;
            }
            public Builder ClearLongConnectIPList()
            {
                PrepareBuilder();
                result.longConnectIPList_.Clear();
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.IPEnd> ShortConnectIPListList
            {
                get { return PrepareBuilder().shortConnectIPList_; }
            }
            public int ShortConnectIPListCount
            {
                get { return result.ShortConnectIPListCount; }
            }
            public global::mm.command.IPEnd GetShortConnectIPList(int index)
            {
                return result.GetShortConnectIPList(index);
            }
            public Builder SetShortConnectIPList(int index, global::mm.command.IPEnd value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.shortConnectIPList_[index] = value;
                return this;
            }
            public Builder SetShortConnectIPList(int index, global::mm.command.IPEnd.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.shortConnectIPList_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddShortConnectIPList(global::mm.command.IPEnd value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.shortConnectIPList_.Add(value);
                return this;
            }
            public Builder AddShortConnectIPList(global::mm.command.IPEnd.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.shortConnectIPList_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeShortConnectIPList(scg::IEnumerable<global::mm.command.IPEnd> values)
            {
                PrepareBuilder();
                result.shortConnectIPList_.Add(values);
                return this;
            }
            public Builder ClearShortConnectIPList()
            {
                PrepareBuilder();
                result.shortConnectIPList_.Clear();
                return this;
            }

            public bool HasSeq
            {
                get { return result.hasSeq; }
            }
            public int Seq
            {
                get { return result.Seq; }
                set { SetSeq(value); }
            }
            public Builder SetSeq(int value)
            {
                PrepareBuilder();
                result.hasSeq = true;
                result.seq_ = value;
                return this;
            }
            public Builder ClearSeq()
            {
                PrepareBuilder();
                result.hasSeq = false;
                result.seq_ = 0;
                return this;
            }
        }
        static IPList()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class IPEnd : pb::GeneratedMessage<IPEnd, IPEnd.Builder>
    {
        private IPEnd() { }
        private static readonly IPEnd defaultInstance = new IPEnd().MakeReadOnly();
        private static readonly string[] _iPEndFieldNames = new string[] { "Host", "IP", "port", "type" };
        private static readonly uint[] _iPEndFieldTags = new uint[] { 34, 26, 16, 8 };
        public static IPEnd DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override IPEnd DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override IPEnd ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_IPEnd__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<IPEnd, IPEnd.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_IPEnd__FieldAccessorTable; }
        }

        public const int TypeFieldNumber = 1;
        private bool hasType;
        private int type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public int Type
        {
            get { return type_; }
        }

        public const int PortFieldNumber = 2;
        private bool hasPort;
        private int port_;
        public bool HasPort
        {
            get { return hasPort; }
        }
        public int Port
        {
            get { return port_; }
        }

        public const int IPFieldNumber = 3;
        private bool hasIP;
        private pb::ByteString iP_ = pb::ByteString.Empty;
        public bool HasIP
        {
            get { return hasIP; }
        }
        public pb::ByteString IP
        {
            get { return iP_; }
        }

        public const int HostFieldNumber = 4;
        private bool hasHost;
        private pb::ByteString host_ = pb::ByteString.Empty;
        public bool HasHost
        {
            get { return hasHost; }
        }
        public pb::ByteString Host
        {
            get { return host_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasType) return false;
                if (!hasPort) return false;
                if (!hasIP) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _iPEndFieldNames;
            if (hasType)
            {
                output.WriteInt32(1, field_names[3], Type);
            }
            if (hasPort)
            {
                output.WriteInt32(2, field_names[2], Port);
            }
            if (hasIP)
            {
                output.WriteBytes(3, field_names[1], IP);
            }
            if (hasHost)
            {
                output.WriteBytes(4, field_names[0], Host);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
                }
                if (hasPort)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(2, Port);
                }
                if (hasIP)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, IP);
                }
                if (hasHost)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(4, Host);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static IPEnd ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static IPEnd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static IPEnd ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static IPEnd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static IPEnd ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static IPEnd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static IPEnd ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static IPEnd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static IPEnd ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static IPEnd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private IPEnd MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(IPEnd prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<IPEnd, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(IPEnd cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private IPEnd result;

            private IPEnd PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    IPEnd original = result;
                    result = new IPEnd();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override IPEnd MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.IPEnd.Descriptor; }
            }

            public override IPEnd DefaultInstanceForType
            {
                get { return global::mm.command.IPEnd.DefaultInstance; }
            }

            public override IPEnd BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is IPEnd)
                {
                    return MergeFrom((IPEnd)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(IPEnd other)
            {
                if (other == global::mm.command.IPEnd.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasType)
                {
                    Type = other.Type;
                }
                if (other.HasPort)
                {
                    Port = other.Port;
                }
                if (other.HasIP)
                {
                    IP = other.IP;
                }
                if (other.HasHost)
                {
                    Host = other.Host;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_iPEndFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _iPEndFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasType = input.ReadInt32(ref result.type_);
                                break;
                            }
                        case 16:
                            {
                                result.hasPort = input.ReadInt32(ref result.port_);
                                break;
                            }
                        case 26:
                            {
                                result.hasIP = input.ReadBytes(ref result.iP_);
                                break;
                            }
                        case 34:
                            {
                                result.hasHost = input.ReadBytes(ref result.host_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasType
            {
                get { return result.hasType; }
            }
            public int Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(int value)
            {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = 0;
                return this;
            }

            public bool HasPort
            {
                get { return result.hasPort; }
            }
            public int Port
            {
                get { return result.Port; }
                set { SetPort(value); }
            }
            public Builder SetPort(int value)
            {
                PrepareBuilder();
                result.hasPort = true;
                result.port_ = value;
                return this;
            }
            public Builder ClearPort()
            {
                PrepareBuilder();
                result.hasPort = false;
                result.port_ = 0;
                return this;
            }

            public bool HasIP
            {
                get { return result.hasIP; }
            }
            public pb::ByteString IP
            {
                get { return result.IP; }
                set { SetIP(value); }
            }
            public Builder SetIP(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasIP = true;
                result.iP_ = value;
                return this;
            }
            public Builder ClearIP()
            {
                PrepareBuilder();
                result.hasIP = false;
                result.iP_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasHost
            {
                get { return result.hasHost; }
            }
            public pb::ByteString Host
            {
                get { return result.Host; }
                set { SetHost(value); }
            }
            public Builder SetHost(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasHost = true;
                result.host_ = value;
                return this;
            }
            public Builder ClearHost()
            {
                PrepareBuilder();
                result.hasHost = false;
                result.host_ = pb::ByteString.Empty;
                return this;
            }
        }
        static IPEnd()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class NewMsgResponseBody : pb::GeneratedMessage<NewMsgResponseBody, NewMsgResponseBody.Builder>
    {
        private NewMsgResponseBody() { }
        private static readonly NewMsgResponseBody defaultInstance = new NewMsgResponseBody().MakeReadOnly();
        private static readonly string[] _newMsgResponseBodyFieldNames = new string[] { "ClientMsgId", "CreateTime", "MsgId", "NewMsgID", "Ret", "ServerTime", "ToUserName", "Type" };
        private static readonly uint[] _newMsgResponseBodyFieldTags = new uint[] { 32, 40, 24, 64, 8, 48, 18, 56 };
        public static NewMsgResponseBody DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override NewMsgResponseBody DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override NewMsgResponseBody ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NewMsgResponseBody__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<NewMsgResponseBody, NewMsgResponseBody.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NewMsgResponseBody__FieldAccessorTable; }
        }

        public const int RetFieldNumber = 1;
        private bool hasRet;
        private int ret_;
        public bool HasRet
        {
            get { return hasRet; }
        }
        public int Ret
        {
            get { return ret_; }
        }

        public const int ToUserNameFieldNumber = 2;
        private bool hasToUserName;
        private global::mm.command.SKBuiltinString_t toUserName_;
        public bool HasToUserName
        {
            get { return hasToUserName; }
        }
        public global::mm.command.SKBuiltinString_t ToUserName
        {
            get { return toUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int MsgIdFieldNumber = 3;
        private bool hasMsgId;
        private uint msgId_;
        public bool HasMsgId
        {
            get { return hasMsgId; }
        }
        [global::System.CLSCompliant(false)]
        public uint MsgId
        {
            get { return msgId_; }
        }

        public const int ClientMsgIdFieldNumber = 4;
        private bool hasClientMsgId;
        private uint clientMsgId_;
        public bool HasClientMsgId
        {
            get { return hasClientMsgId; }
        }
        [global::System.CLSCompliant(false)]
        public uint ClientMsgId
        {
            get { return clientMsgId_; }
        }

        public const int CreateTimeFieldNumber = 5;
        private bool hasCreateTime;
        private uint createTime_;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        [global::System.CLSCompliant(false)]
        public uint CreateTime
        {
            get { return createTime_; }
        }

        public const int ServerTimeFieldNumber = 6;
        private bool hasServerTime;
        private uint serverTime_;
        public bool HasServerTime
        {
            get { return hasServerTime; }
        }
        [global::System.CLSCompliant(false)]
        public uint ServerTime
        {
            get { return serverTime_; }
        }

        public const int TypeFieldNumber = 7;
        private bool hasType;
        private uint type_;
        public bool HasType
        {
            get { return hasType; }
        }
        [global::System.CLSCompliant(false)]
        public uint Type
        {
            get { return type_; }
        }

        public const int NewMsgIDFieldNumber = 8;
        private bool hasNewMsgID;
        private ulong newMsgID_;
        public bool HasNewMsgID
        {
            get { return hasNewMsgID; }
        }
        [global::System.CLSCompliant(false)]
        public ulong NewMsgID
        {
            get { return newMsgID_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasRet) return false;
                if (!hasToUserName) return false;
                if (!hasMsgId) return false;
                if (!hasCreateTime) return false;
                if (!hasServerTime) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _newMsgResponseBodyFieldNames;
            if (hasRet)
            {
                output.WriteInt32(1, field_names[4], Ret);
            }
            if (hasToUserName)
            {
                output.WriteMessage(2, field_names[6], ToUserName);
            }
            if (hasMsgId)
            {
                output.WriteUInt32(3, field_names[2], MsgId);
            }
            if (hasClientMsgId)
            {
                output.WriteUInt32(4, field_names[0], ClientMsgId);
            }
            if (hasCreateTime)
            {
                output.WriteUInt32(5, field_names[1], CreateTime);
            }
            if (hasServerTime)
            {
                output.WriteUInt32(6, field_names[5], ServerTime);
            }
            if (hasType)
            {
                output.WriteUInt32(7, field_names[7], Type);
            }
            if (hasNewMsgID)
            {
                output.WriteUInt64(8, field_names[3], NewMsgID);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasRet)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Ret);
                }
                if (hasToUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, ToUserName);
                }
                if (hasMsgId)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(3, MsgId);
                }
                if (hasClientMsgId)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, ClientMsgId);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(5, CreateTime);
                }
                if (hasServerTime)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, ServerTime);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(7, Type);
                }
                if (hasNewMsgID)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(8, NewMsgID);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static NewMsgResponseBody ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NewMsgResponseBody ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NewMsgResponseBody ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NewMsgResponseBody ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NewMsgResponseBody ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NewMsgResponseBody ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static NewMsgResponseBody ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static NewMsgResponseBody ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static NewMsgResponseBody ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NewMsgResponseBody ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private NewMsgResponseBody MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(NewMsgResponseBody prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<NewMsgResponseBody, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(NewMsgResponseBody cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private NewMsgResponseBody result;

            private NewMsgResponseBody PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    NewMsgResponseBody original = result;
                    result = new NewMsgResponseBody();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override NewMsgResponseBody MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.NewMsgResponseBody.Descriptor; }
            }

            public override NewMsgResponseBody DefaultInstanceForType
            {
                get { return global::mm.command.NewMsgResponseBody.DefaultInstance; }
            }

            public override NewMsgResponseBody BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is NewMsgResponseBody)
                {
                    return MergeFrom((NewMsgResponseBody)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(NewMsgResponseBody other)
            {
                if (other == global::mm.command.NewMsgResponseBody.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasRet)
                {
                    Ret = other.Ret;
                }
                if (other.HasToUserName)
                {
                    MergeToUserName(other.ToUserName);
                }
                if (other.HasMsgId)
                {
                    MsgId = other.MsgId;
                }
                if (other.HasClientMsgId)
                {
                    ClientMsgId = other.ClientMsgId;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasServerTime)
                {
                    ServerTime = other.ServerTime;
                }
                if (other.HasType)
                {
                    Type = other.Type;
                }
                if (other.HasNewMsgID)
                {
                    NewMsgID = other.NewMsgID;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_newMsgResponseBodyFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _newMsgResponseBodyFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasRet = input.ReadInt32(ref result.ret_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasToUserName)
                                {
                                    subBuilder.MergeFrom(ToUserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ToUserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 24:
                            {
                                result.hasMsgId = input.ReadUInt32(ref result.msgId_);
                                break;
                            }
                        case 32:
                            {
                                result.hasClientMsgId = input.ReadUInt32(ref result.clientMsgId_);
                                break;
                            }
                        case 40:
                            {
                                result.hasCreateTime = input.ReadUInt32(ref result.createTime_);
                                break;
                            }
                        case 48:
                            {
                                result.hasServerTime = input.ReadUInt32(ref result.serverTime_);
                                break;
                            }
                        case 56:
                            {
                                result.hasType = input.ReadUInt32(ref result.type_);
                                break;
                            }
                        case 64:
                            {
                                result.hasNewMsgID = input.ReadUInt64(ref result.newMsgID_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasRet
            {
                get { return result.hasRet; }
            }
            public int Ret
            {
                get { return result.Ret; }
                set { SetRet(value); }
            }
            public Builder SetRet(int value)
            {
                PrepareBuilder();
                result.hasRet = true;
                result.ret_ = value;
                return this;
            }
            public Builder ClearRet()
            {
                PrepareBuilder();
                result.hasRet = false;
                result.ret_ = 0;
                return this;
            }

            public bool HasToUserName
            {
                get { return result.hasToUserName; }
            }
            public global::mm.command.SKBuiltinString_t ToUserName
            {
                get { return result.ToUserName; }
                set { SetToUserName(value); }
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = value;
                return this;
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasToUserName &&
                    result.toUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.toUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.toUserName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.toUserName_ = value;
                }
                result.hasToUserName = true;
                return this;
            }
            public Builder ClearToUserName()
            {
                PrepareBuilder();
                result.hasToUserName = false;
                result.toUserName_ = null;
                return this;
            }

            public bool HasMsgId
            {
                get { return result.hasMsgId; }
            }
            [global::System.CLSCompliant(false)]
            public uint MsgId
            {
                get { return result.MsgId; }
                set { SetMsgId(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetMsgId(uint value)
            {
                PrepareBuilder();
                result.hasMsgId = true;
                result.msgId_ = value;
                return this;
            }
            public Builder ClearMsgId()
            {
                PrepareBuilder();
                result.hasMsgId = false;
                result.msgId_ = 0;
                return this;
            }

            public bool HasClientMsgId
            {
                get { return result.hasClientMsgId; }
            }
            [global::System.CLSCompliant(false)]
            public uint ClientMsgId
            {
                get { return result.ClientMsgId; }
                set { SetClientMsgId(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetClientMsgId(uint value)
            {
                PrepareBuilder();
                result.hasClientMsgId = true;
                result.clientMsgId_ = value;
                return this;
            }
            public Builder ClearClientMsgId()
            {
                PrepareBuilder();
                result.hasClientMsgId = false;
                result.clientMsgId_ = 0;
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            [global::System.CLSCompliant(false)]
            public uint CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetCreateTime(uint value)
            {
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = 0;
                return this;
            }

            public bool HasServerTime
            {
                get { return result.hasServerTime; }
            }
            [global::System.CLSCompliant(false)]
            public uint ServerTime
            {
                get { return result.ServerTime; }
                set { SetServerTime(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetServerTime(uint value)
            {
                PrepareBuilder();
                result.hasServerTime = true;
                result.serverTime_ = value;
                return this;
            }
            public Builder ClearServerTime()
            {
                PrepareBuilder();
                result.hasServerTime = false;
                result.serverTime_ = 0;
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            [global::System.CLSCompliant(false)]
            public uint Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetType(uint value)
            {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = 0;
                return this;
            }

            public bool HasNewMsgID
            {
                get { return result.hasNewMsgID; }
            }
            [global::System.CLSCompliant(false)]
            public ulong NewMsgID
            {
                get { return result.NewMsgID; }
                set { SetNewMsgID(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetNewMsgID(ulong value)
            {
                PrepareBuilder();
                result.hasNewMsgID = true;
                result.newMsgID_ = value;
                return this;
            }
            public Builder ClearNewMsgID()
            {
                PrepareBuilder();
                result.hasNewMsgID = false;
                result.newMsgID_ = 0UL;
                return this;
            }
        }
        static NewMsgResponseBody()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class NewMsgRequestBody : pb::GeneratedMessage<NewMsgRequestBody, NewMsgRequestBody.Builder>
    {
        private NewMsgRequestBody() { }
        private static readonly NewMsgRequestBody defaultInstance = new NewMsgRequestBody().MakeReadOnly();
        private static readonly string[] _newMsgRequestBodyFieldNames = new string[] { "ClientMsgId", "Content", "CreateTime", "CtrlBit", "ToUserName", "Type", "msgSource" };
        private static readonly uint[] _newMsgRequestBodyFieldTags = new uint[] { 40, 18, 32, 56, 10, 24, 50 };
        public static NewMsgRequestBody DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override NewMsgRequestBody DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override NewMsgRequestBody ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NewMsgRequestBody__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<NewMsgRequestBody, NewMsgRequestBody.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NewMsgRequestBody__FieldAccessorTable; }
        }

        public const int ToUserNameFieldNumber = 1;
        private bool hasToUserName;
        private global::mm.command.SKBuiltinString_t toUserName_;
        public bool HasToUserName
        {
            get { return hasToUserName; }
        }
        public global::mm.command.SKBuiltinString_t ToUserName
        {
            get { return toUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int ContentFieldNumber = 2;
        private bool hasContent;
        private string content_ = "";
        public bool HasContent
        {
            get { return hasContent; }
        }
        public string Content
        {
            get { return content_; }
        }

        public const int TypeFieldNumber = 3;
        private bool hasType;
        private uint type_;
        public bool HasType
        {
            get { return hasType; }
        }
        [global::System.CLSCompliant(false)]
        public uint Type
        {
            get { return type_; }
        }

        public const int CreateTimeFieldNumber = 4;
        private bool hasCreateTime;
        private uint createTime_;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        [global::System.CLSCompliant(false)]
        public uint CreateTime
        {
            get { return createTime_; }
        }

        public const int ClientMsgIdFieldNumber = 5;
        private bool hasClientMsgId;
        private uint clientMsgId_;
        public bool HasClientMsgId
        {
            get { return hasClientMsgId; }
        }
        [global::System.CLSCompliant(false)]
        public uint ClientMsgId
        {
            get { return clientMsgId_; }
        }

        public const int MsgSourceFieldNumber = 6;
        private bool hasMsgSource;
        private string msgSource_ = "";
        public bool HasMsgSource
        {
            get { return hasMsgSource; }
        }
        public string MsgSource
        {
            get { return msgSource_; }
        }

        public const int CtrlBitFieldNumber = 7;
        private bool hasCtrlBit;
        private uint ctrlBit_;
        public bool HasCtrlBit
        {
            get { return hasCtrlBit; }
        }
        [global::System.CLSCompliant(false)]
        public uint CtrlBit
        {
            get { return ctrlBit_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasToUserName) return false;
                if (!hasType) return false;
                if (!hasCreateTime) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _newMsgRequestBodyFieldNames;
            if (hasToUserName)
            {
                output.WriteMessage(1, field_names[4], ToUserName);
            }
            if (hasContent)
            {
                output.WriteString(2, field_names[1], Content);
            }
            if (hasType)
            {
                output.WriteUInt32(3, field_names[5], Type);
            }
            if (hasCreateTime)
            {
                output.WriteUInt32(4, field_names[2], CreateTime);
            }
            if (hasClientMsgId)
            {
                output.WriteUInt32(5, field_names[0], ClientMsgId);
            }
            if (hasMsgSource)
            {
                output.WriteString(6, field_names[6], MsgSource);
            }
            if (hasCtrlBit)
            {
                output.WriteUInt32(7, field_names[3], CtrlBit);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasToUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, ToUserName);
                }
                if (hasContent)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Content);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(3, Type);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, CreateTime);
                }
                if (hasClientMsgId)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(5, ClientMsgId);
                }
                if (hasMsgSource)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(6, MsgSource);
                }
                if (hasCtrlBit)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(7, CtrlBit);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static NewMsgRequestBody ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NewMsgRequestBody ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NewMsgRequestBody ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NewMsgRequestBody ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NewMsgRequestBody ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NewMsgRequestBody ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static NewMsgRequestBody ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static NewMsgRequestBody ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static NewMsgRequestBody ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NewMsgRequestBody ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private NewMsgRequestBody MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(NewMsgRequestBody prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<NewMsgRequestBody, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(NewMsgRequestBody cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private NewMsgRequestBody result;

            private NewMsgRequestBody PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    NewMsgRequestBody original = result;
                    result = new NewMsgRequestBody();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override NewMsgRequestBody MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.NewMsgRequestBody.Descriptor; }
            }

            public override NewMsgRequestBody DefaultInstanceForType
            {
                get { return global::mm.command.NewMsgRequestBody.DefaultInstance; }
            }

            public override NewMsgRequestBody BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is NewMsgRequestBody)
                {
                    return MergeFrom((NewMsgRequestBody)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(NewMsgRequestBody other)
            {
                if (other == global::mm.command.NewMsgRequestBody.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasToUserName)
                {
                    MergeToUserName(other.ToUserName);
                }
                if (other.HasContent)
                {
                    Content = other.Content;
                }
                if (other.HasType)
                {
                    Type = other.Type;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasClientMsgId)
                {
                    ClientMsgId = other.ClientMsgId;
                }
                if (other.HasMsgSource)
                {
                    MsgSource = other.MsgSource;
                }
                if (other.HasCtrlBit)
                {
                    CtrlBit = other.CtrlBit;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_newMsgRequestBodyFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _newMsgRequestBodyFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasToUserName)
                                {
                                    subBuilder.MergeFrom(ToUserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ToUserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                result.hasContent = input.ReadString(ref result.content_);
                                break;
                            }
                        case 24:
                            {
                                result.hasType = input.ReadUInt32(ref result.type_);
                                break;
                            }
                        case 32:
                            {
                                result.hasCreateTime = input.ReadUInt32(ref result.createTime_);
                                break;
                            }
                        case 40:
                            {
                                result.hasClientMsgId = input.ReadUInt32(ref result.clientMsgId_);
                                break;
                            }
                        case 50:
                            {
                                result.hasMsgSource = input.ReadString(ref result.msgSource_);
                                break;
                            }
                        case 56:
                            {
                                result.hasCtrlBit = input.ReadUInt32(ref result.ctrlBit_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasToUserName
            {
                get { return result.hasToUserName; }
            }
            public global::mm.command.SKBuiltinString_t ToUserName
            {
                get { return result.ToUserName; }
                set { SetToUserName(value); }
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = value;
                return this;
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasToUserName &&
                    result.toUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.toUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.toUserName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.toUserName_ = value;
                }
                result.hasToUserName = true;
                return this;
            }
            public Builder ClearToUserName()
            {
                PrepareBuilder();
                result.hasToUserName = false;
                result.toUserName_ = null;
                return this;
            }

            public bool HasContent
            {
                get { return result.hasContent; }
            }
            public string Content
            {
                get { return result.Content; }
                set { SetContent(value); }
            }
            public Builder SetContent(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContent = true;
                result.content_ = value;
                return this;
            }
            public Builder ClearContent()
            {
                PrepareBuilder();
                result.hasContent = false;
                result.content_ = "";
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            [global::System.CLSCompliant(false)]
            public uint Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetType(uint value)
            {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = 0;
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            [global::System.CLSCompliant(false)]
            public uint CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetCreateTime(uint value)
            {
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = 0;
                return this;
            }

            public bool HasClientMsgId
            {
                get { return result.hasClientMsgId; }
            }
            [global::System.CLSCompliant(false)]
            public uint ClientMsgId
            {
                get { return result.ClientMsgId; }
                set { SetClientMsgId(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetClientMsgId(uint value)
            {
                PrepareBuilder();
                result.hasClientMsgId = true;
                result.clientMsgId_ = value;
                return this;
            }
            public Builder ClearClientMsgId()
            {
                PrepareBuilder();
                result.hasClientMsgId = false;
                result.clientMsgId_ = 0;
                return this;
            }

            public bool HasMsgSource
            {
                get { return result.hasMsgSource; }
            }
            public string MsgSource
            {
                get { return result.MsgSource; }
                set { SetMsgSource(value); }
            }
            public Builder SetMsgSource(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMsgSource = true;
                result.msgSource_ = value;
                return this;
            }
            public Builder ClearMsgSource()
            {
                PrepareBuilder();
                result.hasMsgSource = false;
                result.msgSource_ = "";
                return this;
            }

            public bool HasCtrlBit
            {
                get { return result.hasCtrlBit; }
            }
            [global::System.CLSCompliant(false)]
            public uint CtrlBit
            {
                get { return result.CtrlBit; }
                set { SetCtrlBit(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetCtrlBit(uint value)
            {
                PrepareBuilder();
                result.hasCtrlBit = true;
                result.ctrlBit_ = value;
                return this;
            }
            public Builder ClearCtrlBit()
            {
                PrepareBuilder();
                result.hasCtrlBit = false;
                result.ctrlBit_ = 0;
                return this;
            }
        }
        static NewMsgRequestBody()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MsgResponseBody : pb::GeneratedMessage<MsgResponseBody, MsgResponseBody.Builder>
    {
        private MsgResponseBody() { }
        private static readonly MsgResponseBody defaultInstance = new MsgResponseBody().MakeReadOnly();
        private static readonly string[] _msgResponseBodyFieldNames = new string[] { "ClientMsgId", "CreateTime", "FromUserName", "MsgId", "Ret", "ToUserName", "Type" };
        private static readonly uint[] _msgResponseBodyFieldTags = new uint[] { 42, 48, 18, 32, 8, 26, 56 };
        public static MsgResponseBody DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override MsgResponseBody DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override MsgResponseBody ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_MsgResponseBody__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<MsgResponseBody, MsgResponseBody.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_MsgResponseBody__FieldAccessorTable; }
        }

        public const int RetFieldNumber = 1;
        private bool hasRet;
        private int ret_;
        public bool HasRet
        {
            get { return hasRet; }
        }
        public int Ret
        {
            get { return ret_; }
        }

        public const int FromUserNameFieldNumber = 2;
        private bool hasFromUserName;
        private global::mm.command.SKBuiltinString_t fromUserName_;
        public bool HasFromUserName
        {
            get { return hasFromUserName; }
        }
        public global::mm.command.SKBuiltinString_t FromUserName
        {
            get { return fromUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int ToUserNameFieldNumber = 3;
        private bool hasToUserName;
        private global::mm.command.SKBuiltinString_t toUserName_;
        public bool HasToUserName
        {
            get { return hasToUserName; }
        }
        public global::mm.command.SKBuiltinString_t ToUserName
        {
            get { return toUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int MsgIdFieldNumber = 4;
        private bool hasMsgId;
        private int msgId_;
        public bool HasMsgId
        {
            get { return hasMsgId; }
        }
        public int MsgId
        {
            get { return msgId_; }
        }

        public const int ClientMsgIdFieldNumber = 5;
        private bool hasClientMsgId;
        private string clientMsgId_ = "";
        public bool HasClientMsgId
        {
            get { return hasClientMsgId; }
        }
        public string ClientMsgId
        {
            get { return clientMsgId_; }
        }

        public const int CreateTimeFieldNumber = 6;
        private bool hasCreateTime;
        private int createTime_;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public int CreateTime
        {
            get { return createTime_; }
        }

        public const int TypeFieldNumber = 7;
        private bool hasType;
        private int type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public int Type
        {
            get { return type_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasRet) return false;
                if (!hasFromUserName) return false;
                if (!hasToUserName) return false;
                if (!hasMsgId) return false;
                if (!hasCreateTime) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _msgResponseBodyFieldNames;
            if (hasRet)
            {
                output.WriteInt32(1, field_names[4], Ret);
            }
            if (hasFromUserName)
            {
                output.WriteMessage(2, field_names[2], FromUserName);
            }
            if (hasToUserName)
            {
                output.WriteMessage(3, field_names[5], ToUserName);
            }
            if (hasMsgId)
            {
                output.WriteInt32(4, field_names[3], MsgId);
            }
            if (hasClientMsgId)
            {
                output.WriteString(5, field_names[0], ClientMsgId);
            }
            if (hasCreateTime)
            {
                output.WriteInt32(6, field_names[1], CreateTime);
            }
            if (hasType)
            {
                output.WriteInt32(7, field_names[6], Type);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasRet)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Ret);
                }
                if (hasFromUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, FromUserName);
                }
                if (hasToUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, ToUserName);
                }
                if (hasMsgId)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, MsgId);
                }
                if (hasClientMsgId)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(5, ClientMsgId);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(6, CreateTime);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, Type);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static MsgResponseBody ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MsgResponseBody ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MsgResponseBody ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MsgResponseBody ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MsgResponseBody ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MsgResponseBody ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static MsgResponseBody ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static MsgResponseBody ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static MsgResponseBody ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MsgResponseBody ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private MsgResponseBody MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(MsgResponseBody prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<MsgResponseBody, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(MsgResponseBody cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private MsgResponseBody result;

            private MsgResponseBody PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    MsgResponseBody original = result;
                    result = new MsgResponseBody();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override MsgResponseBody MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.MsgResponseBody.Descriptor; }
            }

            public override MsgResponseBody DefaultInstanceForType
            {
                get { return global::mm.command.MsgResponseBody.DefaultInstance; }
            }

            public override MsgResponseBody BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is MsgResponseBody)
                {
                    return MergeFrom((MsgResponseBody)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(MsgResponseBody other)
            {
                if (other == global::mm.command.MsgResponseBody.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasRet)
                {
                    Ret = other.Ret;
                }
                if (other.HasFromUserName)
                {
                    MergeFromUserName(other.FromUserName);
                }
                if (other.HasToUserName)
                {
                    MergeToUserName(other.ToUserName);
                }
                if (other.HasMsgId)
                {
                    MsgId = other.MsgId;
                }
                if (other.HasClientMsgId)
                {
                    ClientMsgId = other.ClientMsgId;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasType)
                {
                    Type = other.Type;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_msgResponseBodyFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _msgResponseBodyFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasRet = input.ReadInt32(ref result.ret_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasFromUserName)
                                {
                                    subBuilder.MergeFrom(FromUserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                FromUserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasToUserName)
                                {
                                    subBuilder.MergeFrom(ToUserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ToUserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 32:
                            {
                                result.hasMsgId = input.ReadInt32(ref result.msgId_);
                                break;
                            }
                        case 42:
                            {
                                result.hasClientMsgId = input.ReadString(ref result.clientMsgId_);
                                break;
                            }
                        case 48:
                            {
                                result.hasCreateTime = input.ReadInt32(ref result.createTime_);
                                break;
                            }
                        case 56:
                            {
                                result.hasType = input.ReadInt32(ref result.type_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasRet
            {
                get { return result.hasRet; }
            }
            public int Ret
            {
                get { return result.Ret; }
                set { SetRet(value); }
            }
            public Builder SetRet(int value)
            {
                PrepareBuilder();
                result.hasRet = true;
                result.ret_ = value;
                return this;
            }
            public Builder ClearRet()
            {
                PrepareBuilder();
                result.hasRet = false;
                result.ret_ = 0;
                return this;
            }

            public bool HasFromUserName
            {
                get { return result.hasFromUserName; }
            }
            public global::mm.command.SKBuiltinString_t FromUserName
            {
                get { return result.FromUserName; }
                set { SetFromUserName(value); }
            }
            public Builder SetFromUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasFromUserName = true;
                result.fromUserName_ = value;
                return this;
            }
            public Builder SetFromUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasFromUserName = true;
                result.fromUserName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeFromUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasFromUserName &&
                    result.fromUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.fromUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.fromUserName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.fromUserName_ = value;
                }
                result.hasFromUserName = true;
                return this;
            }
            public Builder ClearFromUserName()
            {
                PrepareBuilder();
                result.hasFromUserName = false;
                result.fromUserName_ = null;
                return this;
            }

            public bool HasToUserName
            {
                get { return result.hasToUserName; }
            }
            public global::mm.command.SKBuiltinString_t ToUserName
            {
                get { return result.ToUserName; }
                set { SetToUserName(value); }
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = value;
                return this;
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasToUserName &&
                    result.toUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.toUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.toUserName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.toUserName_ = value;
                }
                result.hasToUserName = true;
                return this;
            }
            public Builder ClearToUserName()
            {
                PrepareBuilder();
                result.hasToUserName = false;
                result.toUserName_ = null;
                return this;
            }

            public bool HasMsgId
            {
                get { return result.hasMsgId; }
            }
            public int MsgId
            {
                get { return result.MsgId; }
                set { SetMsgId(value); }
            }
            public Builder SetMsgId(int value)
            {
                PrepareBuilder();
                result.hasMsgId = true;
                result.msgId_ = value;
                return this;
            }
            public Builder ClearMsgId()
            {
                PrepareBuilder();
                result.hasMsgId = false;
                result.msgId_ = 0;
                return this;
            }

            public bool HasClientMsgId
            {
                get { return result.hasClientMsgId; }
            }
            public string ClientMsgId
            {
                get { return result.ClientMsgId; }
                set { SetClientMsgId(value); }
            }
            public Builder SetClientMsgId(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasClientMsgId = true;
                result.clientMsgId_ = value;
                return this;
            }
            public Builder ClearClientMsgId()
            {
                PrepareBuilder();
                result.hasClientMsgId = false;
                result.clientMsgId_ = "";
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public int CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(int value)
            {
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = 0;
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            public int Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(int value)
            {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = 0;
                return this;
            }
        }
        static MsgResponseBody()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MsgRequestBody : pb::GeneratedMessage<MsgRequestBody, MsgRequestBody.Builder>
    {
        private MsgRequestBody() { }
        private static readonly MsgRequestBody defaultInstance = new MsgRequestBody().MakeReadOnly();
        private static readonly string[] _msgRequestBodyFieldNames = new string[] { "ClientMsgId", "Content", "CreateTime", "EmojiFlag", "FromUserName", "ToUserName", "Type", "msgSource" };
        private static readonly uint[] _msgRequestBodyFieldTags = new uint[] { 50, 34, 40, 64, 10, 18, 24, 58 };
        public static MsgRequestBody DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override MsgRequestBody DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override MsgRequestBody ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_MsgRequestBody__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<MsgRequestBody, MsgRequestBody.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_MsgRequestBody__FieldAccessorTable; }
        }

        public const int FromUserNameFieldNumber = 1;
        private bool hasFromUserName;
        private global::mm.command.SKBuiltinString_t fromUserName_;
        public bool HasFromUserName
        {
            get { return hasFromUserName; }
        }
        public global::mm.command.SKBuiltinString_t FromUserName
        {
            get { return fromUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int ToUserNameFieldNumber = 2;
        private bool hasToUserName;
        private global::mm.command.SKBuiltinString_t toUserName_;
        public bool HasToUserName
        {
            get { return hasToUserName; }
        }
        public global::mm.command.SKBuiltinString_t ToUserName
        {
            get { return toUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int TypeFieldNumber = 3;
        private bool hasType;
        private int type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public int Type
        {
            get { return type_; }
        }

        public const int ContentFieldNumber = 4;
        private bool hasContent;
        private string content_ = "";
        public bool HasContent
        {
            get { return hasContent; }
        }
        public string Content
        {
            get { return content_; }
        }

        public const int CreateTimeFieldNumber = 5;
        private bool hasCreateTime;
        private int createTime_;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public int CreateTime
        {
            get { return createTime_; }
        }

        public const int ClientMsgIdFieldNumber = 6;
        private bool hasClientMsgId;
        private string clientMsgId_ = "";
        public bool HasClientMsgId
        {
            get { return hasClientMsgId; }
        }
        public string ClientMsgId
        {
            get { return clientMsgId_; }
        }

        public const int MsgSourceFieldNumber = 7;
        private bool hasMsgSource;
        private string msgSource_ = "";
        public bool HasMsgSource
        {
            get { return hasMsgSource; }
        }
        public string MsgSource
        {
            get { return msgSource_; }
        }

        public const int EmojiFlagFieldNumber = 8;
        private bool hasEmojiFlag;
        private int emojiFlag_;
        public bool HasEmojiFlag
        {
            get { return hasEmojiFlag; }
        }
        public int EmojiFlag
        {
            get { return emojiFlag_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasFromUserName) return false;
                if (!hasToUserName) return false;
                if (!hasType) return false;
                if (!hasCreateTime) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _msgRequestBodyFieldNames;
            if (hasFromUserName)
            {
                output.WriteMessage(1, field_names[4], FromUserName);
            }
            if (hasToUserName)
            {
                output.WriteMessage(2, field_names[5], ToUserName);
            }
            if (hasType)
            {
                output.WriteInt32(3, field_names[6], Type);
            }
            if (hasContent)
            {
                output.WriteString(4, field_names[1], Content);
            }
            if (hasCreateTime)
            {
                output.WriteInt32(5, field_names[2], CreateTime);
            }
            if (hasClientMsgId)
            {
                output.WriteString(6, field_names[0], ClientMsgId);
            }
            if (hasMsgSource)
            {
                output.WriteString(7, field_names[7], MsgSource);
            }
            if (hasEmojiFlag)
            {
                output.WriteInt32(8, field_names[3], EmojiFlag);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasFromUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, FromUserName);
                }
                if (hasToUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, ToUserName);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(3, Type);
                }
                if (hasContent)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, Content);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(5, CreateTime);
                }
                if (hasClientMsgId)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(6, ClientMsgId);
                }
                if (hasMsgSource)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(7, MsgSource);
                }
                if (hasEmojiFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(8, EmojiFlag);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static MsgRequestBody ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MsgRequestBody ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MsgRequestBody ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MsgRequestBody ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MsgRequestBody ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MsgRequestBody ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static MsgRequestBody ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static MsgRequestBody ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static MsgRequestBody ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MsgRequestBody ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private MsgRequestBody MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(MsgRequestBody prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<MsgRequestBody, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(MsgRequestBody cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private MsgRequestBody result;

            private MsgRequestBody PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    MsgRequestBody original = result;
                    result = new MsgRequestBody();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override MsgRequestBody MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.MsgRequestBody.Descriptor; }
            }

            public override MsgRequestBody DefaultInstanceForType
            {
                get { return global::mm.command.MsgRequestBody.DefaultInstance; }
            }

            public override MsgRequestBody BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is MsgRequestBody)
                {
                    return MergeFrom((MsgRequestBody)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(MsgRequestBody other)
            {
                if (other == global::mm.command.MsgRequestBody.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasFromUserName)
                {
                    MergeFromUserName(other.FromUserName);
                }
                if (other.HasToUserName)
                {
                    MergeToUserName(other.ToUserName);
                }
                if (other.HasType)
                {
                    Type = other.Type;
                }
                if (other.HasContent)
                {
                    Content = other.Content;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasClientMsgId)
                {
                    ClientMsgId = other.ClientMsgId;
                }
                if (other.HasMsgSource)
                {
                    MsgSource = other.MsgSource;
                }
                if (other.HasEmojiFlag)
                {
                    EmojiFlag = other.EmojiFlag;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_msgRequestBodyFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _msgRequestBodyFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasFromUserName)
                                {
                                    subBuilder.MergeFrom(FromUserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                FromUserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasToUserName)
                                {
                                    subBuilder.MergeFrom(ToUserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ToUserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 24:
                            {
                                result.hasType = input.ReadInt32(ref result.type_);
                                break;
                            }
                        case 34:
                            {
                                result.hasContent = input.ReadString(ref result.content_);
                                break;
                            }
                        case 40:
                            {
                                result.hasCreateTime = input.ReadInt32(ref result.createTime_);
                                break;
                            }
                        case 50:
                            {
                                result.hasClientMsgId = input.ReadString(ref result.clientMsgId_);
                                break;
                            }
                        case 58:
                            {
                                result.hasMsgSource = input.ReadString(ref result.msgSource_);
                                break;
                            }
                        case 64:
                            {
                                result.hasEmojiFlag = input.ReadInt32(ref result.emojiFlag_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasFromUserName
            {
                get { return result.hasFromUserName; }
            }
            public global::mm.command.SKBuiltinString_t FromUserName
            {
                get { return result.FromUserName; }
                set { SetFromUserName(value); }
            }
            public Builder SetFromUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasFromUserName = true;
                result.fromUserName_ = value;
                return this;
            }
            public Builder SetFromUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasFromUserName = true;
                result.fromUserName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeFromUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasFromUserName &&
                    result.fromUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.fromUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.fromUserName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.fromUserName_ = value;
                }
                result.hasFromUserName = true;
                return this;
            }
            public Builder ClearFromUserName()
            {
                PrepareBuilder();
                result.hasFromUserName = false;
                result.fromUserName_ = null;
                return this;
            }

            public bool HasToUserName
            {
                get { return result.hasToUserName; }
            }
            public global::mm.command.SKBuiltinString_t ToUserName
            {
                get { return result.ToUserName; }
                set { SetToUserName(value); }
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = value;
                return this;
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasToUserName &&
                    result.toUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.toUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.toUserName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.toUserName_ = value;
                }
                result.hasToUserName = true;
                return this;
            }
            public Builder ClearToUserName()
            {
                PrepareBuilder();
                result.hasToUserName = false;
                result.toUserName_ = null;
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            public int Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(int value)
            {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = 0;
                return this;
            }

            public bool HasContent
            {
                get { return result.hasContent; }
            }
            public string Content
            {
                get { return result.Content; }
                set { SetContent(value); }
            }
            public Builder SetContent(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContent = true;
                result.content_ = value;
                return this;
            }
            public Builder ClearContent()
            {
                PrepareBuilder();
                result.hasContent = false;
                result.content_ = "";
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public int CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(int value)
            {
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = 0;
                return this;
            }

            public bool HasClientMsgId
            {
                get { return result.hasClientMsgId; }
            }
            public string ClientMsgId
            {
                get { return result.ClientMsgId; }
                set { SetClientMsgId(value); }
            }
            public Builder SetClientMsgId(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasClientMsgId = true;
                result.clientMsgId_ = value;
                return this;
            }
            public Builder ClearClientMsgId()
            {
                PrepareBuilder();
                result.hasClientMsgId = false;
                result.clientMsgId_ = "";
                return this;
            }

            public bool HasMsgSource
            {
                get { return result.hasMsgSource; }
            }
            public string MsgSource
            {
                get { return result.MsgSource; }
                set { SetMsgSource(value); }
            }
            public Builder SetMsgSource(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMsgSource = true;
                result.msgSource_ = value;
                return this;
            }
            public Builder ClearMsgSource()
            {
                PrepareBuilder();
                result.hasMsgSource = false;
                result.msgSource_ = "";
                return this;
            }

            public bool HasEmojiFlag
            {
                get { return result.hasEmojiFlag; }
            }
            public int EmojiFlag
            {
                get { return result.EmojiFlag; }
                set { SetEmojiFlag(value); }
            }
            public Builder SetEmojiFlag(int value)
            {
                PrepareBuilder();
                result.hasEmojiFlag = true;
                result.emojiFlag_ = value;
                return this;
            }
            public Builder ClearEmojiFlag()
            {
                PrepareBuilder();
                result.hasEmojiFlag = false;
                result.emojiFlag_ = 0;
                return this;
            }
        }
        static MsgRequestBody()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class CmdList : pb::GeneratedMessage<CmdList, CmdList.Builder>
    {
        private CmdList() { }
        private static readonly CmdList defaultInstance = new CmdList().MakeReadOnly();
        private static readonly string[] _cmdListFieldNames = new string[] { "Count", "List" };
        private static readonly uint[] _cmdListFieldTags = new uint[] { 8, 18 };
        public static CmdList DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override CmdList DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override CmdList ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_CmdList__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<CmdList, CmdList.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_CmdList__FieldAccessorTable; }
        }

        public const int CountFieldNumber = 1;
        private bool hasCount;
        private int count_;
        public bool HasCount
        {
            get { return hasCount; }
        }
        public int Count
        {
            get { return count_; }
        }

        public const int ListFieldNumber = 2;
        private pbc::PopsicleList<global::mm.command.CmdItem> list_ = new pbc::PopsicleList<global::mm.command.CmdItem>();
        public scg::IList<global::mm.command.CmdItem> ListList
        {
            get { return list_; }
        }
        public int ListCount
        {
            get { return list_.Count; }
        }
        public global::mm.command.CmdItem GetList(int index)
        {
            return list_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasCount) return false;
                foreach (global::mm.command.CmdItem element in ListList)
                {
                    if (!element.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _cmdListFieldNames;
            if (hasCount)
            {
                output.WriteInt32(1, field_names[0], Count);
            }
            if (list_.Count > 0)
            {
                output.WriteMessageArray(2, field_names[1], list_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
                }
                foreach (global::mm.command.CmdItem element in ListList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static CmdList ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CmdList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CmdList ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CmdList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CmdList ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CmdList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static CmdList ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static CmdList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static CmdList ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CmdList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private CmdList MakeReadOnly()
        {
            list_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(CmdList prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<CmdList, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(CmdList cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private CmdList result;

            private CmdList PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    CmdList original = result;
                    result = new CmdList();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override CmdList MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.CmdList.Descriptor; }
            }

            public override CmdList DefaultInstanceForType
            {
                get { return global::mm.command.CmdList.DefaultInstance; }
            }

            public override CmdList BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is CmdList)
                {
                    return MergeFrom((CmdList)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(CmdList other)
            {
                if (other == global::mm.command.CmdList.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasCount)
                {
                    Count = other.Count;
                }
                if (other.list_.Count != 0)
                {
                    result.list_.Add(other.list_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_cmdListFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _cmdListFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasCount = input.ReadInt32(ref result.count_);
                                break;
                            }
                        case 18:
                            {
                                input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.CmdItem.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasCount
            {
                get { return result.hasCount; }
            }
            public int Count
            {
                get { return result.Count; }
                set { SetCount(value); }
            }
            public Builder SetCount(int value)
            {
                PrepareBuilder();
                result.hasCount = true;
                result.count_ = value;
                return this;
            }
            public Builder ClearCount()
            {
                PrepareBuilder();
                result.hasCount = false;
                result.count_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.CmdItem> ListList
            {
                get { return PrepareBuilder().list_; }
            }
            public int ListCount
            {
                get { return result.ListCount; }
            }
            public global::mm.command.CmdItem GetList(int index)
            {
                return result.GetList(index);
            }
            public Builder SetList(int index, global::mm.command.CmdItem value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_[index] = value;
                return this;
            }
            public Builder SetList(int index, global::mm.command.CmdItem.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddList(global::mm.command.CmdItem value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_.Add(value);
                return this;
            }
            public Builder AddList(global::mm.command.CmdItem.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeList(scg::IEnumerable<global::mm.command.CmdItem> values)
            {
                PrepareBuilder();
                result.list_.Add(values);
                return this;
            }
            public Builder ClearList()
            {
                PrepareBuilder();
                result.list_.Clear();
                return this;
            }
        }
        static CmdList()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SyncKey : pb::GeneratedMessage<SyncKey, SyncKey.Builder>
    {
        private SyncKey() { }
        private static readonly SyncKey defaultInstance = new SyncKey().MakeReadOnly();
        private static readonly string[] _syncKeyFieldNames = new string[] { "Key", "KeyNumb" };
        private static readonly uint[] _syncKeyFieldTags = new uint[] { 18, 8 };
        public static SyncKey DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override SyncKey DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override SyncKey ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SyncKey__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<SyncKey, SyncKey.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SyncKey__FieldAccessorTable; }
        }

        public const int KeyNumbFieldNumber = 1;
        private bool hasKeyNumb;
        private int keyNumb_;
        public bool HasKeyNumb
        {
            get { return hasKeyNumb; }
        }
        public int KeyNumb
        {
            get { return keyNumb_; }
        }

        public const int KeyFieldNumber = 2;
        private pbc::PopsicleList<global::mm.command.KeyValPair> key_ = new pbc::PopsicleList<global::mm.command.KeyValPair>();
        public scg::IList<global::mm.command.KeyValPair> KeyList
        {
            get { return key_; }
        }
        public int KeyCount
        {
            get { return key_.Count; }
        }
        public global::mm.command.KeyValPair GetKey(int index)
        {
            return key_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasKeyNumb) return false;
                foreach (global::mm.command.KeyValPair element in KeyList)
                {
                    if (!element.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _syncKeyFieldNames;
            if (hasKeyNumb)
            {
                output.WriteInt32(1, field_names[1], KeyNumb);
            }
            if (key_.Count > 0)
            {
                output.WriteMessageArray(2, field_names[0], key_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasKeyNumb)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, KeyNumb);
                }
                foreach (global::mm.command.KeyValPair element in KeyList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static SyncKey ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SyncKey ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SyncKey ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SyncKey ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SyncKey ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SyncKey ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SyncKey ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SyncKey ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SyncKey ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SyncKey ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SyncKey MakeReadOnly()
        {
            key_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SyncKey prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SyncKey, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(SyncKey cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private SyncKey result;

            private SyncKey PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    SyncKey original = result;
                    result = new SyncKey();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override SyncKey MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.SyncKey.Descriptor; }
            }

            public override SyncKey DefaultInstanceForType
            {
                get { return global::mm.command.SyncKey.DefaultInstance; }
            }

            public override SyncKey BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is SyncKey)
                {
                    return MergeFrom((SyncKey)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(SyncKey other)
            {
                if (other == global::mm.command.SyncKey.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasKeyNumb)
                {
                    KeyNumb = other.KeyNumb;
                }
                if (other.key_.Count != 0)
                {
                    result.key_.Add(other.key_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_syncKeyFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _syncKeyFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasKeyNumb = input.ReadInt32(ref result.keyNumb_);
                                break;
                            }
                        case 18:
                            {
                                input.ReadMessageArray(tag, field_name, result.key_, global::mm.command.KeyValPair.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasKeyNumb
            {
                get { return result.hasKeyNumb; }
            }
            public int KeyNumb
            {
                get { return result.KeyNumb; }
                set { SetKeyNumb(value); }
            }
            public Builder SetKeyNumb(int value)
            {
                PrepareBuilder();
                result.hasKeyNumb = true;
                result.keyNumb_ = value;
                return this;
            }
            public Builder ClearKeyNumb()
            {
                PrepareBuilder();
                result.hasKeyNumb = false;
                result.keyNumb_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.KeyValPair> KeyList
            {
                get { return PrepareBuilder().key_; }
            }
            public int KeyCount
            {
                get { return result.KeyCount; }
            }
            public global::mm.command.KeyValPair GetKey(int index)
            {
                return result.GetKey(index);
            }
            public Builder SetKey(int index, global::mm.command.KeyValPair value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.key_[index] = value;
                return this;
            }
            public Builder SetKey(int index, global::mm.command.KeyValPair.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.key_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddKey(global::mm.command.KeyValPair value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.key_.Add(value);
                return this;
            }
            public Builder AddKey(global::mm.command.KeyValPair.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.key_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeKey(scg::IEnumerable<global::mm.command.KeyValPair> values)
            {
                PrepareBuilder();
                result.key_.Add(values);
                return this;
            }
            public Builder ClearKey()
            {
                PrepareBuilder();
                result.key_.Clear();
                return this;
            }
        }
        static SyncKey()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class KeyValPair : pb::GeneratedMessage<KeyValPair, KeyValPair.Builder>
    {
        private KeyValPair() { }
        private static readonly KeyValPair defaultInstance = new KeyValPair().MakeReadOnly();
        private static readonly string[] _keyValPairFieldNames = new string[] { "Key", "Val" };
        private static readonly uint[] _keyValPairFieldTags = new uint[] { 8, 16 };
        public static KeyValPair DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override KeyValPair DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override KeyValPair ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_KeyValPair__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<KeyValPair, KeyValPair.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_KeyValPair__FieldAccessorTable; }
        }

        public const int KeyFieldNumber = 1;
        private bool hasKey;
        private int key_;
        public bool HasKey
        {
            get { return hasKey; }
        }
        public int Key
        {
            get { return key_; }
        }

        public const int ValFieldNumber = 2;
        private bool hasVal;
        private int val_;
        public bool HasVal
        {
            get { return hasVal; }
        }
        public int Val
        {
            get { return val_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasKey) return false;
                if (!hasVal) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _keyValPairFieldNames;
            if (hasKey)
            {
                output.WriteInt32(1, field_names[0], Key);
            }
            if (hasVal)
            {
                output.WriteInt32(2, field_names[1], Val);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasKey)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Key);
                }
                if (hasVal)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(2, Val);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static KeyValPair ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyValPair ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyValPair ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyValPair ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyValPair ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyValPair ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static KeyValPair ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static KeyValPair ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static KeyValPair ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyValPair ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private KeyValPair MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(KeyValPair prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<KeyValPair, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(KeyValPair cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private KeyValPair result;

            private KeyValPair PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    KeyValPair original = result;
                    result = new KeyValPair();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override KeyValPair MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.KeyValPair.Descriptor; }
            }

            public override KeyValPair DefaultInstanceForType
            {
                get { return global::mm.command.KeyValPair.DefaultInstance; }
            }

            public override KeyValPair BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is KeyValPair)
                {
                    return MergeFrom((KeyValPair)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(KeyValPair other)
            {
                if (other == global::mm.command.KeyValPair.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasKey)
                {
                    Key = other.Key;
                }
                if (other.HasVal)
                {
                    Val = other.Val;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_keyValPairFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _keyValPairFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasKey = input.ReadInt32(ref result.key_);
                                break;
                            }
                        case 16:
                            {
                                result.hasVal = input.ReadInt32(ref result.val_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasKey
            {
                get { return result.hasKey; }
            }
            public int Key
            {
                get { return result.Key; }
                set { SetKey(value); }
            }
            public Builder SetKey(int value)
            {
                PrepareBuilder();
                result.hasKey = true;
                result.key_ = value;
                return this;
            }
            public Builder ClearKey()
            {
                PrepareBuilder();
                result.hasKey = false;
                result.key_ = 0;
                return this;
            }

            public bool HasVal
            {
                get { return result.hasVal; }
            }
            public int Val
            {
                get { return result.Val; }
                set { SetVal(value); }
            }
            public Builder SetVal(int value)
            {
                PrepareBuilder();
                result.hasVal = true;
                result.val_ = value;
                return this;
            }
            public Builder ClearVal()
            {
                PrepareBuilder();
                result.hasVal = false;
                result.val_ = 0;
                return this;
            }
        }
        static KeyValPair()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class CmdItem : pb::GeneratedMessage<CmdItem, CmdItem.Builder>
    {
        private CmdItem() { }
        private static readonly CmdItem defaultInstance = new CmdItem().MakeReadOnly();
        private static readonly string[] _cmdItemFieldNames = new string[] { "CmdBuf", "CmdId" };
        private static readonly uint[] _cmdItemFieldTags = new uint[] { 18, 8 };
        public static CmdItem DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override CmdItem DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override CmdItem ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_CmdItem__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<CmdItem, CmdItem.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_CmdItem__FieldAccessorTable; }
        }

        public const int CmdIdFieldNumber = 1;
        private bool hasCmdId;
        private int cmdId_;
        public bool HasCmdId
        {
            get { return hasCmdId; }
        }
        public int CmdId
        {
            get { return cmdId_; }
        }

        public const int CmdBufFieldNumber = 2;
        private bool hasCmdBuf;
        private global::mm.command.SKBuiltinBuffer_t cmdBuf_;
        public bool HasCmdBuf
        {
            get { return hasCmdBuf; }
        }
        public global::mm.command.SKBuiltinBuffer_t CmdBuf
        {
            get { return cmdBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasCmdId) return false;
                if (!hasCmdBuf) return false;
                if (!CmdBuf.IsInitialized) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _cmdItemFieldNames;
            if (hasCmdId)
            {
                output.WriteInt32(1, field_names[1], CmdId);
            }
            if (hasCmdBuf)
            {
                output.WriteMessage(2, field_names[0], CmdBuf);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasCmdId)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, CmdId);
                }
                if (hasCmdBuf)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, CmdBuf);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static CmdItem ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CmdItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CmdItem ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CmdItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CmdItem ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CmdItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static CmdItem ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static CmdItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static CmdItem ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CmdItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private CmdItem MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(CmdItem prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<CmdItem, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(CmdItem cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private CmdItem result;

            private CmdItem PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    CmdItem original = result;
                    result = new CmdItem();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override CmdItem MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.CmdItem.Descriptor; }
            }

            public override CmdItem DefaultInstanceForType
            {
                get { return global::mm.command.CmdItem.DefaultInstance; }
            }

            public override CmdItem BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is CmdItem)
                {
                    return MergeFrom((CmdItem)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(CmdItem other)
            {
                if (other == global::mm.command.CmdItem.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasCmdId)
                {
                    CmdId = other.CmdId;
                }
                if (other.HasCmdBuf)
                {
                    MergeCmdBuf(other.CmdBuf);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_cmdItemFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _cmdItemFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasCmdId = input.ReadInt32(ref result.cmdId_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasCmdBuf)
                                {
                                    subBuilder.MergeFrom(CmdBuf);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                CmdBuf = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasCmdId
            {
                get { return result.hasCmdId; }
            }
            public int CmdId
            {
                get { return result.CmdId; }
                set { SetCmdId(value); }
            }
            public Builder SetCmdId(int value)
            {
                PrepareBuilder();
                result.hasCmdId = true;
                result.cmdId_ = value;
                return this;
            }
            public Builder ClearCmdId()
            {
                PrepareBuilder();
                result.hasCmdId = false;
                result.cmdId_ = 0;
                return this;
            }

            public bool HasCmdBuf
            {
                get { return result.hasCmdBuf; }
            }
            public global::mm.command.SKBuiltinBuffer_t CmdBuf
            {
                get { return result.CmdBuf; }
                set { SetCmdBuf(value); }
            }
            public Builder SetCmdBuf(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCmdBuf = true;
                result.cmdBuf_ = value;
                return this;
            }
            public Builder SetCmdBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasCmdBuf = true;
                result.cmdBuf_ = builderForValue.Build();
                return this;
            }
            public Builder MergeCmdBuf(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasCmdBuf &&
                    result.cmdBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.cmdBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.cmdBuf_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.cmdBuf_ = value;
                }
                result.hasCmdBuf = true;
                return this;
            }
            public Builder ClearCmdBuf()
            {
                PrepareBuilder();
                result.hasCmdBuf = false;
                result.cmdBuf_ = null;
                return this;
            }
        }
        static CmdItem()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ParsePacket : pb::GeneratedMessage<ParsePacket, ParsePacket.Builder>
    {
        private ParsePacket() { }
        private static readonly ParsePacket defaultInstance = new ParsePacket().MakeReadOnly();
        private static readonly string[] _parsePacketFieldNames = new string[] { };
        private static readonly uint[] _parsePacketFieldTags = new uint[] { };
        public static ParsePacket DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ParsePacket DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ParsePacket ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ParsePacket__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ParsePacket, ParsePacket.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ParsePacket__FieldAccessorTable; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _parsePacketFieldNames;
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ParsePacket ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ParsePacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ParsePacket ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ParsePacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ParsePacket ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ParsePacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ParsePacket ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ParsePacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ParsePacket ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ParsePacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ParsePacket MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ParsePacket prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ParsePacket, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ParsePacket cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ParsePacket result;

            private ParsePacket PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ParsePacket original = result;
                    result = new ParsePacket();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ParsePacket MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ParsePacket.Descriptor; }
            }

            public override ParsePacket DefaultInstanceForType
            {
                get { return global::mm.command.ParsePacket.DefaultInstance; }
            }

            public override ParsePacket BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ParsePacket)
                {
                    return MergeFrom((ParsePacket)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ParsePacket other)
            {
                if (other == global::mm.command.ParsePacket.DefaultInstance) return this;
                PrepareBuilder();
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_parsePacketFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _parsePacketFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }

        }
        static ParsePacket()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ContactObject : pb::GeneratedMessage<ContactObject, ContactObject.Builder>
    {
        private ContactObject() { }
        private static readonly ContactObject defaultInstance = new ContactObject().MakeReadOnly();
        private static readonly string[] _contactObjectFieldNames = new string[] { "Alias", "BigHeadImgUrl", "City", "Country", "CustomizedInfo", "Distance", "HeadImgVersion", "ImgStatus", "MyBrandList", "NickName", "Province", "Sex", "Signature", "SmallHeadImgUrl", "SnsUserInfo", "UserName", "VerifyContent", "VerifyFlag", "VerifyInfo", "Weibo", "WeiboFlag", "WeiboNickname", "antispamTicket" };
        private static readonly uint[] _contactObjectFieldTags = new uint[] { 98, 178, 34, 170, 202, 50, 152, 64, 194, 18, 26, 56, 42, 186, 162, 10, 90, 72, 82, 106, 120, 114, 210 };
        public static ContactObject DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ContactObject DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ContactObject ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ContactObject__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ContactObject, ContactObject.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ContactObject__FieldAccessorTable; }
        }

        public const int UserNameFieldNumber = 1;
        private bool hasUserName;
        private string userName_ = "";
        public bool HasUserName
        {
            get { return hasUserName; }
        }
        public string UserName
        {
            get { return userName_; }
        }

        public const int NickNameFieldNumber = 2;
        private bool hasNickName;
        private string nickName_ = "";
        public bool HasNickName
        {
            get { return hasNickName; }
        }
        public string NickName
        {
            get { return nickName_; }
        }

        public const int ProvinceFieldNumber = 3;
        private bool hasProvince;
        private string province_ = "";
        public bool HasProvince
        {
            get { return hasProvince; }
        }
        public string Province
        {
            get { return province_; }
        }

        public const int CityFieldNumber = 4;
        private bool hasCity;
        private string city_ = "";
        public bool HasCity
        {
            get { return hasCity; }
        }
        public string City
        {
            get { return city_; }
        }

        public const int SignatureFieldNumber = 5;
        private bool hasSignature;
        private string signature_ = "";
        public bool HasSignature
        {
            get { return hasSignature; }
        }
        public string Signature
        {
            get { return signature_; }
        }

        public const int DistanceFieldNumber = 6;
        private bool hasDistance;
        private string distance_ = "";
        public bool HasDistance
        {
            get { return hasDistance; }
        }
        public string Distance
        {
            get { return distance_; }
        }

        public const int SexFieldNumber = 7;
        private bool hasSex;
        private int sex_;
        public bool HasSex
        {
            get { return hasSex; }
        }
        public int Sex
        {
            get { return sex_; }
        }

        public const int ImgStatusFieldNumber = 8;
        private bool hasImgStatus;
        private int imgStatus_;
        public bool HasImgStatus
        {
            get { return hasImgStatus; }
        }
        public int ImgStatus
        {
            get { return imgStatus_; }
        }

        public const int VerifyFlagFieldNumber = 9;
        private bool hasVerifyFlag;
        private int verifyFlag_;
        public bool HasVerifyFlag
        {
            get { return hasVerifyFlag; }
        }
        public int VerifyFlag
        {
            get { return verifyFlag_; }
        }

        public const int VerifyInfoFieldNumber = 10;
        private bool hasVerifyInfo;
        private string verifyInfo_ = "";
        public bool HasVerifyInfo
        {
            get { return hasVerifyInfo; }
        }
        public string VerifyInfo
        {
            get { return verifyInfo_; }
        }

        public const int VerifyContentFieldNumber = 11;
        private bool hasVerifyContent;
        private string verifyContent_ = "";
        public bool HasVerifyContent
        {
            get { return hasVerifyContent; }
        }
        public string VerifyContent
        {
            get { return verifyContent_; }
        }

        public const int AliasFieldNumber = 12;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias
        {
            get { return hasAlias; }
        }
        public string Alias
        {
            get { return alias_; }
        }

        public const int WeiboFieldNumber = 13;
        private bool hasWeibo;
        private string weibo_ = "";
        public bool HasWeibo
        {
            get { return hasWeibo; }
        }
        public string Weibo
        {
            get { return weibo_; }
        }

        public const int WeiboNicknameFieldNumber = 14;
        private bool hasWeiboNickname;
        private string weiboNickname_ = "";
        public bool HasWeiboNickname
        {
            get { return hasWeiboNickname; }
        }
        public string WeiboNickname
        {
            get { return weiboNickname_; }
        }

        public const int WeiboFlagFieldNumber = 15;
        private bool hasWeiboFlag;
        private int weiboFlag_;
        public bool HasWeiboFlag
        {
            get { return hasWeiboFlag; }
        }
        public int WeiboFlag
        {
            get { return weiboFlag_; }
        }

        public const int HeadImgVersionFieldNumber = 19;
        private bool hasHeadImgVersion;
        private int headImgVersion_;
        public bool HasHeadImgVersion
        {
            get { return hasHeadImgVersion; }
        }
        public int HeadImgVersion
        {
            get { return headImgVersion_; }
        }

        public const int SnsUserInfoFieldNumber = 20;
        private bool hasSnsUserInfo;
        private global::mm.command.SnsUser snsUserInfo_;
        public bool HasSnsUserInfo
        {
            get { return hasSnsUserInfo; }
        }
        public global::mm.command.SnsUser SnsUserInfo
        {
            get { return snsUserInfo_ ?? global::mm.command.SnsUser.DefaultInstance; }
        }

        public const int CountryFieldNumber = 21;
        private bool hasCountry;
        private string country_ = "";
        public bool HasCountry
        {
            get { return hasCountry; }
        }
        public string Country
        {
            get { return country_; }
        }

        public const int BigHeadImgUrlFieldNumber = 22;
        private bool hasBigHeadImgUrl;
        private string bigHeadImgUrl_ = "";
        public bool HasBigHeadImgUrl
        {
            get { return hasBigHeadImgUrl; }
        }
        public string BigHeadImgUrl
        {
            get { return bigHeadImgUrl_; }
        }

        public const int SmallHeadImgUrlFieldNumber = 23;
        private bool hasSmallHeadImgUrl;
        private string smallHeadImgUrl_ = "";
        public bool HasSmallHeadImgUrl
        {
            get { return hasSmallHeadImgUrl; }
        }
        public string SmallHeadImgUrl
        {
            get { return smallHeadImgUrl_; }
        }

        public const int MyBrandListFieldNumber = 24;
        private bool hasMyBrandList;
        private string myBrandList_ = "";
        public bool HasMyBrandList
        {
            get { return hasMyBrandList; }
        }
        public string MyBrandList
        {
            get { return myBrandList_; }
        }

        public const int CustomizedInfoFieldNumber = 25;
        private bool hasCustomizedInfo;
        private global::mm.command.CustomInfo customizedInfo_;
        public bool HasCustomizedInfo
        {
            get { return hasCustomizedInfo; }
        }
        public global::mm.command.CustomInfo CustomizedInfo
        {
            get { return customizedInfo_ ?? global::mm.command.CustomInfo.DefaultInstance; }
        }

        public const int AntispamTicketFieldNumber = 26;
        private bool hasAntispamTicket;
        private string antispamTicket_ = "";
        public bool HasAntispamTicket
        {
            get { return hasAntispamTicket; }
        }
        public string AntispamTicket
        {
            get { return antispamTicket_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasSex) return false;
                if (!hasImgStatus) return false;
                if (HasSnsUserInfo)
                {
                    if (!SnsUserInfo.IsInitialized) return false;
                }
                if (HasCustomizedInfo)
                {
                    if (!CustomizedInfo.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _contactObjectFieldNames;
            if (hasUserName)
            {
                output.WriteString(1, field_names[15], UserName);
            }
            if (hasNickName)
            {
                output.WriteString(2, field_names[9], NickName);
            }
            if (hasProvince)
            {
                output.WriteString(3, field_names[10], Province);
            }
            if (hasCity)
            {
                output.WriteString(4, field_names[2], City);
            }
            if (hasSignature)
            {
                output.WriteString(5, field_names[12], Signature);
            }
            if (hasDistance)
            {
                output.WriteString(6, field_names[5], Distance);
            }
            if (hasSex)
            {
                output.WriteInt32(7, field_names[11], Sex);
            }
            if (hasImgStatus)
            {
                output.WriteInt32(8, field_names[7], ImgStatus);
            }
            if (hasVerifyFlag)
            {
                output.WriteInt32(9, field_names[17], VerifyFlag);
            }
            if (hasVerifyInfo)
            {
                output.WriteString(10, field_names[18], VerifyInfo);
            }
            if (hasVerifyContent)
            {
                output.WriteString(11, field_names[16], VerifyContent);
            }
            if (hasAlias)
            {
                output.WriteString(12, field_names[0], Alias);
            }
            if (hasWeibo)
            {
                output.WriteString(13, field_names[19], Weibo);
            }
            if (hasWeiboNickname)
            {
                output.WriteString(14, field_names[21], WeiboNickname);
            }
            if (hasWeiboFlag)
            {
                output.WriteInt32(15, field_names[20], WeiboFlag);
            }
            if (hasHeadImgVersion)
            {
                output.WriteInt32(19, field_names[6], HeadImgVersion);
            }
            if (hasSnsUserInfo)
            {
                output.WriteMessage(20, field_names[14], SnsUserInfo);
            }
            if (hasCountry)
            {
                output.WriteString(21, field_names[3], Country);
            }
            if (hasBigHeadImgUrl)
            {
                output.WriteString(22, field_names[1], BigHeadImgUrl);
            }
            if (hasSmallHeadImgUrl)
            {
                output.WriteString(23, field_names[13], SmallHeadImgUrl);
            }
            if (hasMyBrandList)
            {
                output.WriteString(24, field_names[8], MyBrandList);
            }
            if (hasCustomizedInfo)
            {
                output.WriteMessage(25, field_names[4], CustomizedInfo);
            }
            if (hasAntispamTicket)
            {
                output.WriteString(26, field_names[22], AntispamTicket);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUserName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, UserName);
                }
                if (hasNickName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, NickName);
                }
                if (hasProvince)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Province);
                }
                if (hasCity)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, City);
                }
                if (hasSignature)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(5, Signature);
                }
                if (hasDistance)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(6, Distance);
                }
                if (hasSex)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, Sex);
                }
                if (hasImgStatus)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(8, ImgStatus);
                }
                if (hasVerifyFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(9, VerifyFlag);
                }
                if (hasVerifyInfo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(10, VerifyInfo);
                }
                if (hasVerifyContent)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(11, VerifyContent);
                }
                if (hasAlias)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(12, Alias);
                }
                if (hasWeibo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(13, Weibo);
                }
                if (hasWeiboNickname)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(14, WeiboNickname);
                }
                if (hasWeiboFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(15, WeiboFlag);
                }
                if (hasHeadImgVersion)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(19, HeadImgVersion);
                }
                if (hasSnsUserInfo)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(20, SnsUserInfo);
                }
                if (hasCountry)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(21, Country);
                }
                if (hasBigHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(22, BigHeadImgUrl);
                }
                if (hasSmallHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(23, SmallHeadImgUrl);
                }
                if (hasMyBrandList)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(24, MyBrandList);
                }
                if (hasCustomizedInfo)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(25, CustomizedInfo);
                }
                if (hasAntispamTicket)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(26, AntispamTicket);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ContactObject ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ContactObject ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ContactObject ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ContactObject ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ContactObject ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ContactObject ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ContactObject ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ContactObject ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ContactObject ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ContactObject ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ContactObject MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ContactObject prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ContactObject, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ContactObject cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ContactObject result;

            private ContactObject PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ContactObject original = result;
                    result = new ContactObject();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ContactObject MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ContactObject.Descriptor; }
            }

            public override ContactObject DefaultInstanceForType
            {
                get { return global::mm.command.ContactObject.DefaultInstance; }
            }

            public override ContactObject BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ContactObject)
                {
                    return MergeFrom((ContactObject)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ContactObject other)
            {
                if (other == global::mm.command.ContactObject.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUserName)
                {
                    UserName = other.UserName;
                }
                if (other.HasNickName)
                {
                    NickName = other.NickName;
                }
                if (other.HasProvince)
                {
                    Province = other.Province;
                }
                if (other.HasCity)
                {
                    City = other.City;
                }
                if (other.HasSignature)
                {
                    Signature = other.Signature;
                }
                if (other.HasDistance)
                {
                    Distance = other.Distance;
                }
                if (other.HasSex)
                {
                    Sex = other.Sex;
                }
                if (other.HasImgStatus)
                {
                    ImgStatus = other.ImgStatus;
                }
                if (other.HasVerifyFlag)
                {
                    VerifyFlag = other.VerifyFlag;
                }
                if (other.HasVerifyInfo)
                {
                    VerifyInfo = other.VerifyInfo;
                }
                if (other.HasVerifyContent)
                {
                    VerifyContent = other.VerifyContent;
                }
                if (other.HasAlias)
                {
                    Alias = other.Alias;
                }
                if (other.HasWeibo)
                {
                    Weibo = other.Weibo;
                }
                if (other.HasWeiboNickname)
                {
                    WeiboNickname = other.WeiboNickname;
                }
                if (other.HasWeiboFlag)
                {
                    WeiboFlag = other.WeiboFlag;
                }
                if (other.HasHeadImgVersion)
                {
                    HeadImgVersion = other.HeadImgVersion;
                }
                if (other.HasSnsUserInfo)
                {
                    MergeSnsUserInfo(other.SnsUserInfo);
                }
                if (other.HasCountry)
                {
                    Country = other.Country;
                }
                if (other.HasBigHeadImgUrl)
                {
                    BigHeadImgUrl = other.BigHeadImgUrl;
                }
                if (other.HasSmallHeadImgUrl)
                {
                    SmallHeadImgUrl = other.SmallHeadImgUrl;
                }
                if (other.HasMyBrandList)
                {
                    MyBrandList = other.MyBrandList;
                }
                if (other.HasCustomizedInfo)
                {
                    MergeCustomizedInfo(other.CustomizedInfo);
                }
                if (other.HasAntispamTicket)
                {
                    AntispamTicket = other.AntispamTicket;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_contactObjectFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _contactObjectFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasUserName = input.ReadString(ref result.userName_);
                                break;
                            }
                        case 18:
                            {
                                result.hasNickName = input.ReadString(ref result.nickName_);
                                break;
                            }
                        case 26:
                            {
                                result.hasProvince = input.ReadString(ref result.province_);
                                break;
                            }
                        case 34:
                            {
                                result.hasCity = input.ReadString(ref result.city_);
                                break;
                            }
                        case 42:
                            {
                                result.hasSignature = input.ReadString(ref result.signature_);
                                break;
                            }
                        case 50:
                            {
                                result.hasDistance = input.ReadString(ref result.distance_);
                                break;
                            }
                        case 56:
                            {
                                result.hasSex = input.ReadInt32(ref result.sex_);
                                break;
                            }
                        case 64:
                            {
                                result.hasImgStatus = input.ReadInt32(ref result.imgStatus_);
                                break;
                            }
                        case 72:
                            {
                                result.hasVerifyFlag = input.ReadInt32(ref result.verifyFlag_);
                                break;
                            }
                        case 82:
                            {
                                result.hasVerifyInfo = input.ReadString(ref result.verifyInfo_);
                                break;
                            }
                        case 90:
                            {
                                result.hasVerifyContent = input.ReadString(ref result.verifyContent_);
                                break;
                            }
                        case 98:
                            {
                                result.hasAlias = input.ReadString(ref result.alias_);
                                break;
                            }
                        case 106:
                            {
                                result.hasWeibo = input.ReadString(ref result.weibo_);
                                break;
                            }
                        case 114:
                            {
                                result.hasWeiboNickname = input.ReadString(ref result.weiboNickname_);
                                break;
                            }
                        case 120:
                            {
                                result.hasWeiboFlag = input.ReadInt32(ref result.weiboFlag_);
                                break;
                            }
                        case 152:
                            {
                                result.hasHeadImgVersion = input.ReadInt32(ref result.headImgVersion_);
                                break;
                            }
                        case 162:
                            {
                                global::mm.command.SnsUser.Builder subBuilder = global::mm.command.SnsUser.CreateBuilder();
                                if (result.hasSnsUserInfo)
                                {
                                    subBuilder.MergeFrom(SnsUserInfo);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                SnsUserInfo = subBuilder.BuildPartial();
                                break;
                            }
                        case 170:
                            {
                                result.hasCountry = input.ReadString(ref result.country_);
                                break;
                            }
                        case 178:
                            {
                                result.hasBigHeadImgUrl = input.ReadString(ref result.bigHeadImgUrl_);
                                break;
                            }
                        case 186:
                            {
                                result.hasSmallHeadImgUrl = input.ReadString(ref result.smallHeadImgUrl_);
                                break;
                            }
                        case 194:
                            {
                                result.hasMyBrandList = input.ReadString(ref result.myBrandList_);
                                break;
                            }
                        case 202:
                            {
                                global::mm.command.CustomInfo.Builder subBuilder = global::mm.command.CustomInfo.CreateBuilder();
                                if (result.hasCustomizedInfo)
                                {
                                    subBuilder.MergeFrom(CustomizedInfo);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                CustomizedInfo = subBuilder.BuildPartial();
                                break;
                            }
                        case 210:
                            {
                                result.hasAntispamTicket = input.ReadString(ref result.antispamTicket_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUserName
            {
                get { return result.hasUserName; }
            }
            public string UserName
            {
                get { return result.UserName; }
                set { SetUserName(value); }
            }
            public Builder SetUserName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = value;
                return this;
            }
            public Builder ClearUserName()
            {
                PrepareBuilder();
                result.hasUserName = false;
                result.userName_ = "";
                return this;
            }

            public bool HasNickName
            {
                get { return result.hasNickName; }
            }
            public string NickName
            {
                get { return result.NickName; }
                set { SetNickName(value); }
            }
            public Builder SetNickName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = value;
                return this;
            }
            public Builder ClearNickName()
            {
                PrepareBuilder();
                result.hasNickName = false;
                result.nickName_ = "";
                return this;
            }

            public bool HasProvince
            {
                get { return result.hasProvince; }
            }
            public string Province
            {
                get { return result.Province; }
                set { SetProvince(value); }
            }
            public Builder SetProvince(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasProvince = true;
                result.province_ = value;
                return this;
            }
            public Builder ClearProvince()
            {
                PrepareBuilder();
                result.hasProvince = false;
                result.province_ = "";
                return this;
            }

            public bool HasCity
            {
                get { return result.hasCity; }
            }
            public string City
            {
                get { return result.City; }
                set { SetCity(value); }
            }
            public Builder SetCity(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCity = true;
                result.city_ = value;
                return this;
            }
            public Builder ClearCity()
            {
                PrepareBuilder();
                result.hasCity = false;
                result.city_ = "";
                return this;
            }

            public bool HasSignature
            {
                get { return result.hasSignature; }
            }
            public string Signature
            {
                get { return result.Signature; }
                set { SetSignature(value); }
            }
            public Builder SetSignature(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSignature = true;
                result.signature_ = value;
                return this;
            }
            public Builder ClearSignature()
            {
                PrepareBuilder();
                result.hasSignature = false;
                result.signature_ = "";
                return this;
            }

            public bool HasDistance
            {
                get { return result.hasDistance; }
            }
            public string Distance
            {
                get { return result.Distance; }
                set { SetDistance(value); }
            }
            public Builder SetDistance(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasDistance = true;
                result.distance_ = value;
                return this;
            }
            public Builder ClearDistance()
            {
                PrepareBuilder();
                result.hasDistance = false;
                result.distance_ = "";
                return this;
            }

            public bool HasSex
            {
                get { return result.hasSex; }
            }
            public int Sex
            {
                get { return result.Sex; }
                set { SetSex(value); }
            }
            public Builder SetSex(int value)
            {
                PrepareBuilder();
                result.hasSex = true;
                result.sex_ = value;
                return this;
            }
            public Builder ClearSex()
            {
                PrepareBuilder();
                result.hasSex = false;
                result.sex_ = 0;
                return this;
            }

            public bool HasImgStatus
            {
                get { return result.hasImgStatus; }
            }
            public int ImgStatus
            {
                get { return result.ImgStatus; }
                set { SetImgStatus(value); }
            }
            public Builder SetImgStatus(int value)
            {
                PrepareBuilder();
                result.hasImgStatus = true;
                result.imgStatus_ = value;
                return this;
            }
            public Builder ClearImgStatus()
            {
                PrepareBuilder();
                result.hasImgStatus = false;
                result.imgStatus_ = 0;
                return this;
            }

            public bool HasVerifyFlag
            {
                get { return result.hasVerifyFlag; }
            }
            public int VerifyFlag
            {
                get { return result.VerifyFlag; }
                set { SetVerifyFlag(value); }
            }
            public Builder SetVerifyFlag(int value)
            {
                PrepareBuilder();
                result.hasVerifyFlag = true;
                result.verifyFlag_ = value;
                return this;
            }
            public Builder ClearVerifyFlag()
            {
                PrepareBuilder();
                result.hasVerifyFlag = false;
                result.verifyFlag_ = 0;
                return this;
            }

            public bool HasVerifyInfo
            {
                get { return result.hasVerifyInfo; }
            }
            public string VerifyInfo
            {
                get { return result.VerifyInfo; }
                set { SetVerifyInfo(value); }
            }
            public Builder SetVerifyInfo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVerifyInfo = true;
                result.verifyInfo_ = value;
                return this;
            }
            public Builder ClearVerifyInfo()
            {
                PrepareBuilder();
                result.hasVerifyInfo = false;
                result.verifyInfo_ = "";
                return this;
            }

            public bool HasVerifyContent
            {
                get { return result.hasVerifyContent; }
            }
            public string VerifyContent
            {
                get { return result.VerifyContent; }
                set { SetVerifyContent(value); }
            }
            public Builder SetVerifyContent(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVerifyContent = true;
                result.verifyContent_ = value;
                return this;
            }
            public Builder ClearVerifyContent()
            {
                PrepareBuilder();
                result.hasVerifyContent = false;
                result.verifyContent_ = "";
                return this;
            }

            public bool HasAlias
            {
                get { return result.hasAlias; }
            }
            public string Alias
            {
                get { return result.Alias; }
                set { SetAlias(value); }
            }
            public Builder SetAlias(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlias = true;
                result.alias_ = value;
                return this;
            }
            public Builder ClearAlias()
            {
                PrepareBuilder();
                result.hasAlias = false;
                result.alias_ = "";
                return this;
            }

            public bool HasWeibo
            {
                get { return result.hasWeibo; }
            }
            public string Weibo
            {
                get { return result.Weibo; }
                set { SetWeibo(value); }
            }
            public Builder SetWeibo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWeibo = true;
                result.weibo_ = value;
                return this;
            }
            public Builder ClearWeibo()
            {
                PrepareBuilder();
                result.hasWeibo = false;
                result.weibo_ = "";
                return this;
            }

            public bool HasWeiboNickname
            {
                get { return result.hasWeiboNickname; }
            }
            public string WeiboNickname
            {
                get { return result.WeiboNickname; }
                set { SetWeiboNickname(value); }
            }
            public Builder SetWeiboNickname(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWeiboNickname = true;
                result.weiboNickname_ = value;
                return this;
            }
            public Builder ClearWeiboNickname()
            {
                PrepareBuilder();
                result.hasWeiboNickname = false;
                result.weiboNickname_ = "";
                return this;
            }

            public bool HasWeiboFlag
            {
                get { return result.hasWeiboFlag; }
            }
            public int WeiboFlag
            {
                get { return result.WeiboFlag; }
                set { SetWeiboFlag(value); }
            }
            public Builder SetWeiboFlag(int value)
            {
                PrepareBuilder();
                result.hasWeiboFlag = true;
                result.weiboFlag_ = value;
                return this;
            }
            public Builder ClearWeiboFlag()
            {
                PrepareBuilder();
                result.hasWeiboFlag = false;
                result.weiboFlag_ = 0;
                return this;
            }

            public bool HasHeadImgVersion
            {
                get { return result.hasHeadImgVersion; }
            }
            public int HeadImgVersion
            {
                get { return result.HeadImgVersion; }
                set { SetHeadImgVersion(value); }
            }
            public Builder SetHeadImgVersion(int value)
            {
                PrepareBuilder();
                result.hasHeadImgVersion = true;
                result.headImgVersion_ = value;
                return this;
            }
            public Builder ClearHeadImgVersion()
            {
                PrepareBuilder();
                result.hasHeadImgVersion = false;
                result.headImgVersion_ = 0;
                return this;
            }

            public bool HasSnsUserInfo
            {
                get { return result.hasSnsUserInfo; }
            }
            public global::mm.command.SnsUser SnsUserInfo
            {
                get { return result.SnsUserInfo; }
                set { SetSnsUserInfo(value); }
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = value;
                return this;
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSnsUserInfo &&
                    result.snsUserInfo_ != global::mm.command.SnsUser.DefaultInstance)
                {
                    result.snsUserInfo_ = global::mm.command.SnsUser.CreateBuilder(result.snsUserInfo_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.snsUserInfo_ = value;
                }
                result.hasSnsUserInfo = true;
                return this;
            }
            public Builder ClearSnsUserInfo()
            {
                PrepareBuilder();
                result.hasSnsUserInfo = false;
                result.snsUserInfo_ = null;
                return this;
            }

            public bool HasCountry
            {
                get { return result.hasCountry; }
            }
            public string Country
            {
                get { return result.Country; }
                set { SetCountry(value); }
            }
            public Builder SetCountry(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCountry = true;
                result.country_ = value;
                return this;
            }
            public Builder ClearCountry()
            {
                PrepareBuilder();
                result.hasCountry = false;
                result.country_ = "";
                return this;
            }

            public bool HasBigHeadImgUrl
            {
                get { return result.hasBigHeadImgUrl; }
            }
            public string BigHeadImgUrl
            {
                get { return result.BigHeadImgUrl; }
                set { SetBigHeadImgUrl(value); }
            }
            public Builder SetBigHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBigHeadImgUrl = true;
                result.bigHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearBigHeadImgUrl()
            {
                PrepareBuilder();
                result.hasBigHeadImgUrl = false;
                result.bigHeadImgUrl_ = "";
                return this;
            }

            public bool HasSmallHeadImgUrl
            {
                get { return result.hasSmallHeadImgUrl; }
            }
            public string SmallHeadImgUrl
            {
                get { return result.SmallHeadImgUrl; }
                set { SetSmallHeadImgUrl(value); }
            }
            public Builder SetSmallHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSmallHeadImgUrl = true;
                result.smallHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearSmallHeadImgUrl()
            {
                PrepareBuilder();
                result.hasSmallHeadImgUrl = false;
                result.smallHeadImgUrl_ = "";
                return this;
            }

            public bool HasMyBrandList
            {
                get { return result.hasMyBrandList; }
            }
            public string MyBrandList
            {
                get { return result.MyBrandList; }
                set { SetMyBrandList(value); }
            }
            public Builder SetMyBrandList(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMyBrandList = true;
                result.myBrandList_ = value;
                return this;
            }
            public Builder ClearMyBrandList()
            {
                PrepareBuilder();
                result.hasMyBrandList = false;
                result.myBrandList_ = "";
                return this;
            }

            public bool HasCustomizedInfo
            {
                get { return result.hasCustomizedInfo; }
            }
            public global::mm.command.CustomInfo CustomizedInfo
            {
                get { return result.CustomizedInfo; }
                set { SetCustomizedInfo(value); }
            }
            public Builder SetCustomizedInfo(global::mm.command.CustomInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCustomizedInfo = true;
                result.customizedInfo_ = value;
                return this;
            }
            public Builder SetCustomizedInfo(global::mm.command.CustomInfo.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasCustomizedInfo = true;
                result.customizedInfo_ = builderForValue.Build();
                return this;
            }
            public Builder MergeCustomizedInfo(global::mm.command.CustomInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasCustomizedInfo &&
                    result.customizedInfo_ != global::mm.command.CustomInfo.DefaultInstance)
                {
                    result.customizedInfo_ = global::mm.command.CustomInfo.CreateBuilder(result.customizedInfo_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.customizedInfo_ = value;
                }
                result.hasCustomizedInfo = true;
                return this;
            }
            public Builder ClearCustomizedInfo()
            {
                PrepareBuilder();
                result.hasCustomizedInfo = false;
                result.customizedInfo_ = null;
                return this;
            }

            public bool HasAntispamTicket
            {
                get { return result.hasAntispamTicket; }
            }
            public string AntispamTicket
            {
                get { return result.AntispamTicket; }
                set { SetAntispamTicket(value); }
            }
            public Builder SetAntispamTicket(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAntispamTicket = true;
                result.antispamTicket_ = value;
                return this;
            }
            public Builder ClearAntispamTicket()
            {
                PrepareBuilder();
                result.hasAntispamTicket = false;
                result.antispamTicket_ = "";
                return this;
            }
        }
        static ContactObject()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SnsUser : pb::GeneratedMessage<SnsUser, SnsUser.Builder>
    {
        private SnsUser() { }
        private static readonly SnsUser defaultInstance = new SnsUser().MakeReadOnly();
        private static readonly string[] _snsUserFieldNames = new string[] { "SnsBGImgID", "SnsBGObjectID", "SnsFlag", "SnsFlagEx" };
        private static readonly uint[] _snsUserFieldTags = new uint[] { 18, 24, 8, 32 };
        public static SnsUser DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override SnsUser DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override SnsUser ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SnsUser__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<SnsUser, SnsUser.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SnsUser__FieldAccessorTable; }
        }

        public const int SnsFlagFieldNumber = 1;
        private bool hasSnsFlag;
        private int snsFlag_;
        public bool HasSnsFlag
        {
            get { return hasSnsFlag; }
        }
        public int SnsFlag
        {
            get { return snsFlag_; }
        }

        public const int SnsBGImgIDFieldNumber = 2;
        private bool hasSnsBGImgID;
        private string snsBGImgID_ = "";
        public bool HasSnsBGImgID
        {
            get { return hasSnsBGImgID; }
        }
        public string SnsBGImgID
        {
            get { return snsBGImgID_; }
        }

        public const int SnsBGObjectIDFieldNumber = 3;
        private bool hasSnsBGObjectID;
        private long snsBGObjectID_;
        public bool HasSnsBGObjectID
        {
            get { return hasSnsBGObjectID; }
        }
        public long SnsBGObjectID
        {
            get { return snsBGObjectID_; }
        }

        public const int SnsFlagExFieldNumber = 4;
        private bool hasSnsFlagEx;
        private int snsFlagEx_;
        public bool HasSnsFlagEx
        {
            get { return hasSnsFlagEx; }
        }
        public int SnsFlagEx
        {
            get { return snsFlagEx_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasSnsFlag) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _snsUserFieldNames;
            if (hasSnsFlag)
            {
                output.WriteInt32(1, field_names[2], SnsFlag);
            }
            if (hasSnsBGImgID)
            {
                output.WriteString(2, field_names[0], SnsBGImgID);
            }
            if (hasSnsBGObjectID)
            {
                output.WriteInt64(3, field_names[1], SnsBGObjectID);
            }
            if (hasSnsFlagEx)
            {
                output.WriteInt32(4, field_names[3], SnsFlagEx);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasSnsFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, SnsFlag);
                }
                if (hasSnsBGImgID)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, SnsBGImgID);
                }
                if (hasSnsBGObjectID)
                {
                    size += pb::CodedOutputStream.ComputeInt64Size(3, SnsBGObjectID);
                }
                if (hasSnsFlagEx)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, SnsFlagEx);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static SnsUser ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SnsUser ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SnsUser ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SnsUser ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SnsUser ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SnsUser ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SnsUser ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SnsUser ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SnsUser ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SnsUser ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SnsUser MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SnsUser prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SnsUser, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(SnsUser cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private SnsUser result;

            private SnsUser PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    SnsUser original = result;
                    result = new SnsUser();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override SnsUser MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.SnsUser.Descriptor; }
            }

            public override SnsUser DefaultInstanceForType
            {
                get { return global::mm.command.SnsUser.DefaultInstance; }
            }

            public override SnsUser BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is SnsUser)
                {
                    return MergeFrom((SnsUser)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(SnsUser other)
            {
                if (other == global::mm.command.SnsUser.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasSnsFlag)
                {
                    SnsFlag = other.SnsFlag;
                }
                if (other.HasSnsBGImgID)
                {
                    SnsBGImgID = other.SnsBGImgID;
                }
                if (other.HasSnsBGObjectID)
                {
                    SnsBGObjectID = other.SnsBGObjectID;
                }
                if (other.HasSnsFlagEx)
                {
                    SnsFlagEx = other.SnsFlagEx;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_snsUserFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _snsUserFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasSnsFlag = input.ReadInt32(ref result.snsFlag_);
                                break;
                            }
                        case 18:
                            {
                                result.hasSnsBGImgID = input.ReadString(ref result.snsBGImgID_);
                                break;
                            }
                        case 24:
                            {
                                result.hasSnsBGObjectID = input.ReadInt64(ref result.snsBGObjectID_);
                                break;
                            }
                        case 32:
                            {
                                result.hasSnsFlagEx = input.ReadInt32(ref result.snsFlagEx_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasSnsFlag
            {
                get { return result.hasSnsFlag; }
            }
            public int SnsFlag
            {
                get { return result.SnsFlag; }
                set { SetSnsFlag(value); }
            }
            public Builder SetSnsFlag(int value)
            {
                PrepareBuilder();
                result.hasSnsFlag = true;
                result.snsFlag_ = value;
                return this;
            }
            public Builder ClearSnsFlag()
            {
                PrepareBuilder();
                result.hasSnsFlag = false;
                result.snsFlag_ = 0;
                return this;
            }

            public bool HasSnsBGImgID
            {
                get { return result.hasSnsBGImgID; }
            }
            public string SnsBGImgID
            {
                get { return result.SnsBGImgID; }
                set { SetSnsBGImgID(value); }
            }
            public Builder SetSnsBGImgID(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSnsBGImgID = true;
                result.snsBGImgID_ = value;
                return this;
            }
            public Builder ClearSnsBGImgID()
            {
                PrepareBuilder();
                result.hasSnsBGImgID = false;
                result.snsBGImgID_ = "";
                return this;
            }

            public bool HasSnsBGObjectID
            {
                get { return result.hasSnsBGObjectID; }
            }
            public long SnsBGObjectID
            {
                get { return result.SnsBGObjectID; }
                set { SetSnsBGObjectID(value); }
            }
            public Builder SetSnsBGObjectID(long value)
            {
                PrepareBuilder();
                result.hasSnsBGObjectID = true;
                result.snsBGObjectID_ = value;
                return this;
            }
            public Builder ClearSnsBGObjectID()
            {
                PrepareBuilder();
                result.hasSnsBGObjectID = false;
                result.snsBGObjectID_ = 0L;
                return this;
            }

            public bool HasSnsFlagEx
            {
                get { return result.hasSnsFlagEx; }
            }
            public int SnsFlagEx
            {
                get { return result.SnsFlagEx; }
                set { SetSnsFlagEx(value); }
            }
            public Builder SetSnsFlagEx(int value)
            {
                PrepareBuilder();
                result.hasSnsFlagEx = true;
                result.snsFlagEx_ = value;
                return this;
            }
            public Builder ClearSnsFlagEx()
            {
                PrepareBuilder();
                result.hasSnsFlagEx = false;
                result.snsFlagEx_ = 0;
                return this;
            }
        }
        static SnsUser()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class CustomInfo : pb::GeneratedMessage<CustomInfo, CustomInfo.Builder>
    {
        private CustomInfo() { }
        private static readonly CustomInfo defaultInstance = new CustomInfo().MakeReadOnly();
        private static readonly string[] _customInfoFieldNames = new string[] { "BrandFlag", "BrandIconURL", "BrandInfo", "ExternalInfo" };
        private static readonly uint[] _customInfoFieldTags = new uint[] { 8, 34, 26, 18 };
        public static CustomInfo DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override CustomInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override CustomInfo ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_CustomInfo__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<CustomInfo, CustomInfo.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_CustomInfo__FieldAccessorTable; }
        }

        public const int BrandFlagFieldNumber = 1;
        private bool hasBrandFlag;
        private int brandFlag_;
        public bool HasBrandFlag
        {
            get { return hasBrandFlag; }
        }
        public int BrandFlag
        {
            get { return brandFlag_; }
        }

        public const int ExternalInfoFieldNumber = 2;
        private bool hasExternalInfo;
        private string externalInfo_ = "";
        public bool HasExternalInfo
        {
            get { return hasExternalInfo; }
        }
        public string ExternalInfo
        {
            get { return externalInfo_; }
        }

        public const int BrandInfoFieldNumber = 3;
        private bool hasBrandInfo;
        private string brandInfo_ = "";
        public bool HasBrandInfo
        {
            get { return hasBrandInfo; }
        }
        public string BrandInfo
        {
            get { return brandInfo_; }
        }

        public const int BrandIconURLFieldNumber = 4;
        private bool hasBrandIconURL;
        private string brandIconURL_ = "";
        public bool HasBrandIconURL
        {
            get { return hasBrandIconURL; }
        }
        public string BrandIconURL
        {
            get { return brandIconURL_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasBrandFlag) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _customInfoFieldNames;
            if (hasBrandFlag)
            {
                output.WriteInt32(1, field_names[0], BrandFlag);
            }
            if (hasExternalInfo)
            {
                output.WriteString(2, field_names[3], ExternalInfo);
            }
            if (hasBrandInfo)
            {
                output.WriteString(3, field_names[2], BrandInfo);
            }
            if (hasBrandIconURL)
            {
                output.WriteString(4, field_names[1], BrandIconURL);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasBrandFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, BrandFlag);
                }
                if (hasExternalInfo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, ExternalInfo);
                }
                if (hasBrandInfo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, BrandInfo);
                }
                if (hasBrandIconURL)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, BrandIconURL);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static CustomInfo ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CustomInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CustomInfo ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CustomInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CustomInfo ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CustomInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static CustomInfo ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static CustomInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static CustomInfo ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CustomInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private CustomInfo MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(CustomInfo prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<CustomInfo, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(CustomInfo cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private CustomInfo result;

            private CustomInfo PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    CustomInfo original = result;
                    result = new CustomInfo();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override CustomInfo MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.CustomInfo.Descriptor; }
            }

            public override CustomInfo DefaultInstanceForType
            {
                get { return global::mm.command.CustomInfo.DefaultInstance; }
            }

            public override CustomInfo BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is CustomInfo)
                {
                    return MergeFrom((CustomInfo)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(CustomInfo other)
            {
                if (other == global::mm.command.CustomInfo.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasBrandFlag)
                {
                    BrandFlag = other.BrandFlag;
                }
                if (other.HasExternalInfo)
                {
                    ExternalInfo = other.ExternalInfo;
                }
                if (other.HasBrandInfo)
                {
                    BrandInfo = other.BrandInfo;
                }
                if (other.HasBrandIconURL)
                {
                    BrandIconURL = other.BrandIconURL;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_customInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _customInfoFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasBrandFlag = input.ReadInt32(ref result.brandFlag_);
                                break;
                            }
                        case 18:
                            {
                                result.hasExternalInfo = input.ReadString(ref result.externalInfo_);
                                break;
                            }
                        case 26:
                            {
                                result.hasBrandInfo = input.ReadString(ref result.brandInfo_);
                                break;
                            }
                        case 34:
                            {
                                result.hasBrandIconURL = input.ReadString(ref result.brandIconURL_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasBrandFlag
            {
                get { return result.hasBrandFlag; }
            }
            public int BrandFlag
            {
                get { return result.BrandFlag; }
                set { SetBrandFlag(value); }
            }
            public Builder SetBrandFlag(int value)
            {
                PrepareBuilder();
                result.hasBrandFlag = true;
                result.brandFlag_ = value;
                return this;
            }
            public Builder ClearBrandFlag()
            {
                PrepareBuilder();
                result.hasBrandFlag = false;
                result.brandFlag_ = 0;
                return this;
            }

            public bool HasExternalInfo
            {
                get { return result.hasExternalInfo; }
            }
            public string ExternalInfo
            {
                get { return result.ExternalInfo; }
                set { SetExternalInfo(value); }
            }
            public Builder SetExternalInfo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasExternalInfo = true;
                result.externalInfo_ = value;
                return this;
            }
            public Builder ClearExternalInfo()
            {
                PrepareBuilder();
                result.hasExternalInfo = false;
                result.externalInfo_ = "";
                return this;
            }

            public bool HasBrandInfo
            {
                get { return result.hasBrandInfo; }
            }
            public string BrandInfo
            {
                get { return result.BrandInfo; }
                set { SetBrandInfo(value); }
            }
            public Builder SetBrandInfo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBrandInfo = true;
                result.brandInfo_ = value;
                return this;
            }
            public Builder ClearBrandInfo()
            {
                PrepareBuilder();
                result.hasBrandInfo = false;
                result.brandInfo_ = "";
                return this;
            }

            public bool HasBrandIconURL
            {
                get { return result.hasBrandIconURL; }
            }
            public string BrandIconURL
            {
                get { return result.BrandIconURL; }
                set { SetBrandIconURL(value); }
            }
            public Builder SetBrandIconURL(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBrandIconURL = true;
                result.brandIconURL_ = value;
                return this;
            }
            public Builder ClearBrandIconURL()
            {
                PrepareBuilder();
                result.hasBrandIconURL = false;
                result.brandIconURL_ = "";
                return this;
            }
        }
        static CustomInfo()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class UserProfile : pb::GeneratedMessage<UserProfile, UserProfile.Builder>
    {
        private UserProfile() { }
        private static readonly UserProfile defaultInstance = new UserProfile().MakeReadOnly();
        private static readonly string[] _userProfileFieldNames = new string[] { "AlbumBGImgID", "AlbumFlag", "AlbumStyle", "Alias", "BindEmail", "BindMobile", "BindUin", "BitFlag", "City", "Country", "DisturbSetting", "Experience", "FBToken", "FBUserID", "FBUserName", "FaceBookFlag", "GmailList", "ImgBuf", "ImgLen", "Level", "LevelHighExp", "LevelLowExp", "NickName", "PersonalCard", "PluginFlag", "PluginSwitch", "Point", "Province", "Sex", "Signature", "Status", "TXNewsCategory", "UserName", "VerifyFlag", "VerifyInfo", "Weibo", "WeiboFlag", "WeiboNickname" };
        private static readonly uint[] _userProfileFieldTags = new uint[] { 282, 272, 264, 218, 42, 50, 32, 8, 98, 306, 122, 160, 298, 248, 258, 240, 210, 74, 64, 168, 184, 176, 26, 112, 128, 200, 152, 90, 80, 106, 56, 288, 18, 136, 146, 194, 232, 226 };
        public static UserProfile DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override UserProfile DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override UserProfile ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_UserProfile__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<UserProfile, UserProfile.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_UserProfile__FieldAccessorTable; }
        }

        public const int BitFlagFieldNumber = 1;
        private bool hasBitFlag;
        private uint bitFlag_;
        public bool HasBitFlag
        {
            get { return hasBitFlag; }
        }
        [global::System.CLSCompliant(false)]
        public uint BitFlag
        {
            get { return bitFlag_; }
        }

        public const int UserNameFieldNumber = 2;
        private bool hasUserName;
        private global::mm.command.SKBuiltinString_t userName_;
        public bool HasUserName
        {
            get { return hasUserName; }
        }
        public global::mm.command.SKBuiltinString_t UserName
        {
            get { return userName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int NickNameFieldNumber = 3;
        private bool hasNickName;
        private global::mm.command.SKBuiltinString_t nickName_;
        public bool HasNickName
        {
            get { return hasNickName; }
        }
        public global::mm.command.SKBuiltinString_t NickName
        {
            get { return nickName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int BindUinFieldNumber = 4;
        private bool hasBindUin;
        private uint bindUin_;
        public bool HasBindUin
        {
            get { return hasBindUin; }
        }
        [global::System.CLSCompliant(false)]
        public uint BindUin
        {
            get { return bindUin_; }
        }

        public const int BindEmailFieldNumber = 5;
        private bool hasBindEmail;
        private global::mm.command.SKBuiltinString_t bindEmail_;
        public bool HasBindEmail
        {
            get { return hasBindEmail; }
        }
        public global::mm.command.SKBuiltinString_t BindEmail
        {
            get { return bindEmail_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int BindMobileFieldNumber = 6;
        private bool hasBindMobile;
        private global::mm.command.SKBuiltinString_t bindMobile_;
        public bool HasBindMobile
        {
            get { return hasBindMobile; }
        }
        public global::mm.command.SKBuiltinString_t BindMobile
        {
            get { return bindMobile_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int StatusFieldNumber = 7;
        private bool hasStatus;
        private int status_;
        public bool HasStatus
        {
            get { return hasStatus; }
        }
        public int Status
        {
            get { return status_; }
        }

        public const int ImgLenFieldNumber = 8;
        private bool hasImgLen;
        private int imgLen_;
        public bool HasImgLen
        {
            get { return hasImgLen; }
        }
        public int ImgLen
        {
            get { return imgLen_; }
        }

        public const int ImgBufFieldNumber = 9;
        private bool hasImgBuf;
        private pb::ByteString imgBuf_ = pb::ByteString.Empty;
        public bool HasImgBuf
        {
            get { return hasImgBuf; }
        }
        public pb::ByteString ImgBuf
        {
            get { return imgBuf_; }
        }

        public const int SexFieldNumber = 10;
        private bool hasSex;
        private int sex_;
        public bool HasSex
        {
            get { return hasSex; }
        }
        public int Sex
        {
            get { return sex_; }
        }

        public const int ProvinceFieldNumber = 11;
        private bool hasProvince;
        private string province_ = "";
        public bool HasProvince
        {
            get { return hasProvince; }
        }
        public string Province
        {
            get { return province_; }
        }

        public const int CityFieldNumber = 12;
        private bool hasCity;
        private string city_ = "";
        public bool HasCity
        {
            get { return hasCity; }
        }
        public string City
        {
            get { return city_; }
        }

        public const int SignatureFieldNumber = 13;
        private bool hasSignature;
        private string signature_ = "";
        public bool HasSignature
        {
            get { return hasSignature; }
        }
        public string Signature
        {
            get { return signature_; }
        }

        public const int PersonalCardFieldNumber = 14;
        private bool hasPersonalCard;
        private int personalCard_;
        public bool HasPersonalCard
        {
            get { return hasPersonalCard; }
        }
        public int PersonalCard
        {
            get { return personalCard_; }
        }

        public const int DisturbSettingFieldNumber = 15;
        private bool hasDisturbSetting;
        private global::mm.command.DisturbSetting disturbSetting_;
        public bool HasDisturbSetting
        {
            get { return hasDisturbSetting; }
        }
        public global::mm.command.DisturbSetting DisturbSetting
        {
            get { return disturbSetting_ ?? global::mm.command.DisturbSetting.DefaultInstance; }
        }

        public const int PluginFlagFieldNumber = 16;
        private bool hasPluginFlag;
        private int pluginFlag_;
        public bool HasPluginFlag
        {
            get { return hasPluginFlag; }
        }
        public int PluginFlag
        {
            get { return pluginFlag_; }
        }

        public const int VerifyFlagFieldNumber = 17;
        private bool hasVerifyFlag;
        private int verifyFlag_;
        public bool HasVerifyFlag
        {
            get { return hasVerifyFlag; }
        }
        public int VerifyFlag
        {
            get { return verifyFlag_; }
        }

        public const int VerifyInfoFieldNumber = 18;
        private bool hasVerifyInfo;
        private string verifyInfo_ = "";
        public bool HasVerifyInfo
        {
            get { return hasVerifyInfo; }
        }
        public string VerifyInfo
        {
            get { return verifyInfo_; }
        }

        public const int PointFieldNumber = 19;
        private bool hasPoint;
        private int point_;
        public bool HasPoint
        {
            get { return hasPoint; }
        }
        public int Point
        {
            get { return point_; }
        }

        public const int ExperienceFieldNumber = 20;
        private bool hasExperience;
        private int experience_;
        public bool HasExperience
        {
            get { return hasExperience; }
        }
        public int Experience
        {
            get { return experience_; }
        }

        public const int LevelFieldNumber = 21;
        private bool hasLevel;
        private int level_;
        public bool HasLevel
        {
            get { return hasLevel; }
        }
        public int Level
        {
            get { return level_; }
        }

        public const int LevelLowExpFieldNumber = 22;
        private bool hasLevelLowExp;
        private int levelLowExp_;
        public bool HasLevelLowExp
        {
            get { return hasLevelLowExp; }
        }
        public int LevelLowExp
        {
            get { return levelLowExp_; }
        }

        public const int LevelHighExpFieldNumber = 23;
        private bool hasLevelHighExp;
        private int levelHighExp_;
        public bool HasLevelHighExp
        {
            get { return hasLevelHighExp; }
        }
        public int LevelHighExp
        {
            get { return levelHighExp_; }
        }

        public const int WeiboFieldNumber = 24;
        private bool hasWeibo;
        private string weibo_ = "";
        public bool HasWeibo
        {
            get { return hasWeibo; }
        }
        public string Weibo
        {
            get { return weibo_; }
        }

        public const int PluginSwitchFieldNumber = 25;
        private bool hasPluginSwitch;
        private int pluginSwitch_;
        public bool HasPluginSwitch
        {
            get { return hasPluginSwitch; }
        }
        public int PluginSwitch
        {
            get { return pluginSwitch_; }
        }

        public const int GmailListFieldNumber = 26;
        private bool hasGmailList;
        private global::mm.command.GMailList gmailList_;
        public bool HasGmailList
        {
            get { return hasGmailList; }
        }
        public global::mm.command.GMailList GmailList
        {
            get { return gmailList_ ?? global::mm.command.GMailList.DefaultInstance; }
        }

        public const int AliasFieldNumber = 27;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias
        {
            get { return hasAlias; }
        }
        public string Alias
        {
            get { return alias_; }
        }

        public const int WeiboNicknameFieldNumber = 28;
        private bool hasWeiboNickname;
        private string weiboNickname_ = "";
        public bool HasWeiboNickname
        {
            get { return hasWeiboNickname; }
        }
        public string WeiboNickname
        {
            get { return weiboNickname_; }
        }

        public const int WeiboFlagFieldNumber = 29;
        private bool hasWeiboFlag;
        private int weiboFlag_;
        public bool HasWeiboFlag
        {
            get { return hasWeiboFlag; }
        }
        public int WeiboFlag
        {
            get { return weiboFlag_; }
        }

        public const int FaceBookFlagFieldNumber = 30;
        private bool hasFaceBookFlag;
        private int faceBookFlag_;
        public bool HasFaceBookFlag
        {
            get { return hasFaceBookFlag; }
        }
        public int FaceBookFlag
        {
            get { return faceBookFlag_; }
        }

        public const int FBUserIDFieldNumber = 31;
        private bool hasFBUserID;
        private long fBUserID_;
        public bool HasFBUserID
        {
            get { return hasFBUserID; }
        }
        public long FBUserID
        {
            get { return fBUserID_; }
        }

        public const int FBUserNameFieldNumber = 32;
        private bool hasFBUserName;
        private string fBUserName_ = "";
        public bool HasFBUserName
        {
            get { return hasFBUserName; }
        }
        public string FBUserName
        {
            get { return fBUserName_; }
        }

        public const int AlbumStyleFieldNumber = 33;
        private bool hasAlbumStyle;
        private int albumStyle_;
        public bool HasAlbumStyle
        {
            get { return hasAlbumStyle; }
        }
        public int AlbumStyle
        {
            get { return albumStyle_; }
        }

        public const int AlbumFlagFieldNumber = 34;
        private bool hasAlbumFlag;
        private int albumFlag_;
        public bool HasAlbumFlag
        {
            get { return hasAlbumFlag; }
        }
        public int AlbumFlag
        {
            get { return albumFlag_; }
        }

        public const int AlbumBGImgIDFieldNumber = 35;
        private bool hasAlbumBGImgID;
        private string albumBGImgID_ = "";
        public bool HasAlbumBGImgID
        {
            get { return hasAlbumBGImgID; }
        }
        public string AlbumBGImgID
        {
            get { return albumBGImgID_; }
        }

        public const int TXNewsCategoryFieldNumber = 36;
        private bool hasTXNewsCategory;
        private int tXNewsCategory_;
        public bool HasTXNewsCategory
        {
            get { return hasTXNewsCategory; }
        }
        public int TXNewsCategory
        {
            get { return tXNewsCategory_; }
        }

        public const int FBTokenFieldNumber = 37;
        private bool hasFBToken;
        private string fBToken_ = "";
        public bool HasFBToken
        {
            get { return hasFBToken; }
        }
        public string FBToken
        {
            get { return fBToken_; }
        }

        public const int CountryFieldNumber = 38;
        private bool hasCountry;
        private string country_ = "";
        public bool HasCountry
        {
            get { return hasCountry; }
        }
        public string Country
        {
            get { return country_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasBitFlag) return false;
                if (!hasUserName) return false;
                if (!hasNickName) return false;
                if (!hasBindUin) return false;
                if (!hasBindEmail) return false;
                if (!hasBindMobile) return false;
                if (!hasStatus) return false;
                if (!hasImgLen) return false;
                if (HasDisturbSetting)
                {
                    if (!DisturbSetting.IsInitialized) return false;
                }
                if (HasGmailList)
                {
                    if (!GmailList.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _userProfileFieldNames;
            if (hasBitFlag)
            {
                output.WriteUInt32(1, field_names[7], BitFlag);
            }
            if (hasUserName)
            {
                output.WriteMessage(2, field_names[32], UserName);
            }
            if (hasNickName)
            {
                output.WriteMessage(3, field_names[22], NickName);
            }
            if (hasBindUin)
            {
                output.WriteUInt32(4, field_names[6], BindUin);
            }
            if (hasBindEmail)
            {
                output.WriteMessage(5, field_names[4], BindEmail);
            }
            if (hasBindMobile)
            {
                output.WriteMessage(6, field_names[5], BindMobile);
            }
            if (hasStatus)
            {
                output.WriteInt32(7, field_names[30], Status);
            }
            if (hasImgLen)
            {
                output.WriteInt32(8, field_names[18], ImgLen);
            }
            if (hasImgBuf)
            {
                output.WriteBytes(9, field_names[17], ImgBuf);
            }
            if (hasSex)
            {
                output.WriteInt32(10, field_names[28], Sex);
            }
            if (hasProvince)
            {
                output.WriteString(11, field_names[27], Province);
            }
            if (hasCity)
            {
                output.WriteString(12, field_names[8], City);
            }
            if (hasSignature)
            {
                output.WriteString(13, field_names[29], Signature);
            }
            if (hasPersonalCard)
            {
                output.WriteInt32(14, field_names[23], PersonalCard);
            }
            if (hasDisturbSetting)
            {
                output.WriteMessage(15, field_names[10], DisturbSetting);
            }
            if (hasPluginFlag)
            {
                output.WriteInt32(16, field_names[24], PluginFlag);
            }
            if (hasVerifyFlag)
            {
                output.WriteInt32(17, field_names[33], VerifyFlag);
            }
            if (hasVerifyInfo)
            {
                output.WriteString(18, field_names[34], VerifyInfo);
            }
            if (hasPoint)
            {
                output.WriteInt32(19, field_names[26], Point);
            }
            if (hasExperience)
            {
                output.WriteInt32(20, field_names[11], Experience);
            }
            if (hasLevel)
            {
                output.WriteInt32(21, field_names[19], Level);
            }
            if (hasLevelLowExp)
            {
                output.WriteInt32(22, field_names[21], LevelLowExp);
            }
            if (hasLevelHighExp)
            {
                output.WriteInt32(23, field_names[20], LevelHighExp);
            }
            if (hasWeibo)
            {
                output.WriteString(24, field_names[35], Weibo);
            }
            if (hasPluginSwitch)
            {
                output.WriteInt32(25, field_names[25], PluginSwitch);
            }
            if (hasGmailList)
            {
                output.WriteMessage(26, field_names[16], GmailList);
            }
            if (hasAlias)
            {
                output.WriteString(27, field_names[3], Alias);
            }
            if (hasWeiboNickname)
            {
                output.WriteString(28, field_names[37], WeiboNickname);
            }
            if (hasWeiboFlag)
            {
                output.WriteInt32(29, field_names[36], WeiboFlag);
            }
            if (hasFaceBookFlag)
            {
                output.WriteInt32(30, field_names[15], FaceBookFlag);
            }
            if (hasFBUserID)
            {
                output.WriteInt64(31, field_names[13], FBUserID);
            }
            if (hasFBUserName)
            {
                output.WriteString(32, field_names[14], FBUserName);
            }
            if (hasAlbumStyle)
            {
                output.WriteInt32(33, field_names[2], AlbumStyle);
            }
            if (hasAlbumFlag)
            {
                output.WriteInt32(34, field_names[1], AlbumFlag);
            }
            if (hasAlbumBGImgID)
            {
                output.WriteString(35, field_names[0], AlbumBGImgID);
            }
            if (hasTXNewsCategory)
            {
                output.WriteInt32(36, field_names[31], TXNewsCategory);
            }
            if (hasFBToken)
            {
                output.WriteString(37, field_names[12], FBToken);
            }
            if (hasCountry)
            {
                output.WriteString(38, field_names[9], Country);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasBitFlag)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(1, BitFlag);
                }
                if (hasUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, UserName);
                }
                if (hasNickName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, NickName);
                }
                if (hasBindUin)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, BindUin);
                }
                if (hasBindEmail)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, BindEmail);
                }
                if (hasBindMobile)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(6, BindMobile);
                }
                if (hasStatus)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, Status);
                }
                if (hasImgLen)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(8, ImgLen);
                }
                if (hasImgBuf)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(9, ImgBuf);
                }
                if (hasSex)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(10, Sex);
                }
                if (hasProvince)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(11, Province);
                }
                if (hasCity)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(12, City);
                }
                if (hasSignature)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(13, Signature);
                }
                if (hasPersonalCard)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(14, PersonalCard);
                }
                if (hasDisturbSetting)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(15, DisturbSetting);
                }
                if (hasPluginFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(16, PluginFlag);
                }
                if (hasVerifyFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(17, VerifyFlag);
                }
                if (hasVerifyInfo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(18, VerifyInfo);
                }
                if (hasPoint)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(19, Point);
                }
                if (hasExperience)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(20, Experience);
                }
                if (hasLevel)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(21, Level);
                }
                if (hasLevelLowExp)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(22, LevelLowExp);
                }
                if (hasLevelHighExp)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(23, LevelHighExp);
                }
                if (hasWeibo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(24, Weibo);
                }
                if (hasPluginSwitch)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(25, PluginSwitch);
                }
                if (hasGmailList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(26, GmailList);
                }
                if (hasAlias)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(27, Alias);
                }
                if (hasWeiboNickname)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(28, WeiboNickname);
                }
                if (hasWeiboFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(29, WeiboFlag);
                }
                if (hasFaceBookFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(30, FaceBookFlag);
                }
                if (hasFBUserID)
                {
                    size += pb::CodedOutputStream.ComputeInt64Size(31, FBUserID);
                }
                if (hasFBUserName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(32, FBUserName);
                }
                if (hasAlbumStyle)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(33, AlbumStyle);
                }
                if (hasAlbumFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(34, AlbumFlag);
                }
                if (hasAlbumBGImgID)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(35, AlbumBGImgID);
                }
                if (hasTXNewsCategory)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(36, TXNewsCategory);
                }
                if (hasFBToken)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(37, FBToken);
                }
                if (hasCountry)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(38, Country);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static UserProfile ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UserProfile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UserProfile ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UserProfile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UserProfile ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UserProfile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static UserProfile ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static UserProfile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static UserProfile ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UserProfile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private UserProfile MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(UserProfile prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<UserProfile, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(UserProfile cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private UserProfile result;

            private UserProfile PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    UserProfile original = result;
                    result = new UserProfile();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override UserProfile MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.UserProfile.Descriptor; }
            }

            public override UserProfile DefaultInstanceForType
            {
                get { return global::mm.command.UserProfile.DefaultInstance; }
            }

            public override UserProfile BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is UserProfile)
                {
                    return MergeFrom((UserProfile)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(UserProfile other)
            {
                if (other == global::mm.command.UserProfile.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasBitFlag)
                {
                    BitFlag = other.BitFlag;
                }
                if (other.HasUserName)
                {
                    MergeUserName(other.UserName);
                }
                if (other.HasNickName)
                {
                    MergeNickName(other.NickName);
                }
                if (other.HasBindUin)
                {
                    BindUin = other.BindUin;
                }
                if (other.HasBindEmail)
                {
                    MergeBindEmail(other.BindEmail);
                }
                if (other.HasBindMobile)
                {
                    MergeBindMobile(other.BindMobile);
                }
                if (other.HasStatus)
                {
                    Status = other.Status;
                }
                if (other.HasImgLen)
                {
                    ImgLen = other.ImgLen;
                }
                if (other.HasImgBuf)
                {
                    ImgBuf = other.ImgBuf;
                }
                if (other.HasSex)
                {
                    Sex = other.Sex;
                }
                if (other.HasProvince)
                {
                    Province = other.Province;
                }
                if (other.HasCity)
                {
                    City = other.City;
                }
                if (other.HasSignature)
                {
                    Signature = other.Signature;
                }
                if (other.HasPersonalCard)
                {
                    PersonalCard = other.PersonalCard;
                }
                if (other.HasDisturbSetting)
                {
                    MergeDisturbSetting(other.DisturbSetting);
                }
                if (other.HasPluginFlag)
                {
                    PluginFlag = other.PluginFlag;
                }
                if (other.HasVerifyFlag)
                {
                    VerifyFlag = other.VerifyFlag;
                }
                if (other.HasVerifyInfo)
                {
                    VerifyInfo = other.VerifyInfo;
                }
                if (other.HasPoint)
                {
                    Point = other.Point;
                }
                if (other.HasExperience)
                {
                    Experience = other.Experience;
                }
                if (other.HasLevel)
                {
                    Level = other.Level;
                }
                if (other.HasLevelLowExp)
                {
                    LevelLowExp = other.LevelLowExp;
                }
                if (other.HasLevelHighExp)
                {
                    LevelHighExp = other.LevelHighExp;
                }
                if (other.HasWeibo)
                {
                    Weibo = other.Weibo;
                }
                if (other.HasPluginSwitch)
                {
                    PluginSwitch = other.PluginSwitch;
                }
                if (other.HasGmailList)
                {
                    MergeGmailList(other.GmailList);
                }
                if (other.HasAlias)
                {
                    Alias = other.Alias;
                }
                if (other.HasWeiboNickname)
                {
                    WeiboNickname = other.WeiboNickname;
                }
                if (other.HasWeiboFlag)
                {
                    WeiboFlag = other.WeiboFlag;
                }
                if (other.HasFaceBookFlag)
                {
                    FaceBookFlag = other.FaceBookFlag;
                }
                if (other.HasFBUserID)
                {
                    FBUserID = other.FBUserID;
                }
                if (other.HasFBUserName)
                {
                    FBUserName = other.FBUserName;
                }
                if (other.HasAlbumStyle)
                {
                    AlbumStyle = other.AlbumStyle;
                }
                if (other.HasAlbumFlag)
                {
                    AlbumFlag = other.AlbumFlag;
                }
                if (other.HasAlbumBGImgID)
                {
                    AlbumBGImgID = other.AlbumBGImgID;
                }
                if (other.HasTXNewsCategory)
                {
                    TXNewsCategory = other.TXNewsCategory;
                }
                if (other.HasFBToken)
                {
                    FBToken = other.FBToken;
                }
                if (other.HasCountry)
                {
                    Country = other.Country;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_userProfileFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _userProfileFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasBitFlag = input.ReadUInt32(ref result.bitFlag_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasUserName)
                                {
                                    subBuilder.MergeFrom(UserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                UserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasNickName)
                                {
                                    subBuilder.MergeFrom(NickName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                NickName = subBuilder.BuildPartial();
                                break;
                            }
                        case 32:
                            {
                                result.hasBindUin = input.ReadUInt32(ref result.bindUin_);
                                break;
                            }
                        case 42:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasBindEmail)
                                {
                                    subBuilder.MergeFrom(BindEmail);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                BindEmail = subBuilder.BuildPartial();
                                break;
                            }
                        case 50:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasBindMobile)
                                {
                                    subBuilder.MergeFrom(BindMobile);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                BindMobile = subBuilder.BuildPartial();
                                break;
                            }
                        case 56:
                            {
                                result.hasStatus = input.ReadInt32(ref result.status_);
                                break;
                            }
                        case 64:
                            {
                                result.hasImgLen = input.ReadInt32(ref result.imgLen_);
                                break;
                            }
                        case 74:
                            {
                                result.hasImgBuf = input.ReadBytes(ref result.imgBuf_);
                                break;
                            }
                        case 80:
                            {
                                result.hasSex = input.ReadInt32(ref result.sex_);
                                break;
                            }
                        case 90:
                            {
                                result.hasProvince = input.ReadString(ref result.province_);
                                break;
                            }
                        case 98:
                            {
                                result.hasCity = input.ReadString(ref result.city_);
                                break;
                            }
                        case 106:
                            {
                                result.hasSignature = input.ReadString(ref result.signature_);
                                break;
                            }
                        case 112:
                            {
                                result.hasPersonalCard = input.ReadInt32(ref result.personalCard_);
                                break;
                            }
                        case 122:
                            {
                                global::mm.command.DisturbSetting.Builder subBuilder = global::mm.command.DisturbSetting.CreateBuilder();
                                if (result.hasDisturbSetting)
                                {
                                    subBuilder.MergeFrom(DisturbSetting);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                DisturbSetting = subBuilder.BuildPartial();
                                break;
                            }
                        case 128:
                            {
                                result.hasPluginFlag = input.ReadInt32(ref result.pluginFlag_);
                                break;
                            }
                        case 136:
                            {
                                result.hasVerifyFlag = input.ReadInt32(ref result.verifyFlag_);
                                break;
                            }
                        case 146:
                            {
                                result.hasVerifyInfo = input.ReadString(ref result.verifyInfo_);
                                break;
                            }
                        case 152:
                            {
                                result.hasPoint = input.ReadInt32(ref result.point_);
                                break;
                            }
                        case 160:
                            {
                                result.hasExperience = input.ReadInt32(ref result.experience_);
                                break;
                            }
                        case 168:
                            {
                                result.hasLevel = input.ReadInt32(ref result.level_);
                                break;
                            }
                        case 176:
                            {
                                result.hasLevelLowExp = input.ReadInt32(ref result.levelLowExp_);
                                break;
                            }
                        case 184:
                            {
                                result.hasLevelHighExp = input.ReadInt32(ref result.levelHighExp_);
                                break;
                            }
                        case 194:
                            {
                                result.hasWeibo = input.ReadString(ref result.weibo_);
                                break;
                            }
                        case 200:
                            {
                                result.hasPluginSwitch = input.ReadInt32(ref result.pluginSwitch_);
                                break;
                            }
                        case 210:
                            {
                                global::mm.command.GMailList.Builder subBuilder = global::mm.command.GMailList.CreateBuilder();
                                if (result.hasGmailList)
                                {
                                    subBuilder.MergeFrom(GmailList);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                GmailList = subBuilder.BuildPartial();
                                break;
                            }
                        case 218:
                            {
                                result.hasAlias = input.ReadString(ref result.alias_);
                                break;
                            }
                        case 226:
                            {
                                result.hasWeiboNickname = input.ReadString(ref result.weiboNickname_);
                                break;
                            }
                        case 232:
                            {
                                result.hasWeiboFlag = input.ReadInt32(ref result.weiboFlag_);
                                break;
                            }
                        case 240:
                            {
                                result.hasFaceBookFlag = input.ReadInt32(ref result.faceBookFlag_);
                                break;
                            }
                        case 248:
                            {
                                result.hasFBUserID = input.ReadInt64(ref result.fBUserID_);
                                break;
                            }
                        case 258:
                            {
                                result.hasFBUserName = input.ReadString(ref result.fBUserName_);
                                break;
                            }
                        case 264:
                            {
                                result.hasAlbumStyle = input.ReadInt32(ref result.albumStyle_);
                                break;
                            }
                        case 272:
                            {
                                result.hasAlbumFlag = input.ReadInt32(ref result.albumFlag_);
                                break;
                            }
                        case 282:
                            {
                                result.hasAlbumBGImgID = input.ReadString(ref result.albumBGImgID_);
                                break;
                            }
                        case 288:
                            {
                                result.hasTXNewsCategory = input.ReadInt32(ref result.tXNewsCategory_);
                                break;
                            }
                        case 298:
                            {
                                result.hasFBToken = input.ReadString(ref result.fBToken_);
                                break;
                            }
                        case 306:
                            {
                                result.hasCountry = input.ReadString(ref result.country_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasBitFlag
            {
                get { return result.hasBitFlag; }
            }
            [global::System.CLSCompliant(false)]
            public uint BitFlag
            {
                get { return result.BitFlag; }
                set { SetBitFlag(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetBitFlag(uint value)
            {
                PrepareBuilder();
                result.hasBitFlag = true;
                result.bitFlag_ = value;
                return this;
            }
            public Builder ClearBitFlag()
            {
                PrepareBuilder();
                result.hasBitFlag = false;
                result.bitFlag_ = 0;
                return this;
            }

            public bool HasUserName
            {
                get { return result.hasUserName; }
            }
            public global::mm.command.SKBuiltinString_t UserName
            {
                get { return result.UserName; }
                set { SetUserName(value); }
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = value;
                return this;
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasUserName &&
                    result.userName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.userName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.userName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.userName_ = value;
                }
                result.hasUserName = true;
                return this;
            }
            public Builder ClearUserName()
            {
                PrepareBuilder();
                result.hasUserName = false;
                result.userName_ = null;
                return this;
            }

            public bool HasNickName
            {
                get { return result.hasNickName; }
            }
            public global::mm.command.SKBuiltinString_t NickName
            {
                get { return result.NickName; }
                set { SetNickName(value); }
            }
            public Builder SetNickName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = value;
                return this;
            }
            public Builder SetNickName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeNickName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNickName &&
                    result.nickName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.nickName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.nickName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.nickName_ = value;
                }
                result.hasNickName = true;
                return this;
            }
            public Builder ClearNickName()
            {
                PrepareBuilder();
                result.hasNickName = false;
                result.nickName_ = null;
                return this;
            }

            public bool HasBindUin
            {
                get { return result.hasBindUin; }
            }
            [global::System.CLSCompliant(false)]
            public uint BindUin
            {
                get { return result.BindUin; }
                set { SetBindUin(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetBindUin(uint value)
            {
                PrepareBuilder();
                result.hasBindUin = true;
                result.bindUin_ = value;
                return this;
            }
            public Builder ClearBindUin()
            {
                PrepareBuilder();
                result.hasBindUin = false;
                result.bindUin_ = 0;
                return this;
            }

            public bool HasBindEmail
            {
                get { return result.hasBindEmail; }
            }
            public global::mm.command.SKBuiltinString_t BindEmail
            {
                get { return result.BindEmail; }
                set { SetBindEmail(value); }
            }
            public Builder SetBindEmail(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBindEmail = true;
                result.bindEmail_ = value;
                return this;
            }
            public Builder SetBindEmail(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasBindEmail = true;
                result.bindEmail_ = builderForValue.Build();
                return this;
            }
            public Builder MergeBindEmail(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasBindEmail &&
                    result.bindEmail_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.bindEmail_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.bindEmail_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.bindEmail_ = value;
                }
                result.hasBindEmail = true;
                return this;
            }
            public Builder ClearBindEmail()
            {
                PrepareBuilder();
                result.hasBindEmail = false;
                result.bindEmail_ = null;
                return this;
            }

            public bool HasBindMobile
            {
                get { return result.hasBindMobile; }
            }
            public global::mm.command.SKBuiltinString_t BindMobile
            {
                get { return result.BindMobile; }
                set { SetBindMobile(value); }
            }
            public Builder SetBindMobile(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBindMobile = true;
                result.bindMobile_ = value;
                return this;
            }
            public Builder SetBindMobile(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasBindMobile = true;
                result.bindMobile_ = builderForValue.Build();
                return this;
            }
            public Builder MergeBindMobile(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasBindMobile &&
                    result.bindMobile_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.bindMobile_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.bindMobile_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.bindMobile_ = value;
                }
                result.hasBindMobile = true;
                return this;
            }
            public Builder ClearBindMobile()
            {
                PrepareBuilder();
                result.hasBindMobile = false;
                result.bindMobile_ = null;
                return this;
            }

            public bool HasStatus
            {
                get { return result.hasStatus; }
            }
            public int Status
            {
                get { return result.Status; }
                set { SetStatus(value); }
            }
            public Builder SetStatus(int value)
            {
                PrepareBuilder();
                result.hasStatus = true;
                result.status_ = value;
                return this;
            }
            public Builder ClearStatus()
            {
                PrepareBuilder();
                result.hasStatus = false;
                result.status_ = 0;
                return this;
            }

            public bool HasImgLen
            {
                get { return result.hasImgLen; }
            }
            public int ImgLen
            {
                get { return result.ImgLen; }
                set { SetImgLen(value); }
            }
            public Builder SetImgLen(int value)
            {
                PrepareBuilder();
                result.hasImgLen = true;
                result.imgLen_ = value;
                return this;
            }
            public Builder ClearImgLen()
            {
                PrepareBuilder();
                result.hasImgLen = false;
                result.imgLen_ = 0;
                return this;
            }

            public bool HasImgBuf
            {
                get { return result.hasImgBuf; }
            }
            public pb::ByteString ImgBuf
            {
                get { return result.ImgBuf; }
                set { SetImgBuf(value); }
            }
            public Builder SetImgBuf(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasImgBuf = true;
                result.imgBuf_ = value;
                return this;
            }
            public Builder ClearImgBuf()
            {
                PrepareBuilder();
                result.hasImgBuf = false;
                result.imgBuf_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasSex
            {
                get { return result.hasSex; }
            }
            public int Sex
            {
                get { return result.Sex; }
                set { SetSex(value); }
            }
            public Builder SetSex(int value)
            {
                PrepareBuilder();
                result.hasSex = true;
                result.sex_ = value;
                return this;
            }
            public Builder ClearSex()
            {
                PrepareBuilder();
                result.hasSex = false;
                result.sex_ = 0;
                return this;
            }

            public bool HasProvince
            {
                get { return result.hasProvince; }
            }
            public string Province
            {
                get { return result.Province; }
                set { SetProvince(value); }
            }
            public Builder SetProvince(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasProvince = true;
                result.province_ = value;
                return this;
            }
            public Builder ClearProvince()
            {
                PrepareBuilder();
                result.hasProvince = false;
                result.province_ = "";
                return this;
            }

            public bool HasCity
            {
                get { return result.hasCity; }
            }
            public string City
            {
                get { return result.City; }
                set { SetCity(value); }
            }
            public Builder SetCity(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCity = true;
                result.city_ = value;
                return this;
            }
            public Builder ClearCity()
            {
                PrepareBuilder();
                result.hasCity = false;
                result.city_ = "";
                return this;
            }

            public bool HasSignature
            {
                get { return result.hasSignature; }
            }
            public string Signature
            {
                get { return result.Signature; }
                set { SetSignature(value); }
            }
            public Builder SetSignature(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSignature = true;
                result.signature_ = value;
                return this;
            }
            public Builder ClearSignature()
            {
                PrepareBuilder();
                result.hasSignature = false;
                result.signature_ = "";
                return this;
            }

            public bool HasPersonalCard
            {
                get { return result.hasPersonalCard; }
            }
            public int PersonalCard
            {
                get { return result.PersonalCard; }
                set { SetPersonalCard(value); }
            }
            public Builder SetPersonalCard(int value)
            {
                PrepareBuilder();
                result.hasPersonalCard = true;
                result.personalCard_ = value;
                return this;
            }
            public Builder ClearPersonalCard()
            {
                PrepareBuilder();
                result.hasPersonalCard = false;
                result.personalCard_ = 0;
                return this;
            }

            public bool HasDisturbSetting
            {
                get { return result.hasDisturbSetting; }
            }
            public global::mm.command.DisturbSetting DisturbSetting
            {
                get { return result.DisturbSetting; }
                set { SetDisturbSetting(value); }
            }
            public Builder SetDisturbSetting(global::mm.command.DisturbSetting value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasDisturbSetting = true;
                result.disturbSetting_ = value;
                return this;
            }
            public Builder SetDisturbSetting(global::mm.command.DisturbSetting.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasDisturbSetting = true;
                result.disturbSetting_ = builderForValue.Build();
                return this;
            }
            public Builder MergeDisturbSetting(global::mm.command.DisturbSetting value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasDisturbSetting &&
                    result.disturbSetting_ != global::mm.command.DisturbSetting.DefaultInstance)
                {
                    result.disturbSetting_ = global::mm.command.DisturbSetting.CreateBuilder(result.disturbSetting_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.disturbSetting_ = value;
                }
                result.hasDisturbSetting = true;
                return this;
            }
            public Builder ClearDisturbSetting()
            {
                PrepareBuilder();
                result.hasDisturbSetting = false;
                result.disturbSetting_ = null;
                return this;
            }

            public bool HasPluginFlag
            {
                get { return result.hasPluginFlag; }
            }
            public int PluginFlag
            {
                get { return result.PluginFlag; }
                set { SetPluginFlag(value); }
            }
            public Builder SetPluginFlag(int value)
            {
                PrepareBuilder();
                result.hasPluginFlag = true;
                result.pluginFlag_ = value;
                return this;
            }
            public Builder ClearPluginFlag()
            {
                PrepareBuilder();
                result.hasPluginFlag = false;
                result.pluginFlag_ = 0;
                return this;
            }

            public bool HasVerifyFlag
            {
                get { return result.hasVerifyFlag; }
            }
            public int VerifyFlag
            {
                get { return result.VerifyFlag; }
                set { SetVerifyFlag(value); }
            }
            public Builder SetVerifyFlag(int value)
            {
                PrepareBuilder();
                result.hasVerifyFlag = true;
                result.verifyFlag_ = value;
                return this;
            }
            public Builder ClearVerifyFlag()
            {
                PrepareBuilder();
                result.hasVerifyFlag = false;
                result.verifyFlag_ = 0;
                return this;
            }

            public bool HasVerifyInfo
            {
                get { return result.hasVerifyInfo; }
            }
            public string VerifyInfo
            {
                get { return result.VerifyInfo; }
                set { SetVerifyInfo(value); }
            }
            public Builder SetVerifyInfo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVerifyInfo = true;
                result.verifyInfo_ = value;
                return this;
            }
            public Builder ClearVerifyInfo()
            {
                PrepareBuilder();
                result.hasVerifyInfo = false;
                result.verifyInfo_ = "";
                return this;
            }

            public bool HasPoint
            {
                get { return result.hasPoint; }
            }
            public int Point
            {
                get { return result.Point; }
                set { SetPoint(value); }
            }
            public Builder SetPoint(int value)
            {
                PrepareBuilder();
                result.hasPoint = true;
                result.point_ = value;
                return this;
            }
            public Builder ClearPoint()
            {
                PrepareBuilder();
                result.hasPoint = false;
                result.point_ = 0;
                return this;
            }

            public bool HasExperience
            {
                get { return result.hasExperience; }
            }
            public int Experience
            {
                get { return result.Experience; }
                set { SetExperience(value); }
            }
            public Builder SetExperience(int value)
            {
                PrepareBuilder();
                result.hasExperience = true;
                result.experience_ = value;
                return this;
            }
            public Builder ClearExperience()
            {
                PrepareBuilder();
                result.hasExperience = false;
                result.experience_ = 0;
                return this;
            }

            public bool HasLevel
            {
                get { return result.hasLevel; }
            }
            public int Level
            {
                get { return result.Level; }
                set { SetLevel(value); }
            }
            public Builder SetLevel(int value)
            {
                PrepareBuilder();
                result.hasLevel = true;
                result.level_ = value;
                return this;
            }
            public Builder ClearLevel()
            {
                PrepareBuilder();
                result.hasLevel = false;
                result.level_ = 0;
                return this;
            }

            public bool HasLevelLowExp
            {
                get { return result.hasLevelLowExp; }
            }
            public int LevelLowExp
            {
                get { return result.LevelLowExp; }
                set { SetLevelLowExp(value); }
            }
            public Builder SetLevelLowExp(int value)
            {
                PrepareBuilder();
                result.hasLevelLowExp = true;
                result.levelLowExp_ = value;
                return this;
            }
            public Builder ClearLevelLowExp()
            {
                PrepareBuilder();
                result.hasLevelLowExp = false;
                result.levelLowExp_ = 0;
                return this;
            }

            public bool HasLevelHighExp
            {
                get { return result.hasLevelHighExp; }
            }
            public int LevelHighExp
            {
                get { return result.LevelHighExp; }
                set { SetLevelHighExp(value); }
            }
            public Builder SetLevelHighExp(int value)
            {
                PrepareBuilder();
                result.hasLevelHighExp = true;
                result.levelHighExp_ = value;
                return this;
            }
            public Builder ClearLevelHighExp()
            {
                PrepareBuilder();
                result.hasLevelHighExp = false;
                result.levelHighExp_ = 0;
                return this;
            }

            public bool HasWeibo
            {
                get { return result.hasWeibo; }
            }
            public string Weibo
            {
                get { return result.Weibo; }
                set { SetWeibo(value); }
            }
            public Builder SetWeibo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWeibo = true;
                result.weibo_ = value;
                return this;
            }
            public Builder ClearWeibo()
            {
                PrepareBuilder();
                result.hasWeibo = false;
                result.weibo_ = "";
                return this;
            }

            public bool HasPluginSwitch
            {
                get { return result.hasPluginSwitch; }
            }
            public int PluginSwitch
            {
                get { return result.PluginSwitch; }
                set { SetPluginSwitch(value); }
            }
            public Builder SetPluginSwitch(int value)
            {
                PrepareBuilder();
                result.hasPluginSwitch = true;
                result.pluginSwitch_ = value;
                return this;
            }
            public Builder ClearPluginSwitch()
            {
                PrepareBuilder();
                result.hasPluginSwitch = false;
                result.pluginSwitch_ = 0;
                return this;
            }

            public bool HasGmailList
            {
                get { return result.hasGmailList; }
            }
            public global::mm.command.GMailList GmailList
            {
                get { return result.GmailList; }
                set { SetGmailList(value); }
            }
            public Builder SetGmailList(global::mm.command.GMailList value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasGmailList = true;
                result.gmailList_ = value;
                return this;
            }
            public Builder SetGmailList(global::mm.command.GMailList.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasGmailList = true;
                result.gmailList_ = builderForValue.Build();
                return this;
            }
            public Builder MergeGmailList(global::mm.command.GMailList value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasGmailList &&
                    result.gmailList_ != global::mm.command.GMailList.DefaultInstance)
                {
                    result.gmailList_ = global::mm.command.GMailList.CreateBuilder(result.gmailList_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.gmailList_ = value;
                }
                result.hasGmailList = true;
                return this;
            }
            public Builder ClearGmailList()
            {
                PrepareBuilder();
                result.hasGmailList = false;
                result.gmailList_ = null;
                return this;
            }

            public bool HasAlias
            {
                get { return result.hasAlias; }
            }
            public string Alias
            {
                get { return result.Alias; }
                set { SetAlias(value); }
            }
            public Builder SetAlias(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlias = true;
                result.alias_ = value;
                return this;
            }
            public Builder ClearAlias()
            {
                PrepareBuilder();
                result.hasAlias = false;
                result.alias_ = "";
                return this;
            }

            public bool HasWeiboNickname
            {
                get { return result.hasWeiboNickname; }
            }
            public string WeiboNickname
            {
                get { return result.WeiboNickname; }
                set { SetWeiboNickname(value); }
            }
            public Builder SetWeiboNickname(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWeiboNickname = true;
                result.weiboNickname_ = value;
                return this;
            }
            public Builder ClearWeiboNickname()
            {
                PrepareBuilder();
                result.hasWeiboNickname = false;
                result.weiboNickname_ = "";
                return this;
            }

            public bool HasWeiboFlag
            {
                get { return result.hasWeiboFlag; }
            }
            public int WeiboFlag
            {
                get { return result.WeiboFlag; }
                set { SetWeiboFlag(value); }
            }
            public Builder SetWeiboFlag(int value)
            {
                PrepareBuilder();
                result.hasWeiboFlag = true;
                result.weiboFlag_ = value;
                return this;
            }
            public Builder ClearWeiboFlag()
            {
                PrepareBuilder();
                result.hasWeiboFlag = false;
                result.weiboFlag_ = 0;
                return this;
            }

            public bool HasFaceBookFlag
            {
                get { return result.hasFaceBookFlag; }
            }
            public int FaceBookFlag
            {
                get { return result.FaceBookFlag; }
                set { SetFaceBookFlag(value); }
            }
            public Builder SetFaceBookFlag(int value)
            {
                PrepareBuilder();
                result.hasFaceBookFlag = true;
                result.faceBookFlag_ = value;
                return this;
            }
            public Builder ClearFaceBookFlag()
            {
                PrepareBuilder();
                result.hasFaceBookFlag = false;
                result.faceBookFlag_ = 0;
                return this;
            }

            public bool HasFBUserID
            {
                get { return result.hasFBUserID; }
            }
            public long FBUserID
            {
                get { return result.FBUserID; }
                set { SetFBUserID(value); }
            }
            public Builder SetFBUserID(long value)
            {
                PrepareBuilder();
                result.hasFBUserID = true;
                result.fBUserID_ = value;
                return this;
            }
            public Builder ClearFBUserID()
            {
                PrepareBuilder();
                result.hasFBUserID = false;
                result.fBUserID_ = 0L;
                return this;
            }

            public bool HasFBUserName
            {
                get { return result.hasFBUserName; }
            }
            public string FBUserName
            {
                get { return result.FBUserName; }
                set { SetFBUserName(value); }
            }
            public Builder SetFBUserName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasFBUserName = true;
                result.fBUserName_ = value;
                return this;
            }
            public Builder ClearFBUserName()
            {
                PrepareBuilder();
                result.hasFBUserName = false;
                result.fBUserName_ = "";
                return this;
            }

            public bool HasAlbumStyle
            {
                get { return result.hasAlbumStyle; }
            }
            public int AlbumStyle
            {
                get { return result.AlbumStyle; }
                set { SetAlbumStyle(value); }
            }
            public Builder SetAlbumStyle(int value)
            {
                PrepareBuilder();
                result.hasAlbumStyle = true;
                result.albumStyle_ = value;
                return this;
            }
            public Builder ClearAlbumStyle()
            {
                PrepareBuilder();
                result.hasAlbumStyle = false;
                result.albumStyle_ = 0;
                return this;
            }

            public bool HasAlbumFlag
            {
                get { return result.hasAlbumFlag; }
            }
            public int AlbumFlag
            {
                get { return result.AlbumFlag; }
                set { SetAlbumFlag(value); }
            }
            public Builder SetAlbumFlag(int value)
            {
                PrepareBuilder();
                result.hasAlbumFlag = true;
                result.albumFlag_ = value;
                return this;
            }
            public Builder ClearAlbumFlag()
            {
                PrepareBuilder();
                result.hasAlbumFlag = false;
                result.albumFlag_ = 0;
                return this;
            }

            public bool HasAlbumBGImgID
            {
                get { return result.hasAlbumBGImgID; }
            }
            public string AlbumBGImgID
            {
                get { return result.AlbumBGImgID; }
                set { SetAlbumBGImgID(value); }
            }
            public Builder SetAlbumBGImgID(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlbumBGImgID = true;
                result.albumBGImgID_ = value;
                return this;
            }
            public Builder ClearAlbumBGImgID()
            {
                PrepareBuilder();
                result.hasAlbumBGImgID = false;
                result.albumBGImgID_ = "";
                return this;
            }

            public bool HasTXNewsCategory
            {
                get { return result.hasTXNewsCategory; }
            }
            public int TXNewsCategory
            {
                get { return result.TXNewsCategory; }
                set { SetTXNewsCategory(value); }
            }
            public Builder SetTXNewsCategory(int value)
            {
                PrepareBuilder();
                result.hasTXNewsCategory = true;
                result.tXNewsCategory_ = value;
                return this;
            }
            public Builder ClearTXNewsCategory()
            {
                PrepareBuilder();
                result.hasTXNewsCategory = false;
                result.tXNewsCategory_ = 0;
                return this;
            }

            public bool HasFBToken
            {
                get { return result.hasFBToken; }
            }
            public string FBToken
            {
                get { return result.FBToken; }
                set { SetFBToken(value); }
            }
            public Builder SetFBToken(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasFBToken = true;
                result.fBToken_ = value;
                return this;
            }
            public Builder ClearFBToken()
            {
                PrepareBuilder();
                result.hasFBToken = false;
                result.fBToken_ = "";
                return this;
            }

            public bool HasCountry
            {
                get { return result.hasCountry; }
            }
            public string Country
            {
                get { return result.Country; }
                set { SetCountry(value); }
            }
            public Builder SetCountry(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCountry = true;
                result.country_ = value;
                return this;
            }
            public Builder ClearCountry()
            {
                PrepareBuilder();
                result.hasCountry = false;
                result.country_ = "";
                return this;
            }
        }
        static UserProfile()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class DisturbSetting : pb::GeneratedMessage<DisturbSetting, DisturbSetting.Builder>
    {
        private DisturbSetting() { }
        private static readonly DisturbSetting defaultInstance = new DisturbSetting().MakeReadOnly();
        private static readonly string[] _disturbSettingFieldNames = new string[] { "AllDaySetting", "AllDayTime", "NightSetting", "NightTime" };
        private static readonly uint[] _disturbSettingFieldTags = new uint[] { 24, 34, 8, 18 };
        public static DisturbSetting DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override DisturbSetting DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override DisturbSetting ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_DisturbSetting__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<DisturbSetting, DisturbSetting.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_DisturbSetting__FieldAccessorTable; }
        }

        public const int NightSettingFieldNumber = 1;
        private bool hasNightSetting;
        private int nightSetting_;
        public bool HasNightSetting
        {
            get { return hasNightSetting; }
        }
        public int NightSetting
        {
            get { return nightSetting_; }
        }

        public const int NightTimeFieldNumber = 2;
        private bool hasNightTime;
        private global::mm.command.TimeSpan nightTime_;
        public bool HasNightTime
        {
            get { return hasNightTime; }
        }
        public global::mm.command.TimeSpan NightTime
        {
            get { return nightTime_ ?? global::mm.command.TimeSpan.DefaultInstance; }
        }

        public const int AllDaySettingFieldNumber = 3;
        private bool hasAllDaySetting;
        private int allDaySetting_;
        public bool HasAllDaySetting
        {
            get { return hasAllDaySetting; }
        }
        public int AllDaySetting
        {
            get { return allDaySetting_; }
        }

        public const int AllDayTimeFieldNumber = 4;
        private bool hasAllDayTime;
        private global::mm.command.TimeSpan allDayTime_;
        public bool HasAllDayTime
        {
            get { return hasAllDayTime; }
        }
        public global::mm.command.TimeSpan AllDayTime
        {
            get { return allDayTime_ ?? global::mm.command.TimeSpan.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasNightSetting) return false;
                if (!hasNightTime) return false;
                if (!hasAllDaySetting) return false;
                if (!hasAllDayTime) return false;
                if (!NightTime.IsInitialized) return false;
                if (!AllDayTime.IsInitialized) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _disturbSettingFieldNames;
            if (hasNightSetting)
            {
                output.WriteInt32(1, field_names[2], NightSetting);
            }
            if (hasNightTime)
            {
                output.WriteMessage(2, field_names[3], NightTime);
            }
            if (hasAllDaySetting)
            {
                output.WriteInt32(3, field_names[0], AllDaySetting);
            }
            if (hasAllDayTime)
            {
                output.WriteMessage(4, field_names[1], AllDayTime);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasNightSetting)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, NightSetting);
                }
                if (hasNightTime)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, NightTime);
                }
                if (hasAllDaySetting)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(3, AllDaySetting);
                }
                if (hasAllDayTime)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, AllDayTime);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static DisturbSetting ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DisturbSetting ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DisturbSetting ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DisturbSetting ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DisturbSetting ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DisturbSetting ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DisturbSetting ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DisturbSetting ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DisturbSetting ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DisturbSetting ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DisturbSetting MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DisturbSetting prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<DisturbSetting, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(DisturbSetting cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private DisturbSetting result;

            private DisturbSetting PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    DisturbSetting original = result;
                    result = new DisturbSetting();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override DisturbSetting MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.DisturbSetting.Descriptor; }
            }

            public override DisturbSetting DefaultInstanceForType
            {
                get { return global::mm.command.DisturbSetting.DefaultInstance; }
            }

            public override DisturbSetting BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is DisturbSetting)
                {
                    return MergeFrom((DisturbSetting)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(DisturbSetting other)
            {
                if (other == global::mm.command.DisturbSetting.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasNightSetting)
                {
                    NightSetting = other.NightSetting;
                }
                if (other.HasNightTime)
                {
                    MergeNightTime(other.NightTime);
                }
                if (other.HasAllDaySetting)
                {
                    AllDaySetting = other.AllDaySetting;
                }
                if (other.HasAllDayTime)
                {
                    MergeAllDayTime(other.AllDayTime);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_disturbSettingFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _disturbSettingFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasNightSetting = input.ReadInt32(ref result.nightSetting_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.TimeSpan.Builder subBuilder = global::mm.command.TimeSpan.CreateBuilder();
                                if (result.hasNightTime)
                                {
                                    subBuilder.MergeFrom(NightTime);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                NightTime = subBuilder.BuildPartial();
                                break;
                            }
                        case 24:
                            {
                                result.hasAllDaySetting = input.ReadInt32(ref result.allDaySetting_);
                                break;
                            }
                        case 34:
                            {
                                global::mm.command.TimeSpan.Builder subBuilder = global::mm.command.TimeSpan.CreateBuilder();
                                if (result.hasAllDayTime)
                                {
                                    subBuilder.MergeFrom(AllDayTime);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                AllDayTime = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasNightSetting
            {
                get { return result.hasNightSetting; }
            }
            public int NightSetting
            {
                get { return result.NightSetting; }
                set { SetNightSetting(value); }
            }
            public Builder SetNightSetting(int value)
            {
                PrepareBuilder();
                result.hasNightSetting = true;
                result.nightSetting_ = value;
                return this;
            }
            public Builder ClearNightSetting()
            {
                PrepareBuilder();
                result.hasNightSetting = false;
                result.nightSetting_ = 0;
                return this;
            }

            public bool HasNightTime
            {
                get { return result.hasNightTime; }
            }
            public global::mm.command.TimeSpan NightTime
            {
                get { return result.NightTime; }
                set { SetNightTime(value); }
            }
            public Builder SetNightTime(global::mm.command.TimeSpan value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNightTime = true;
                result.nightTime_ = value;
                return this;
            }
            public Builder SetNightTime(global::mm.command.TimeSpan.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNightTime = true;
                result.nightTime_ = builderForValue.Build();
                return this;
            }
            public Builder MergeNightTime(global::mm.command.TimeSpan value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNightTime &&
                    result.nightTime_ != global::mm.command.TimeSpan.DefaultInstance)
                {
                    result.nightTime_ = global::mm.command.TimeSpan.CreateBuilder(result.nightTime_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.nightTime_ = value;
                }
                result.hasNightTime = true;
                return this;
            }
            public Builder ClearNightTime()
            {
                PrepareBuilder();
                result.hasNightTime = false;
                result.nightTime_ = null;
                return this;
            }

            public bool HasAllDaySetting
            {
                get { return result.hasAllDaySetting; }
            }
            public int AllDaySetting
            {
                get { return result.AllDaySetting; }
                set { SetAllDaySetting(value); }
            }
            public Builder SetAllDaySetting(int value)
            {
                PrepareBuilder();
                result.hasAllDaySetting = true;
                result.allDaySetting_ = value;
                return this;
            }
            public Builder ClearAllDaySetting()
            {
                PrepareBuilder();
                result.hasAllDaySetting = false;
                result.allDaySetting_ = 0;
                return this;
            }

            public bool HasAllDayTime
            {
                get { return result.hasAllDayTime; }
            }
            public global::mm.command.TimeSpan AllDayTime
            {
                get { return result.AllDayTime; }
                set { SetAllDayTime(value); }
            }
            public Builder SetAllDayTime(global::mm.command.TimeSpan value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAllDayTime = true;
                result.allDayTime_ = value;
                return this;
            }
            public Builder SetAllDayTime(global::mm.command.TimeSpan.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasAllDayTime = true;
                result.allDayTime_ = builderForValue.Build();
                return this;
            }
            public Builder MergeAllDayTime(global::mm.command.TimeSpan value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasAllDayTime &&
                    result.allDayTime_ != global::mm.command.TimeSpan.DefaultInstance)
                {
                    result.allDayTime_ = global::mm.command.TimeSpan.CreateBuilder(result.allDayTime_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.allDayTime_ = value;
                }
                result.hasAllDayTime = true;
                return this;
            }
            public Builder ClearAllDayTime()
            {
                PrepareBuilder();
                result.hasAllDayTime = false;
                result.allDayTime_ = null;
                return this;
            }
        }
        static DisturbSetting()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TimeSpan : pb::GeneratedMessage<TimeSpan, TimeSpan.Builder>
    {
        private TimeSpan() { }
        private static readonly TimeSpan defaultInstance = new TimeSpan().MakeReadOnly();
        private static readonly string[] _timeSpanFieldNames = new string[] { "BeginTime", "EndTime" };
        private static readonly uint[] _timeSpanFieldTags = new uint[] { 8, 16 };
        public static TimeSpan DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override TimeSpan DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override TimeSpan ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_TimeSpan__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<TimeSpan, TimeSpan.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_TimeSpan__FieldAccessorTable; }
        }

        public const int BeginTimeFieldNumber = 1;
        private bool hasBeginTime;
        private int beginTime_;
        public bool HasBeginTime
        {
            get { return hasBeginTime; }
        }
        public int BeginTime
        {
            get { return beginTime_; }
        }

        public const int EndTimeFieldNumber = 2;
        private bool hasEndTime;
        private int endTime_;
        public bool HasEndTime
        {
            get { return hasEndTime; }
        }
        public int EndTime
        {
            get { return endTime_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasBeginTime) return false;
                if (!hasEndTime) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _timeSpanFieldNames;
            if (hasBeginTime)
            {
                output.WriteInt32(1, field_names[0], BeginTime);
            }
            if (hasEndTime)
            {
                output.WriteInt32(2, field_names[1], EndTime);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasBeginTime)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, BeginTime);
                }
                if (hasEndTime)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(2, EndTime);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static TimeSpan ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static TimeSpan ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static TimeSpan ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static TimeSpan ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static TimeSpan ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static TimeSpan ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static TimeSpan ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static TimeSpan ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static TimeSpan ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static TimeSpan ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private TimeSpan MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(TimeSpan prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<TimeSpan, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(TimeSpan cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private TimeSpan result;

            private TimeSpan PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    TimeSpan original = result;
                    result = new TimeSpan();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override TimeSpan MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.TimeSpan.Descriptor; }
            }

            public override TimeSpan DefaultInstanceForType
            {
                get { return global::mm.command.TimeSpan.DefaultInstance; }
            }

            public override TimeSpan BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is TimeSpan)
                {
                    return MergeFrom((TimeSpan)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(TimeSpan other)
            {
                if (other == global::mm.command.TimeSpan.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasBeginTime)
                {
                    BeginTime = other.BeginTime;
                }
                if (other.HasEndTime)
                {
                    EndTime = other.EndTime;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_timeSpanFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _timeSpanFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasBeginTime = input.ReadInt32(ref result.beginTime_);
                                break;
                            }
                        case 16:
                            {
                                result.hasEndTime = input.ReadInt32(ref result.endTime_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasBeginTime
            {
                get { return result.hasBeginTime; }
            }
            public int BeginTime
            {
                get { return result.BeginTime; }
                set { SetBeginTime(value); }
            }
            public Builder SetBeginTime(int value)
            {
                PrepareBuilder();
                result.hasBeginTime = true;
                result.beginTime_ = value;
                return this;
            }
            public Builder ClearBeginTime()
            {
                PrepareBuilder();
                result.hasBeginTime = false;
                result.beginTime_ = 0;
                return this;
            }

            public bool HasEndTime
            {
                get { return result.hasEndTime; }
            }
            public int EndTime
            {
                get { return result.EndTime; }
                set { SetEndTime(value); }
            }
            public Builder SetEndTime(int value)
            {
                PrepareBuilder();
                result.hasEndTime = true;
                result.endTime_ = value;
                return this;
            }
            public Builder ClearEndTime()
            {
                PrepareBuilder();
                result.hasEndTime = false;
                result.endTime_ = 0;
                return this;
            }
        }
        static TimeSpan()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class GMailList : pb::GeneratedMessage<GMailList, GMailList.Builder>
    {
        private GMailList() { }
        private static readonly GMailList defaultInstance = new GMailList().MakeReadOnly();
        private static readonly string[] _gMailListFieldNames = new string[] { "Count", "List" };
        private static readonly uint[] _gMailListFieldTags = new uint[] { 8, 18 };
        public static GMailList DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override GMailList DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override GMailList ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_GMailList__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<GMailList, GMailList.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_GMailList__FieldAccessorTable; }
        }

        public const int CountFieldNumber = 1;
        private bool hasCount;
        private int count_;
        public bool HasCount
        {
            get { return hasCount; }
        }
        public int Count
        {
            get { return count_; }
        }

        public const int ListFieldNumber = 2;
        private pbc::PopsicleList<global::mm.command.GMailObj> list_ = new pbc::PopsicleList<global::mm.command.GMailObj>();
        public scg::IList<global::mm.command.GMailObj> ListList
        {
            get { return list_; }
        }
        public int ListCount
        {
            get { return list_.Count; }
        }
        public global::mm.command.GMailObj GetList(int index)
        {
            return list_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasCount) return false;
                foreach (global::mm.command.GMailObj element in ListList)
                {
                    if (!element.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _gMailListFieldNames;
            if (hasCount)
            {
                output.WriteInt32(1, field_names[0], Count);
            }
            if (list_.Count > 0)
            {
                output.WriteMessageArray(2, field_names[1], list_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
                }
                foreach (global::mm.command.GMailObj element in ListList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static GMailList ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GMailList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GMailList ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GMailList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GMailList ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GMailList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static GMailList ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static GMailList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static GMailList ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GMailList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private GMailList MakeReadOnly()
        {
            list_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(GMailList prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<GMailList, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(GMailList cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private GMailList result;

            private GMailList PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    GMailList original = result;
                    result = new GMailList();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override GMailList MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.GMailList.Descriptor; }
            }

            public override GMailList DefaultInstanceForType
            {
                get { return global::mm.command.GMailList.DefaultInstance; }
            }

            public override GMailList BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is GMailList)
                {
                    return MergeFrom((GMailList)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(GMailList other)
            {
                if (other == global::mm.command.GMailList.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasCount)
                {
                    Count = other.Count;
                }
                if (other.list_.Count != 0)
                {
                    result.list_.Add(other.list_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_gMailListFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _gMailListFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasCount = input.ReadInt32(ref result.count_);
                                break;
                            }
                        case 18:
                            {
                                input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.GMailObj.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasCount
            {
                get { return result.hasCount; }
            }
            public int Count
            {
                get { return result.Count; }
                set { SetCount(value); }
            }
            public Builder SetCount(int value)
            {
                PrepareBuilder();
                result.hasCount = true;
                result.count_ = value;
                return this;
            }
            public Builder ClearCount()
            {
                PrepareBuilder();
                result.hasCount = false;
                result.count_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.GMailObj> ListList
            {
                get { return PrepareBuilder().list_; }
            }
            public int ListCount
            {
                get { return result.ListCount; }
            }
            public global::mm.command.GMailObj GetList(int index)
            {
                return result.GetList(index);
            }
            public Builder SetList(int index, global::mm.command.GMailObj value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_[index] = value;
                return this;
            }
            public Builder SetList(int index, global::mm.command.GMailObj.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddList(global::mm.command.GMailObj value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_.Add(value);
                return this;
            }
            public Builder AddList(global::mm.command.GMailObj.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeList(scg::IEnumerable<global::mm.command.GMailObj> values)
            {
                PrepareBuilder();
                result.list_.Add(values);
                return this;
            }
            public Builder ClearList()
            {
                PrepareBuilder();
                result.list_.Clear();
                return this;
            }
        }
        static GMailList()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class GMailObj : pb::GeneratedMessage<GMailObj, GMailObj.Builder>
    {
        private GMailObj() { }
        private static readonly GMailObj defaultInstance = new GMailObj().MakeReadOnly();
        private static readonly string[] _gMailObjFieldNames = new string[] { "GmailAcct", "GmailErrCode", "GmailSwitch" };
        private static readonly uint[] _gMailObjFieldTags = new uint[] { 10, 24, 16 };
        public static GMailObj DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override GMailObj DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override GMailObj ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_GMailObj__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<GMailObj, GMailObj.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_GMailObj__FieldAccessorTable; }
        }

        public const int GmailAcctFieldNumber = 1;
        private bool hasGmailAcct;
        private string gmailAcct_ = "";
        public bool HasGmailAcct
        {
            get { return hasGmailAcct; }
        }
        public string GmailAcct
        {
            get { return gmailAcct_; }
        }

        public const int GmailSwitchFieldNumber = 2;
        private bool hasGmailSwitch;
        private int gmailSwitch_;
        public bool HasGmailSwitch
        {
            get { return hasGmailSwitch; }
        }
        public int GmailSwitch
        {
            get { return gmailSwitch_; }
        }

        public const int GmailErrCodeFieldNumber = 3;
        private bool hasGmailErrCode;
        private int gmailErrCode_;
        public bool HasGmailErrCode
        {
            get { return hasGmailErrCode; }
        }
        public int GmailErrCode
        {
            get { return gmailErrCode_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasGmailSwitch) return false;
                if (!hasGmailErrCode) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _gMailObjFieldNames;
            if (hasGmailAcct)
            {
                output.WriteString(1, field_names[0], GmailAcct);
            }
            if (hasGmailSwitch)
            {
                output.WriteInt32(2, field_names[2], GmailSwitch);
            }
            if (hasGmailErrCode)
            {
                output.WriteInt32(3, field_names[1], GmailErrCode);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasGmailAcct)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, GmailAcct);
                }
                if (hasGmailSwitch)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(2, GmailSwitch);
                }
                if (hasGmailErrCode)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(3, GmailErrCode);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static GMailObj ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GMailObj ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GMailObj ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GMailObj ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GMailObj ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GMailObj ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static GMailObj ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static GMailObj ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static GMailObj ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GMailObj ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private GMailObj MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(GMailObj prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<GMailObj, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(GMailObj cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private GMailObj result;

            private GMailObj PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    GMailObj original = result;
                    result = new GMailObj();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override GMailObj MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.GMailObj.Descriptor; }
            }

            public override GMailObj DefaultInstanceForType
            {
                get { return global::mm.command.GMailObj.DefaultInstance; }
            }

            public override GMailObj BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is GMailObj)
                {
                    return MergeFrom((GMailObj)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(GMailObj other)
            {
                if (other == global::mm.command.GMailObj.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasGmailAcct)
                {
                    GmailAcct = other.GmailAcct;
                }
                if (other.HasGmailSwitch)
                {
                    GmailSwitch = other.GmailSwitch;
                }
                if (other.HasGmailErrCode)
                {
                    GmailErrCode = other.GmailErrCode;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_gMailObjFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _gMailObjFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasGmailAcct = input.ReadString(ref result.gmailAcct_);
                                break;
                            }
                        case 16:
                            {
                                result.hasGmailSwitch = input.ReadInt32(ref result.gmailSwitch_);
                                break;
                            }
                        case 24:
                            {
                                result.hasGmailErrCode = input.ReadInt32(ref result.gmailErrCode_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasGmailAcct
            {
                get { return result.hasGmailAcct; }
            }
            public string GmailAcct
            {
                get { return result.GmailAcct; }
                set { SetGmailAcct(value); }
            }
            public Builder SetGmailAcct(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasGmailAcct = true;
                result.gmailAcct_ = value;
                return this;
            }
            public Builder ClearGmailAcct()
            {
                PrepareBuilder();
                result.hasGmailAcct = false;
                result.gmailAcct_ = "";
                return this;
            }

            public bool HasGmailSwitch
            {
                get { return result.hasGmailSwitch; }
            }
            public int GmailSwitch
            {
                get { return result.GmailSwitch; }
                set { SetGmailSwitch(value); }
            }
            public Builder SetGmailSwitch(int value)
            {
                PrepareBuilder();
                result.hasGmailSwitch = true;
                result.gmailSwitch_ = value;
                return this;
            }
            public Builder ClearGmailSwitch()
            {
                PrepareBuilder();
                result.hasGmailSwitch = false;
                result.gmailSwitch_ = 0;
                return this;
            }

            public bool HasGmailErrCode
            {
                get { return result.hasGmailErrCode; }
            }
            public int GmailErrCode
            {
                get { return result.GmailErrCode; }
                set { SetGmailErrCode(value); }
            }
            public Builder SetGmailErrCode(int value)
            {
                PrepareBuilder();
                result.hasGmailErrCode = true;
                result.gmailErrCode_ = value;
                return this;
            }
            public Builder ClearGmailErrCode()
            {
                PrepareBuilder();
                result.hasGmailErrCode = false;
                result.gmailErrCode_ = 0;
                return this;
            }
        }
        static GMailObj()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class VerifyUserObj : pb::GeneratedMessage<VerifyUserObj, VerifyUserObj.Builder>
    {
        private VerifyUserObj() { }
        private static readonly VerifyUserObj defaultInstance = new VerifyUserObj().MakeReadOnly();
        private static readonly string[] _verifyUserObjFieldNames = new string[] { "AntiSpamTicket", "ChatRoomUserName", "FriendFlag", "SourceNickName", "SourceUserName", "Value", "VerifyUserTicket" };
        private static readonly uint[] _verifyUserObjFieldTags = new uint[] { 26, 42, 32, 58, 50, 10, 18 };
        public static VerifyUserObj DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override VerifyUserObj DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override VerifyUserObj ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_VerifyUserObj__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<VerifyUserObj, VerifyUserObj.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_VerifyUserObj__FieldAccessorTable; }
        }

        public const int ValueFieldNumber = 1;
        private bool hasValue;
        private string value_ = "";
        public bool HasValue
        {
            get { return hasValue; }
        }
        public string Value
        {
            get { return value_; }
        }

        public const int VerifyUserTicketFieldNumber = 2;
        private bool hasVerifyUserTicket;
        private string verifyUserTicket_ = "";
        public bool HasVerifyUserTicket
        {
            get { return hasVerifyUserTicket; }
        }
        public string VerifyUserTicket
        {
            get { return verifyUserTicket_; }
        }

        public const int AntiSpamTicketFieldNumber = 3;
        private bool hasAntiSpamTicket;
        private string antiSpamTicket_ = "";
        public bool HasAntiSpamTicket
        {
            get { return hasAntiSpamTicket; }
        }
        public string AntiSpamTicket
        {
            get { return antiSpamTicket_; }
        }

        public const int FriendFlagFieldNumber = 4;
        private bool hasFriendFlag;
        private uint friendFlag_;
        public bool HasFriendFlag
        {
            get { return hasFriendFlag; }
        }
        [global::System.CLSCompliant(false)]
        public uint FriendFlag
        {
            get { return friendFlag_; }
        }

        public const int ChatRoomUserNameFieldNumber = 5;
        private bool hasChatRoomUserName;
        private string chatRoomUserName_ = "";
        public bool HasChatRoomUserName
        {
            get { return hasChatRoomUserName; }
        }
        public string ChatRoomUserName
        {
            get { return chatRoomUserName_; }
        }

        public const int SourceUserNameFieldNumber = 6;
        private bool hasSourceUserName;
        private string sourceUserName_ = "";
        public bool HasSourceUserName
        {
            get { return hasSourceUserName; }
        }
        public string SourceUserName
        {
            get { return sourceUserName_; }
        }

        public const int SourceNickNameFieldNumber = 7;
        private bool hasSourceNickName;
        private string sourceNickName_ = "";
        public bool HasSourceNickName
        {
            get { return hasSourceNickName; }
        }
        public string SourceNickName
        {
            get { return sourceNickName_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasValue) return false;
                if (!hasVerifyUserTicket) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _verifyUserObjFieldNames;
            if (hasValue)
            {
                output.WriteString(1, field_names[5], Value);
            }
            if (hasVerifyUserTicket)
            {
                output.WriteString(2, field_names[6], VerifyUserTicket);
            }
            if (hasAntiSpamTicket)
            {
                output.WriteString(3, field_names[0], AntiSpamTicket);
            }
            if (hasFriendFlag)
            {
                output.WriteUInt32(4, field_names[2], FriendFlag);
            }
            if (hasChatRoomUserName)
            {
                output.WriteString(5, field_names[1], ChatRoomUserName);
            }
            if (hasSourceUserName)
            {
                output.WriteString(6, field_names[4], SourceUserName);
            }
            if (hasSourceNickName)
            {
                output.WriteString(7, field_names[3], SourceNickName);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasValue)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Value);
                }
                if (hasVerifyUserTicket)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, VerifyUserTicket);
                }
                if (hasAntiSpamTicket)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, AntiSpamTicket);
                }
                if (hasFriendFlag)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, FriendFlag);
                }
                if (hasChatRoomUserName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(5, ChatRoomUserName);
                }
                if (hasSourceUserName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(6, SourceUserName);
                }
                if (hasSourceNickName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(7, SourceNickName);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static VerifyUserObj ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static VerifyUserObj ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static VerifyUserObj ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static VerifyUserObj ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static VerifyUserObj ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static VerifyUserObj ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static VerifyUserObj ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static VerifyUserObj ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static VerifyUserObj ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static VerifyUserObj ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private VerifyUserObj MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(VerifyUserObj prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<VerifyUserObj, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(VerifyUserObj cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private VerifyUserObj result;

            private VerifyUserObj PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    VerifyUserObj original = result;
                    result = new VerifyUserObj();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override VerifyUserObj MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.VerifyUserObj.Descriptor; }
            }

            public override VerifyUserObj DefaultInstanceForType
            {
                get { return global::mm.command.VerifyUserObj.DefaultInstance; }
            }

            public override VerifyUserObj BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is VerifyUserObj)
                {
                    return MergeFrom((VerifyUserObj)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(VerifyUserObj other)
            {
                if (other == global::mm.command.VerifyUserObj.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasValue)
                {
                    Value = other.Value;
                }
                if (other.HasVerifyUserTicket)
                {
                    VerifyUserTicket = other.VerifyUserTicket;
                }
                if (other.HasAntiSpamTicket)
                {
                    AntiSpamTicket = other.AntiSpamTicket;
                }
                if (other.HasFriendFlag)
                {
                    FriendFlag = other.FriendFlag;
                }
                if (other.HasChatRoomUserName)
                {
                    ChatRoomUserName = other.ChatRoomUserName;
                }
                if (other.HasSourceUserName)
                {
                    SourceUserName = other.SourceUserName;
                }
                if (other.HasSourceNickName)
                {
                    SourceNickName = other.SourceNickName;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_verifyUserObjFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _verifyUserObjFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasValue = input.ReadString(ref result.value_);
                                break;
                            }
                        case 18:
                            {
                                result.hasVerifyUserTicket = input.ReadString(ref result.verifyUserTicket_);
                                break;
                            }
                        case 26:
                            {
                                result.hasAntiSpamTicket = input.ReadString(ref result.antiSpamTicket_);
                                break;
                            }
                        case 32:
                            {
                                result.hasFriendFlag = input.ReadUInt32(ref result.friendFlag_);
                                break;
                            }
                        case 42:
                            {
                                result.hasChatRoomUserName = input.ReadString(ref result.chatRoomUserName_);
                                break;
                            }
                        case 50:
                            {
                                result.hasSourceUserName = input.ReadString(ref result.sourceUserName_);
                                break;
                            }
                        case 58:
                            {
                                result.hasSourceNickName = input.ReadString(ref result.sourceNickName_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasValue
            {
                get { return result.hasValue; }
            }
            public string Value
            {
                get { return result.Value; }
                set { SetValue(value); }
            }
            public Builder SetValue(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
            }
            public Builder ClearValue()
            {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = "";
                return this;
            }

            public bool HasVerifyUserTicket
            {
                get { return result.hasVerifyUserTicket; }
            }
            public string VerifyUserTicket
            {
                get { return result.VerifyUserTicket; }
                set { SetVerifyUserTicket(value); }
            }
            public Builder SetVerifyUserTicket(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVerifyUserTicket = true;
                result.verifyUserTicket_ = value;
                return this;
            }
            public Builder ClearVerifyUserTicket()
            {
                PrepareBuilder();
                result.hasVerifyUserTicket = false;
                result.verifyUserTicket_ = "";
                return this;
            }

            public bool HasAntiSpamTicket
            {
                get { return result.hasAntiSpamTicket; }
            }
            public string AntiSpamTicket
            {
                get { return result.AntiSpamTicket; }
                set { SetAntiSpamTicket(value); }
            }
            public Builder SetAntiSpamTicket(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAntiSpamTicket = true;
                result.antiSpamTicket_ = value;
                return this;
            }
            public Builder ClearAntiSpamTicket()
            {
                PrepareBuilder();
                result.hasAntiSpamTicket = false;
                result.antiSpamTicket_ = "";
                return this;
            }

            public bool HasFriendFlag
            {
                get { return result.hasFriendFlag; }
            }
            [global::System.CLSCompliant(false)]
            public uint FriendFlag
            {
                get { return result.FriendFlag; }
                set { SetFriendFlag(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetFriendFlag(uint value)
            {
                PrepareBuilder();
                result.hasFriendFlag = true;
                result.friendFlag_ = value;
                return this;
            }
            public Builder ClearFriendFlag()
            {
                PrepareBuilder();
                result.hasFriendFlag = false;
                result.friendFlag_ = 0;
                return this;
            }

            public bool HasChatRoomUserName
            {
                get { return result.hasChatRoomUserName; }
            }
            public string ChatRoomUserName
            {
                get { return result.ChatRoomUserName; }
                set { SetChatRoomUserName(value); }
            }
            public Builder SetChatRoomUserName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasChatRoomUserName = true;
                result.chatRoomUserName_ = value;
                return this;
            }
            public Builder ClearChatRoomUserName()
            {
                PrepareBuilder();
                result.hasChatRoomUserName = false;
                result.chatRoomUserName_ = "";
                return this;
            }

            public bool HasSourceUserName
            {
                get { return result.hasSourceUserName; }
            }
            public string SourceUserName
            {
                get { return result.SourceUserName; }
                set { SetSourceUserName(value); }
            }
            public Builder SetSourceUserName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSourceUserName = true;
                result.sourceUserName_ = value;
                return this;
            }
            public Builder ClearSourceUserName()
            {
                PrepareBuilder();
                result.hasSourceUserName = false;
                result.sourceUserName_ = "";
                return this;
            }

            public bool HasSourceNickName
            {
                get { return result.hasSourceNickName; }
            }
            public string SourceNickName
            {
                get { return result.SourceNickName; }
                set { SetSourceNickName(value); }
            }
            public Builder SetSourceNickName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSourceNickName = true;
                result.sourceNickName_ = value;
                return this;
            }
            public Builder ClearSourceNickName()
            {
                PrepareBuilder();
                result.hasSourceNickName = false;
                result.sourceNickName_ = "";
                return this;
            }
        }
        static VerifyUserObj()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class CustomizedInfoObj : pb::GeneratedMessage<CustomizedInfoObj, CustomizedInfoObj.Builder>
    {
        private CustomizedInfoObj() { }
        private static readonly CustomizedInfoObj defaultInstance = new CustomizedInfoObj().MakeReadOnly();
        private static readonly string[] _customizedInfoObjFieldNames = new string[] { "BrandFlag", "BrandIconURL", "BrandInfo", "ExternalInfo" };
        private static readonly uint[] _customizedInfoObjFieldTags = new uint[] { 8, 34, 26, 18 };
        public static CustomizedInfoObj DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override CustomizedInfoObj DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override CustomizedInfoObj ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_CustomizedInfoObj__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<CustomizedInfoObj, CustomizedInfoObj.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_CustomizedInfoObj__FieldAccessorTable; }
        }

        public const int BrandFlagFieldNumber = 1;
        private bool hasBrandFlag;
        private int brandFlag_;
        public bool HasBrandFlag
        {
            get { return hasBrandFlag; }
        }
        public int BrandFlag
        {
            get { return brandFlag_; }
        }

        public const int ExternalInfoFieldNumber = 2;
        private bool hasExternalInfo;
        private string externalInfo_ = "";
        public bool HasExternalInfo
        {
            get { return hasExternalInfo; }
        }
        public string ExternalInfo
        {
            get { return externalInfo_; }
        }

        public const int BrandInfoFieldNumber = 3;
        private bool hasBrandInfo;
        private string brandInfo_ = "";
        public bool HasBrandInfo
        {
            get { return hasBrandInfo; }
        }
        public string BrandInfo
        {
            get { return brandInfo_; }
        }

        public const int BrandIconURLFieldNumber = 4;
        private bool hasBrandIconURL;
        private string brandIconURL_ = "";
        public bool HasBrandIconURL
        {
            get { return hasBrandIconURL; }
        }
        public string BrandIconURL
        {
            get { return brandIconURL_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasBrandFlag) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _customizedInfoObjFieldNames;
            if (hasBrandFlag)
            {
                output.WriteInt32(1, field_names[0], BrandFlag);
            }
            if (hasExternalInfo)
            {
                output.WriteString(2, field_names[3], ExternalInfo);
            }
            if (hasBrandInfo)
            {
                output.WriteString(3, field_names[2], BrandInfo);
            }
            if (hasBrandIconURL)
            {
                output.WriteString(4, field_names[1], BrandIconURL);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasBrandFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, BrandFlag);
                }
                if (hasExternalInfo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, ExternalInfo);
                }
                if (hasBrandInfo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, BrandInfo);
                }
                if (hasBrandIconURL)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, BrandIconURL);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static CustomizedInfoObj ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CustomizedInfoObj ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CustomizedInfoObj ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CustomizedInfoObj ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CustomizedInfoObj ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CustomizedInfoObj ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static CustomizedInfoObj ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static CustomizedInfoObj ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static CustomizedInfoObj ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CustomizedInfoObj ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private CustomizedInfoObj MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(CustomizedInfoObj prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<CustomizedInfoObj, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(CustomizedInfoObj cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private CustomizedInfoObj result;

            private CustomizedInfoObj PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    CustomizedInfoObj original = result;
                    result = new CustomizedInfoObj();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override CustomizedInfoObj MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.CustomizedInfoObj.Descriptor; }
            }

            public override CustomizedInfoObj DefaultInstanceForType
            {
                get { return global::mm.command.CustomizedInfoObj.DefaultInstance; }
            }

            public override CustomizedInfoObj BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is CustomizedInfoObj)
                {
                    return MergeFrom((CustomizedInfoObj)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(CustomizedInfoObj other)
            {
                if (other == global::mm.command.CustomizedInfoObj.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasBrandFlag)
                {
                    BrandFlag = other.BrandFlag;
                }
                if (other.HasExternalInfo)
                {
                    ExternalInfo = other.ExternalInfo;
                }
                if (other.HasBrandInfo)
                {
                    BrandInfo = other.BrandInfo;
                }
                if (other.HasBrandIconURL)
                {
                    BrandIconURL = other.BrandIconURL;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_customizedInfoObjFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _customizedInfoObjFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasBrandFlag = input.ReadInt32(ref result.brandFlag_);
                                break;
                            }
                        case 18:
                            {
                                result.hasExternalInfo = input.ReadString(ref result.externalInfo_);
                                break;
                            }
                        case 26:
                            {
                                result.hasBrandInfo = input.ReadString(ref result.brandInfo_);
                                break;
                            }
                        case 34:
                            {
                                result.hasBrandIconURL = input.ReadString(ref result.brandIconURL_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasBrandFlag
            {
                get { return result.hasBrandFlag; }
            }
            public int BrandFlag
            {
                get { return result.BrandFlag; }
                set { SetBrandFlag(value); }
            }
            public Builder SetBrandFlag(int value)
            {
                PrepareBuilder();
                result.hasBrandFlag = true;
                result.brandFlag_ = value;
                return this;
            }
            public Builder ClearBrandFlag()
            {
                PrepareBuilder();
                result.hasBrandFlag = false;
                result.brandFlag_ = 0;
                return this;
            }

            public bool HasExternalInfo
            {
                get { return result.hasExternalInfo; }
            }
            public string ExternalInfo
            {
                get { return result.ExternalInfo; }
                set { SetExternalInfo(value); }
            }
            public Builder SetExternalInfo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasExternalInfo = true;
                result.externalInfo_ = value;
                return this;
            }
            public Builder ClearExternalInfo()
            {
                PrepareBuilder();
                result.hasExternalInfo = false;
                result.externalInfo_ = "";
                return this;
            }

            public bool HasBrandInfo
            {
                get { return result.hasBrandInfo; }
            }
            public string BrandInfo
            {
                get { return result.BrandInfo; }
                set { SetBrandInfo(value); }
            }
            public Builder SetBrandInfo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBrandInfo = true;
                result.brandInfo_ = value;
                return this;
            }
            public Builder ClearBrandInfo()
            {
                PrepareBuilder();
                result.hasBrandInfo = false;
                result.brandInfo_ = "";
                return this;
            }

            public bool HasBrandIconURL
            {
                get { return result.hasBrandIconURL; }
            }
            public string BrandIconURL
            {
                get { return result.BrandIconURL; }
                set { SetBrandIconURL(value); }
            }
            public Builder SetBrandIconURL(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBrandIconURL = true;
                result.brandIconURL_ = value;
                return this;
            }
            public Builder ClearBrandIconURL()
            {
                PrepareBuilder();
                result.hasBrandIconURL = false;
                result.brandIconURL_ = "";
                return this;
            }
        }
        static CustomizedInfoObj()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SearchContact : pb::GeneratedMessage<SearchContact, SearchContact.Builder>
    {
        private SearchContact() { }
        private static readonly SearchContact defaultInstance = new SearchContact().MakeReadOnly();
        private static readonly string[] _searchContactFieldNames = new string[] { "AlbumBGImgID", "AlbumFlag", "AlbumStyle", "Alias", "BigHeadImgUrl", "City", "Country", "CustomizedInfo", "ImgBuf", "MyBrandList", "NickName", "PYInitial", "PersonalCard", "Province", "QuanPin", "Sex", "Signature", "SmallHeadImgUrl", "SnsUserInfo", "UserName", "VerifyFlag", "VerifyInfo", "Weibo", "WeiboFlag", "WeiboNickname" };
        private static readonly uint[] _searchContactFieldTags = new uint[] { 154, 144, 136, 114, 194, 66, 170, 186, 50, 178, 18, 26, 80, 58, 34, 40, 74, 202, 162, 10, 88, 98, 106, 128, 122 };
        public static SearchContact DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override SearchContact DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override SearchContact ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SearchContact__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<SearchContact, SearchContact.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SearchContact__FieldAccessorTable; }
        }

        public const int UserNameFieldNumber = 1;
        private bool hasUserName;
        private global::mm.command.SKBuiltinString_t userName_;
        public bool HasUserName
        {
            get { return hasUserName; }
        }
        public global::mm.command.SKBuiltinString_t UserName
        {
            get { return userName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int NickNameFieldNumber = 2;
        private bool hasNickName;
        private global::mm.command.SKBuiltinString_t nickName_;
        public bool HasNickName
        {
            get { return hasNickName; }
        }
        public global::mm.command.SKBuiltinString_t NickName
        {
            get { return nickName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int PYInitialFieldNumber = 3;
        private bool hasPYInitial;
        private global::mm.command.SKBuiltinString_t pYInitial_;
        public bool HasPYInitial
        {
            get { return hasPYInitial; }
        }
        public global::mm.command.SKBuiltinString_t PYInitial
        {
            get { return pYInitial_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int QuanPinFieldNumber = 4;
        private bool hasQuanPin;
        private global::mm.command.SKBuiltinString_t quanPin_;
        public bool HasQuanPin
        {
            get { return hasQuanPin; }
        }
        public global::mm.command.SKBuiltinString_t QuanPin
        {
            get { return quanPin_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int SexFieldNumber = 5;
        private bool hasSex;
        private int sex_;
        public bool HasSex
        {
            get { return hasSex; }
        }
        public int Sex
        {
            get { return sex_; }
        }

        public const int ImgBufFieldNumber = 6;
        private bool hasImgBuf;
        private global::mm.command.SKBuiltinBuffer_t imgBuf_;
        public bool HasImgBuf
        {
            get { return hasImgBuf; }
        }
        public global::mm.command.SKBuiltinBuffer_t ImgBuf
        {
            get { return imgBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int ProvinceFieldNumber = 7;
        private bool hasProvince;
        private string province_ = "";
        public bool HasProvince
        {
            get { return hasProvince; }
        }
        public string Province
        {
            get { return province_; }
        }

        public const int CityFieldNumber = 8;
        private bool hasCity;
        private string city_ = "";
        public bool HasCity
        {
            get { return hasCity; }
        }
        public string City
        {
            get { return city_; }
        }

        public const int SignatureFieldNumber = 9;
        private bool hasSignature;
        private string signature_ = "";
        public bool HasSignature
        {
            get { return hasSignature; }
        }
        public string Signature
        {
            get { return signature_; }
        }

        public const int PersonalCardFieldNumber = 10;
        private bool hasPersonalCard;
        private int personalCard_;
        public bool HasPersonalCard
        {
            get { return hasPersonalCard; }
        }
        public int PersonalCard
        {
            get { return personalCard_; }
        }

        public const int VerifyFlagFieldNumber = 11;
        private bool hasVerifyFlag;
        private int verifyFlag_;
        public bool HasVerifyFlag
        {
            get { return hasVerifyFlag; }
        }
        public int VerifyFlag
        {
            get { return verifyFlag_; }
        }

        public const int VerifyInfoFieldNumber = 12;
        private bool hasVerifyInfo;
        private string verifyInfo_ = "";
        public bool HasVerifyInfo
        {
            get { return hasVerifyInfo; }
        }
        public string VerifyInfo
        {
            get { return verifyInfo_; }
        }

        public const int WeiboFieldNumber = 13;
        private bool hasWeibo;
        private string weibo_ = "";
        public bool HasWeibo
        {
            get { return hasWeibo; }
        }
        public string Weibo
        {
            get { return weibo_; }
        }

        public const int AliasFieldNumber = 14;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias
        {
            get { return hasAlias; }
        }
        public string Alias
        {
            get { return alias_; }
        }

        public const int WeiboNicknameFieldNumber = 15;
        private bool hasWeiboNickname;
        private string weiboNickname_ = "";
        public bool HasWeiboNickname
        {
            get { return hasWeiboNickname; }
        }
        public string WeiboNickname
        {
            get { return weiboNickname_; }
        }

        public const int WeiboFlagFieldNumber = 16;
        private bool hasWeiboFlag;
        private int weiboFlag_;
        public bool HasWeiboFlag
        {
            get { return hasWeiboFlag; }
        }
        public int WeiboFlag
        {
            get { return weiboFlag_; }
        }

        public const int AlbumStyleFieldNumber = 17;
        private bool hasAlbumStyle;
        private int albumStyle_;
        public bool HasAlbumStyle
        {
            get { return hasAlbumStyle; }
        }
        public int AlbumStyle
        {
            get { return albumStyle_; }
        }

        public const int AlbumFlagFieldNumber = 18;
        private bool hasAlbumFlag;
        private int albumFlag_;
        public bool HasAlbumFlag
        {
            get { return hasAlbumFlag; }
        }
        public int AlbumFlag
        {
            get { return albumFlag_; }
        }

        public const int AlbumBGImgIDFieldNumber = 19;
        private bool hasAlbumBGImgID;
        private string albumBGImgID_ = "";
        public bool HasAlbumBGImgID
        {
            get { return hasAlbumBGImgID; }
        }
        public string AlbumBGImgID
        {
            get { return albumBGImgID_; }
        }

        public const int SnsUserInfoFieldNumber = 20;
        private bool hasSnsUserInfo;
        private global::mm.command.SnsUser snsUserInfo_;
        public bool HasSnsUserInfo
        {
            get { return hasSnsUserInfo; }
        }
        public global::mm.command.SnsUser SnsUserInfo
        {
            get { return snsUserInfo_ ?? global::mm.command.SnsUser.DefaultInstance; }
        }

        public const int CountryFieldNumber = 21;
        private bool hasCountry;
        private string country_ = "";
        public bool HasCountry
        {
            get { return hasCountry; }
        }
        public string Country
        {
            get { return country_; }
        }

        public const int MyBrandListFieldNumber = 22;
        private bool hasMyBrandList;
        private string myBrandList_ = "";
        public bool HasMyBrandList
        {
            get { return hasMyBrandList; }
        }
        public string MyBrandList
        {
            get { return myBrandList_; }
        }

        public const int CustomizedInfoFieldNumber = 23;
        private bool hasCustomizedInfo;
        private global::mm.command.CustomizedInfoObj customizedInfo_;
        public bool HasCustomizedInfo
        {
            get { return hasCustomizedInfo; }
        }
        public global::mm.command.CustomizedInfoObj CustomizedInfo
        {
            get { return customizedInfo_ ?? global::mm.command.CustomizedInfoObj.DefaultInstance; }
        }

        public const int BigHeadImgUrlFieldNumber = 24;
        private bool hasBigHeadImgUrl;
        private string bigHeadImgUrl_ = "";
        public bool HasBigHeadImgUrl
        {
            get { return hasBigHeadImgUrl; }
        }
        public string BigHeadImgUrl
        {
            get { return bigHeadImgUrl_; }
        }

        public const int SmallHeadImgUrlFieldNumber = 25;
        private bool hasSmallHeadImgUrl;
        private string smallHeadImgUrl_ = "";
        public bool HasSmallHeadImgUrl
        {
            get { return hasSmallHeadImgUrl; }
        }
        public string SmallHeadImgUrl
        {
            get { return smallHeadImgUrl_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasUserName) return false;
                if (!hasNickName) return false;
                if (!hasPYInitial) return false;
                if (!hasQuanPin) return false;
                if (!hasSex) return false;
                if (!hasImgBuf) return false;
                if (!ImgBuf.IsInitialized) return false;
                if (HasSnsUserInfo)
                {
                    if (!SnsUserInfo.IsInitialized) return false;
                }
                if (HasCustomizedInfo)
                {
                    if (!CustomizedInfo.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _searchContactFieldNames;
            if (hasUserName)
            {
                output.WriteMessage(1, field_names[19], UserName);
            }
            if (hasNickName)
            {
                output.WriteMessage(2, field_names[10], NickName);
            }
            if (hasPYInitial)
            {
                output.WriteMessage(3, field_names[11], PYInitial);
            }
            if (hasQuanPin)
            {
                output.WriteMessage(4, field_names[14], QuanPin);
            }
            if (hasSex)
            {
                output.WriteInt32(5, field_names[15], Sex);
            }
            if (hasImgBuf)
            {
                output.WriteMessage(6, field_names[8], ImgBuf);
            }
            if (hasProvince)
            {
                output.WriteString(7, field_names[13], Province);
            }
            if (hasCity)
            {
                output.WriteString(8, field_names[5], City);
            }
            if (hasSignature)
            {
                output.WriteString(9, field_names[16], Signature);
            }
            if (hasPersonalCard)
            {
                output.WriteInt32(10, field_names[12], PersonalCard);
            }
            if (hasVerifyFlag)
            {
                output.WriteInt32(11, field_names[20], VerifyFlag);
            }
            if (hasVerifyInfo)
            {
                output.WriteString(12, field_names[21], VerifyInfo);
            }
            if (hasWeibo)
            {
                output.WriteString(13, field_names[22], Weibo);
            }
            if (hasAlias)
            {
                output.WriteString(14, field_names[3], Alias);
            }
            if (hasWeiboNickname)
            {
                output.WriteString(15, field_names[24], WeiboNickname);
            }
            if (hasWeiboFlag)
            {
                output.WriteInt32(16, field_names[23], WeiboFlag);
            }
            if (hasAlbumStyle)
            {
                output.WriteInt32(17, field_names[2], AlbumStyle);
            }
            if (hasAlbumFlag)
            {
                output.WriteInt32(18, field_names[1], AlbumFlag);
            }
            if (hasAlbumBGImgID)
            {
                output.WriteString(19, field_names[0], AlbumBGImgID);
            }
            if (hasSnsUserInfo)
            {
                output.WriteMessage(20, field_names[18], SnsUserInfo);
            }
            if (hasCountry)
            {
                output.WriteString(21, field_names[6], Country);
            }
            if (hasMyBrandList)
            {
                output.WriteString(22, field_names[9], MyBrandList);
            }
            if (hasCustomizedInfo)
            {
                output.WriteMessage(23, field_names[7], CustomizedInfo);
            }
            if (hasBigHeadImgUrl)
            {
                output.WriteString(24, field_names[4], BigHeadImgUrl);
            }
            if (hasSmallHeadImgUrl)
            {
                output.WriteString(25, field_names[17], SmallHeadImgUrl);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, UserName);
                }
                if (hasNickName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, NickName);
                }
                if (hasPYInitial)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, PYInitial);
                }
                if (hasQuanPin)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, QuanPin);
                }
                if (hasSex)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(5, Sex);
                }
                if (hasImgBuf)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(6, ImgBuf);
                }
                if (hasProvince)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(7, Province);
                }
                if (hasCity)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(8, City);
                }
                if (hasSignature)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(9, Signature);
                }
                if (hasPersonalCard)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(10, PersonalCard);
                }
                if (hasVerifyFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(11, VerifyFlag);
                }
                if (hasVerifyInfo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(12, VerifyInfo);
                }
                if (hasWeibo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(13, Weibo);
                }
                if (hasAlias)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(14, Alias);
                }
                if (hasWeiboNickname)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(15, WeiboNickname);
                }
                if (hasWeiboFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(16, WeiboFlag);
                }
                if (hasAlbumStyle)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(17, AlbumStyle);
                }
                if (hasAlbumFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(18, AlbumFlag);
                }
                if (hasAlbumBGImgID)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(19, AlbumBGImgID);
                }
                if (hasSnsUserInfo)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(20, SnsUserInfo);
                }
                if (hasCountry)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(21, Country);
                }
                if (hasMyBrandList)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(22, MyBrandList);
                }
                if (hasCustomizedInfo)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(23, CustomizedInfo);
                }
                if (hasBigHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(24, BigHeadImgUrl);
                }
                if (hasSmallHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(25, SmallHeadImgUrl);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static SearchContact ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SearchContact ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SearchContact ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SearchContact ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SearchContact ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SearchContact ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SearchContact ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SearchContact ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SearchContact ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SearchContact ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SearchContact MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SearchContact prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SearchContact, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(SearchContact cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private SearchContact result;

            private SearchContact PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    SearchContact original = result;
                    result = new SearchContact();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override SearchContact MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.SearchContact.Descriptor; }
            }

            public override SearchContact DefaultInstanceForType
            {
                get { return global::mm.command.SearchContact.DefaultInstance; }
            }

            public override SearchContact BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is SearchContact)
                {
                    return MergeFrom((SearchContact)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(SearchContact other)
            {
                if (other == global::mm.command.SearchContact.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUserName)
                {
                    MergeUserName(other.UserName);
                }
                if (other.HasNickName)
                {
                    MergeNickName(other.NickName);
                }
                if (other.HasPYInitial)
                {
                    MergePYInitial(other.PYInitial);
                }
                if (other.HasQuanPin)
                {
                    MergeQuanPin(other.QuanPin);
                }
                if (other.HasSex)
                {
                    Sex = other.Sex;
                }
                if (other.HasImgBuf)
                {
                    MergeImgBuf(other.ImgBuf);
                }
                if (other.HasProvince)
                {
                    Province = other.Province;
                }
                if (other.HasCity)
                {
                    City = other.City;
                }
                if (other.HasSignature)
                {
                    Signature = other.Signature;
                }
                if (other.HasPersonalCard)
                {
                    PersonalCard = other.PersonalCard;
                }
                if (other.HasVerifyFlag)
                {
                    VerifyFlag = other.VerifyFlag;
                }
                if (other.HasVerifyInfo)
                {
                    VerifyInfo = other.VerifyInfo;
                }
                if (other.HasWeibo)
                {
                    Weibo = other.Weibo;
                }
                if (other.HasAlias)
                {
                    Alias = other.Alias;
                }
                if (other.HasWeiboNickname)
                {
                    WeiboNickname = other.WeiboNickname;
                }
                if (other.HasWeiboFlag)
                {
                    WeiboFlag = other.WeiboFlag;
                }
                if (other.HasAlbumStyle)
                {
                    AlbumStyle = other.AlbumStyle;
                }
                if (other.HasAlbumFlag)
                {
                    AlbumFlag = other.AlbumFlag;
                }
                if (other.HasAlbumBGImgID)
                {
                    AlbumBGImgID = other.AlbumBGImgID;
                }
                if (other.HasSnsUserInfo)
                {
                    MergeSnsUserInfo(other.SnsUserInfo);
                }
                if (other.HasCountry)
                {
                    Country = other.Country;
                }
                if (other.HasMyBrandList)
                {
                    MyBrandList = other.MyBrandList;
                }
                if (other.HasCustomizedInfo)
                {
                    MergeCustomizedInfo(other.CustomizedInfo);
                }
                if (other.HasBigHeadImgUrl)
                {
                    BigHeadImgUrl = other.BigHeadImgUrl;
                }
                if (other.HasSmallHeadImgUrl)
                {
                    SmallHeadImgUrl = other.SmallHeadImgUrl;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_searchContactFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _searchContactFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasUserName)
                                {
                                    subBuilder.MergeFrom(UserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                UserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasNickName)
                                {
                                    subBuilder.MergeFrom(NickName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                NickName = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasPYInitial)
                                {
                                    subBuilder.MergeFrom(PYInitial);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                PYInitial = subBuilder.BuildPartial();
                                break;
                            }
                        case 34:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasQuanPin)
                                {
                                    subBuilder.MergeFrom(QuanPin);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                QuanPin = subBuilder.BuildPartial();
                                break;
                            }
                        case 40:
                            {
                                result.hasSex = input.ReadInt32(ref result.sex_);
                                break;
                            }
                        case 50:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasImgBuf)
                                {
                                    subBuilder.MergeFrom(ImgBuf);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ImgBuf = subBuilder.BuildPartial();
                                break;
                            }
                        case 58:
                            {
                                result.hasProvince = input.ReadString(ref result.province_);
                                break;
                            }
                        case 66:
                            {
                                result.hasCity = input.ReadString(ref result.city_);
                                break;
                            }
                        case 74:
                            {
                                result.hasSignature = input.ReadString(ref result.signature_);
                                break;
                            }
                        case 80:
                            {
                                result.hasPersonalCard = input.ReadInt32(ref result.personalCard_);
                                break;
                            }
                        case 88:
                            {
                                result.hasVerifyFlag = input.ReadInt32(ref result.verifyFlag_);
                                break;
                            }
                        case 98:
                            {
                                result.hasVerifyInfo = input.ReadString(ref result.verifyInfo_);
                                break;
                            }
                        case 106:
                            {
                                result.hasWeibo = input.ReadString(ref result.weibo_);
                                break;
                            }
                        case 114:
                            {
                                result.hasAlias = input.ReadString(ref result.alias_);
                                break;
                            }
                        case 122:
                            {
                                result.hasWeiboNickname = input.ReadString(ref result.weiboNickname_);
                                break;
                            }
                        case 128:
                            {
                                result.hasWeiboFlag = input.ReadInt32(ref result.weiboFlag_);
                                break;
                            }
                        case 136:
                            {
                                result.hasAlbumStyle = input.ReadInt32(ref result.albumStyle_);
                                break;
                            }
                        case 144:
                            {
                                result.hasAlbumFlag = input.ReadInt32(ref result.albumFlag_);
                                break;
                            }
                        case 154:
                            {
                                result.hasAlbumBGImgID = input.ReadString(ref result.albumBGImgID_);
                                break;
                            }
                        case 162:
                            {
                                global::mm.command.SnsUser.Builder subBuilder = global::mm.command.SnsUser.CreateBuilder();
                                if (result.hasSnsUserInfo)
                                {
                                    subBuilder.MergeFrom(SnsUserInfo);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                SnsUserInfo = subBuilder.BuildPartial();
                                break;
                            }
                        case 170:
                            {
                                result.hasCountry = input.ReadString(ref result.country_);
                                break;
                            }
                        case 178:
                            {
                                result.hasMyBrandList = input.ReadString(ref result.myBrandList_);
                                break;
                            }
                        case 186:
                            {
                                global::mm.command.CustomizedInfoObj.Builder subBuilder = global::mm.command.CustomizedInfoObj.CreateBuilder();
                                if (result.hasCustomizedInfo)
                                {
                                    subBuilder.MergeFrom(CustomizedInfo);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                CustomizedInfo = subBuilder.BuildPartial();
                                break;
                            }
                        case 194:
                            {
                                result.hasBigHeadImgUrl = input.ReadString(ref result.bigHeadImgUrl_);
                                break;
                            }
                        case 202:
                            {
                                result.hasSmallHeadImgUrl = input.ReadString(ref result.smallHeadImgUrl_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUserName
            {
                get { return result.hasUserName; }
            }
            public global::mm.command.SKBuiltinString_t UserName
            {
                get { return result.UserName; }
                set { SetUserName(value); }
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = value;
                return this;
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasUserName &&
                    result.userName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.userName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.userName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.userName_ = value;
                }
                result.hasUserName = true;
                return this;
            }
            public Builder ClearUserName()
            {
                PrepareBuilder();
                result.hasUserName = false;
                result.userName_ = null;
                return this;
            }

            public bool HasNickName
            {
                get { return result.hasNickName; }
            }
            public global::mm.command.SKBuiltinString_t NickName
            {
                get { return result.NickName; }
                set { SetNickName(value); }
            }
            public Builder SetNickName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = value;
                return this;
            }
            public Builder SetNickName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeNickName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNickName &&
                    result.nickName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.nickName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.nickName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.nickName_ = value;
                }
                result.hasNickName = true;
                return this;
            }
            public Builder ClearNickName()
            {
                PrepareBuilder();
                result.hasNickName = false;
                result.nickName_ = null;
                return this;
            }

            public bool HasPYInitial
            {
                get { return result.hasPYInitial; }
            }
            public global::mm.command.SKBuiltinString_t PYInitial
            {
                get { return result.PYInitial; }
                set { SetPYInitial(value); }
            }
            public Builder SetPYInitial(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPYInitial = true;
                result.pYInitial_ = value;
                return this;
            }
            public Builder SetPYInitial(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasPYInitial = true;
                result.pYInitial_ = builderForValue.Build();
                return this;
            }
            public Builder MergePYInitial(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasPYInitial &&
                    result.pYInitial_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.pYInitial_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.pYInitial_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.pYInitial_ = value;
                }
                result.hasPYInitial = true;
                return this;
            }
            public Builder ClearPYInitial()
            {
                PrepareBuilder();
                result.hasPYInitial = false;
                result.pYInitial_ = null;
                return this;
            }

            public bool HasQuanPin
            {
                get { return result.hasQuanPin; }
            }
            public global::mm.command.SKBuiltinString_t QuanPin
            {
                get { return result.QuanPin; }
                set { SetQuanPin(value); }
            }
            public Builder SetQuanPin(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasQuanPin = true;
                result.quanPin_ = value;
                return this;
            }
            public Builder SetQuanPin(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasQuanPin = true;
                result.quanPin_ = builderForValue.Build();
                return this;
            }
            public Builder MergeQuanPin(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasQuanPin &&
                    result.quanPin_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.quanPin_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.quanPin_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.quanPin_ = value;
                }
                result.hasQuanPin = true;
                return this;
            }
            public Builder ClearQuanPin()
            {
                PrepareBuilder();
                result.hasQuanPin = false;
                result.quanPin_ = null;
                return this;
            }

            public bool HasSex
            {
                get { return result.hasSex; }
            }
            public int Sex
            {
                get { return result.Sex; }
                set { SetSex(value); }
            }
            public Builder SetSex(int value)
            {
                PrepareBuilder();
                result.hasSex = true;
                result.sex_ = value;
                return this;
            }
            public Builder ClearSex()
            {
                PrepareBuilder();
                result.hasSex = false;
                result.sex_ = 0;
                return this;
            }

            public bool HasImgBuf
            {
                get { return result.hasImgBuf; }
            }
            public global::mm.command.SKBuiltinBuffer_t ImgBuf
            {
                get { return result.ImgBuf; }
                set { SetImgBuf(value); }
            }
            public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasImgBuf = true;
                result.imgBuf_ = value;
                return this;
            }
            public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasImgBuf = true;
                result.imgBuf_ = builderForValue.Build();
                return this;
            }
            public Builder MergeImgBuf(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasImgBuf &&
                    result.imgBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.imgBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.imgBuf_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.imgBuf_ = value;
                }
                result.hasImgBuf = true;
                return this;
            }
            public Builder ClearImgBuf()
            {
                PrepareBuilder();
                result.hasImgBuf = false;
                result.imgBuf_ = null;
                return this;
            }

            public bool HasProvince
            {
                get { return result.hasProvince; }
            }
            public string Province
            {
                get { return result.Province; }
                set { SetProvince(value); }
            }
            public Builder SetProvince(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasProvince = true;
                result.province_ = value;
                return this;
            }
            public Builder ClearProvince()
            {
                PrepareBuilder();
                result.hasProvince = false;
                result.province_ = "";
                return this;
            }

            public bool HasCity
            {
                get { return result.hasCity; }
            }
            public string City
            {
                get { return result.City; }
                set { SetCity(value); }
            }
            public Builder SetCity(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCity = true;
                result.city_ = value;
                return this;
            }
            public Builder ClearCity()
            {
                PrepareBuilder();
                result.hasCity = false;
                result.city_ = "";
                return this;
            }

            public bool HasSignature
            {
                get { return result.hasSignature; }
            }
            public string Signature
            {
                get { return result.Signature; }
                set { SetSignature(value); }
            }
            public Builder SetSignature(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSignature = true;
                result.signature_ = value;
                return this;
            }
            public Builder ClearSignature()
            {
                PrepareBuilder();
                result.hasSignature = false;
                result.signature_ = "";
                return this;
            }

            public bool HasPersonalCard
            {
                get { return result.hasPersonalCard; }
            }
            public int PersonalCard
            {
                get { return result.PersonalCard; }
                set { SetPersonalCard(value); }
            }
            public Builder SetPersonalCard(int value)
            {
                PrepareBuilder();
                result.hasPersonalCard = true;
                result.personalCard_ = value;
                return this;
            }
            public Builder ClearPersonalCard()
            {
                PrepareBuilder();
                result.hasPersonalCard = false;
                result.personalCard_ = 0;
                return this;
            }

            public bool HasVerifyFlag
            {
                get { return result.hasVerifyFlag; }
            }
            public int VerifyFlag
            {
                get { return result.VerifyFlag; }
                set { SetVerifyFlag(value); }
            }
            public Builder SetVerifyFlag(int value)
            {
                PrepareBuilder();
                result.hasVerifyFlag = true;
                result.verifyFlag_ = value;
                return this;
            }
            public Builder ClearVerifyFlag()
            {
                PrepareBuilder();
                result.hasVerifyFlag = false;
                result.verifyFlag_ = 0;
                return this;
            }

            public bool HasVerifyInfo
            {
                get { return result.hasVerifyInfo; }
            }
            public string VerifyInfo
            {
                get { return result.VerifyInfo; }
                set { SetVerifyInfo(value); }
            }
            public Builder SetVerifyInfo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVerifyInfo = true;
                result.verifyInfo_ = value;
                return this;
            }
            public Builder ClearVerifyInfo()
            {
                PrepareBuilder();
                result.hasVerifyInfo = false;
                result.verifyInfo_ = "";
                return this;
            }

            public bool HasWeibo
            {
                get { return result.hasWeibo; }
            }
            public string Weibo
            {
                get { return result.Weibo; }
                set { SetWeibo(value); }
            }
            public Builder SetWeibo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWeibo = true;
                result.weibo_ = value;
                return this;
            }
            public Builder ClearWeibo()
            {
                PrepareBuilder();
                result.hasWeibo = false;
                result.weibo_ = "";
                return this;
            }

            public bool HasAlias
            {
                get { return result.hasAlias; }
            }
            public string Alias
            {
                get { return result.Alias; }
                set { SetAlias(value); }
            }
            public Builder SetAlias(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlias = true;
                result.alias_ = value;
                return this;
            }
            public Builder ClearAlias()
            {
                PrepareBuilder();
                result.hasAlias = false;
                result.alias_ = "";
                return this;
            }

            public bool HasWeiboNickname
            {
                get { return result.hasWeiboNickname; }
            }
            public string WeiboNickname
            {
                get { return result.WeiboNickname; }
                set { SetWeiboNickname(value); }
            }
            public Builder SetWeiboNickname(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWeiboNickname = true;
                result.weiboNickname_ = value;
                return this;
            }
            public Builder ClearWeiboNickname()
            {
                PrepareBuilder();
                result.hasWeiboNickname = false;
                result.weiboNickname_ = "";
                return this;
            }

            public bool HasWeiboFlag
            {
                get { return result.hasWeiboFlag; }
            }
            public int WeiboFlag
            {
                get { return result.WeiboFlag; }
                set { SetWeiboFlag(value); }
            }
            public Builder SetWeiboFlag(int value)
            {
                PrepareBuilder();
                result.hasWeiboFlag = true;
                result.weiboFlag_ = value;
                return this;
            }
            public Builder ClearWeiboFlag()
            {
                PrepareBuilder();
                result.hasWeiboFlag = false;
                result.weiboFlag_ = 0;
                return this;
            }

            public bool HasAlbumStyle
            {
                get { return result.hasAlbumStyle; }
            }
            public int AlbumStyle
            {
                get { return result.AlbumStyle; }
                set { SetAlbumStyle(value); }
            }
            public Builder SetAlbumStyle(int value)
            {
                PrepareBuilder();
                result.hasAlbumStyle = true;
                result.albumStyle_ = value;
                return this;
            }
            public Builder ClearAlbumStyle()
            {
                PrepareBuilder();
                result.hasAlbumStyle = false;
                result.albumStyle_ = 0;
                return this;
            }

            public bool HasAlbumFlag
            {
                get { return result.hasAlbumFlag; }
            }
            public int AlbumFlag
            {
                get { return result.AlbumFlag; }
                set { SetAlbumFlag(value); }
            }
            public Builder SetAlbumFlag(int value)
            {
                PrepareBuilder();
                result.hasAlbumFlag = true;
                result.albumFlag_ = value;
                return this;
            }
            public Builder ClearAlbumFlag()
            {
                PrepareBuilder();
                result.hasAlbumFlag = false;
                result.albumFlag_ = 0;
                return this;
            }

            public bool HasAlbumBGImgID
            {
                get { return result.hasAlbumBGImgID; }
            }
            public string AlbumBGImgID
            {
                get { return result.AlbumBGImgID; }
                set { SetAlbumBGImgID(value); }
            }
            public Builder SetAlbumBGImgID(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlbumBGImgID = true;
                result.albumBGImgID_ = value;
                return this;
            }
            public Builder ClearAlbumBGImgID()
            {
                PrepareBuilder();
                result.hasAlbumBGImgID = false;
                result.albumBGImgID_ = "";
                return this;
            }

            public bool HasSnsUserInfo
            {
                get { return result.hasSnsUserInfo; }
            }
            public global::mm.command.SnsUser SnsUserInfo
            {
                get { return result.SnsUserInfo; }
                set { SetSnsUserInfo(value); }
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = value;
                return this;
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSnsUserInfo &&
                    result.snsUserInfo_ != global::mm.command.SnsUser.DefaultInstance)
                {
                    result.snsUserInfo_ = global::mm.command.SnsUser.CreateBuilder(result.snsUserInfo_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.snsUserInfo_ = value;
                }
                result.hasSnsUserInfo = true;
                return this;
            }
            public Builder ClearSnsUserInfo()
            {
                PrepareBuilder();
                result.hasSnsUserInfo = false;
                result.snsUserInfo_ = null;
                return this;
            }

            public bool HasCountry
            {
                get { return result.hasCountry; }
            }
            public string Country
            {
                get { return result.Country; }
                set { SetCountry(value); }
            }
            public Builder SetCountry(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCountry = true;
                result.country_ = value;
                return this;
            }
            public Builder ClearCountry()
            {
                PrepareBuilder();
                result.hasCountry = false;
                result.country_ = "";
                return this;
            }

            public bool HasMyBrandList
            {
                get { return result.hasMyBrandList; }
            }
            public string MyBrandList
            {
                get { return result.MyBrandList; }
                set { SetMyBrandList(value); }
            }
            public Builder SetMyBrandList(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMyBrandList = true;
                result.myBrandList_ = value;
                return this;
            }
            public Builder ClearMyBrandList()
            {
                PrepareBuilder();
                result.hasMyBrandList = false;
                result.myBrandList_ = "";
                return this;
            }

            public bool HasCustomizedInfo
            {
                get { return result.hasCustomizedInfo; }
            }
            public global::mm.command.CustomizedInfoObj CustomizedInfo
            {
                get { return result.CustomizedInfo; }
                set { SetCustomizedInfo(value); }
            }
            public Builder SetCustomizedInfo(global::mm.command.CustomizedInfoObj value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCustomizedInfo = true;
                result.customizedInfo_ = value;
                return this;
            }
            public Builder SetCustomizedInfo(global::mm.command.CustomizedInfoObj.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasCustomizedInfo = true;
                result.customizedInfo_ = builderForValue.Build();
                return this;
            }
            public Builder MergeCustomizedInfo(global::mm.command.CustomizedInfoObj value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasCustomizedInfo &&
                    result.customizedInfo_ != global::mm.command.CustomizedInfoObj.DefaultInstance)
                {
                    result.customizedInfo_ = global::mm.command.CustomizedInfoObj.CreateBuilder(result.customizedInfo_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.customizedInfo_ = value;
                }
                result.hasCustomizedInfo = true;
                return this;
            }
            public Builder ClearCustomizedInfo()
            {
                PrepareBuilder();
                result.hasCustomizedInfo = false;
                result.customizedInfo_ = null;
                return this;
            }

            public bool HasBigHeadImgUrl
            {
                get { return result.hasBigHeadImgUrl; }
            }
            public string BigHeadImgUrl
            {
                get { return result.BigHeadImgUrl; }
                set { SetBigHeadImgUrl(value); }
            }
            public Builder SetBigHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBigHeadImgUrl = true;
                result.bigHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearBigHeadImgUrl()
            {
                PrepareBuilder();
                result.hasBigHeadImgUrl = false;
                result.bigHeadImgUrl_ = "";
                return this;
            }

            public bool HasSmallHeadImgUrl
            {
                get { return result.hasSmallHeadImgUrl; }
            }
            public string SmallHeadImgUrl
            {
                get { return result.SmallHeadImgUrl; }
                set { SetSmallHeadImgUrl(value); }
            }
            public Builder SetSmallHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSmallHeadImgUrl = true;
                result.smallHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearSmallHeadImgUrl()
            {
                PrepareBuilder();
                result.hasSmallHeadImgUrl = false;
                result.smallHeadImgUrl_ = "";
                return this;
            }
        }
        static SearchContact()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class RoomInfo : pb::GeneratedMessage<RoomInfo, RoomInfo.Builder>
    {
        private RoomInfo() { }
        private static readonly RoomInfo defaultInstance = new RoomInfo().MakeReadOnly();
        private static readonly string[] _roomInfoFieldNames = new string[] { "NickName", "UserName" };
        private static readonly uint[] _roomInfoFieldTags = new uint[] { 18, 10 };
        public static RoomInfo DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override RoomInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override RoomInfo ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_RoomInfo__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<RoomInfo, RoomInfo.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_RoomInfo__FieldAccessorTable; }
        }

        public const int UserNameFieldNumber = 1;
        private bool hasUserName;
        private global::mm.command.SKBuiltinString_t userName_;
        public bool HasUserName
        {
            get { return hasUserName; }
        }
        public global::mm.command.SKBuiltinString_t UserName
        {
            get { return userName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int NickNameFieldNumber = 2;
        private bool hasNickName;
        private global::mm.command.SKBuiltinString_t nickName_;
        public bool HasNickName
        {
            get { return hasNickName; }
        }
        public global::mm.command.SKBuiltinString_t NickName
        {
            get { return nickName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasUserName) return false;
                if (!hasNickName) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _roomInfoFieldNames;
            if (hasUserName)
            {
                output.WriteMessage(1, field_names[1], UserName);
            }
            if (hasNickName)
            {
                output.WriteMessage(2, field_names[0], NickName);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, UserName);
                }
                if (hasNickName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, NickName);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static RoomInfo ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RoomInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RoomInfo ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RoomInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RoomInfo ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RoomInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RoomInfo ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RoomInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RoomInfo ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RoomInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RoomInfo MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RoomInfo prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<RoomInfo, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(RoomInfo cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private RoomInfo result;

            private RoomInfo PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    RoomInfo original = result;
                    result = new RoomInfo();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override RoomInfo MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.RoomInfo.Descriptor; }
            }

            public override RoomInfo DefaultInstanceForType
            {
                get { return global::mm.command.RoomInfo.DefaultInstance; }
            }

            public override RoomInfo BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is RoomInfo)
                {
                    return MergeFrom((RoomInfo)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(RoomInfo other)
            {
                if (other == global::mm.command.RoomInfo.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUserName)
                {
                    MergeUserName(other.UserName);
                }
                if (other.HasNickName)
                {
                    MergeNickName(other.NickName);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_roomInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _roomInfoFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasUserName)
                                {
                                    subBuilder.MergeFrom(UserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                UserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasNickName)
                                {
                                    subBuilder.MergeFrom(NickName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                NickName = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUserName
            {
                get { return result.hasUserName; }
            }
            public global::mm.command.SKBuiltinString_t UserName
            {
                get { return result.UserName; }
                set { SetUserName(value); }
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = value;
                return this;
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasUserName &&
                    result.userName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.userName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.userName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.userName_ = value;
                }
                result.hasUserName = true;
                return this;
            }
            public Builder ClearUserName()
            {
                PrepareBuilder();
                result.hasUserName = false;
                result.userName_ = null;
                return this;
            }

            public bool HasNickName
            {
                get { return result.hasNickName; }
            }
            public global::mm.command.SKBuiltinString_t NickName
            {
                get { return result.NickName; }
                set { SetNickName(value); }
            }
            public Builder SetNickName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = value;
                return this;
            }
            public Builder SetNickName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeNickName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNickName &&
                    result.nickName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.nickName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.nickName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.nickName_ = value;
                }
                result.hasNickName = true;
                return this;
            }
            public Builder ClearNickName()
            {
                PrepareBuilder();
                result.hasNickName = false;
                result.nickName_ = null;
                return this;
            }
        }
        static RoomInfo()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ContactProfile : pb::GeneratedMessage<ContactProfile, ContactProfile.Builder>
    {
        private ContactProfile() { }
        private static readonly ContactProfile defaultInstance = new ContactProfile().MakeReadOnly();
        private static readonly string[] _contactProfileFieldNames = new string[] { "AddContactScene", "AlbumBGImgID", "AlbumFlag", "AlbumStyle", "Alias", "BigHeadImgUrl", "BitMask", "BitVal", "ChatRoomData", "ChatRoomNotify", "ChatRoomOwner", "City", "ContactType", "Country", "CustomizedInfo", "DomainList", "EncryptUserName", "HasWeiXinHdHeadImg", "HeadImgMd5", "ImgBuf", "ImgFlag", "Level", "MyBrandList", "NickName", "PYInitial", "PersonalCard", "Province", "QuanPin", "Remark", "RemarkPYInitial", "RemarkQuanPin", "RoomInfoCount", "RoomInfoList", "Sex", "Signature", "SmallHeadImgUrl", "SnsUserInfo", "Source", "UserName", "VerifyContent", "VerifyFlag", "VerifyInfo", "Weibo", "WeiboFlag", "WeiboNickname" };
        private static readonly uint[] _contactProfileFieldTags = new uint[] { 144, 290, 280, 272, 242, 314, 56, 64, 346, 136, 250, 162, 104, 306, 338, 130, 362, 184, 354, 50, 72, 208, 330, 18, 26, 176, 154, 34, 82, 90, 98, 112, 122, 40, 170, 322, 298, 216, 10, 234, 192, 202, 226, 264, 258 };
        public static ContactProfile DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ContactProfile DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ContactProfile ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ContactProfile__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ContactProfile, ContactProfile.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ContactProfile__FieldAccessorTable; }
        }

        public const int UserNameFieldNumber = 1;
        private bool hasUserName;
        private global::mm.command.SKBuiltinString_t userName_;
        public bool HasUserName
        {
            get { return hasUserName; }
        }
        public global::mm.command.SKBuiltinString_t UserName
        {
            get { return userName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int NickNameFieldNumber = 2;
        private bool hasNickName;
        private global::mm.command.SKBuiltinString_t nickName_;
        public bool HasNickName
        {
            get { return hasNickName; }
        }
        public global::mm.command.SKBuiltinString_t NickName
        {
            get { return nickName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int PYInitialFieldNumber = 3;
        private bool hasPYInitial;
        private global::mm.command.SKBuiltinString_t pYInitial_;
        public bool HasPYInitial
        {
            get { return hasPYInitial; }
        }
        public global::mm.command.SKBuiltinString_t PYInitial
        {
            get { return pYInitial_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int QuanPinFieldNumber = 4;
        private bool hasQuanPin;
        private global::mm.command.SKBuiltinString_t quanPin_;
        public bool HasQuanPin
        {
            get { return hasQuanPin; }
        }
        public global::mm.command.SKBuiltinString_t QuanPin
        {
            get { return quanPin_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int SexFieldNumber = 5;
        private bool hasSex;
        private int sex_;
        public bool HasSex
        {
            get { return hasSex; }
        }
        public int Sex
        {
            get { return sex_; }
        }

        public const int ImgBufFieldNumber = 6;
        private bool hasImgBuf;
        private global::mm.command.SKBuiltinBuffer_t imgBuf_;
        public bool HasImgBuf
        {
            get { return hasImgBuf; }
        }
        public global::mm.command.SKBuiltinBuffer_t ImgBuf
        {
            get { return imgBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int BitMaskFieldNumber = 7;
        private bool hasBitMask;
        private int bitMask_;
        public bool HasBitMask
        {
            get { return hasBitMask; }
        }
        public int BitMask
        {
            get { return bitMask_; }
        }

        public const int BitValFieldNumber = 8;
        private bool hasBitVal;
        private int bitVal_;
        public bool HasBitVal
        {
            get { return hasBitVal; }
        }
        public int BitVal
        {
            get { return bitVal_; }
        }

        public const int ImgFlagFieldNumber = 9;
        private bool hasImgFlag;
        private int imgFlag_;
        public bool HasImgFlag
        {
            get { return hasImgFlag; }
        }
        public int ImgFlag
        {
            get { return imgFlag_; }
        }

        public const int RemarkFieldNumber = 10;
        private bool hasRemark;
        private global::mm.command.SKBuiltinString_t remark_;
        public bool HasRemark
        {
            get { return hasRemark; }
        }
        public global::mm.command.SKBuiltinString_t Remark
        {
            get { return remark_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int RemarkPYInitialFieldNumber = 11;
        private bool hasRemarkPYInitial;
        private global::mm.command.SKBuiltinString_t remarkPYInitial_;
        public bool HasRemarkPYInitial
        {
            get { return hasRemarkPYInitial; }
        }
        public global::mm.command.SKBuiltinString_t RemarkPYInitial
        {
            get { return remarkPYInitial_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int RemarkQuanPinFieldNumber = 12;
        private bool hasRemarkQuanPin;
        private global::mm.command.SKBuiltinString_t remarkQuanPin_;
        public bool HasRemarkQuanPin
        {
            get { return hasRemarkQuanPin; }
        }
        public global::mm.command.SKBuiltinString_t RemarkQuanPin
        {
            get { return remarkQuanPin_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int ContactTypeFieldNumber = 13;
        private bool hasContactType;
        private int contactType_;
        public bool HasContactType
        {
            get { return hasContactType; }
        }
        public int ContactType
        {
            get { return contactType_; }
        }

        public const int RoomInfoCountFieldNumber = 14;
        private bool hasRoomInfoCount;
        private int roomInfoCount_;
        public bool HasRoomInfoCount
        {
            get { return hasRoomInfoCount; }
        }
        public int RoomInfoCount
        {
            get { return roomInfoCount_; }
        }

        public const int RoomInfoListFieldNumber = 15;
        private pbc::PopsicleList<global::mm.command.RoomInfo> roomInfoList_ = new pbc::PopsicleList<global::mm.command.RoomInfo>();
        public scg::IList<global::mm.command.RoomInfo> RoomInfoListList
        {
            get { return roomInfoList_; }
        }
        public int RoomInfoListCount
        {
            get { return roomInfoList_.Count; }
        }
        public global::mm.command.RoomInfo GetRoomInfoList(int index)
        {
            return roomInfoList_[index];
        }

        public const int DomainListFieldNumber = 16;
        private bool hasDomainList;
        private global::mm.command.SKBuiltinString_t domainList_;
        public bool HasDomainList
        {
            get { return hasDomainList; }
        }
        public global::mm.command.SKBuiltinString_t DomainList
        {
            get { return domainList_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int ChatRoomNotifyFieldNumber = 17;
        private bool hasChatRoomNotify;
        private int chatRoomNotify_;
        public bool HasChatRoomNotify
        {
            get { return hasChatRoomNotify; }
        }
        public int ChatRoomNotify
        {
            get { return chatRoomNotify_; }
        }

        public const int AddContactSceneFieldNumber = 18;
        private bool hasAddContactScene;
        private int addContactScene_;
        public bool HasAddContactScene
        {
            get { return hasAddContactScene; }
        }
        public int AddContactScene
        {
            get { return addContactScene_; }
        }

        public const int ProvinceFieldNumber = 19;
        private bool hasProvince;
        private string province_ = "";
        public bool HasProvince
        {
            get { return hasProvince; }
        }
        public string Province
        {
            get { return province_; }
        }

        public const int CityFieldNumber = 20;
        private bool hasCity;
        private string city_ = "";
        public bool HasCity
        {
            get { return hasCity; }
        }
        public string City
        {
            get { return city_; }
        }

        public const int SignatureFieldNumber = 21;
        private bool hasSignature;
        private string signature_ = "";
        public bool HasSignature
        {
            get { return hasSignature; }
        }
        public string Signature
        {
            get { return signature_; }
        }

        public const int PersonalCardFieldNumber = 22;
        private bool hasPersonalCard;
        private int personalCard_;
        public bool HasPersonalCard
        {
            get { return hasPersonalCard; }
        }
        public int PersonalCard
        {
            get { return personalCard_; }
        }

        public const int HasWeiXinHdHeadImgFieldNumber = 23;
        private bool hasHasWeiXinHdHeadImg;
        private int hasWeiXinHdHeadImg_;
        public bool HasHasWeiXinHdHeadImg
        {
            get { return hasHasWeiXinHdHeadImg; }
        }
        public int HasWeiXinHdHeadImg
        {
            get { return hasWeiXinHdHeadImg_; }
        }

        public const int VerifyFlagFieldNumber = 24;
        private bool hasVerifyFlag;
        private int verifyFlag_;
        public bool HasVerifyFlag
        {
            get { return hasVerifyFlag; }
        }
        public int VerifyFlag
        {
            get { return verifyFlag_; }
        }

        public const int VerifyInfoFieldNumber = 25;
        private bool hasVerifyInfo;
        private string verifyInfo_ = "";
        public bool HasVerifyInfo
        {
            get { return hasVerifyInfo; }
        }
        public string VerifyInfo
        {
            get { return verifyInfo_; }
        }

        public const int LevelFieldNumber = 26;
        private bool hasLevel;
        private int level_;
        public bool HasLevel
        {
            get { return hasLevel; }
        }
        public int Level
        {
            get { return level_; }
        }

        public const int SourceFieldNumber = 27;
        private bool hasSource;
        private int source_;
        public bool HasSource
        {
            get { return hasSource; }
        }
        public int Source
        {
            get { return source_; }
        }

        public const int WeiboFieldNumber = 28;
        private bool hasWeibo;
        private string weibo_ = "";
        public bool HasWeibo
        {
            get { return hasWeibo; }
        }
        public string Weibo
        {
            get { return weibo_; }
        }

        public const int VerifyContentFieldNumber = 29;
        private bool hasVerifyContent;
        private string verifyContent_ = "";
        public bool HasVerifyContent
        {
            get { return hasVerifyContent; }
        }
        public string VerifyContent
        {
            get { return verifyContent_; }
        }

        public const int AliasFieldNumber = 30;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias
        {
            get { return hasAlias; }
        }
        public string Alias
        {
            get { return alias_; }
        }

        public const int ChatRoomOwnerFieldNumber = 31;
        private bool hasChatRoomOwner;
        private string chatRoomOwner_ = "";
        public bool HasChatRoomOwner
        {
            get { return hasChatRoomOwner; }
        }
        public string ChatRoomOwner
        {
            get { return chatRoomOwner_; }
        }

        public const int WeiboNicknameFieldNumber = 32;
        private bool hasWeiboNickname;
        private string weiboNickname_ = "";
        public bool HasWeiboNickname
        {
            get { return hasWeiboNickname; }
        }
        public string WeiboNickname
        {
            get { return weiboNickname_; }
        }

        public const int WeiboFlagFieldNumber = 33;
        private bool hasWeiboFlag;
        private int weiboFlag_;
        public bool HasWeiboFlag
        {
            get { return hasWeiboFlag; }
        }
        public int WeiboFlag
        {
            get { return weiboFlag_; }
        }

        public const int AlbumStyleFieldNumber = 34;
        private bool hasAlbumStyle;
        private int albumStyle_;
        public bool HasAlbumStyle
        {
            get { return hasAlbumStyle; }
        }
        public int AlbumStyle
        {
            get { return albumStyle_; }
        }

        public const int AlbumFlagFieldNumber = 35;
        private bool hasAlbumFlag;
        private int albumFlag_;
        public bool HasAlbumFlag
        {
            get { return hasAlbumFlag; }
        }
        public int AlbumFlag
        {
            get { return albumFlag_; }
        }

        public const int AlbumBGImgIDFieldNumber = 36;
        private bool hasAlbumBGImgID;
        private string albumBGImgID_ = "";
        public bool HasAlbumBGImgID
        {
            get { return hasAlbumBGImgID; }
        }
        public string AlbumBGImgID
        {
            get { return albumBGImgID_; }
        }

        public const int SnsUserInfoFieldNumber = 37;
        private bool hasSnsUserInfo;
        private global::mm.command.SnsUser snsUserInfo_;
        public bool HasSnsUserInfo
        {
            get { return hasSnsUserInfo; }
        }
        public global::mm.command.SnsUser SnsUserInfo
        {
            get { return snsUserInfo_ ?? global::mm.command.SnsUser.DefaultInstance; }
        }

        public const int CountryFieldNumber = 38;
        private bool hasCountry;
        private string country_ = "";
        public bool HasCountry
        {
            get { return hasCountry; }
        }
        public string Country
        {
            get { return country_; }
        }

        public const int BigHeadImgUrlFieldNumber = 39;
        private bool hasBigHeadImgUrl;
        private string bigHeadImgUrl_ = "";
        public bool HasBigHeadImgUrl
        {
            get { return hasBigHeadImgUrl; }
        }
        public string BigHeadImgUrl
        {
            get { return bigHeadImgUrl_; }
        }

        public const int SmallHeadImgUrlFieldNumber = 40;
        private bool hasSmallHeadImgUrl;
        private string smallHeadImgUrl_ = "";
        public bool HasSmallHeadImgUrl
        {
            get { return hasSmallHeadImgUrl; }
        }
        public string SmallHeadImgUrl
        {
            get { return smallHeadImgUrl_; }
        }

        public const int MyBrandListFieldNumber = 41;
        private bool hasMyBrandList;
        private string myBrandList_ = "";
        public bool HasMyBrandList
        {
            get { return hasMyBrandList; }
        }
        public string MyBrandList
        {
            get { return myBrandList_; }
        }

        public const int CustomizedInfoFieldNumber = 42;
        private bool hasCustomizedInfo;
        private global::mm.command.CustomInfo customizedInfo_;
        public bool HasCustomizedInfo
        {
            get { return hasCustomizedInfo; }
        }
        public global::mm.command.CustomInfo CustomizedInfo
        {
            get { return customizedInfo_ ?? global::mm.command.CustomInfo.DefaultInstance; }
        }

        public const int ChatRoomDataFieldNumber = 43;
        private bool hasChatRoomData;
        private string chatRoomData_ = "";
        public bool HasChatRoomData
        {
            get { return hasChatRoomData; }
        }
        public string ChatRoomData
        {
            get { return chatRoomData_; }
        }

        public const int HeadImgMd5FieldNumber = 44;
        private bool hasHeadImgMd5;
        private string headImgMd5_ = "";
        public bool HasHeadImgMd5
        {
            get { return hasHeadImgMd5; }
        }
        public string HeadImgMd5
        {
            get { return headImgMd5_; }
        }

        public const int EncryptUserNameFieldNumber = 45;
        private bool hasEncryptUserName;
        private string encryptUserName_ = "";
        public bool HasEncryptUserName
        {
            get { return hasEncryptUserName; }
        }
        public string EncryptUserName
        {
            get { return encryptUserName_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasUserName) return false;
                if (!hasNickName) return false;
                if (!hasPYInitial) return false;
                if (!hasQuanPin) return false;
                if (!hasSex) return false;
                if (!hasImgBuf) return false;
                if (!hasBitMask) return false;
                if (!hasBitVal) return false;
                if (!hasImgFlag) return false;
                if (!ImgBuf.IsInitialized) return false;
                foreach (global::mm.command.RoomInfo element in RoomInfoListList)
                {
                    if (!element.IsInitialized) return false;
                }
                if (HasSnsUserInfo)
                {
                    if (!SnsUserInfo.IsInitialized) return false;
                }
                if (HasCustomizedInfo)
                {
                    if (!CustomizedInfo.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _contactProfileFieldNames;
            if (hasUserName)
            {
                output.WriteMessage(1, field_names[38], UserName);
            }
            if (hasNickName)
            {
                output.WriteMessage(2, field_names[23], NickName);
            }
            if (hasPYInitial)
            {
                output.WriteMessage(3, field_names[24], PYInitial);
            }
            if (hasQuanPin)
            {
                output.WriteMessage(4, field_names[27], QuanPin);
            }
            if (hasSex)
            {
                output.WriteInt32(5, field_names[33], Sex);
            }
            if (hasImgBuf)
            {
                output.WriteMessage(6, field_names[19], ImgBuf);
            }
            if (hasBitMask)
            {
                output.WriteInt32(7, field_names[6], BitMask);
            }
            if (hasBitVal)
            {
                output.WriteInt32(8, field_names[7], BitVal);
            }
            if (hasImgFlag)
            {
                output.WriteInt32(9, field_names[20], ImgFlag);
            }
            if (hasRemark)
            {
                output.WriteMessage(10, field_names[28], Remark);
            }
            if (hasRemarkPYInitial)
            {
                output.WriteMessage(11, field_names[29], RemarkPYInitial);
            }
            if (hasRemarkQuanPin)
            {
                output.WriteMessage(12, field_names[30], RemarkQuanPin);
            }
            if (hasContactType)
            {
                output.WriteInt32(13, field_names[12], ContactType);
            }
            if (hasRoomInfoCount)
            {
                output.WriteInt32(14, field_names[31], RoomInfoCount);
            }
            if (roomInfoList_.Count > 0)
            {
                output.WriteMessageArray(15, field_names[32], roomInfoList_);
            }
            if (hasDomainList)
            {
                output.WriteMessage(16, field_names[15], DomainList);
            }
            if (hasChatRoomNotify)
            {
                output.WriteInt32(17, field_names[9], ChatRoomNotify);
            }
            if (hasAddContactScene)
            {
                output.WriteInt32(18, field_names[0], AddContactScene);
            }
            if (hasProvince)
            {
                output.WriteString(19, field_names[26], Province);
            }
            if (hasCity)
            {
                output.WriteString(20, field_names[11], City);
            }
            if (hasSignature)
            {
                output.WriteString(21, field_names[34], Signature);
            }
            if (hasPersonalCard)
            {
                output.WriteInt32(22, field_names[25], PersonalCard);
            }
            if (hasHasWeiXinHdHeadImg)
            {
                output.WriteInt32(23, field_names[17], HasWeiXinHdHeadImg);
            }
            if (hasVerifyFlag)
            {
                output.WriteInt32(24, field_names[40], VerifyFlag);
            }
            if (hasVerifyInfo)
            {
                output.WriteString(25, field_names[41], VerifyInfo);
            }
            if (hasLevel)
            {
                output.WriteInt32(26, field_names[21], Level);
            }
            if (hasSource)
            {
                output.WriteInt32(27, field_names[37], Source);
            }
            if (hasWeibo)
            {
                output.WriteString(28, field_names[42], Weibo);
            }
            if (hasVerifyContent)
            {
                output.WriteString(29, field_names[39], VerifyContent);
            }
            if (hasAlias)
            {
                output.WriteString(30, field_names[4], Alias);
            }
            if (hasChatRoomOwner)
            {
                output.WriteString(31, field_names[10], ChatRoomOwner);
            }
            if (hasWeiboNickname)
            {
                output.WriteString(32, field_names[44], WeiboNickname);
            }
            if (hasWeiboFlag)
            {
                output.WriteInt32(33, field_names[43], WeiboFlag);
            }
            if (hasAlbumStyle)
            {
                output.WriteInt32(34, field_names[3], AlbumStyle);
            }
            if (hasAlbumFlag)
            {
                output.WriteInt32(35, field_names[2], AlbumFlag);
            }
            if (hasAlbumBGImgID)
            {
                output.WriteString(36, field_names[1], AlbumBGImgID);
            }
            if (hasSnsUserInfo)
            {
                output.WriteMessage(37, field_names[36], SnsUserInfo);
            }
            if (hasCountry)
            {
                output.WriteString(38, field_names[13], Country);
            }
            if (hasBigHeadImgUrl)
            {
                output.WriteString(39, field_names[5], BigHeadImgUrl);
            }
            if (hasSmallHeadImgUrl)
            {
                output.WriteString(40, field_names[35], SmallHeadImgUrl);
            }
            if (hasMyBrandList)
            {
                output.WriteString(41, field_names[22], MyBrandList);
            }
            if (hasCustomizedInfo)
            {
                output.WriteMessage(42, field_names[14], CustomizedInfo);
            }
            if (hasChatRoomData)
            {
                output.WriteString(43, field_names[8], ChatRoomData);
            }
            if (hasHeadImgMd5)
            {
                output.WriteString(44, field_names[18], HeadImgMd5);
            }
            if (hasEncryptUserName)
            {
                output.WriteString(45, field_names[16], EncryptUserName);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, UserName);
                }
                if (hasNickName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, NickName);
                }
                if (hasPYInitial)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, PYInitial);
                }
                if (hasQuanPin)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, QuanPin);
                }
                if (hasSex)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(5, Sex);
                }
                if (hasImgBuf)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(6, ImgBuf);
                }
                if (hasBitMask)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, BitMask);
                }
                if (hasBitVal)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(8, BitVal);
                }
                if (hasImgFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(9, ImgFlag);
                }
                if (hasRemark)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(10, Remark);
                }
                if (hasRemarkPYInitial)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(11, RemarkPYInitial);
                }
                if (hasRemarkQuanPin)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(12, RemarkQuanPin);
                }
                if (hasContactType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(13, ContactType);
                }
                if (hasRoomInfoCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(14, RoomInfoCount);
                }
                foreach (global::mm.command.RoomInfo element in RoomInfoListList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(15, element);
                }
                if (hasDomainList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(16, DomainList);
                }
                if (hasChatRoomNotify)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(17, ChatRoomNotify);
                }
                if (hasAddContactScene)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(18, AddContactScene);
                }
                if (hasProvince)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(19, Province);
                }
                if (hasCity)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(20, City);
                }
                if (hasSignature)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(21, Signature);
                }
                if (hasPersonalCard)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(22, PersonalCard);
                }
                if (hasHasWeiXinHdHeadImg)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(23, HasWeiXinHdHeadImg);
                }
                if (hasVerifyFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(24, VerifyFlag);
                }
                if (hasVerifyInfo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(25, VerifyInfo);
                }
                if (hasLevel)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(26, Level);
                }
                if (hasSource)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(27, Source);
                }
                if (hasWeibo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(28, Weibo);
                }
                if (hasVerifyContent)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(29, VerifyContent);
                }
                if (hasAlias)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(30, Alias);
                }
                if (hasChatRoomOwner)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(31, ChatRoomOwner);
                }
                if (hasWeiboNickname)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(32, WeiboNickname);
                }
                if (hasWeiboFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(33, WeiboFlag);
                }
                if (hasAlbumStyle)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(34, AlbumStyle);
                }
                if (hasAlbumFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(35, AlbumFlag);
                }
                if (hasAlbumBGImgID)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(36, AlbumBGImgID);
                }
                if (hasSnsUserInfo)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(37, SnsUserInfo);
                }
                if (hasCountry)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(38, Country);
                }
                if (hasBigHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(39, BigHeadImgUrl);
                }
                if (hasSmallHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(40, SmallHeadImgUrl);
                }
                if (hasMyBrandList)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(41, MyBrandList);
                }
                if (hasCustomizedInfo)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(42, CustomizedInfo);
                }
                if (hasChatRoomData)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(43, ChatRoomData);
                }
                if (hasHeadImgMd5)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(44, HeadImgMd5);
                }
                if (hasEncryptUserName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(45, EncryptUserName);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ContactProfile ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ContactProfile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ContactProfile ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ContactProfile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ContactProfile ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ContactProfile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ContactProfile ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ContactProfile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ContactProfile ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ContactProfile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ContactProfile MakeReadOnly()
        {
            roomInfoList_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ContactProfile prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ContactProfile, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ContactProfile cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ContactProfile result;

            private ContactProfile PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ContactProfile original = result;
                    result = new ContactProfile();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ContactProfile MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ContactProfile.Descriptor; }
            }

            public override ContactProfile DefaultInstanceForType
            {
                get { return global::mm.command.ContactProfile.DefaultInstance; }
            }

            public override ContactProfile BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ContactProfile)
                {
                    return MergeFrom((ContactProfile)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ContactProfile other)
            {
                if (other == global::mm.command.ContactProfile.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUserName)
                {
                    MergeUserName(other.UserName);
                }
                if (other.HasNickName)
                {
                    MergeNickName(other.NickName);
                }
                if (other.HasPYInitial)
                {
                    MergePYInitial(other.PYInitial);
                }
                if (other.HasQuanPin)
                {
                    MergeQuanPin(other.QuanPin);
                }
                if (other.HasSex)
                {
                    Sex = other.Sex;
                }
                if (other.HasImgBuf)
                {
                    MergeImgBuf(other.ImgBuf);
                }
                if (other.HasBitMask)
                {
                    BitMask = other.BitMask;
                }
                if (other.HasBitVal)
                {
                    BitVal = other.BitVal;
                }
                if (other.HasImgFlag)
                {
                    ImgFlag = other.ImgFlag;
                }
                if (other.HasRemark)
                {
                    MergeRemark(other.Remark);
                }
                if (other.HasRemarkPYInitial)
                {
                    MergeRemarkPYInitial(other.RemarkPYInitial);
                }
                if (other.HasRemarkQuanPin)
                {
                    MergeRemarkQuanPin(other.RemarkQuanPin);
                }
                if (other.HasContactType)
                {
                    ContactType = other.ContactType;
                }
                if (other.HasRoomInfoCount)
                {
                    RoomInfoCount = other.RoomInfoCount;
                }
                if (other.roomInfoList_.Count != 0)
                {
                    result.roomInfoList_.Add(other.roomInfoList_);
                }
                if (other.HasDomainList)
                {
                    MergeDomainList(other.DomainList);
                }
                if (other.HasChatRoomNotify)
                {
                    ChatRoomNotify = other.ChatRoomNotify;
                }
                if (other.HasAddContactScene)
                {
                    AddContactScene = other.AddContactScene;
                }
                if (other.HasProvince)
                {
                    Province = other.Province;
                }
                if (other.HasCity)
                {
                    City = other.City;
                }
                if (other.HasSignature)
                {
                    Signature = other.Signature;
                }
                if (other.HasPersonalCard)
                {
                    PersonalCard = other.PersonalCard;
                }
                if (other.HasHasWeiXinHdHeadImg)
                {
                    HasWeiXinHdHeadImg = other.HasWeiXinHdHeadImg;
                }
                if (other.HasVerifyFlag)
                {
                    VerifyFlag = other.VerifyFlag;
                }
                if (other.HasVerifyInfo)
                {
                    VerifyInfo = other.VerifyInfo;
                }
                if (other.HasLevel)
                {
                    Level = other.Level;
                }
                if (other.HasSource)
                {
                    Source = other.Source;
                }
                if (other.HasWeibo)
                {
                    Weibo = other.Weibo;
                }
                if (other.HasVerifyContent)
                {
                    VerifyContent = other.VerifyContent;
                }
                if (other.HasAlias)
                {
                    Alias = other.Alias;
                }
                if (other.HasChatRoomOwner)
                {
                    ChatRoomOwner = other.ChatRoomOwner;
                }
                if (other.HasWeiboNickname)
                {
                    WeiboNickname = other.WeiboNickname;
                }
                if (other.HasWeiboFlag)
                {
                    WeiboFlag = other.WeiboFlag;
                }
                if (other.HasAlbumStyle)
                {
                    AlbumStyle = other.AlbumStyle;
                }
                if (other.HasAlbumFlag)
                {
                    AlbumFlag = other.AlbumFlag;
                }
                if (other.HasAlbumBGImgID)
                {
                    AlbumBGImgID = other.AlbumBGImgID;
                }
                if (other.HasSnsUserInfo)
                {
                    MergeSnsUserInfo(other.SnsUserInfo);
                }
                if (other.HasCountry)
                {
                    Country = other.Country;
                }
                if (other.HasBigHeadImgUrl)
                {
                    BigHeadImgUrl = other.BigHeadImgUrl;
                }
                if (other.HasSmallHeadImgUrl)
                {
                    SmallHeadImgUrl = other.SmallHeadImgUrl;
                }
                if (other.HasMyBrandList)
                {
                    MyBrandList = other.MyBrandList;
                }
                if (other.HasCustomizedInfo)
                {
                    MergeCustomizedInfo(other.CustomizedInfo);
                }
                if (other.HasChatRoomData)
                {
                    ChatRoomData = other.ChatRoomData;
                }
                if (other.HasHeadImgMd5)
                {
                    HeadImgMd5 = other.HeadImgMd5;
                }
                if (other.HasEncryptUserName)
                {
                    EncryptUserName = other.EncryptUserName;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_contactProfileFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _contactProfileFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasUserName)
                                {
                                    subBuilder.MergeFrom(UserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                UserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasNickName)
                                {
                                    subBuilder.MergeFrom(NickName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                NickName = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasPYInitial)
                                {
                                    subBuilder.MergeFrom(PYInitial);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                PYInitial = subBuilder.BuildPartial();
                                break;
                            }
                        case 34:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasQuanPin)
                                {
                                    subBuilder.MergeFrom(QuanPin);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                QuanPin = subBuilder.BuildPartial();
                                break;
                            }
                        case 40:
                            {
                                result.hasSex = input.ReadInt32(ref result.sex_);
                                break;
                            }
                        case 50:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasImgBuf)
                                {
                                    subBuilder.MergeFrom(ImgBuf);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ImgBuf = subBuilder.BuildPartial();
                                break;
                            }
                        case 56:
                            {
                                result.hasBitMask = input.ReadInt32(ref result.bitMask_);
                                break;
                            }
                        case 64:
                            {
                                result.hasBitVal = input.ReadInt32(ref result.bitVal_);
                                break;
                            }
                        case 72:
                            {
                                result.hasImgFlag = input.ReadInt32(ref result.imgFlag_);
                                break;
                            }
                        case 82:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasRemark)
                                {
                                    subBuilder.MergeFrom(Remark);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Remark = subBuilder.BuildPartial();
                                break;
                            }
                        case 90:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasRemarkPYInitial)
                                {
                                    subBuilder.MergeFrom(RemarkPYInitial);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                RemarkPYInitial = subBuilder.BuildPartial();
                                break;
                            }
                        case 98:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasRemarkQuanPin)
                                {
                                    subBuilder.MergeFrom(RemarkQuanPin);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                RemarkQuanPin = subBuilder.BuildPartial();
                                break;
                            }
                        case 104:
                            {
                                result.hasContactType = input.ReadInt32(ref result.contactType_);
                                break;
                            }
                        case 112:
                            {
                                result.hasRoomInfoCount = input.ReadInt32(ref result.roomInfoCount_);
                                break;
                            }
                        case 122:
                            {
                                input.ReadMessageArray(tag, field_name, result.roomInfoList_, global::mm.command.RoomInfo.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 130:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasDomainList)
                                {
                                    subBuilder.MergeFrom(DomainList);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                DomainList = subBuilder.BuildPartial();
                                break;
                            }
                        case 136:
                            {
                                result.hasChatRoomNotify = input.ReadInt32(ref result.chatRoomNotify_);
                                break;
                            }
                        case 144:
                            {
                                result.hasAddContactScene = input.ReadInt32(ref result.addContactScene_);
                                break;
                            }
                        case 154:
                            {
                                result.hasProvince = input.ReadString(ref result.province_);
                                break;
                            }
                        case 162:
                            {
                                result.hasCity = input.ReadString(ref result.city_);
                                break;
                            }
                        case 170:
                            {
                                result.hasSignature = input.ReadString(ref result.signature_);
                                break;
                            }
                        case 176:
                            {
                                result.hasPersonalCard = input.ReadInt32(ref result.personalCard_);
                                break;
                            }
                        case 184:
                            {
                                result.hasHasWeiXinHdHeadImg = input.ReadInt32(ref result.hasWeiXinHdHeadImg_);
                                break;
                            }
                        case 192:
                            {
                                result.hasVerifyFlag = input.ReadInt32(ref result.verifyFlag_);
                                break;
                            }
                        case 202:
                            {
                                result.hasVerifyInfo = input.ReadString(ref result.verifyInfo_);
                                break;
                            }
                        case 208:
                            {
                                result.hasLevel = input.ReadInt32(ref result.level_);
                                break;
                            }
                        case 216:
                            {
                                result.hasSource = input.ReadInt32(ref result.source_);
                                break;
                            }
                        case 226:
                            {
                                result.hasWeibo = input.ReadString(ref result.weibo_);
                                break;
                            }
                        case 234:
                            {
                                result.hasVerifyContent = input.ReadString(ref result.verifyContent_);
                                break;
                            }
                        case 242:
                            {
                                result.hasAlias = input.ReadString(ref result.alias_);
                                break;
                            }
                        case 250:
                            {
                                result.hasChatRoomOwner = input.ReadString(ref result.chatRoomOwner_);
                                break;
                            }
                        case 258:
                            {
                                result.hasWeiboNickname = input.ReadString(ref result.weiboNickname_);
                                break;
                            }
                        case 264:
                            {
                                result.hasWeiboFlag = input.ReadInt32(ref result.weiboFlag_);
                                break;
                            }
                        case 272:
                            {
                                result.hasAlbumStyle = input.ReadInt32(ref result.albumStyle_);
                                break;
                            }
                        case 280:
                            {
                                result.hasAlbumFlag = input.ReadInt32(ref result.albumFlag_);
                                break;
                            }
                        case 290:
                            {
                                result.hasAlbumBGImgID = input.ReadString(ref result.albumBGImgID_);
                                break;
                            }
                        case 298:
                            {
                                global::mm.command.SnsUser.Builder subBuilder = global::mm.command.SnsUser.CreateBuilder();
                                if (result.hasSnsUserInfo)
                                {
                                    subBuilder.MergeFrom(SnsUserInfo);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                SnsUserInfo = subBuilder.BuildPartial();
                                break;
                            }
                        case 306:
                            {
                                result.hasCountry = input.ReadString(ref result.country_);
                                break;
                            }
                        case 314:
                            {
                                result.hasBigHeadImgUrl = input.ReadString(ref result.bigHeadImgUrl_);
                                break;
                            }
                        case 322:
                            {
                                result.hasSmallHeadImgUrl = input.ReadString(ref result.smallHeadImgUrl_);
                                break;
                            }
                        case 330:
                            {
                                result.hasMyBrandList = input.ReadString(ref result.myBrandList_);
                                break;
                            }
                        case 338:
                            {
                                global::mm.command.CustomInfo.Builder subBuilder = global::mm.command.CustomInfo.CreateBuilder();
                                if (result.hasCustomizedInfo)
                                {
                                    subBuilder.MergeFrom(CustomizedInfo);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                CustomizedInfo = subBuilder.BuildPartial();
                                break;
                            }
                        case 346:
                            {
                                result.hasChatRoomData = input.ReadString(ref result.chatRoomData_);
                                break;
                            }
                        case 354:
                            {
                                result.hasHeadImgMd5 = input.ReadString(ref result.headImgMd5_);
                                break;
                            }
                        case 362:
                            {
                                result.hasEncryptUserName = input.ReadString(ref result.encryptUserName_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUserName
            {
                get { return result.hasUserName; }
            }
            public global::mm.command.SKBuiltinString_t UserName
            {
                get { return result.UserName; }
                set { SetUserName(value); }
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = value;
                return this;
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasUserName &&
                    result.userName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.userName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.userName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.userName_ = value;
                }
                result.hasUserName = true;
                return this;
            }
            public Builder ClearUserName()
            {
                PrepareBuilder();
                result.hasUserName = false;
                result.userName_ = null;
                return this;
            }

            public bool HasNickName
            {
                get { return result.hasNickName; }
            }
            public global::mm.command.SKBuiltinString_t NickName
            {
                get { return result.NickName; }
                set { SetNickName(value); }
            }
            public Builder SetNickName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = value;
                return this;
            }
            public Builder SetNickName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeNickName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNickName &&
                    result.nickName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.nickName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.nickName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.nickName_ = value;
                }
                result.hasNickName = true;
                return this;
            }
            public Builder ClearNickName()
            {
                PrepareBuilder();
                result.hasNickName = false;
                result.nickName_ = null;
                return this;
            }

            public bool HasPYInitial
            {
                get { return result.hasPYInitial; }
            }
            public global::mm.command.SKBuiltinString_t PYInitial
            {
                get { return result.PYInitial; }
                set { SetPYInitial(value); }
            }
            public Builder SetPYInitial(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPYInitial = true;
                result.pYInitial_ = value;
                return this;
            }
            public Builder SetPYInitial(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasPYInitial = true;
                result.pYInitial_ = builderForValue.Build();
                return this;
            }
            public Builder MergePYInitial(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasPYInitial &&
                    result.pYInitial_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.pYInitial_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.pYInitial_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.pYInitial_ = value;
                }
                result.hasPYInitial = true;
                return this;
            }
            public Builder ClearPYInitial()
            {
                PrepareBuilder();
                result.hasPYInitial = false;
                result.pYInitial_ = null;
                return this;
            }

            public bool HasQuanPin
            {
                get { return result.hasQuanPin; }
            }
            public global::mm.command.SKBuiltinString_t QuanPin
            {
                get { return result.QuanPin; }
                set { SetQuanPin(value); }
            }
            public Builder SetQuanPin(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasQuanPin = true;
                result.quanPin_ = value;
                return this;
            }
            public Builder SetQuanPin(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasQuanPin = true;
                result.quanPin_ = builderForValue.Build();
                return this;
            }
            public Builder MergeQuanPin(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasQuanPin &&
                    result.quanPin_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.quanPin_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.quanPin_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.quanPin_ = value;
                }
                result.hasQuanPin = true;
                return this;
            }
            public Builder ClearQuanPin()
            {
                PrepareBuilder();
                result.hasQuanPin = false;
                result.quanPin_ = null;
                return this;
            }

            public bool HasSex
            {
                get { return result.hasSex; }
            }
            public int Sex
            {
                get { return result.Sex; }
                set { SetSex(value); }
            }
            public Builder SetSex(int value)
            {
                PrepareBuilder();
                result.hasSex = true;
                result.sex_ = value;
                return this;
            }
            public Builder ClearSex()
            {
                PrepareBuilder();
                result.hasSex = false;
                result.sex_ = 0;
                return this;
            }

            public bool HasImgBuf
            {
                get { return result.hasImgBuf; }
            }
            public global::mm.command.SKBuiltinBuffer_t ImgBuf
            {
                get { return result.ImgBuf; }
                set { SetImgBuf(value); }
            }
            public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasImgBuf = true;
                result.imgBuf_ = value;
                return this;
            }
            public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasImgBuf = true;
                result.imgBuf_ = builderForValue.Build();
                return this;
            }
            public Builder MergeImgBuf(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasImgBuf &&
                    result.imgBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.imgBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.imgBuf_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.imgBuf_ = value;
                }
                result.hasImgBuf = true;
                return this;
            }
            public Builder ClearImgBuf()
            {
                PrepareBuilder();
                result.hasImgBuf = false;
                result.imgBuf_ = null;
                return this;
            }

            public bool HasBitMask
            {
                get { return result.hasBitMask; }
            }
            public int BitMask
            {
                get { return result.BitMask; }
                set { SetBitMask(value); }
            }
            public Builder SetBitMask(int value)
            {
                PrepareBuilder();
                result.hasBitMask = true;
                result.bitMask_ = value;
                return this;
            }
            public Builder ClearBitMask()
            {
                PrepareBuilder();
                result.hasBitMask = false;
                result.bitMask_ = 0;
                return this;
            }

            public bool HasBitVal
            {
                get { return result.hasBitVal; }
            }
            public int BitVal
            {
                get { return result.BitVal; }
                set { SetBitVal(value); }
            }
            public Builder SetBitVal(int value)
            {
                PrepareBuilder();
                result.hasBitVal = true;
                result.bitVal_ = value;
                return this;
            }
            public Builder ClearBitVal()
            {
                PrepareBuilder();
                result.hasBitVal = false;
                result.bitVal_ = 0;
                return this;
            }

            public bool HasImgFlag
            {
                get { return result.hasImgFlag; }
            }
            public int ImgFlag
            {
                get { return result.ImgFlag; }
                set { SetImgFlag(value); }
            }
            public Builder SetImgFlag(int value)
            {
                PrepareBuilder();
                result.hasImgFlag = true;
                result.imgFlag_ = value;
                return this;
            }
            public Builder ClearImgFlag()
            {
                PrepareBuilder();
                result.hasImgFlag = false;
                result.imgFlag_ = 0;
                return this;
            }

            public bool HasRemark
            {
                get { return result.hasRemark; }
            }
            public global::mm.command.SKBuiltinString_t Remark
            {
                get { return result.Remark; }
                set { SetRemark(value); }
            }
            public Builder SetRemark(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRemark = true;
                result.remark_ = value;
                return this;
            }
            public Builder SetRemark(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasRemark = true;
                result.remark_ = builderForValue.Build();
                return this;
            }
            public Builder MergeRemark(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasRemark &&
                    result.remark_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.remark_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.remark_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.remark_ = value;
                }
                result.hasRemark = true;
                return this;
            }
            public Builder ClearRemark()
            {
                PrepareBuilder();
                result.hasRemark = false;
                result.remark_ = null;
                return this;
            }

            public bool HasRemarkPYInitial
            {
                get { return result.hasRemarkPYInitial; }
            }
            public global::mm.command.SKBuiltinString_t RemarkPYInitial
            {
                get { return result.RemarkPYInitial; }
                set { SetRemarkPYInitial(value); }
            }
            public Builder SetRemarkPYInitial(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRemarkPYInitial = true;
                result.remarkPYInitial_ = value;
                return this;
            }
            public Builder SetRemarkPYInitial(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasRemarkPYInitial = true;
                result.remarkPYInitial_ = builderForValue.Build();
                return this;
            }
            public Builder MergeRemarkPYInitial(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasRemarkPYInitial &&
                    result.remarkPYInitial_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.remarkPYInitial_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.remarkPYInitial_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.remarkPYInitial_ = value;
                }
                result.hasRemarkPYInitial = true;
                return this;
            }
            public Builder ClearRemarkPYInitial()
            {
                PrepareBuilder();
                result.hasRemarkPYInitial = false;
                result.remarkPYInitial_ = null;
                return this;
            }

            public bool HasRemarkQuanPin
            {
                get { return result.hasRemarkQuanPin; }
            }
            public global::mm.command.SKBuiltinString_t RemarkQuanPin
            {
                get { return result.RemarkQuanPin; }
                set { SetRemarkQuanPin(value); }
            }
            public Builder SetRemarkQuanPin(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRemarkQuanPin = true;
                result.remarkQuanPin_ = value;
                return this;
            }
            public Builder SetRemarkQuanPin(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasRemarkQuanPin = true;
                result.remarkQuanPin_ = builderForValue.Build();
                return this;
            }
            public Builder MergeRemarkQuanPin(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasRemarkQuanPin &&
                    result.remarkQuanPin_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.remarkQuanPin_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.remarkQuanPin_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.remarkQuanPin_ = value;
                }
                result.hasRemarkQuanPin = true;
                return this;
            }
            public Builder ClearRemarkQuanPin()
            {
                PrepareBuilder();
                result.hasRemarkQuanPin = false;
                result.remarkQuanPin_ = null;
                return this;
            }

            public bool HasContactType
            {
                get { return result.hasContactType; }
            }
            public int ContactType
            {
                get { return result.ContactType; }
                set { SetContactType(value); }
            }
            public Builder SetContactType(int value)
            {
                PrepareBuilder();
                result.hasContactType = true;
                result.contactType_ = value;
                return this;
            }
            public Builder ClearContactType()
            {
                PrepareBuilder();
                result.hasContactType = false;
                result.contactType_ = 0;
                return this;
            }

            public bool HasRoomInfoCount
            {
                get { return result.hasRoomInfoCount; }
            }
            public int RoomInfoCount
            {
                get { return result.RoomInfoCount; }
                set { SetRoomInfoCount(value); }
            }
            public Builder SetRoomInfoCount(int value)
            {
                PrepareBuilder();
                result.hasRoomInfoCount = true;
                result.roomInfoCount_ = value;
                return this;
            }
            public Builder ClearRoomInfoCount()
            {
                PrepareBuilder();
                result.hasRoomInfoCount = false;
                result.roomInfoCount_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.RoomInfo> RoomInfoListList
            {
                get { return PrepareBuilder().roomInfoList_; }
            }
            public int RoomInfoListCount
            {
                get { return result.RoomInfoListCount; }
            }
            public global::mm.command.RoomInfo GetRoomInfoList(int index)
            {
                return result.GetRoomInfoList(index);
            }
            public Builder SetRoomInfoList(int index, global::mm.command.RoomInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.roomInfoList_[index] = value;
                return this;
            }
            public Builder SetRoomInfoList(int index, global::mm.command.RoomInfo.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.roomInfoList_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddRoomInfoList(global::mm.command.RoomInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.roomInfoList_.Add(value);
                return this;
            }
            public Builder AddRoomInfoList(global::mm.command.RoomInfo.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.roomInfoList_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeRoomInfoList(scg::IEnumerable<global::mm.command.RoomInfo> values)
            {
                PrepareBuilder();
                result.roomInfoList_.Add(values);
                return this;
            }
            public Builder ClearRoomInfoList()
            {
                PrepareBuilder();
                result.roomInfoList_.Clear();
                return this;
            }

            public bool HasDomainList
            {
                get { return result.hasDomainList; }
            }
            public global::mm.command.SKBuiltinString_t DomainList
            {
                get { return result.DomainList; }
                set { SetDomainList(value); }
            }
            public Builder SetDomainList(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasDomainList = true;
                result.domainList_ = value;
                return this;
            }
            public Builder SetDomainList(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasDomainList = true;
                result.domainList_ = builderForValue.Build();
                return this;
            }
            public Builder MergeDomainList(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasDomainList &&
                    result.domainList_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.domainList_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.domainList_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.domainList_ = value;
                }
                result.hasDomainList = true;
                return this;
            }
            public Builder ClearDomainList()
            {
                PrepareBuilder();
                result.hasDomainList = false;
                result.domainList_ = null;
                return this;
            }

            public bool HasChatRoomNotify
            {
                get { return result.hasChatRoomNotify; }
            }
            public int ChatRoomNotify
            {
                get { return result.ChatRoomNotify; }
                set { SetChatRoomNotify(value); }
            }
            public Builder SetChatRoomNotify(int value)
            {
                PrepareBuilder();
                result.hasChatRoomNotify = true;
                result.chatRoomNotify_ = value;
                return this;
            }
            public Builder ClearChatRoomNotify()
            {
                PrepareBuilder();
                result.hasChatRoomNotify = false;
                result.chatRoomNotify_ = 0;
                return this;
            }

            public bool HasAddContactScene
            {
                get { return result.hasAddContactScene; }
            }
            public int AddContactScene
            {
                get { return result.AddContactScene; }
                set { SetAddContactScene(value); }
            }
            public Builder SetAddContactScene(int value)
            {
                PrepareBuilder();
                result.hasAddContactScene = true;
                result.addContactScene_ = value;
                return this;
            }
            public Builder ClearAddContactScene()
            {
                PrepareBuilder();
                result.hasAddContactScene = false;
                result.addContactScene_ = 0;
                return this;
            }

            public bool HasProvince
            {
                get { return result.hasProvince; }
            }
            public string Province
            {
                get { return result.Province; }
                set { SetProvince(value); }
            }
            public Builder SetProvince(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasProvince = true;
                result.province_ = value;
                return this;
            }
            public Builder ClearProvince()
            {
                PrepareBuilder();
                result.hasProvince = false;
                result.province_ = "";
                return this;
            }

            public bool HasCity
            {
                get { return result.hasCity; }
            }
            public string City
            {
                get { return result.City; }
                set { SetCity(value); }
            }
            public Builder SetCity(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCity = true;
                result.city_ = value;
                return this;
            }
            public Builder ClearCity()
            {
                PrepareBuilder();
                result.hasCity = false;
                result.city_ = "";
                return this;
            }

            public bool HasSignature
            {
                get { return result.hasSignature; }
            }
            public string Signature
            {
                get { return result.Signature; }
                set { SetSignature(value); }
            }
            public Builder SetSignature(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSignature = true;
                result.signature_ = value;
                return this;
            }
            public Builder ClearSignature()
            {
                PrepareBuilder();
                result.hasSignature = false;
                result.signature_ = "";
                return this;
            }

            public bool HasPersonalCard
            {
                get { return result.hasPersonalCard; }
            }
            public int PersonalCard
            {
                get { return result.PersonalCard; }
                set { SetPersonalCard(value); }
            }
            public Builder SetPersonalCard(int value)
            {
                PrepareBuilder();
                result.hasPersonalCard = true;
                result.personalCard_ = value;
                return this;
            }
            public Builder ClearPersonalCard()
            {
                PrepareBuilder();
                result.hasPersonalCard = false;
                result.personalCard_ = 0;
                return this;
            }

            public bool HasHasWeiXinHdHeadImg
            {
                get { return result.hasHasWeiXinHdHeadImg; }
            }
            public int HasWeiXinHdHeadImg
            {
                get { return result.HasWeiXinHdHeadImg; }
                set { SetHasWeiXinHdHeadImg(value); }
            }
            public Builder SetHasWeiXinHdHeadImg(int value)
            {
                PrepareBuilder();
                result.hasHasWeiXinHdHeadImg = true;
                result.hasWeiXinHdHeadImg_ = value;
                return this;
            }
            public Builder ClearHasWeiXinHdHeadImg()
            {
                PrepareBuilder();
                result.hasHasWeiXinHdHeadImg = false;
                result.hasWeiXinHdHeadImg_ = 0;
                return this;
            }

            public bool HasVerifyFlag
            {
                get { return result.hasVerifyFlag; }
            }
            public int VerifyFlag
            {
                get { return result.VerifyFlag; }
                set { SetVerifyFlag(value); }
            }
            public Builder SetVerifyFlag(int value)
            {
                PrepareBuilder();
                result.hasVerifyFlag = true;
                result.verifyFlag_ = value;
                return this;
            }
            public Builder ClearVerifyFlag()
            {
                PrepareBuilder();
                result.hasVerifyFlag = false;
                result.verifyFlag_ = 0;
                return this;
            }

            public bool HasVerifyInfo
            {
                get { return result.hasVerifyInfo; }
            }
            public string VerifyInfo
            {
                get { return result.VerifyInfo; }
                set { SetVerifyInfo(value); }
            }
            public Builder SetVerifyInfo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVerifyInfo = true;
                result.verifyInfo_ = value;
                return this;
            }
            public Builder ClearVerifyInfo()
            {
                PrepareBuilder();
                result.hasVerifyInfo = false;
                result.verifyInfo_ = "";
                return this;
            }

            public bool HasLevel
            {
                get { return result.hasLevel; }
            }
            public int Level
            {
                get { return result.Level; }
                set { SetLevel(value); }
            }
            public Builder SetLevel(int value)
            {
                PrepareBuilder();
                result.hasLevel = true;
                result.level_ = value;
                return this;
            }
            public Builder ClearLevel()
            {
                PrepareBuilder();
                result.hasLevel = false;
                result.level_ = 0;
                return this;
            }

            public bool HasSource
            {
                get { return result.hasSource; }
            }
            public int Source
            {
                get { return result.Source; }
                set { SetSource(value); }
            }
            public Builder SetSource(int value)
            {
                PrepareBuilder();
                result.hasSource = true;
                result.source_ = value;
                return this;
            }
            public Builder ClearSource()
            {
                PrepareBuilder();
                result.hasSource = false;
                result.source_ = 0;
                return this;
            }

            public bool HasWeibo
            {
                get { return result.hasWeibo; }
            }
            public string Weibo
            {
                get { return result.Weibo; }
                set { SetWeibo(value); }
            }
            public Builder SetWeibo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWeibo = true;
                result.weibo_ = value;
                return this;
            }
            public Builder ClearWeibo()
            {
                PrepareBuilder();
                result.hasWeibo = false;
                result.weibo_ = "";
                return this;
            }

            public bool HasVerifyContent
            {
                get { return result.hasVerifyContent; }
            }
            public string VerifyContent
            {
                get { return result.VerifyContent; }
                set { SetVerifyContent(value); }
            }
            public Builder SetVerifyContent(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVerifyContent = true;
                result.verifyContent_ = value;
                return this;
            }
            public Builder ClearVerifyContent()
            {
                PrepareBuilder();
                result.hasVerifyContent = false;
                result.verifyContent_ = "";
                return this;
            }

            public bool HasAlias
            {
                get { return result.hasAlias; }
            }
            public string Alias
            {
                get { return result.Alias; }
                set { SetAlias(value); }
            }
            public Builder SetAlias(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlias = true;
                result.alias_ = value;
                return this;
            }
            public Builder ClearAlias()
            {
                PrepareBuilder();
                result.hasAlias = false;
                result.alias_ = "";
                return this;
            }

            public bool HasChatRoomOwner
            {
                get { return result.hasChatRoomOwner; }
            }
            public string ChatRoomOwner
            {
                get { return result.ChatRoomOwner; }
                set { SetChatRoomOwner(value); }
            }
            public Builder SetChatRoomOwner(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasChatRoomOwner = true;
                result.chatRoomOwner_ = value;
                return this;
            }
            public Builder ClearChatRoomOwner()
            {
                PrepareBuilder();
                result.hasChatRoomOwner = false;
                result.chatRoomOwner_ = "";
                return this;
            }

            public bool HasWeiboNickname
            {
                get { return result.hasWeiboNickname; }
            }
            public string WeiboNickname
            {
                get { return result.WeiboNickname; }
                set { SetWeiboNickname(value); }
            }
            public Builder SetWeiboNickname(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWeiboNickname = true;
                result.weiboNickname_ = value;
                return this;
            }
            public Builder ClearWeiboNickname()
            {
                PrepareBuilder();
                result.hasWeiboNickname = false;
                result.weiboNickname_ = "";
                return this;
            }

            public bool HasWeiboFlag
            {
                get { return result.hasWeiboFlag; }
            }
            public int WeiboFlag
            {
                get { return result.WeiboFlag; }
                set { SetWeiboFlag(value); }
            }
            public Builder SetWeiboFlag(int value)
            {
                PrepareBuilder();
                result.hasWeiboFlag = true;
                result.weiboFlag_ = value;
                return this;
            }
            public Builder ClearWeiboFlag()
            {
                PrepareBuilder();
                result.hasWeiboFlag = false;
                result.weiboFlag_ = 0;
                return this;
            }

            public bool HasAlbumStyle
            {
                get { return result.hasAlbumStyle; }
            }
            public int AlbumStyle
            {
                get { return result.AlbumStyle; }
                set { SetAlbumStyle(value); }
            }
            public Builder SetAlbumStyle(int value)
            {
                PrepareBuilder();
                result.hasAlbumStyle = true;
                result.albumStyle_ = value;
                return this;
            }
            public Builder ClearAlbumStyle()
            {
                PrepareBuilder();
                result.hasAlbumStyle = false;
                result.albumStyle_ = 0;
                return this;
            }

            public bool HasAlbumFlag
            {
                get { return result.hasAlbumFlag; }
            }
            public int AlbumFlag
            {
                get { return result.AlbumFlag; }
                set { SetAlbumFlag(value); }
            }
            public Builder SetAlbumFlag(int value)
            {
                PrepareBuilder();
                result.hasAlbumFlag = true;
                result.albumFlag_ = value;
                return this;
            }
            public Builder ClearAlbumFlag()
            {
                PrepareBuilder();
                result.hasAlbumFlag = false;
                result.albumFlag_ = 0;
                return this;
            }

            public bool HasAlbumBGImgID
            {
                get { return result.hasAlbumBGImgID; }
            }
            public string AlbumBGImgID
            {
                get { return result.AlbumBGImgID; }
                set { SetAlbumBGImgID(value); }
            }
            public Builder SetAlbumBGImgID(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlbumBGImgID = true;
                result.albumBGImgID_ = value;
                return this;
            }
            public Builder ClearAlbumBGImgID()
            {
                PrepareBuilder();
                result.hasAlbumBGImgID = false;
                result.albumBGImgID_ = "";
                return this;
            }

            public bool HasSnsUserInfo
            {
                get { return result.hasSnsUserInfo; }
            }
            public global::mm.command.SnsUser SnsUserInfo
            {
                get { return result.SnsUserInfo; }
                set { SetSnsUserInfo(value); }
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = value;
                return this;
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSnsUserInfo &&
                    result.snsUserInfo_ != global::mm.command.SnsUser.DefaultInstance)
                {
                    result.snsUserInfo_ = global::mm.command.SnsUser.CreateBuilder(result.snsUserInfo_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.snsUserInfo_ = value;
                }
                result.hasSnsUserInfo = true;
                return this;
            }
            public Builder ClearSnsUserInfo()
            {
                PrepareBuilder();
                result.hasSnsUserInfo = false;
                result.snsUserInfo_ = null;
                return this;
            }

            public bool HasCountry
            {
                get { return result.hasCountry; }
            }
            public string Country
            {
                get { return result.Country; }
                set { SetCountry(value); }
            }
            public Builder SetCountry(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCountry = true;
                result.country_ = value;
                return this;
            }
            public Builder ClearCountry()
            {
                PrepareBuilder();
                result.hasCountry = false;
                result.country_ = "";
                return this;
            }

            public bool HasBigHeadImgUrl
            {
                get { return result.hasBigHeadImgUrl; }
            }
            public string BigHeadImgUrl
            {
                get { return result.BigHeadImgUrl; }
                set { SetBigHeadImgUrl(value); }
            }
            public Builder SetBigHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBigHeadImgUrl = true;
                result.bigHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearBigHeadImgUrl()
            {
                PrepareBuilder();
                result.hasBigHeadImgUrl = false;
                result.bigHeadImgUrl_ = "";
                return this;
            }

            public bool HasSmallHeadImgUrl
            {
                get { return result.hasSmallHeadImgUrl; }
            }
            public string SmallHeadImgUrl
            {
                get { return result.SmallHeadImgUrl; }
                set { SetSmallHeadImgUrl(value); }
            }
            public Builder SetSmallHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSmallHeadImgUrl = true;
                result.smallHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearSmallHeadImgUrl()
            {
                PrepareBuilder();
                result.hasSmallHeadImgUrl = false;
                result.smallHeadImgUrl_ = "";
                return this;
            }

            public bool HasMyBrandList
            {
                get { return result.hasMyBrandList; }
            }
            public string MyBrandList
            {
                get { return result.MyBrandList; }
                set { SetMyBrandList(value); }
            }
            public Builder SetMyBrandList(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMyBrandList = true;
                result.myBrandList_ = value;
                return this;
            }
            public Builder ClearMyBrandList()
            {
                PrepareBuilder();
                result.hasMyBrandList = false;
                result.myBrandList_ = "";
                return this;
            }

            public bool HasCustomizedInfo
            {
                get { return result.hasCustomizedInfo; }
            }
            public global::mm.command.CustomInfo CustomizedInfo
            {
                get { return result.CustomizedInfo; }
                set { SetCustomizedInfo(value); }
            }
            public Builder SetCustomizedInfo(global::mm.command.CustomInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCustomizedInfo = true;
                result.customizedInfo_ = value;
                return this;
            }
            public Builder SetCustomizedInfo(global::mm.command.CustomInfo.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasCustomizedInfo = true;
                result.customizedInfo_ = builderForValue.Build();
                return this;
            }
            public Builder MergeCustomizedInfo(global::mm.command.CustomInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasCustomizedInfo &&
                    result.customizedInfo_ != global::mm.command.CustomInfo.DefaultInstance)
                {
                    result.customizedInfo_ = global::mm.command.CustomInfo.CreateBuilder(result.customizedInfo_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.customizedInfo_ = value;
                }
                result.hasCustomizedInfo = true;
                return this;
            }
            public Builder ClearCustomizedInfo()
            {
                PrepareBuilder();
                result.hasCustomizedInfo = false;
                result.customizedInfo_ = null;
                return this;
            }

            public bool HasChatRoomData
            {
                get { return result.hasChatRoomData; }
            }
            public string ChatRoomData
            {
                get { return result.ChatRoomData; }
                set { SetChatRoomData(value); }
            }
            public Builder SetChatRoomData(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasChatRoomData = true;
                result.chatRoomData_ = value;
                return this;
            }
            public Builder ClearChatRoomData()
            {
                PrepareBuilder();
                result.hasChatRoomData = false;
                result.chatRoomData_ = "";
                return this;
            }

            public bool HasHeadImgMd5
            {
                get { return result.hasHeadImgMd5; }
            }
            public string HeadImgMd5
            {
                get { return result.HeadImgMd5; }
                set { SetHeadImgMd5(value); }
            }
            public Builder SetHeadImgMd5(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasHeadImgMd5 = true;
                result.headImgMd5_ = value;
                return this;
            }
            public Builder ClearHeadImgMd5()
            {
                PrepareBuilder();
                result.hasHeadImgMd5 = false;
                result.headImgMd5_ = "";
                return this;
            }

            public bool HasEncryptUserName
            {
                get { return result.hasEncryptUserName; }
            }
            public string EncryptUserName
            {
                get { return result.EncryptUserName; }
                set { SetEncryptUserName(value); }
            }
            public Builder SetEncryptUserName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasEncryptUserName = true;
                result.encryptUserName_ = value;
                return this;
            }
            public Builder ClearEncryptUserName()
            {
                PrepareBuilder();
                result.hasEncryptUserName = false;
                result.encryptUserName_ = "";
                return this;
            }
        }
        static ContactProfile()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MsgTip : pb::GeneratedMessage<MsgTip, MsgTip.Builder>
    {
        private MsgTip() { }
        private static readonly MsgTip defaultInstance = new MsgTip().MakeReadOnly();
        private static readonly string[] _msgTipFieldNames = new string[] { "FromUserName", "MsgId", "Status", "ToUserName" };
        private static readonly uint[] _msgTipFieldTags = new uint[] { 18, 8, 32, 26 };
        public static MsgTip DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override MsgTip DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override MsgTip ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_MsgTip__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<MsgTip, MsgTip.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_MsgTip__FieldAccessorTable; }
        }

        public const int MsgIdFieldNumber = 1;
        private bool hasMsgId;
        private int msgId_;
        public bool HasMsgId
        {
            get { return hasMsgId; }
        }
        public int MsgId
        {
            get { return msgId_; }
        }

        public const int FromUserNameFieldNumber = 2;
        private bool hasFromUserName;
        private global::mm.command.SKBuiltinString_t fromUserName_;
        public bool HasFromUserName
        {
            get { return hasFromUserName; }
        }
        public global::mm.command.SKBuiltinString_t FromUserName
        {
            get { return fromUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int ToUserNameFieldNumber = 3;
        private bool hasToUserName;
        private global::mm.command.SKBuiltinString_t toUserName_;
        public bool HasToUserName
        {
            get { return hasToUserName; }
        }
        public global::mm.command.SKBuiltinString_t ToUserName
        {
            get { return toUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int StatusFieldNumber = 4;
        private bool hasStatus;
        private int status_;
        public bool HasStatus
        {
            get { return hasStatus; }
        }
        public int Status
        {
            get { return status_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasMsgId) return false;
                if (!hasFromUserName) return false;
                if (!hasToUserName) return false;
                if (!hasStatus) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _msgTipFieldNames;
            if (hasMsgId)
            {
                output.WriteInt32(1, field_names[1], MsgId);
            }
            if (hasFromUserName)
            {
                output.WriteMessage(2, field_names[0], FromUserName);
            }
            if (hasToUserName)
            {
                output.WriteMessage(3, field_names[3], ToUserName);
            }
            if (hasStatus)
            {
                output.WriteInt32(4, field_names[2], Status);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasMsgId)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, MsgId);
                }
                if (hasFromUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, FromUserName);
                }
                if (hasToUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, ToUserName);
                }
                if (hasStatus)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, Status);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static MsgTip ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MsgTip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MsgTip ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MsgTip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MsgTip ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MsgTip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static MsgTip ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static MsgTip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static MsgTip ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MsgTip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private MsgTip MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(MsgTip prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<MsgTip, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(MsgTip cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private MsgTip result;

            private MsgTip PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    MsgTip original = result;
                    result = new MsgTip();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override MsgTip MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.MsgTip.Descriptor; }
            }

            public override MsgTip DefaultInstanceForType
            {
                get { return global::mm.command.MsgTip.DefaultInstance; }
            }

            public override MsgTip BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is MsgTip)
                {
                    return MergeFrom((MsgTip)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(MsgTip other)
            {
                if (other == global::mm.command.MsgTip.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasMsgId)
                {
                    MsgId = other.MsgId;
                }
                if (other.HasFromUserName)
                {
                    MergeFromUserName(other.FromUserName);
                }
                if (other.HasToUserName)
                {
                    MergeToUserName(other.ToUserName);
                }
                if (other.HasStatus)
                {
                    Status = other.Status;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_msgTipFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _msgTipFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasMsgId = input.ReadInt32(ref result.msgId_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasFromUserName)
                                {
                                    subBuilder.MergeFrom(FromUserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                FromUserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasToUserName)
                                {
                                    subBuilder.MergeFrom(ToUserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ToUserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 32:
                            {
                                result.hasStatus = input.ReadInt32(ref result.status_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasMsgId
            {
                get { return result.hasMsgId; }
            }
            public int MsgId
            {
                get { return result.MsgId; }
                set { SetMsgId(value); }
            }
            public Builder SetMsgId(int value)
            {
                PrepareBuilder();
                result.hasMsgId = true;
                result.msgId_ = value;
                return this;
            }
            public Builder ClearMsgId()
            {
                PrepareBuilder();
                result.hasMsgId = false;
                result.msgId_ = 0;
                return this;
            }

            public bool HasFromUserName
            {
                get { return result.hasFromUserName; }
            }
            public global::mm.command.SKBuiltinString_t FromUserName
            {
                get { return result.FromUserName; }
                set { SetFromUserName(value); }
            }
            public Builder SetFromUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasFromUserName = true;
                result.fromUserName_ = value;
                return this;
            }
            public Builder SetFromUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasFromUserName = true;
                result.fromUserName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeFromUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasFromUserName &&
                    result.fromUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.fromUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.fromUserName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.fromUserName_ = value;
                }
                result.hasFromUserName = true;
                return this;
            }
            public Builder ClearFromUserName()
            {
                PrepareBuilder();
                result.hasFromUserName = false;
                result.fromUserName_ = null;
                return this;
            }

            public bool HasToUserName
            {
                get { return result.hasToUserName; }
            }
            public global::mm.command.SKBuiltinString_t ToUserName
            {
                get { return result.ToUserName; }
                set { SetToUserName(value); }
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = value;
                return this;
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasToUserName &&
                    result.toUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.toUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.toUserName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.toUserName_ = value;
                }
                result.hasToUserName = true;
                return this;
            }
            public Builder ClearToUserName()
            {
                PrepareBuilder();
                result.hasToUserName = false;
                result.toUserName_ = null;
                return this;
            }

            public bool HasStatus
            {
                get { return result.hasStatus; }
            }
            public int Status
            {
                get { return result.Status; }
                set { SetStatus(value); }
            }
            public Builder SetStatus(int value)
            {
                PrepareBuilder();
                result.hasStatus = true;
                result.status_ = value;
                return this;
            }
            public Builder ClearStatus()
            {
                PrepareBuilder();
                result.hasStatus = false;
                result.status_ = 0;
                return this;
            }
        }
        static MsgTip()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MsgTip2 : pb::GeneratedMessage<MsgTip2, MsgTip2.Builder>
    {
        private MsgTip2() { }
        private static readonly MsgTip2 defaultInstance = new MsgTip2().MakeReadOnly();
        private static readonly string[] _msgTip2FieldNames = new string[] { "BigChatRoomInvite", "BigChatRoomQuota", "BigChatRoomSize", "BigHeadImgUrl", "ExtXml", "GrayscaleFlag", "MainAcctType", "MsgPushSound", "MyBrandList", "SafeDevice", "SafeDeviceList", "SafeMobile", "SmallHeadImgUrl", "SnsUserInfo", "VoipPushSound" };
        private static readonly uint[] _msgTip2FieldTags = new uint[] { 56, 48, 40, 74, 98, 120, 88, 26, 18, 112, 106, 66, 82, 10, 34 };
        public static MsgTip2 DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override MsgTip2 DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override MsgTip2 ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_MsgTip2__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<MsgTip2, MsgTip2.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_MsgTip2__FieldAccessorTable; }
        }

        public const int SnsUserInfoFieldNumber = 1;
        private bool hasSnsUserInfo;
        private global::mm.command.SnsUser snsUserInfo_;
        public bool HasSnsUserInfo
        {
            get { return hasSnsUserInfo; }
        }
        public global::mm.command.SnsUser SnsUserInfo
        {
            get { return snsUserInfo_ ?? global::mm.command.SnsUser.DefaultInstance; }
        }

        public const int MyBrandListFieldNumber = 2;
        private bool hasMyBrandList;
        private string myBrandList_ = "";
        public bool HasMyBrandList
        {
            get { return hasMyBrandList; }
        }
        public string MyBrandList
        {
            get { return myBrandList_; }
        }

        public const int MsgPushSoundFieldNumber = 3;
        private bool hasMsgPushSound;
        private string msgPushSound_ = "";
        public bool HasMsgPushSound
        {
            get { return hasMsgPushSound; }
        }
        public string MsgPushSound
        {
            get { return msgPushSound_; }
        }

        public const int VoipPushSoundFieldNumber = 4;
        private bool hasVoipPushSound;
        private string voipPushSound_ = "";
        public bool HasVoipPushSound
        {
            get { return hasVoipPushSound; }
        }
        public string VoipPushSound
        {
            get { return voipPushSound_; }
        }

        public const int BigChatRoomSizeFieldNumber = 5;
        private bool hasBigChatRoomSize;
        private int bigChatRoomSize_;
        public bool HasBigChatRoomSize
        {
            get { return hasBigChatRoomSize; }
        }
        public int BigChatRoomSize
        {
            get { return bigChatRoomSize_; }
        }

        public const int BigChatRoomQuotaFieldNumber = 6;
        private bool hasBigChatRoomQuota;
        private int bigChatRoomQuota_;
        public bool HasBigChatRoomQuota
        {
            get { return hasBigChatRoomQuota; }
        }
        public int BigChatRoomQuota
        {
            get { return bigChatRoomQuota_; }
        }

        public const int BigChatRoomInviteFieldNumber = 7;
        private bool hasBigChatRoomInvite;
        private int bigChatRoomInvite_;
        public bool HasBigChatRoomInvite
        {
            get { return hasBigChatRoomInvite; }
        }
        public int BigChatRoomInvite
        {
            get { return bigChatRoomInvite_; }
        }

        public const int SafeMobileFieldNumber = 8;
        private bool hasSafeMobile;
        private string safeMobile_ = "";
        public bool HasSafeMobile
        {
            get { return hasSafeMobile; }
        }
        public string SafeMobile
        {
            get { return safeMobile_; }
        }

        public const int BigHeadImgUrlFieldNumber = 9;
        private bool hasBigHeadImgUrl;
        private string bigHeadImgUrl_ = "";
        public bool HasBigHeadImgUrl
        {
            get { return hasBigHeadImgUrl; }
        }
        public string BigHeadImgUrl
        {
            get { return bigHeadImgUrl_; }
        }

        public const int SmallHeadImgUrlFieldNumber = 10;
        private bool hasSmallHeadImgUrl;
        private string smallHeadImgUrl_ = "";
        public bool HasSmallHeadImgUrl
        {
            get { return hasSmallHeadImgUrl; }
        }
        public string SmallHeadImgUrl
        {
            get { return smallHeadImgUrl_; }
        }

        public const int MainAcctTypeFieldNumber = 11;
        private bool hasMainAcctType;
        private int mainAcctType_;
        public bool HasMainAcctType
        {
            get { return hasMainAcctType; }
        }
        public int MainAcctType
        {
            get { return mainAcctType_; }
        }

        public const int ExtXmlFieldNumber = 12;
        private bool hasExtXml;
        private global::mm.command.SKBuiltinString_t extXml_;
        public bool HasExtXml
        {
            get { return hasExtXml; }
        }
        public global::mm.command.SKBuiltinString_t ExtXml
        {
            get { return extXml_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int SafeDeviceListFieldNumber = 13;
        private bool hasSafeDeviceList;
        private global::mm.command.SafeDevice safeDeviceList_;
        public bool HasSafeDeviceList
        {
            get { return hasSafeDeviceList; }
        }
        public global::mm.command.SafeDevice SafeDeviceList
        {
            get { return safeDeviceList_ ?? global::mm.command.SafeDevice.DefaultInstance; }
        }

        public const int SafeDeviceFieldNumber = 14;
        private bool hasSafeDevice;
        private int safeDevice_;
        public bool HasSafeDevice
        {
            get { return hasSafeDevice; }
        }
        public int SafeDevice
        {
            get { return safeDevice_; }
        }

        public const int GrayscaleFlagFieldNumber = 15;
        private bool hasGrayscaleFlag;
        private int grayscaleFlag_;
        public bool HasGrayscaleFlag
        {
            get { return hasGrayscaleFlag; }
        }
        public int GrayscaleFlag
        {
            get { return grayscaleFlag_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasSnsUserInfo) return false;
                if (!SnsUserInfo.IsInitialized) return false;
                if (HasSafeDeviceList)
                {
                    if (!SafeDeviceList.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _msgTip2FieldNames;
            if (hasSnsUserInfo)
            {
                output.WriteMessage(1, field_names[13], SnsUserInfo);
            }
            if (hasMyBrandList)
            {
                output.WriteString(2, field_names[8], MyBrandList);
            }
            if (hasMsgPushSound)
            {
                output.WriteString(3, field_names[7], MsgPushSound);
            }
            if (hasVoipPushSound)
            {
                output.WriteString(4, field_names[14], VoipPushSound);
            }
            if (hasBigChatRoomSize)
            {
                output.WriteInt32(5, field_names[2], BigChatRoomSize);
            }
            if (hasBigChatRoomQuota)
            {
                output.WriteInt32(6, field_names[1], BigChatRoomQuota);
            }
            if (hasBigChatRoomInvite)
            {
                output.WriteInt32(7, field_names[0], BigChatRoomInvite);
            }
            if (hasSafeMobile)
            {
                output.WriteString(8, field_names[11], SafeMobile);
            }
            if (hasBigHeadImgUrl)
            {
                output.WriteString(9, field_names[3], BigHeadImgUrl);
            }
            if (hasSmallHeadImgUrl)
            {
                output.WriteString(10, field_names[12], SmallHeadImgUrl);
            }
            if (hasMainAcctType)
            {
                output.WriteInt32(11, field_names[6], MainAcctType);
            }
            if (hasExtXml)
            {
                output.WriteMessage(12, field_names[4], ExtXml);
            }
            if (hasSafeDeviceList)
            {
                output.WriteMessage(13, field_names[10], SafeDeviceList);
            }
            if (hasSafeDevice)
            {
                output.WriteInt32(14, field_names[9], SafeDevice);
            }
            if (hasGrayscaleFlag)
            {
                output.WriteInt32(15, field_names[5], GrayscaleFlag);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasSnsUserInfo)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, SnsUserInfo);
                }
                if (hasMyBrandList)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, MyBrandList);
                }
                if (hasMsgPushSound)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, MsgPushSound);
                }
                if (hasVoipPushSound)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, VoipPushSound);
                }
                if (hasBigChatRoomSize)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(5, BigChatRoomSize);
                }
                if (hasBigChatRoomQuota)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(6, BigChatRoomQuota);
                }
                if (hasBigChatRoomInvite)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, BigChatRoomInvite);
                }
                if (hasSafeMobile)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(8, SafeMobile);
                }
                if (hasBigHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(9, BigHeadImgUrl);
                }
                if (hasSmallHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(10, SmallHeadImgUrl);
                }
                if (hasMainAcctType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(11, MainAcctType);
                }
                if (hasExtXml)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(12, ExtXml);
                }
                if (hasSafeDeviceList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(13, SafeDeviceList);
                }
                if (hasSafeDevice)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(14, SafeDevice);
                }
                if (hasGrayscaleFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(15, GrayscaleFlag);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static MsgTip2 ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MsgTip2 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MsgTip2 ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MsgTip2 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MsgTip2 ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MsgTip2 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static MsgTip2 ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static MsgTip2 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static MsgTip2 ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MsgTip2 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private MsgTip2 MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(MsgTip2 prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<MsgTip2, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(MsgTip2 cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private MsgTip2 result;

            private MsgTip2 PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    MsgTip2 original = result;
                    result = new MsgTip2();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override MsgTip2 MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.MsgTip2.Descriptor; }
            }

            public override MsgTip2 DefaultInstanceForType
            {
                get { return global::mm.command.MsgTip2.DefaultInstance; }
            }

            public override MsgTip2 BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is MsgTip2)
                {
                    return MergeFrom((MsgTip2)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(MsgTip2 other)
            {
                if (other == global::mm.command.MsgTip2.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasSnsUserInfo)
                {
                    MergeSnsUserInfo(other.SnsUserInfo);
                }
                if (other.HasMyBrandList)
                {
                    MyBrandList = other.MyBrandList;
                }
                if (other.HasMsgPushSound)
                {
                    MsgPushSound = other.MsgPushSound;
                }
                if (other.HasVoipPushSound)
                {
                    VoipPushSound = other.VoipPushSound;
                }
                if (other.HasBigChatRoomSize)
                {
                    BigChatRoomSize = other.BigChatRoomSize;
                }
                if (other.HasBigChatRoomQuota)
                {
                    BigChatRoomQuota = other.BigChatRoomQuota;
                }
                if (other.HasBigChatRoomInvite)
                {
                    BigChatRoomInvite = other.BigChatRoomInvite;
                }
                if (other.HasSafeMobile)
                {
                    SafeMobile = other.SafeMobile;
                }
                if (other.HasBigHeadImgUrl)
                {
                    BigHeadImgUrl = other.BigHeadImgUrl;
                }
                if (other.HasSmallHeadImgUrl)
                {
                    SmallHeadImgUrl = other.SmallHeadImgUrl;
                }
                if (other.HasMainAcctType)
                {
                    MainAcctType = other.MainAcctType;
                }
                if (other.HasExtXml)
                {
                    MergeExtXml(other.ExtXml);
                }
                if (other.HasSafeDeviceList)
                {
                    MergeSafeDeviceList(other.SafeDeviceList);
                }
                if (other.HasSafeDevice)
                {
                    SafeDevice = other.SafeDevice;
                }
                if (other.HasGrayscaleFlag)
                {
                    GrayscaleFlag = other.GrayscaleFlag;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_msgTip2FieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _msgTip2FieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SnsUser.Builder subBuilder = global::mm.command.SnsUser.CreateBuilder();
                                if (result.hasSnsUserInfo)
                                {
                                    subBuilder.MergeFrom(SnsUserInfo);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                SnsUserInfo = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                result.hasMyBrandList = input.ReadString(ref result.myBrandList_);
                                break;
                            }
                        case 26:
                            {
                                result.hasMsgPushSound = input.ReadString(ref result.msgPushSound_);
                                break;
                            }
                        case 34:
                            {
                                result.hasVoipPushSound = input.ReadString(ref result.voipPushSound_);
                                break;
                            }
                        case 40:
                            {
                                result.hasBigChatRoomSize = input.ReadInt32(ref result.bigChatRoomSize_);
                                break;
                            }
                        case 48:
                            {
                                result.hasBigChatRoomQuota = input.ReadInt32(ref result.bigChatRoomQuota_);
                                break;
                            }
                        case 56:
                            {
                                result.hasBigChatRoomInvite = input.ReadInt32(ref result.bigChatRoomInvite_);
                                break;
                            }
                        case 66:
                            {
                                result.hasSafeMobile = input.ReadString(ref result.safeMobile_);
                                break;
                            }
                        case 74:
                            {
                                result.hasBigHeadImgUrl = input.ReadString(ref result.bigHeadImgUrl_);
                                break;
                            }
                        case 82:
                            {
                                result.hasSmallHeadImgUrl = input.ReadString(ref result.smallHeadImgUrl_);
                                break;
                            }
                        case 88:
                            {
                                result.hasMainAcctType = input.ReadInt32(ref result.mainAcctType_);
                                break;
                            }
                        case 98:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasExtXml)
                                {
                                    subBuilder.MergeFrom(ExtXml);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ExtXml = subBuilder.BuildPartial();
                                break;
                            }
                        case 106:
                            {
                                global::mm.command.SafeDevice.Builder subBuilder = global::mm.command.SafeDevice.CreateBuilder();
                                if (result.hasSafeDeviceList)
                                {
                                    subBuilder.MergeFrom(SafeDeviceList);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                SafeDeviceList = subBuilder.BuildPartial();
                                break;
                            }
                        case 112:
                            {
                                result.hasSafeDevice = input.ReadInt32(ref result.safeDevice_);
                                break;
                            }
                        case 120:
                            {
                                result.hasGrayscaleFlag = input.ReadInt32(ref result.grayscaleFlag_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasSnsUserInfo
            {
                get { return result.hasSnsUserInfo; }
            }
            public global::mm.command.SnsUser SnsUserInfo
            {
                get { return result.SnsUserInfo; }
                set { SetSnsUserInfo(value); }
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = value;
                return this;
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSnsUserInfo &&
                    result.snsUserInfo_ != global::mm.command.SnsUser.DefaultInstance)
                {
                    result.snsUserInfo_ = global::mm.command.SnsUser.CreateBuilder(result.snsUserInfo_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.snsUserInfo_ = value;
                }
                result.hasSnsUserInfo = true;
                return this;
            }
            public Builder ClearSnsUserInfo()
            {
                PrepareBuilder();
                result.hasSnsUserInfo = false;
                result.snsUserInfo_ = null;
                return this;
            }

            public bool HasMyBrandList
            {
                get { return result.hasMyBrandList; }
            }
            public string MyBrandList
            {
                get { return result.MyBrandList; }
                set { SetMyBrandList(value); }
            }
            public Builder SetMyBrandList(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMyBrandList = true;
                result.myBrandList_ = value;
                return this;
            }
            public Builder ClearMyBrandList()
            {
                PrepareBuilder();
                result.hasMyBrandList = false;
                result.myBrandList_ = "";
                return this;
            }

            public bool HasMsgPushSound
            {
                get { return result.hasMsgPushSound; }
            }
            public string MsgPushSound
            {
                get { return result.MsgPushSound; }
                set { SetMsgPushSound(value); }
            }
            public Builder SetMsgPushSound(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMsgPushSound = true;
                result.msgPushSound_ = value;
                return this;
            }
            public Builder ClearMsgPushSound()
            {
                PrepareBuilder();
                result.hasMsgPushSound = false;
                result.msgPushSound_ = "";
                return this;
            }

            public bool HasVoipPushSound
            {
                get { return result.hasVoipPushSound; }
            }
            public string VoipPushSound
            {
                get { return result.VoipPushSound; }
                set { SetVoipPushSound(value); }
            }
            public Builder SetVoipPushSound(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVoipPushSound = true;
                result.voipPushSound_ = value;
                return this;
            }
            public Builder ClearVoipPushSound()
            {
                PrepareBuilder();
                result.hasVoipPushSound = false;
                result.voipPushSound_ = "";
                return this;
            }

            public bool HasBigChatRoomSize
            {
                get { return result.hasBigChatRoomSize; }
            }
            public int BigChatRoomSize
            {
                get { return result.BigChatRoomSize; }
                set { SetBigChatRoomSize(value); }
            }
            public Builder SetBigChatRoomSize(int value)
            {
                PrepareBuilder();
                result.hasBigChatRoomSize = true;
                result.bigChatRoomSize_ = value;
                return this;
            }
            public Builder ClearBigChatRoomSize()
            {
                PrepareBuilder();
                result.hasBigChatRoomSize = false;
                result.bigChatRoomSize_ = 0;
                return this;
            }

            public bool HasBigChatRoomQuota
            {
                get { return result.hasBigChatRoomQuota; }
            }
            public int BigChatRoomQuota
            {
                get { return result.BigChatRoomQuota; }
                set { SetBigChatRoomQuota(value); }
            }
            public Builder SetBigChatRoomQuota(int value)
            {
                PrepareBuilder();
                result.hasBigChatRoomQuota = true;
                result.bigChatRoomQuota_ = value;
                return this;
            }
            public Builder ClearBigChatRoomQuota()
            {
                PrepareBuilder();
                result.hasBigChatRoomQuota = false;
                result.bigChatRoomQuota_ = 0;
                return this;
            }

            public bool HasBigChatRoomInvite
            {
                get { return result.hasBigChatRoomInvite; }
            }
            public int BigChatRoomInvite
            {
                get { return result.BigChatRoomInvite; }
                set { SetBigChatRoomInvite(value); }
            }
            public Builder SetBigChatRoomInvite(int value)
            {
                PrepareBuilder();
                result.hasBigChatRoomInvite = true;
                result.bigChatRoomInvite_ = value;
                return this;
            }
            public Builder ClearBigChatRoomInvite()
            {
                PrepareBuilder();
                result.hasBigChatRoomInvite = false;
                result.bigChatRoomInvite_ = 0;
                return this;
            }

            public bool HasSafeMobile
            {
                get { return result.hasSafeMobile; }
            }
            public string SafeMobile
            {
                get { return result.SafeMobile; }
                set { SetSafeMobile(value); }
            }
            public Builder SetSafeMobile(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSafeMobile = true;
                result.safeMobile_ = value;
                return this;
            }
            public Builder ClearSafeMobile()
            {
                PrepareBuilder();
                result.hasSafeMobile = false;
                result.safeMobile_ = "";
                return this;
            }

            public bool HasBigHeadImgUrl
            {
                get { return result.hasBigHeadImgUrl; }
            }
            public string BigHeadImgUrl
            {
                get { return result.BigHeadImgUrl; }
                set { SetBigHeadImgUrl(value); }
            }
            public Builder SetBigHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBigHeadImgUrl = true;
                result.bigHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearBigHeadImgUrl()
            {
                PrepareBuilder();
                result.hasBigHeadImgUrl = false;
                result.bigHeadImgUrl_ = "";
                return this;
            }

            public bool HasSmallHeadImgUrl
            {
                get { return result.hasSmallHeadImgUrl; }
            }
            public string SmallHeadImgUrl
            {
                get { return result.SmallHeadImgUrl; }
                set { SetSmallHeadImgUrl(value); }
            }
            public Builder SetSmallHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSmallHeadImgUrl = true;
                result.smallHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearSmallHeadImgUrl()
            {
                PrepareBuilder();
                result.hasSmallHeadImgUrl = false;
                result.smallHeadImgUrl_ = "";
                return this;
            }

            public bool HasMainAcctType
            {
                get { return result.hasMainAcctType; }
            }
            public int MainAcctType
            {
                get { return result.MainAcctType; }
                set { SetMainAcctType(value); }
            }
            public Builder SetMainAcctType(int value)
            {
                PrepareBuilder();
                result.hasMainAcctType = true;
                result.mainAcctType_ = value;
                return this;
            }
            public Builder ClearMainAcctType()
            {
                PrepareBuilder();
                result.hasMainAcctType = false;
                result.mainAcctType_ = 0;
                return this;
            }

            public bool HasExtXml
            {
                get { return result.hasExtXml; }
            }
            public global::mm.command.SKBuiltinString_t ExtXml
            {
                get { return result.ExtXml; }
                set { SetExtXml(value); }
            }
            public Builder SetExtXml(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasExtXml = true;
                result.extXml_ = value;
                return this;
            }
            public Builder SetExtXml(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasExtXml = true;
                result.extXml_ = builderForValue.Build();
                return this;
            }
            public Builder MergeExtXml(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasExtXml &&
                    result.extXml_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.extXml_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.extXml_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.extXml_ = value;
                }
                result.hasExtXml = true;
                return this;
            }
            public Builder ClearExtXml()
            {
                PrepareBuilder();
                result.hasExtXml = false;
                result.extXml_ = null;
                return this;
            }

            public bool HasSafeDeviceList
            {
                get { return result.hasSafeDeviceList; }
            }
            public global::mm.command.SafeDevice SafeDeviceList
            {
                get { return result.SafeDeviceList; }
                set { SetSafeDeviceList(value); }
            }
            public Builder SetSafeDeviceList(global::mm.command.SafeDevice value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSafeDeviceList = true;
                result.safeDeviceList_ = value;
                return this;
            }
            public Builder SetSafeDeviceList(global::mm.command.SafeDevice.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSafeDeviceList = true;
                result.safeDeviceList_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSafeDeviceList(global::mm.command.SafeDevice value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSafeDeviceList &&
                    result.safeDeviceList_ != global::mm.command.SafeDevice.DefaultInstance)
                {
                    result.safeDeviceList_ = global::mm.command.SafeDevice.CreateBuilder(result.safeDeviceList_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.safeDeviceList_ = value;
                }
                result.hasSafeDeviceList = true;
                return this;
            }
            public Builder ClearSafeDeviceList()
            {
                PrepareBuilder();
                result.hasSafeDeviceList = false;
                result.safeDeviceList_ = null;
                return this;
            }

            public bool HasSafeDevice
            {
                get { return result.hasSafeDevice; }
            }
            public int SafeDevice
            {
                get { return result.SafeDevice; }
                set { SetSafeDevice(value); }
            }
            public Builder SetSafeDevice(int value)
            {
                PrepareBuilder();
                result.hasSafeDevice = true;
                result.safeDevice_ = value;
                return this;
            }
            public Builder ClearSafeDevice()
            {
                PrepareBuilder();
                result.hasSafeDevice = false;
                result.safeDevice_ = 0;
                return this;
            }

            public bool HasGrayscaleFlag
            {
                get { return result.hasGrayscaleFlag; }
            }
            public int GrayscaleFlag
            {
                get { return result.GrayscaleFlag; }
                set { SetGrayscaleFlag(value); }
            }
            public Builder SetGrayscaleFlag(int value)
            {
                PrepareBuilder();
                result.hasGrayscaleFlag = true;
                result.grayscaleFlag_ = value;
                return this;
            }
            public Builder ClearGrayscaleFlag()
            {
                PrepareBuilder();
                result.hasGrayscaleFlag = false;
                result.grayscaleFlag_ = 0;
                return this;
            }
        }
        static MsgTip2()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SafeDevice : pb::GeneratedMessage<SafeDevice, SafeDevice.Builder>
    {
        private SafeDevice() { }
        private static readonly SafeDevice defaultInstance = new SafeDevice().MakeReadOnly();
        private static readonly string[] _safeDeviceFieldNames = new string[] { "Count", "List" };
        private static readonly uint[] _safeDeviceFieldTags = new uint[] { 8, 18 };
        public static SafeDevice DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override SafeDevice DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override SafeDevice ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SafeDevice__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<SafeDevice, SafeDevice.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SafeDevice__FieldAccessorTable; }
        }

        public const int CountFieldNumber = 1;
        private bool hasCount;
        private int count_;
        public bool HasCount
        {
            get { return hasCount; }
        }
        public int Count
        {
            get { return count_; }
        }

        public const int ListFieldNumber = 2;
        private pbc::PopsicleList<global::mm.command.SafeDeviceObj> list_ = new pbc::PopsicleList<global::mm.command.SafeDeviceObj>();
        public scg::IList<global::mm.command.SafeDeviceObj> ListList
        {
            get { return list_; }
        }
        public int ListCount
        {
            get { return list_.Count; }
        }
        public global::mm.command.SafeDeviceObj GetList(int index)
        {
            return list_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasCount) return false;
                foreach (global::mm.command.SafeDeviceObj element in ListList)
                {
                    if (!element.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _safeDeviceFieldNames;
            if (hasCount)
            {
                output.WriteInt32(1, field_names[0], Count);
            }
            if (list_.Count > 0)
            {
                output.WriteMessageArray(2, field_names[1], list_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
                }
                foreach (global::mm.command.SafeDeviceObj element in ListList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static SafeDevice ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SafeDevice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SafeDevice ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SafeDevice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SafeDevice ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SafeDevice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SafeDevice ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SafeDevice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SafeDevice ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SafeDevice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SafeDevice MakeReadOnly()
        {
            list_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SafeDevice prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SafeDevice, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(SafeDevice cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private SafeDevice result;

            private SafeDevice PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    SafeDevice original = result;
                    result = new SafeDevice();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override SafeDevice MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.SafeDevice.Descriptor; }
            }

            public override SafeDevice DefaultInstanceForType
            {
                get { return global::mm.command.SafeDevice.DefaultInstance; }
            }

            public override SafeDevice BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is SafeDevice)
                {
                    return MergeFrom((SafeDevice)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(SafeDevice other)
            {
                if (other == global::mm.command.SafeDevice.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasCount)
                {
                    Count = other.Count;
                }
                if (other.list_.Count != 0)
                {
                    result.list_.Add(other.list_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_safeDeviceFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _safeDeviceFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasCount = input.ReadInt32(ref result.count_);
                                break;
                            }
                        case 18:
                            {
                                input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.SafeDeviceObj.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasCount
            {
                get { return result.hasCount; }
            }
            public int Count
            {
                get { return result.Count; }
                set { SetCount(value); }
            }
            public Builder SetCount(int value)
            {
                PrepareBuilder();
                result.hasCount = true;
                result.count_ = value;
                return this;
            }
            public Builder ClearCount()
            {
                PrepareBuilder();
                result.hasCount = false;
                result.count_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.SafeDeviceObj> ListList
            {
                get { return PrepareBuilder().list_; }
            }
            public int ListCount
            {
                get { return result.ListCount; }
            }
            public global::mm.command.SafeDeviceObj GetList(int index)
            {
                return result.GetList(index);
            }
            public Builder SetList(int index, global::mm.command.SafeDeviceObj value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_[index] = value;
                return this;
            }
            public Builder SetList(int index, global::mm.command.SafeDeviceObj.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddList(global::mm.command.SafeDeviceObj value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_.Add(value);
                return this;
            }
            public Builder AddList(global::mm.command.SafeDeviceObj.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeList(scg::IEnumerable<global::mm.command.SafeDeviceObj> values)
            {
                PrepareBuilder();
                result.list_.Add(values);
                return this;
            }
            public Builder ClearList()
            {
                PrepareBuilder();
                result.list_.Clear();
                return this;
            }
        }
        static SafeDevice()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SafeDeviceObj : pb::GeneratedMessage<SafeDeviceObj, SafeDeviceObj.Builder>
    {
        private SafeDeviceObj() { }
        private static readonly SafeDeviceObj defaultInstance = new SafeDeviceObj().MakeReadOnly();
        private static readonly string[] _safeDeviceObjFieldNames = new string[] { "CreateTime", "DeviceType", "Name", "Uuid" };
        private static readonly uint[] _safeDeviceObjFieldTags = new uint[] { 32, 26, 10, 18 };
        public static SafeDeviceObj DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override SafeDeviceObj DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override SafeDeviceObj ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SafeDeviceObj__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<SafeDeviceObj, SafeDeviceObj.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SafeDeviceObj__FieldAccessorTable; }
        }

        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName
        {
            get { return hasName; }
        }
        public string Name
        {
            get { return name_; }
        }

        public const int UuidFieldNumber = 2;
        private bool hasUuid;
        private string uuid_ = "";
        public bool HasUuid
        {
            get { return hasUuid; }
        }
        public string Uuid
        {
            get { return uuid_; }
        }

        public const int DeviceTypeFieldNumber = 3;
        private bool hasDeviceType;
        private string deviceType_ = "";
        public bool HasDeviceType
        {
            get { return hasDeviceType; }
        }
        public string DeviceType
        {
            get { return deviceType_; }
        }

        public const int CreateTimeFieldNumber = 4;
        private bool hasCreateTime;
        private int createTime_;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public int CreateTime
        {
            get { return createTime_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasCreateTime) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _safeDeviceObjFieldNames;
            if (hasName)
            {
                output.WriteString(1, field_names[2], Name);
            }
            if (hasUuid)
            {
                output.WriteString(2, field_names[3], Uuid);
            }
            if (hasDeviceType)
            {
                output.WriteString(3, field_names[1], DeviceType);
            }
            if (hasCreateTime)
            {
                output.WriteInt32(4, field_names[0], CreateTime);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Name);
                }
                if (hasUuid)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Uuid);
                }
                if (hasDeviceType)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, DeviceType);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, CreateTime);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static SafeDeviceObj ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SafeDeviceObj ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SafeDeviceObj ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SafeDeviceObj ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SafeDeviceObj ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SafeDeviceObj ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SafeDeviceObj ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SafeDeviceObj ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SafeDeviceObj ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SafeDeviceObj ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SafeDeviceObj MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SafeDeviceObj prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SafeDeviceObj, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(SafeDeviceObj cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private SafeDeviceObj result;

            private SafeDeviceObj PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    SafeDeviceObj original = result;
                    result = new SafeDeviceObj();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override SafeDeviceObj MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.SafeDeviceObj.Descriptor; }
            }

            public override SafeDeviceObj DefaultInstanceForType
            {
                get { return global::mm.command.SafeDeviceObj.DefaultInstance; }
            }

            public override SafeDeviceObj BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is SafeDeviceObj)
                {
                    return MergeFrom((SafeDeviceObj)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(SafeDeviceObj other)
            {
                if (other == global::mm.command.SafeDeviceObj.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasName)
                {
                    Name = other.Name;
                }
                if (other.HasUuid)
                {
                    Uuid = other.Uuid;
                }
                if (other.HasDeviceType)
                {
                    DeviceType = other.DeviceType;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_safeDeviceObjFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _safeDeviceObjFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasName = input.ReadString(ref result.name_);
                                break;
                            }
                        case 18:
                            {
                                result.hasUuid = input.ReadString(ref result.uuid_);
                                break;
                            }
                        case 26:
                            {
                                result.hasDeviceType = input.ReadString(ref result.deviceType_);
                                break;
                            }
                        case 32:
                            {
                                result.hasCreateTime = input.ReadInt32(ref result.createTime_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasName
            {
                get { return result.hasName; }
            }
            public string Name
            {
                get { return result.Name; }
                set { SetName(value); }
            }
            public Builder SetName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
            }
            public Builder ClearName()
            {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = "";
                return this;
            }

            public bool HasUuid
            {
                get { return result.hasUuid; }
            }
            public string Uuid
            {
                get { return result.Uuid; }
                set { SetUuid(value); }
            }
            public Builder SetUuid(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUuid = true;
                result.uuid_ = value;
                return this;
            }
            public Builder ClearUuid()
            {
                PrepareBuilder();
                result.hasUuid = false;
                result.uuid_ = "";
                return this;
            }

            public bool HasDeviceType
            {
                get { return result.hasDeviceType; }
            }
            public string DeviceType
            {
                get { return result.DeviceType; }
                set { SetDeviceType(value); }
            }
            public Builder SetDeviceType(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasDeviceType = true;
                result.deviceType_ = value;
                return this;
            }
            public Builder ClearDeviceType()
            {
                PrepareBuilder();
                result.hasDeviceType = false;
                result.deviceType_ = "";
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public int CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(int value)
            {
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = 0;
                return this;
            }
        }
        static SafeDeviceObj()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Msg : pb::GeneratedMessage<Msg, Msg.Builder>
    {
        private Msg() { }
        private static readonly Msg defaultInstance = new Msg().MakeReadOnly();
        private static readonly string[] _msgFieldNames = new string[] { "Content", "CreateTime", "FromUserName", "ImgBuf", "ImgStatus", "MsgId", "MsgSource", "MsgType", "PushContent", "Status", "ToUserName" };
        private static readonly uint[] _msgFieldTags = new uint[] { 42, 72, 18, 66, 56, 8, 82, 32, 90, 48, 26 };
        public static Msg DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override Msg DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override Msg ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_Msg__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<Msg, Msg.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_Msg__FieldAccessorTable; }
        }

        public const int MsgIdFieldNumber = 1;
        private bool hasMsgId;
        private int msgId_;
        public bool HasMsgId
        {
            get { return hasMsgId; }
        }
        public int MsgId
        {
            get { return msgId_; }
        }

        public const int FromUserNameFieldNumber = 2;
        private bool hasFromUserName;
        private global::mm.command.SKBuiltinString_t fromUserName_;
        public bool HasFromUserName
        {
            get { return hasFromUserName; }
        }
        public global::mm.command.SKBuiltinString_t FromUserName
        {
            get { return fromUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int ToUserNameFieldNumber = 3;
        private bool hasToUserName;
        private global::mm.command.SKBuiltinString_t toUserName_;
        public bool HasToUserName
        {
            get { return hasToUserName; }
        }
        public global::mm.command.SKBuiltinString_t ToUserName
        {
            get { return toUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int MsgTypeFieldNumber = 4;
        private bool hasMsgType;
        private int msgType_;
        public bool HasMsgType
        {
            get { return hasMsgType; }
        }
        public int MsgType
        {
            get { return msgType_; }
        }

        public const int ContentFieldNumber = 5;
        private bool hasContent;
        private global::mm.command.SKBuiltinString_t content_;
        public bool HasContent
        {
            get { return hasContent; }
        }
        public global::mm.command.SKBuiltinString_t Content
        {
            get { return content_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int StatusFieldNumber = 6;
        private bool hasStatus;
        private int status_;
        public bool HasStatus
        {
            get { return hasStatus; }
        }
        public int Status
        {
            get { return status_; }
        }

        public const int ImgStatusFieldNumber = 7;
        private bool hasImgStatus;
        private int imgStatus_;
        public bool HasImgStatus
        {
            get { return hasImgStatus; }
        }
        public int ImgStatus
        {
            get { return imgStatus_; }
        }

        public const int ImgBufFieldNumber = 8;
        private bool hasImgBuf;
        private global::mm.command.SKBuiltinBuffer_t imgBuf_;
        public bool HasImgBuf
        {
            get { return hasImgBuf; }
        }
        public global::mm.command.SKBuiltinBuffer_t ImgBuf
        {
            get { return imgBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int CreateTimeFieldNumber = 9;
        private bool hasCreateTime;
        private int createTime_;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public int CreateTime
        {
            get { return createTime_; }
        }

        public const int MsgSourceFieldNumber = 10;
        private bool hasMsgSource;
        private string msgSource_ = "";
        public bool HasMsgSource
        {
            get { return hasMsgSource; }
        }
        public string MsgSource
        {
            get { return msgSource_; }
        }

        public const int PushContentFieldNumber = 11;
        private bool hasPushContent;
        private string pushContent_ = "";
        public bool HasPushContent
        {
            get { return hasPushContent; }
        }
        public string PushContent
        {
            get { return pushContent_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasMsgId) return false;
                if (!hasFromUserName) return false;
                if (!hasToUserName) return false;
                if (!hasMsgType) return false;
                if (!hasContent) return false;
                if (!hasStatus) return false;
                if (!hasImgStatus) return false;
                if (!hasImgBuf) return false;
                if (!hasCreateTime) return false;
                if (!ImgBuf.IsInitialized) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _msgFieldNames;
            if (hasMsgId)
            {
                output.WriteInt32(1, field_names[5], MsgId);
            }
            if (hasFromUserName)
            {
                output.WriteMessage(2, field_names[2], FromUserName);
            }
            if (hasToUserName)
            {
                output.WriteMessage(3, field_names[10], ToUserName);
            }
            if (hasMsgType)
            {
                output.WriteInt32(4, field_names[7], MsgType);
            }
            if (hasContent)
            {
                output.WriteMessage(5, field_names[0], Content);
            }
            if (hasStatus)
            {
                output.WriteInt32(6, field_names[9], Status);
            }
            if (hasImgStatus)
            {
                output.WriteInt32(7, field_names[4], ImgStatus);
            }
            if (hasImgBuf)
            {
                output.WriteMessage(8, field_names[3], ImgBuf);
            }
            if (hasCreateTime)
            {
                output.WriteInt32(9, field_names[1], CreateTime);
            }
            if (hasMsgSource)
            {
                output.WriteString(10, field_names[6], MsgSource);
            }
            if (hasPushContent)
            {
                output.WriteString(11, field_names[8], PushContent);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasMsgId)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, MsgId);
                }
                if (hasFromUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, FromUserName);
                }
                if (hasToUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, ToUserName);
                }
                if (hasMsgType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, MsgType);
                }
                if (hasContent)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, Content);
                }
                if (hasStatus)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(6, Status);
                }
                if (hasImgStatus)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, ImgStatus);
                }
                if (hasImgBuf)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(8, ImgBuf);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(9, CreateTime);
                }
                if (hasMsgSource)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(10, MsgSource);
                }
                if (hasPushContent)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(11, PushContent);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static Msg ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Msg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Msg ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Msg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Msg ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Msg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Msg ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Msg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Msg ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Msg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Msg MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Msg prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<Msg, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(Msg cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private Msg result;

            private Msg PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    Msg original = result;
                    result = new Msg();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override Msg MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.Msg.Descriptor; }
            }

            public override Msg DefaultInstanceForType
            {
                get { return global::mm.command.Msg.DefaultInstance; }
            }

            public override Msg BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is Msg)
                {
                    return MergeFrom((Msg)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(Msg other)
            {
                if (other == global::mm.command.Msg.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasMsgId)
                {
                    MsgId = other.MsgId;
                }
                if (other.HasFromUserName)
                {
                    MergeFromUserName(other.FromUserName);
                }
                if (other.HasToUserName)
                {
                    MergeToUserName(other.ToUserName);
                }
                if (other.HasMsgType)
                {
                    MsgType = other.MsgType;
                }
                if (other.HasContent)
                {
                    MergeContent(other.Content);
                }
                if (other.HasStatus)
                {
                    Status = other.Status;
                }
                if (other.HasImgStatus)
                {
                    ImgStatus = other.ImgStatus;
                }
                if (other.HasImgBuf)
                {
                    MergeImgBuf(other.ImgBuf);
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasMsgSource)
                {
                    MsgSource = other.MsgSource;
                }
                if (other.HasPushContent)
                {
                    PushContent = other.PushContent;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_msgFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _msgFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasMsgId = input.ReadInt32(ref result.msgId_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasFromUserName)
                                {
                                    subBuilder.MergeFrom(FromUserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                FromUserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasToUserName)
                                {
                                    subBuilder.MergeFrom(ToUserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ToUserName = subBuilder.BuildPartial();
                                break;
                            }
                        case 32:
                            {
                                result.hasMsgType = input.ReadInt32(ref result.msgType_);
                                break;
                            }
                        case 42:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasContent)
                                {
                                    subBuilder.MergeFrom(Content);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Content = subBuilder.BuildPartial();
                                break;
                            }
                        case 48:
                            {
                                result.hasStatus = input.ReadInt32(ref result.status_);
                                break;
                            }
                        case 56:
                            {
                                result.hasImgStatus = input.ReadInt32(ref result.imgStatus_);
                                break;
                            }
                        case 66:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasImgBuf)
                                {
                                    subBuilder.MergeFrom(ImgBuf);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ImgBuf = subBuilder.BuildPartial();
                                break;
                            }
                        case 72:
                            {
                                result.hasCreateTime = input.ReadInt32(ref result.createTime_);
                                break;
                            }
                        case 82:
                            {
                                result.hasMsgSource = input.ReadString(ref result.msgSource_);
                                break;
                            }
                        case 90:
                            {
                                result.hasPushContent = input.ReadString(ref result.pushContent_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasMsgId
            {
                get { return result.hasMsgId; }
            }
            public int MsgId
            {
                get { return result.MsgId; }
                set { SetMsgId(value); }
            }
            public Builder SetMsgId(int value)
            {
                PrepareBuilder();
                result.hasMsgId = true;
                result.msgId_ = value;
                return this;
            }
            public Builder ClearMsgId()
            {
                PrepareBuilder();
                result.hasMsgId = false;
                result.msgId_ = 0;
                return this;
            }

            public bool HasFromUserName
            {
                get { return result.hasFromUserName; }
            }
            public global::mm.command.SKBuiltinString_t FromUserName
            {
                get { return result.FromUserName; }
                set { SetFromUserName(value); }
            }
            public Builder SetFromUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasFromUserName = true;
                result.fromUserName_ = value;
                return this;
            }
            public Builder SetFromUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasFromUserName = true;
                result.fromUserName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeFromUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasFromUserName &&
                    result.fromUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.fromUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.fromUserName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.fromUserName_ = value;
                }
                result.hasFromUserName = true;
                return this;
            }
            public Builder ClearFromUserName()
            {
                PrepareBuilder();
                result.hasFromUserName = false;
                result.fromUserName_ = null;
                return this;
            }

            public bool HasToUserName
            {
                get { return result.hasToUserName; }
            }
            public global::mm.command.SKBuiltinString_t ToUserName
            {
                get { return result.ToUserName; }
                set { SetToUserName(value); }
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = value;
                return this;
            }
            public Builder SetToUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasToUserName = true;
                result.toUserName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeToUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasToUserName &&
                    result.toUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.toUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.toUserName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.toUserName_ = value;
                }
                result.hasToUserName = true;
                return this;
            }
            public Builder ClearToUserName()
            {
                PrepareBuilder();
                result.hasToUserName = false;
                result.toUserName_ = null;
                return this;
            }

            public bool HasMsgType
            {
                get { return result.hasMsgType; }
            }
            public int MsgType
            {
                get { return result.MsgType; }
                set { SetMsgType(value); }
            }
            public Builder SetMsgType(int value)
            {
                PrepareBuilder();
                result.hasMsgType = true;
                result.msgType_ = value;
                return this;
            }
            public Builder ClearMsgType()
            {
                PrepareBuilder();
                result.hasMsgType = false;
                result.msgType_ = 0;
                return this;
            }

            public bool HasContent
            {
                get { return result.hasContent; }
            }
            public global::mm.command.SKBuiltinString_t Content
            {
                get { return result.Content; }
                set { SetContent(value); }
            }
            public Builder SetContent(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContent = true;
                result.content_ = value;
                return this;
            }
            public Builder SetContent(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasContent = true;
                result.content_ = builderForValue.Build();
                return this;
            }
            public Builder MergeContent(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasContent &&
                    result.content_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.content_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.content_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.content_ = value;
                }
                result.hasContent = true;
                return this;
            }
            public Builder ClearContent()
            {
                PrepareBuilder();
                result.hasContent = false;
                result.content_ = null;
                return this;
            }

            public bool HasStatus
            {
                get { return result.hasStatus; }
            }
            public int Status
            {
                get { return result.Status; }
                set { SetStatus(value); }
            }
            public Builder SetStatus(int value)
            {
                PrepareBuilder();
                result.hasStatus = true;
                result.status_ = value;
                return this;
            }
            public Builder ClearStatus()
            {
                PrepareBuilder();
                result.hasStatus = false;
                result.status_ = 0;
                return this;
            }

            public bool HasImgStatus
            {
                get { return result.hasImgStatus; }
            }
            public int ImgStatus
            {
                get { return result.ImgStatus; }
                set { SetImgStatus(value); }
            }
            public Builder SetImgStatus(int value)
            {
                PrepareBuilder();
                result.hasImgStatus = true;
                result.imgStatus_ = value;
                return this;
            }
            public Builder ClearImgStatus()
            {
                PrepareBuilder();
                result.hasImgStatus = false;
                result.imgStatus_ = 0;
                return this;
            }

            public bool HasImgBuf
            {
                get { return result.hasImgBuf; }
            }
            public global::mm.command.SKBuiltinBuffer_t ImgBuf
            {
                get { return result.ImgBuf; }
                set { SetImgBuf(value); }
            }
            public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasImgBuf = true;
                result.imgBuf_ = value;
                return this;
            }
            public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasImgBuf = true;
                result.imgBuf_ = builderForValue.Build();
                return this;
            }
            public Builder MergeImgBuf(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasImgBuf &&
                    result.imgBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.imgBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.imgBuf_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.imgBuf_ = value;
                }
                result.hasImgBuf = true;
                return this;
            }
            public Builder ClearImgBuf()
            {
                PrepareBuilder();
                result.hasImgBuf = false;
                result.imgBuf_ = null;
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public int CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(int value)
            {
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = 0;
                return this;
            }

            public bool HasMsgSource
            {
                get { return result.hasMsgSource; }
            }
            public string MsgSource
            {
                get { return result.MsgSource; }
                set { SetMsgSource(value); }
            }
            public Builder SetMsgSource(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMsgSource = true;
                result.msgSource_ = value;
                return this;
            }
            public Builder ClearMsgSource()
            {
                PrepareBuilder();
                result.hasMsgSource = false;
                result.msgSource_ = "";
                return this;
            }

            public bool HasPushContent
            {
                get { return result.hasPushContent; }
            }
            public string PushContent
            {
                get { return result.PushContent; }
                set { SetPushContent(value); }
            }
            public Builder SetPushContent(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPushContent = true;
                result.pushContent_ = value;
                return this;
            }
            public Builder ClearPushContent()
            {
                PrepareBuilder();
                result.hasPushContent = false;
                result.pushContent_ = "";
                return this;
            }
        }
        static Msg()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class HeadImg : pb::GeneratedMessage<HeadImg, HeadImg.Builder>
    {
        private HeadImg() { }
        private static readonly HeadImg defaultInstance = new HeadImg().MakeReadOnly();
        private static readonly string[] _headImgFieldNames = new string[] { "BigHeadImgUrl", "ImgBuf", "ImgLen", "ImgMd5", "ImgType", "SmallHeadImgUrl" };
        private static readonly uint[] _headImgFieldTags = new uint[] { 42, 26, 16, 34, 8, 50 };
        public static HeadImg DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override HeadImg DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override HeadImg ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_HeadImg__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<HeadImg, HeadImg.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_HeadImg__FieldAccessorTable; }
        }

        public const int ImgTypeFieldNumber = 1;
        private bool hasImgType;
        private int imgType_;
        public bool HasImgType
        {
            get { return hasImgType; }
        }
        public int ImgType
        {
            get { return imgType_; }
        }

        public const int ImgLenFieldNumber = 2;
        private bool hasImgLen;
        private int imgLen_;
        public bool HasImgLen
        {
            get { return hasImgLen; }
        }
        public int ImgLen
        {
            get { return imgLen_; }
        }

        public const int ImgBufFieldNumber = 3;
        private bool hasImgBuf;
        private pb::ByteString imgBuf_ = pb::ByteString.Empty;
        public bool HasImgBuf
        {
            get { return hasImgBuf; }
        }
        public pb::ByteString ImgBuf
        {
            get { return imgBuf_; }
        }

        public const int ImgMd5FieldNumber = 4;
        private bool hasImgMd5;
        private string imgMd5_ = "";
        public bool HasImgMd5
        {
            get { return hasImgMd5; }
        }
        public string ImgMd5
        {
            get { return imgMd5_; }
        }

        public const int BigHeadImgUrlFieldNumber = 5;
        private bool hasBigHeadImgUrl;
        private string bigHeadImgUrl_ = "";
        public bool HasBigHeadImgUrl
        {
            get { return hasBigHeadImgUrl; }
        }
        public string BigHeadImgUrl
        {
            get { return bigHeadImgUrl_; }
        }

        public const int SmallHeadImgUrlFieldNumber = 6;
        private bool hasSmallHeadImgUrl;
        private string smallHeadImgUrl_ = "";
        public bool HasSmallHeadImgUrl
        {
            get { return hasSmallHeadImgUrl; }
        }
        public string SmallHeadImgUrl
        {
            get { return smallHeadImgUrl_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasImgType) return false;
                if (!hasImgLen) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _headImgFieldNames;
            if (hasImgType)
            {
                output.WriteInt32(1, field_names[4], ImgType);
            }
            if (hasImgLen)
            {
                output.WriteInt32(2, field_names[2], ImgLen);
            }
            if (hasImgBuf)
            {
                output.WriteBytes(3, field_names[1], ImgBuf);
            }
            if (hasImgMd5)
            {
                output.WriteString(4, field_names[3], ImgMd5);
            }
            if (hasBigHeadImgUrl)
            {
                output.WriteString(5, field_names[0], BigHeadImgUrl);
            }
            if (hasSmallHeadImgUrl)
            {
                output.WriteString(6, field_names[5], SmallHeadImgUrl);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasImgType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, ImgType);
                }
                if (hasImgLen)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(2, ImgLen);
                }
                if (hasImgBuf)
                {
                    size += pb::CodedOutputStream.ComputeBytesSize(3, ImgBuf);
                }
                if (hasImgMd5)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, ImgMd5);
                }
                if (hasBigHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(5, BigHeadImgUrl);
                }
                if (hasSmallHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(6, SmallHeadImgUrl);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static HeadImg ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HeadImg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HeadImg ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HeadImg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HeadImg ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HeadImg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static HeadImg ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static HeadImg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static HeadImg ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HeadImg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private HeadImg MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(HeadImg prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<HeadImg, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(HeadImg cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private HeadImg result;

            private HeadImg PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    HeadImg original = result;
                    result = new HeadImg();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override HeadImg MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.HeadImg.Descriptor; }
            }

            public override HeadImg DefaultInstanceForType
            {
                get { return global::mm.command.HeadImg.DefaultInstance; }
            }

            public override HeadImg BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is HeadImg)
                {
                    return MergeFrom((HeadImg)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(HeadImg other)
            {
                if (other == global::mm.command.HeadImg.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasImgType)
                {
                    ImgType = other.ImgType;
                }
                if (other.HasImgLen)
                {
                    ImgLen = other.ImgLen;
                }
                if (other.HasImgBuf)
                {
                    ImgBuf = other.ImgBuf;
                }
                if (other.HasImgMd5)
                {
                    ImgMd5 = other.ImgMd5;
                }
                if (other.HasBigHeadImgUrl)
                {
                    BigHeadImgUrl = other.BigHeadImgUrl;
                }
                if (other.HasSmallHeadImgUrl)
                {
                    SmallHeadImgUrl = other.SmallHeadImgUrl;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_headImgFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _headImgFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasImgType = input.ReadInt32(ref result.imgType_);
                                break;
                            }
                        case 16:
                            {
                                result.hasImgLen = input.ReadInt32(ref result.imgLen_);
                                break;
                            }
                        case 26:
                            {
                                result.hasImgBuf = input.ReadBytes(ref result.imgBuf_);
                                break;
                            }
                        case 34:
                            {
                                result.hasImgMd5 = input.ReadString(ref result.imgMd5_);
                                break;
                            }
                        case 42:
                            {
                                result.hasBigHeadImgUrl = input.ReadString(ref result.bigHeadImgUrl_);
                                break;
                            }
                        case 50:
                            {
                                result.hasSmallHeadImgUrl = input.ReadString(ref result.smallHeadImgUrl_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasImgType
            {
                get { return result.hasImgType; }
            }
            public int ImgType
            {
                get { return result.ImgType; }
                set { SetImgType(value); }
            }
            public Builder SetImgType(int value)
            {
                PrepareBuilder();
                result.hasImgType = true;
                result.imgType_ = value;
                return this;
            }
            public Builder ClearImgType()
            {
                PrepareBuilder();
                result.hasImgType = false;
                result.imgType_ = 0;
                return this;
            }

            public bool HasImgLen
            {
                get { return result.hasImgLen; }
            }
            public int ImgLen
            {
                get { return result.ImgLen; }
                set { SetImgLen(value); }
            }
            public Builder SetImgLen(int value)
            {
                PrepareBuilder();
                result.hasImgLen = true;
                result.imgLen_ = value;
                return this;
            }
            public Builder ClearImgLen()
            {
                PrepareBuilder();
                result.hasImgLen = false;
                result.imgLen_ = 0;
                return this;
            }

            public bool HasImgBuf
            {
                get { return result.hasImgBuf; }
            }
            public pb::ByteString ImgBuf
            {
                get { return result.ImgBuf; }
                set { SetImgBuf(value); }
            }
            public Builder SetImgBuf(pb::ByteString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasImgBuf = true;
                result.imgBuf_ = value;
                return this;
            }
            public Builder ClearImgBuf()
            {
                PrepareBuilder();
                result.hasImgBuf = false;
                result.imgBuf_ = pb::ByteString.Empty;
                return this;
            }

            public bool HasImgMd5
            {
                get { return result.hasImgMd5; }
            }
            public string ImgMd5
            {
                get { return result.ImgMd5; }
                set { SetImgMd5(value); }
            }
            public Builder SetImgMd5(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasImgMd5 = true;
                result.imgMd5_ = value;
                return this;
            }
            public Builder ClearImgMd5()
            {
                PrepareBuilder();
                result.hasImgMd5 = false;
                result.imgMd5_ = "";
                return this;
            }

            public bool HasBigHeadImgUrl
            {
                get { return result.hasBigHeadImgUrl; }
            }
            public string BigHeadImgUrl
            {
                get { return result.BigHeadImgUrl; }
                set { SetBigHeadImgUrl(value); }
            }
            public Builder SetBigHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBigHeadImgUrl = true;
                result.bigHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearBigHeadImgUrl()
            {
                PrepareBuilder();
                result.hasBigHeadImgUrl = false;
                result.bigHeadImgUrl_ = "";
                return this;
            }

            public bool HasSmallHeadImgUrl
            {
                get { return result.hasSmallHeadImgUrl; }
            }
            public string SmallHeadImgUrl
            {
                get { return result.SmallHeadImgUrl; }
                set { SetSmallHeadImgUrl(value); }
            }
            public Builder SetSmallHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSmallHeadImgUrl = true;
                result.smallHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearSmallHeadImgUrl()
            {
                PrepareBuilder();
                result.hasSmallHeadImgUrl = false;
                result.smallHeadImgUrl_ = "";
                return this;
            }
        }
        static HeadImg()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class UpdateSomething : pb::GeneratedMessage<UpdateSomething, UpdateSomething.Builder>
    {
        private UpdateSomething() { }
        private static readonly UpdateSomething defaultInstance = new UpdateSomething().MakeReadOnly();
        private static readonly string[] _updateSomethingFieldNames = new string[] { "FunctionId", "SwitchValue" };
        private static readonly uint[] _updateSomethingFieldTags = new uint[] { 8, 16 };
        public static UpdateSomething DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override UpdateSomething DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override UpdateSomething ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_UpdateSomething__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<UpdateSomething, UpdateSomething.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_UpdateSomething__FieldAccessorTable; }
        }

        public const int FunctionIdFieldNumber = 1;
        private bool hasFunctionId;
        private int functionId_;
        public bool HasFunctionId
        {
            get { return hasFunctionId; }
        }
        public int FunctionId
        {
            get { return functionId_; }
        }

        public const int SwitchValueFieldNumber = 2;
        private bool hasSwitchValue;
        private int switchValue_;
        public bool HasSwitchValue
        {
            get { return hasSwitchValue; }
        }
        public int SwitchValue
        {
            get { return switchValue_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasFunctionId) return false;
                if (!hasSwitchValue) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _updateSomethingFieldNames;
            if (hasFunctionId)
            {
                output.WriteInt32(1, field_names[0], FunctionId);
            }
            if (hasSwitchValue)
            {
                output.WriteInt32(2, field_names[1], SwitchValue);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasFunctionId)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, FunctionId);
                }
                if (hasSwitchValue)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(2, SwitchValue);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static UpdateSomething ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UpdateSomething ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UpdateSomething ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UpdateSomething ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UpdateSomething ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UpdateSomething ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static UpdateSomething ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static UpdateSomething ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static UpdateSomething ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UpdateSomething ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private UpdateSomething MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(UpdateSomething prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<UpdateSomething, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(UpdateSomething cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private UpdateSomething result;

            private UpdateSomething PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    UpdateSomething original = result;
                    result = new UpdateSomething();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override UpdateSomething MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.UpdateSomething.Descriptor; }
            }

            public override UpdateSomething DefaultInstanceForType
            {
                get { return global::mm.command.UpdateSomething.DefaultInstance; }
            }

            public override UpdateSomething BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is UpdateSomething)
                {
                    return MergeFrom((UpdateSomething)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(UpdateSomething other)
            {
                if (other == global::mm.command.UpdateSomething.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasFunctionId)
                {
                    FunctionId = other.FunctionId;
                }
                if (other.HasSwitchValue)
                {
                    SwitchValue = other.SwitchValue;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_updateSomethingFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _updateSomethingFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasFunctionId = input.ReadInt32(ref result.functionId_);
                                break;
                            }
                        case 16:
                            {
                                result.hasSwitchValue = input.ReadInt32(ref result.switchValue_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasFunctionId
            {
                get { return result.hasFunctionId; }
            }
            public int FunctionId
            {
                get { return result.FunctionId; }
                set { SetFunctionId(value); }
            }
            public Builder SetFunctionId(int value)
            {
                PrepareBuilder();
                result.hasFunctionId = true;
                result.functionId_ = value;
                return this;
            }
            public Builder ClearFunctionId()
            {
                PrepareBuilder();
                result.hasFunctionId = false;
                result.functionId_ = 0;
                return this;
            }

            public bool HasSwitchValue
            {
                get { return result.hasSwitchValue; }
            }
            public int SwitchValue
            {
                get { return result.SwitchValue; }
                set { SetSwitchValue(value); }
            }
            public Builder SetSwitchValue(int value)
            {
                PrepareBuilder();
                result.hasSwitchValue = true;
                result.switchValue_ = value;
                return this;
            }
            public Builder ClearSwitchValue()
            {
                PrepareBuilder();
                result.hasSwitchValue = false;
                result.switchValue_ = 0;
                return this;
            }
        }
        static UpdateSomething()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class KeyValuePairString : pb::GeneratedMessage<KeyValuePairString, KeyValuePairString.Builder>
    {
        private KeyValuePairString() { }
        private static readonly KeyValuePairString defaultInstance = new KeyValuePairString().MakeReadOnly();
        private static readonly string[] _keyValuePairStringFieldNames = new string[] { "Key", "Value" };
        private static readonly uint[] _keyValuePairStringFieldTags = new uint[] { 8, 18 };
        public static KeyValuePairString DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override KeyValuePairString DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override KeyValuePairString ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_KeyValuePairString__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<KeyValuePairString, KeyValuePairString.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_KeyValuePairString__FieldAccessorTable; }
        }

        public const int KeyFieldNumber = 1;
        private bool hasKey;
        private int key_;
        public bool HasKey
        {
            get { return hasKey; }
        }
        public int Key
        {
            get { return key_; }
        }

        public const int ValueFieldNumber = 2;
        private bool hasValue;
        private string value_ = "";
        public bool HasValue
        {
            get { return hasValue; }
        }
        public string Value
        {
            get { return value_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasKey) return false;
                if (!hasValue) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _keyValuePairStringFieldNames;
            if (hasKey)
            {
                output.WriteInt32(1, field_names[0], Key);
            }
            if (hasValue)
            {
                output.WriteString(2, field_names[1], Value);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasKey)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Key);
                }
                if (hasValue)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Value);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static KeyValuePairString ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyValuePairString ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyValuePairString ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KeyValuePairString ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KeyValuePairString ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyValuePairString ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static KeyValuePairString ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static KeyValuePairString ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static KeyValuePairString ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KeyValuePairString ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private KeyValuePairString MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(KeyValuePairString prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<KeyValuePairString, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(KeyValuePairString cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private KeyValuePairString result;

            private KeyValuePairString PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    KeyValuePairString original = result;
                    result = new KeyValuePairString();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override KeyValuePairString MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.KeyValuePairString.Descriptor; }
            }

            public override KeyValuePairString DefaultInstanceForType
            {
                get { return global::mm.command.KeyValuePairString.DefaultInstance; }
            }

            public override KeyValuePairString BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is KeyValuePairString)
                {
                    return MergeFrom((KeyValuePairString)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(KeyValuePairString other)
            {
                if (other == global::mm.command.KeyValuePairString.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasKey)
                {
                    Key = other.Key;
                }
                if (other.HasValue)
                {
                    Value = other.Value;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_keyValuePairStringFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _keyValuePairStringFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasKey = input.ReadInt32(ref result.key_);
                                break;
                            }
                        case 18:
                            {
                                result.hasValue = input.ReadString(ref result.value_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasKey
            {
                get { return result.hasKey; }
            }
            public int Key
            {
                get { return result.Key; }
                set { SetKey(value); }
            }
            public Builder SetKey(int value)
            {
                PrepareBuilder();
                result.hasKey = true;
                result.key_ = value;
                return this;
            }
            public Builder ClearKey()
            {
                PrepareBuilder();
                result.hasKey = false;
                result.key_ = 0;
                return this;
            }

            public bool HasValue
            {
                get { return result.hasValue; }
            }
            public string Value
            {
                get { return result.Value; }
                set { SetValue(value); }
            }
            public Builder SetValue(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
            }
            public Builder ClearValue()
            {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = "";
                return this;
            }
        }
        static KeyValuePairString()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class OptionItem : pb::GeneratedMessage<OptionItem, OptionItem.Builder>
    {
        private OptionItem() { }
        private static readonly OptionItem defaultInstance = new OptionItem().MakeReadOnly();
        private static readonly string[] _optionItemFieldNames = new string[] { "Count", "List" };
        private static readonly uint[] _optionItemFieldTags = new uint[] { 8, 18 };
        public static OptionItem DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override OptionItem DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override OptionItem ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_OptionItem__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<OptionItem, OptionItem.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_OptionItem__FieldAccessorTable; }
        }

        public const int CountFieldNumber = 1;
        private bool hasCount;
        private int count_;
        public bool HasCount
        {
            get { return hasCount; }
        }
        public int Count
        {
            get { return count_; }
        }

        public const int ListFieldNumber = 2;
        private pbc::PopsicleList<global::mm.command.KeyValuePairString> list_ = new pbc::PopsicleList<global::mm.command.KeyValuePairString>();
        public scg::IList<global::mm.command.KeyValuePairString> ListList
        {
            get { return list_; }
        }
        public int ListCount
        {
            get { return list_.Count; }
        }
        public global::mm.command.KeyValuePairString GetList(int index)
        {
            return list_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasCount) return false;
                foreach (global::mm.command.KeyValuePairString element in ListList)
                {
                    if (!element.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _optionItemFieldNames;
            if (hasCount)
            {
                output.WriteInt32(1, field_names[0], Count);
            }
            if (list_.Count > 0)
            {
                output.WriteMessageArray(2, field_names[1], list_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
                }
                foreach (global::mm.command.KeyValuePairString element in ListList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static OptionItem ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static OptionItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static OptionItem ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static OptionItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static OptionItem ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static OptionItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static OptionItem ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static OptionItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static OptionItem ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static OptionItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private OptionItem MakeReadOnly()
        {
            list_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(OptionItem prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<OptionItem, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(OptionItem cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private OptionItem result;

            private OptionItem PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    OptionItem original = result;
                    result = new OptionItem();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override OptionItem MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.OptionItem.Descriptor; }
            }

            public override OptionItem DefaultInstanceForType
            {
                get { return global::mm.command.OptionItem.DefaultInstance; }
            }

            public override OptionItem BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is OptionItem)
                {
                    return MergeFrom((OptionItem)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(OptionItem other)
            {
                if (other == global::mm.command.OptionItem.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasCount)
                {
                    Count = other.Count;
                }
                if (other.list_.Count != 0)
                {
                    result.list_.Add(other.list_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_optionItemFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _optionItemFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasCount = input.ReadInt32(ref result.count_);
                                break;
                            }
                        case 18:
                            {
                                input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.KeyValuePairString.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasCount
            {
                get { return result.hasCount; }
            }
            public int Count
            {
                get { return result.Count; }
                set { SetCount(value); }
            }
            public Builder SetCount(int value)
            {
                PrepareBuilder();
                result.hasCount = true;
                result.count_ = value;
                return this;
            }
            public Builder ClearCount()
            {
                PrepareBuilder();
                result.hasCount = false;
                result.count_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.KeyValuePairString> ListList
            {
                get { return PrepareBuilder().list_; }
            }
            public int ListCount
            {
                get { return result.ListCount; }
            }
            public global::mm.command.KeyValuePairString GetList(int index)
            {
                return result.GetList(index);
            }
            public Builder SetList(int index, global::mm.command.KeyValuePairString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_[index] = value;
                return this;
            }
            public Builder SetList(int index, global::mm.command.KeyValuePairString.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddList(global::mm.command.KeyValuePairString value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.list_.Add(value);
                return this;
            }
            public Builder AddList(global::mm.command.KeyValuePairString.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.list_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeList(scg::IEnumerable<global::mm.command.KeyValuePairString> values)
            {
                PrepareBuilder();
                result.list_.Add(values);
                return this;
            }
            public Builder ClearList()
            {
                PrepareBuilder();
                result.list_.Clear();
                return this;
            }
        }
        static OptionItem()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PackegeInfo : pb::GeneratedMessage<PackegeInfo, PackegeInfo.Builder>
    {
        private PackegeInfo() { }
        private static readonly PackegeInfo defaultInstance = new PackegeInfo().MakeReadOnly();
        private static readonly string[] _packegeInfoFieldNames = new string[] { "Ext", "Id", "Name", "PackName", "Size", "Thumb", "Version" };
        private static readonly uint[] _packegeInfoFieldTags = new uint[] { 58, 8, 26, 50, 32, 42, 16 };
        public static PackegeInfo DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override PackegeInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override PackegeInfo ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_PackegeInfo__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<PackegeInfo, PackegeInfo.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_PackegeInfo__FieldAccessorTable; }
        }

        public const int IdFieldNumber = 1;
        private bool hasId;
        private int id_;
        public bool HasId
        {
            get { return hasId; }
        }
        public int Id
        {
            get { return id_; }
        }

        public const int VersionFieldNumber = 2;
        private bool hasVersion;
        private int version_;
        public bool HasVersion
        {
            get { return hasVersion; }
        }
        public int Version
        {
            get { return version_; }
        }

        public const int NameFieldNumber = 3;
        private bool hasName;
        private string name_ = "";
        public bool HasName
        {
            get { return hasName; }
        }
        public string Name
        {
            get { return name_; }
        }

        public const int SizeFieldNumber = 4;
        private bool hasSize;
        private int size_;
        public bool HasSize
        {
            get { return hasSize; }
        }
        public int Size
        {
            get { return size_; }
        }

        public const int ThumbFieldNumber = 5;
        private bool hasThumb;
        private global::mm.command.SKBuiltinBuffer_t thumb_;
        public bool HasThumb
        {
            get { return hasThumb; }
        }
        public global::mm.command.SKBuiltinBuffer_t Thumb
        {
            get { return thumb_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int PackNameFieldNumber = 6;
        private bool hasPackName;
        private string packName_ = "";
        public bool HasPackName
        {
            get { return hasPackName; }
        }
        public string PackName
        {
            get { return packName_; }
        }

        public const int ExtFieldNumber = 7;
        private bool hasExt;
        private global::mm.command.SKBuiltinBuffer_t ext_;
        public bool HasExt
        {
            get { return hasExt; }
        }
        public global::mm.command.SKBuiltinBuffer_t Ext
        {
            get { return ext_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasId) return false;
                if (!hasVersion) return false;
                if (HasThumb)
                {
                    if (!Thumb.IsInitialized) return false;
                }
                if (HasExt)
                {
                    if (!Ext.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _packegeInfoFieldNames;
            if (hasId)
            {
                output.WriteInt32(1, field_names[1], Id);
            }
            if (hasVersion)
            {
                output.WriteInt32(2, field_names[6], Version);
            }
            if (hasName)
            {
                output.WriteString(3, field_names[2], Name);
            }
            if (hasSize)
            {
                output.WriteInt32(4, field_names[4], Size);
            }
            if (hasThumb)
            {
                output.WriteMessage(5, field_names[5], Thumb);
            }
            if (hasPackName)
            {
                output.WriteString(6, field_names[3], PackName);
            }
            if (hasExt)
            {
                output.WriteMessage(7, field_names[0], Ext);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
                }
                if (hasVersion)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
                }
                if (hasName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Name);
                }
                if (hasSize)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, Size);
                }
                if (hasThumb)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, Thumb);
                }
                if (hasPackName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(6, PackName);
                }
                if (hasExt)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(7, Ext);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static PackegeInfo ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PackegeInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PackegeInfo ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PackegeInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PackegeInfo ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PackegeInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static PackegeInfo ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static PackegeInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static PackegeInfo ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PackegeInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private PackegeInfo MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(PackegeInfo prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<PackegeInfo, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(PackegeInfo cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private PackegeInfo result;

            private PackegeInfo PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    PackegeInfo original = result;
                    result = new PackegeInfo();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override PackegeInfo MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.PackegeInfo.Descriptor; }
            }

            public override PackegeInfo DefaultInstanceForType
            {
                get { return global::mm.command.PackegeInfo.DefaultInstance; }
            }

            public override PackegeInfo BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is PackegeInfo)
                {
                    return MergeFrom((PackegeInfo)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(PackegeInfo other)
            {
                if (other == global::mm.command.PackegeInfo.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasId)
                {
                    Id = other.Id;
                }
                if (other.HasVersion)
                {
                    Version = other.Version;
                }
                if (other.HasName)
                {
                    Name = other.Name;
                }
                if (other.HasSize)
                {
                    Size = other.Size;
                }
                if (other.HasThumb)
                {
                    MergeThumb(other.Thumb);
                }
                if (other.HasPackName)
                {
                    PackName = other.PackName;
                }
                if (other.HasExt)
                {
                    MergeExt(other.Ext);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_packegeInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _packegeInfoFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasId = input.ReadInt32(ref result.id_);
                                break;
                            }
                        case 16:
                            {
                                result.hasVersion = input.ReadInt32(ref result.version_);
                                break;
                            }
                        case 26:
                            {
                                result.hasName = input.ReadString(ref result.name_);
                                break;
                            }
                        case 32:
                            {
                                result.hasSize = input.ReadInt32(ref result.size_);
                                break;
                            }
                        case 42:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasThumb)
                                {
                                    subBuilder.MergeFrom(Thumb);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Thumb = subBuilder.BuildPartial();
                                break;
                            }
                        case 50:
                            {
                                result.hasPackName = input.ReadString(ref result.packName_);
                                break;
                            }
                        case 58:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasExt)
                                {
                                    subBuilder.MergeFrom(Ext);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Ext = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasId
            {
                get { return result.hasId; }
            }
            public int Id
            {
                get { return result.Id; }
                set { SetId(value); }
            }
            public Builder SetId(int value)
            {
                PrepareBuilder();
                result.hasId = true;
                result.id_ = value;
                return this;
            }
            public Builder ClearId()
            {
                PrepareBuilder();
                result.hasId = false;
                result.id_ = 0;
                return this;
            }

            public bool HasVersion
            {
                get { return result.hasVersion; }
            }
            public int Version
            {
                get { return result.Version; }
                set { SetVersion(value); }
            }
            public Builder SetVersion(int value)
            {
                PrepareBuilder();
                result.hasVersion = true;
                result.version_ = value;
                return this;
            }
            public Builder ClearVersion()
            {
                PrepareBuilder();
                result.hasVersion = false;
                result.version_ = 0;
                return this;
            }

            public bool HasName
            {
                get { return result.hasName; }
            }
            public string Name
            {
                get { return result.Name; }
                set { SetName(value); }
            }
            public Builder SetName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
            }
            public Builder ClearName()
            {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = "";
                return this;
            }

            public bool HasSize
            {
                get { return result.hasSize; }
            }
            public int Size
            {
                get { return result.Size; }
                set { SetSize(value); }
            }
            public Builder SetSize(int value)
            {
                PrepareBuilder();
                result.hasSize = true;
                result.size_ = value;
                return this;
            }
            public Builder ClearSize()
            {
                PrepareBuilder();
                result.hasSize = false;
                result.size_ = 0;
                return this;
            }

            public bool HasThumb
            {
                get { return result.hasThumb; }
            }
            public global::mm.command.SKBuiltinBuffer_t Thumb
            {
                get { return result.Thumb; }
                set { SetThumb(value); }
            }
            public Builder SetThumb(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasThumb = true;
                result.thumb_ = value;
                return this;
            }
            public Builder SetThumb(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasThumb = true;
                result.thumb_ = builderForValue.Build();
                return this;
            }
            public Builder MergeThumb(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasThumb &&
                    result.thumb_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.thumb_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.thumb_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.thumb_ = value;
                }
                result.hasThumb = true;
                return this;
            }
            public Builder ClearThumb()
            {
                PrepareBuilder();
                result.hasThumb = false;
                result.thumb_ = null;
                return this;
            }

            public bool HasPackName
            {
                get { return result.hasPackName; }
            }
            public string PackName
            {
                get { return result.PackName; }
                set { SetPackName(value); }
            }
            public Builder SetPackName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPackName = true;
                result.packName_ = value;
                return this;
            }
            public Builder ClearPackName()
            {
                PrepareBuilder();
                result.hasPackName = false;
                result.packName_ = "";
                return this;
            }

            public bool HasExt
            {
                get { return result.hasExt; }
            }
            public global::mm.command.SKBuiltinBuffer_t Ext
            {
                get { return result.Ext; }
                set { SetExt(value); }
            }
            public Builder SetExt(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasExt = true;
                result.ext_ = value;
                return this;
            }
            public Builder SetExt(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasExt = true;
                result.ext_ = builderForValue.Build();
                return this;
            }
            public Builder MergeExt(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasExt &&
                    result.ext_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.ext_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.ext_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.ext_ = value;
                }
                result.hasExt = true;
                return this;
            }
            public Builder ClearExt()
            {
                PrepareBuilder();
                result.hasExt = false;
                result.ext_ = null;
                return this;
            }
        }
        static PackegeInfo()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class VUserInfo : pb::GeneratedMessage<VUserInfo, VUserInfo.Builder>
    {
        private VUserInfo() { }
        private static readonly VUserInfo defaultInstance = new VUserInfo().MakeReadOnly();
        private static readonly string[] _vUserInfoFieldNames = new string[] { "Desc", "HDIcon", "ID", "Icon" };
        private static readonly uint[] _vUserInfoFieldTags = new uint[] { 18, 34, 8, 26 };
        public static VUserInfo DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override VUserInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override VUserInfo ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_VUserInfo__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<VUserInfo, VUserInfo.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_VUserInfo__FieldAccessorTable; }
        }

        public const int IDFieldNumber = 1;
        private bool hasID;
        private int iD_;
        public bool HasID
        {
            get { return hasID; }
        }
        public int ID
        {
            get { return iD_; }
        }

        public const int DescFieldNumber = 2;
        private bool hasDesc;
        private string desc_ = "";
        public bool HasDesc
        {
            get { return hasDesc; }
        }
        public string Desc
        {
            get { return desc_; }
        }

        public const int IconFieldNumber = 3;
        private bool hasIcon;
        private global::mm.command.SKBuiltinBuffer_t icon_;
        public bool HasIcon
        {
            get { return hasIcon; }
        }
        public global::mm.command.SKBuiltinBuffer_t Icon
        {
            get { return icon_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int HDIconFieldNumber = 4;
        private bool hasHDIcon;
        private global::mm.command.SKBuiltinBuffer_t hDIcon_;
        public bool HasHDIcon
        {
            get { return hasHDIcon; }
        }
        public global::mm.command.SKBuiltinBuffer_t HDIcon
        {
            get { return hDIcon_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasID) return false;
                if (!hasIcon) return false;
                if (!hasHDIcon) return false;
                if (!Icon.IsInitialized) return false;
                if (!HDIcon.IsInitialized) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _vUserInfoFieldNames;
            if (hasID)
            {
                output.WriteInt32(1, field_names[2], ID);
            }
            if (hasDesc)
            {
                output.WriteString(2, field_names[0], Desc);
            }
            if (hasIcon)
            {
                output.WriteMessage(3, field_names[3], Icon);
            }
            if (hasHDIcon)
            {
                output.WriteMessage(4, field_names[1], HDIcon);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasID)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, ID);
                }
                if (hasDesc)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Desc);
                }
                if (hasIcon)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, Icon);
                }
                if (hasHDIcon)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, HDIcon);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static VUserInfo ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static VUserInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static VUserInfo ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static VUserInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static VUserInfo ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static VUserInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static VUserInfo ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static VUserInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static VUserInfo ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static VUserInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private VUserInfo MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(VUserInfo prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<VUserInfo, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(VUserInfo cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private VUserInfo result;

            private VUserInfo PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    VUserInfo original = result;
                    result = new VUserInfo();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override VUserInfo MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.VUserInfo.Descriptor; }
            }

            public override VUserInfo DefaultInstanceForType
            {
                get { return global::mm.command.VUserInfo.DefaultInstance; }
            }

            public override VUserInfo BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is VUserInfo)
                {
                    return MergeFrom((VUserInfo)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(VUserInfo other)
            {
                if (other == global::mm.command.VUserInfo.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasID)
                {
                    ID = other.ID;
                }
                if (other.HasDesc)
                {
                    Desc = other.Desc;
                }
                if (other.HasIcon)
                {
                    MergeIcon(other.Icon);
                }
                if (other.HasHDIcon)
                {
                    MergeHDIcon(other.HDIcon);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_vUserInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _vUserInfoFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasID = input.ReadInt32(ref result.iD_);
                                break;
                            }
                        case 18:
                            {
                                result.hasDesc = input.ReadString(ref result.desc_);
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasIcon)
                                {
                                    subBuilder.MergeFrom(Icon);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Icon = subBuilder.BuildPartial();
                                break;
                            }
                        case 34:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasHDIcon)
                                {
                                    subBuilder.MergeFrom(HDIcon);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                HDIcon = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasID
            {
                get { return result.hasID; }
            }
            public int ID
            {
                get { return result.ID; }
                set { SetID(value); }
            }
            public Builder SetID(int value)
            {
                PrepareBuilder();
                result.hasID = true;
                result.iD_ = value;
                return this;
            }
            public Builder ClearID()
            {
                PrepareBuilder();
                result.hasID = false;
                result.iD_ = 0;
                return this;
            }

            public bool HasDesc
            {
                get { return result.hasDesc; }
            }
            public string Desc
            {
                get { return result.Desc; }
                set { SetDesc(value); }
            }
            public Builder SetDesc(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasDesc = true;
                result.desc_ = value;
                return this;
            }
            public Builder ClearDesc()
            {
                PrepareBuilder();
                result.hasDesc = false;
                result.desc_ = "";
                return this;
            }

            public bool HasIcon
            {
                get { return result.hasIcon; }
            }
            public global::mm.command.SKBuiltinBuffer_t Icon
            {
                get { return result.Icon; }
                set { SetIcon(value); }
            }
            public Builder SetIcon(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasIcon = true;
                result.icon_ = value;
                return this;
            }
            public Builder SetIcon(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasIcon = true;
                result.icon_ = builderForValue.Build();
                return this;
            }
            public Builder MergeIcon(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasIcon &&
                    result.icon_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.icon_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.icon_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.icon_ = value;
                }
                result.hasIcon = true;
                return this;
            }
            public Builder ClearIcon()
            {
                PrepareBuilder();
                result.hasIcon = false;
                result.icon_ = null;
                return this;
            }

            public bool HasHDIcon
            {
                get { return result.hasHDIcon; }
            }
            public global::mm.command.SKBuiltinBuffer_t HDIcon
            {
                get { return result.HDIcon; }
                set { SetHDIcon(value); }
            }
            public Builder SetHDIcon(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasHDIcon = true;
                result.hDIcon_ = value;
                return this;
            }
            public Builder SetHDIcon(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasHDIcon = true;
                result.hDIcon_ = builderForValue.Build();
                return this;
            }
            public Builder MergeHDIcon(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasHDIcon &&
                    result.hDIcon_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.hDIcon_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.hDIcon_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.hDIcon_ = value;
                }
                result.hasHDIcon = true;
                return this;
            }
            public Builder ClearHDIcon()
            {
                PrepareBuilder();
                result.hasHDIcon = false;
                result.hDIcon_ = null;
                return this;
            }
        }
        static VUserInfo()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class FBInfo : pb::GeneratedMessage<FBInfo, FBInfo.Builder>
    {
        private FBInfo() { }
        private static readonly FBInfo defaultInstance = new FBInfo().MakeReadOnly();
        private static readonly string[] _fBInfoFieldNames = new string[] { "ID", "ImgKey", "Name" };
        private static readonly uint[] _fBInfoFieldTags = new uint[] { 8, 24, 18 };
        public static FBInfo DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override FBInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override FBInfo ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_FBInfo__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<FBInfo, FBInfo.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_FBInfo__FieldAccessorTable; }
        }

        public const int IDFieldNumber = 1;
        private bool hasID;
        private long iD_;
        public bool HasID
        {
            get { return hasID; }
        }
        public long ID
        {
            get { return iD_; }
        }

        public const int NameFieldNumber = 2;
        private bool hasName;
        private string name_ = "";
        public bool HasName
        {
            get { return hasName; }
        }
        public string Name
        {
            get { return name_; }
        }

        public const int ImgKeyFieldNumber = 3;
        private bool hasImgKey;
        private int imgKey_;
        public bool HasImgKey
        {
            get { return hasImgKey; }
        }
        public int ImgKey
        {
            get { return imgKey_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasID) return false;
                if (!hasImgKey) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _fBInfoFieldNames;
            if (hasID)
            {
                output.WriteInt64(1, field_names[0], ID);
            }
            if (hasName)
            {
                output.WriteString(2, field_names[2], Name);
            }
            if (hasImgKey)
            {
                output.WriteInt32(3, field_names[1], ImgKey);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasID)
                {
                    size += pb::CodedOutputStream.ComputeInt64Size(1, ID);
                }
                if (hasName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Name);
                }
                if (hasImgKey)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(3, ImgKey);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static FBInfo ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static FBInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static FBInfo ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static FBInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static FBInfo ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static FBInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static FBInfo ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static FBInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static FBInfo ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static FBInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private FBInfo MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(FBInfo prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<FBInfo, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(FBInfo cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private FBInfo result;

            private FBInfo PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    FBInfo original = result;
                    result = new FBInfo();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override FBInfo MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.FBInfo.Descriptor; }
            }

            public override FBInfo DefaultInstanceForType
            {
                get { return global::mm.command.FBInfo.DefaultInstance; }
            }

            public override FBInfo BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is FBInfo)
                {
                    return MergeFrom((FBInfo)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(FBInfo other)
            {
                if (other == global::mm.command.FBInfo.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasID)
                {
                    ID = other.ID;
                }
                if (other.HasName)
                {
                    Name = other.Name;
                }
                if (other.HasImgKey)
                {
                    ImgKey = other.ImgKey;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_fBInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _fBInfoFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasID = input.ReadInt64(ref result.iD_);
                                break;
                            }
                        case 18:
                            {
                                result.hasName = input.ReadString(ref result.name_);
                                break;
                            }
                        case 24:
                            {
                                result.hasImgKey = input.ReadInt32(ref result.imgKey_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasID
            {
                get { return result.hasID; }
            }
            public long ID
            {
                get { return result.ID; }
                set { SetID(value); }
            }
            public Builder SetID(long value)
            {
                PrepareBuilder();
                result.hasID = true;
                result.iD_ = value;
                return this;
            }
            public Builder ClearID()
            {
                PrepareBuilder();
                result.hasID = false;
                result.iD_ = 0L;
                return this;
            }

            public bool HasName
            {
                get { return result.hasName; }
            }
            public string Name
            {
                get { return result.Name; }
                set { SetName(value); }
            }
            public Builder SetName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasName = true;
                result.name_ = value;
                return this;
            }
            public Builder ClearName()
            {
                PrepareBuilder();
                result.hasName = false;
                result.name_ = "";
                return this;
            }

            public bool HasImgKey
            {
                get { return result.hasImgKey; }
            }
            public int ImgKey
            {
                get { return result.ImgKey; }
                set { SetImgKey(value); }
            }
            public Builder SetImgKey(int value)
            {
                PrepareBuilder();
                result.hasImgKey = true;
                result.imgKey_ = value;
                return this;
            }
            public Builder ClearImgKey()
            {
                PrepareBuilder();
                result.hasImgKey = false;
                result.imgKey_ = 0;
                return this;
            }
        }
        static FBInfo()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class FriendObj : pb::GeneratedMessage<FriendObj, FriendObj.Builder>
    {
        private FriendObj() { }
        private static readonly FriendObj defaultInstance = new FriendObj().MakeReadOnly();
        private static readonly string[] _friendObjFieldNames = new string[] { "AlbumBGImgID", "AlbumFlag", "AlbumStyle", "Alias", "BigHeadImgUrl", "City", "Country", "CustomizedInfo", "FBInfos", "MobileMD5", "MyBrandList", "Nickname", "PersonalCard", "Province", "Sex", "Signature", "SmallHeadImgUrl", "SnsUserInfo", "Username", "str20", "str21", "str22" };
        private static readonly uint[] _friendObjFieldTags = new uint[] { 106, 88, 96, 74, 146, 50, 122, 138, 82, 26, 130, 18, 64, 42, 32, 58, 154, 114, 10, 162, 170, 178 };
        public static FriendObj DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override FriendObj DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override FriendObj ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_FriendObj__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<FriendObj, FriendObj.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_FriendObj__FieldAccessorTable; }
        }

        public const int UsernameFieldNumber = 1;
        private bool hasUsername;
        private string username_ = "";
        public bool HasUsername
        {
            get { return hasUsername; }
        }
        public string Username
        {
            get { return username_; }
        }

        public const int NicknameFieldNumber = 2;
        private bool hasNickname;
        private string nickname_ = "";
        public bool HasNickname
        {
            get { return hasNickname; }
        }
        public string Nickname
        {
            get { return nickname_; }
        }

        public const int MobileMD5FieldNumber = 3;
        private bool hasMobileMD5;
        private string mobileMD5_ = "";
        public bool HasMobileMD5
        {
            get { return hasMobileMD5; }
        }
        public string MobileMD5
        {
            get { return mobileMD5_; }
        }

        public const int SexFieldNumber = 4;
        private bool hasSex;
        private int sex_;
        public bool HasSex
        {
            get { return hasSex; }
        }
        public int Sex
        {
            get { return sex_; }
        }

        public const int ProvinceFieldNumber = 5;
        private bool hasProvince;
        private string province_ = "";
        public bool HasProvince
        {
            get { return hasProvince; }
        }
        public string Province
        {
            get { return province_; }
        }

        public const int CityFieldNumber = 6;
        private bool hasCity;
        private string city_ = "";
        public bool HasCity
        {
            get { return hasCity; }
        }
        public string City
        {
            get { return city_; }
        }

        public const int SignatureFieldNumber = 7;
        private bool hasSignature;
        private string signature_ = "";
        public bool HasSignature
        {
            get { return hasSignature; }
        }
        public string Signature
        {
            get { return signature_; }
        }

        public const int PersonalCardFieldNumber = 8;
        private bool hasPersonalCard;
        private int personalCard_;
        public bool HasPersonalCard
        {
            get { return hasPersonalCard; }
        }
        public int PersonalCard
        {
            get { return personalCard_; }
        }

        public const int AliasFieldNumber = 9;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias
        {
            get { return hasAlias; }
        }
        public string Alias
        {
            get { return alias_; }
        }

        public const int FBInfosFieldNumber = 10;
        private bool hasFBInfos;
        private global::mm.command.FBInfo fBInfos_;
        public bool HasFBInfos
        {
            get { return hasFBInfos; }
        }
        public global::mm.command.FBInfo FBInfos
        {
            get { return fBInfos_ ?? global::mm.command.FBInfo.DefaultInstance; }
        }

        public const int AlbumFlagFieldNumber = 11;
        private bool hasAlbumFlag;
        private int albumFlag_;
        public bool HasAlbumFlag
        {
            get { return hasAlbumFlag; }
        }
        public int AlbumFlag
        {
            get { return albumFlag_; }
        }

        public const int AlbumStyleFieldNumber = 12;
        private bool hasAlbumStyle;
        private int albumStyle_;
        public bool HasAlbumStyle
        {
            get { return hasAlbumStyle; }
        }
        public int AlbumStyle
        {
            get { return albumStyle_; }
        }

        public const int AlbumBGImgIDFieldNumber = 13;
        private bool hasAlbumBGImgID;
        private string albumBGImgID_ = "";
        public bool HasAlbumBGImgID
        {
            get { return hasAlbumBGImgID; }
        }
        public string AlbumBGImgID
        {
            get { return albumBGImgID_; }
        }

        public const int SnsUserInfoFieldNumber = 14;
        private bool hasSnsUserInfo;
        private global::mm.command.SnsUser snsUserInfo_;
        public bool HasSnsUserInfo
        {
            get { return hasSnsUserInfo; }
        }
        public global::mm.command.SnsUser SnsUserInfo
        {
            get { return snsUserInfo_ ?? global::mm.command.SnsUser.DefaultInstance; }
        }

        public const int CountryFieldNumber = 15;
        private bool hasCountry;
        private string country_ = "";
        public bool HasCountry
        {
            get { return hasCountry; }
        }
        public string Country
        {
            get { return country_; }
        }

        public const int MyBrandListFieldNumber = 16;
        private bool hasMyBrandList;
        private string myBrandList_ = "";
        public bool HasMyBrandList
        {
            get { return hasMyBrandList; }
        }
        public string MyBrandList
        {
            get { return myBrandList_; }
        }

        public const int CustomizedInfoFieldNumber = 17;
        private bool hasCustomizedInfo;
        private global::mm.command.CustomInfo customizedInfo_;
        public bool HasCustomizedInfo
        {
            get { return hasCustomizedInfo; }
        }
        public global::mm.command.CustomInfo CustomizedInfo
        {
            get { return customizedInfo_ ?? global::mm.command.CustomInfo.DefaultInstance; }
        }

        public const int BigHeadImgUrlFieldNumber = 18;
        private bool hasBigHeadImgUrl;
        private string bigHeadImgUrl_ = "";
        public bool HasBigHeadImgUrl
        {
            get { return hasBigHeadImgUrl; }
        }
        public string BigHeadImgUrl
        {
            get { return bigHeadImgUrl_; }
        }

        public const int SmallHeadImgUrlFieldNumber = 19;
        private bool hasSmallHeadImgUrl;
        private string smallHeadImgUrl_ = "";
        public bool HasSmallHeadImgUrl
        {
            get { return hasSmallHeadImgUrl; }
        }
        public string SmallHeadImgUrl
        {
            get { return smallHeadImgUrl_; }
        }

        public const int Str20FieldNumber = 20;
        private bool hasStr20;
        private string str20_ = "";
        public bool HasStr20
        {
            get { return hasStr20; }
        }
        public string Str20
        {
            get { return str20_; }
        }

        public const int Str21FieldNumber = 21;
        private bool hasStr21;
        private string str21_ = "";
        public bool HasStr21
        {
            get { return hasStr21; }
        }
        public string Str21
        {
            get { return str21_; }
        }

        public const int Str22FieldNumber = 22;
        private bool hasStr22;
        private string str22_ = "";
        public bool HasStr22
        {
            get { return hasStr22; }
        }
        public string Str22
        {
            get { return str22_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasFBInfos)
                {
                    if (!FBInfos.IsInitialized) return false;
                }
                if (HasSnsUserInfo)
                {
                    if (!SnsUserInfo.IsInitialized) return false;
                }
                if (HasCustomizedInfo)
                {
                    if (!CustomizedInfo.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _friendObjFieldNames;
            if (hasUsername)
            {
                output.WriteString(1, field_names[18], Username);
            }
            if (hasNickname)
            {
                output.WriteString(2, field_names[11], Nickname);
            }
            if (hasMobileMD5)
            {
                output.WriteString(3, field_names[9], MobileMD5);
            }
            if (hasSex)
            {
                output.WriteInt32(4, field_names[14], Sex);
            }
            if (hasProvince)
            {
                output.WriteString(5, field_names[13], Province);
            }
            if (hasCity)
            {
                output.WriteString(6, field_names[5], City);
            }
            if (hasSignature)
            {
                output.WriteString(7, field_names[15], Signature);
            }
            if (hasPersonalCard)
            {
                output.WriteInt32(8, field_names[12], PersonalCard);
            }
            if (hasAlias)
            {
                output.WriteString(9, field_names[3], Alias);
            }
            if (hasFBInfos)
            {
                output.WriteMessage(10, field_names[8], FBInfos);
            }
            if (hasAlbumFlag)
            {
                output.WriteInt32(11, field_names[1], AlbumFlag);
            }
            if (hasAlbumStyle)
            {
                output.WriteInt32(12, field_names[2], AlbumStyle);
            }
            if (hasAlbumBGImgID)
            {
                output.WriteString(13, field_names[0], AlbumBGImgID);
            }
            if (hasSnsUserInfo)
            {
                output.WriteMessage(14, field_names[17], SnsUserInfo);
            }
            if (hasCountry)
            {
                output.WriteString(15, field_names[6], Country);
            }
            if (hasMyBrandList)
            {
                output.WriteString(16, field_names[10], MyBrandList);
            }
            if (hasCustomizedInfo)
            {
                output.WriteMessage(17, field_names[7], CustomizedInfo);
            }
            if (hasBigHeadImgUrl)
            {
                output.WriteString(18, field_names[4], BigHeadImgUrl);
            }
            if (hasSmallHeadImgUrl)
            {
                output.WriteString(19, field_names[16], SmallHeadImgUrl);
            }
            if (hasStr20)
            {
                output.WriteString(20, field_names[19], Str20);
            }
            if (hasStr21)
            {
                output.WriteString(21, field_names[20], Str21);
            }
            if (hasStr22)
            {
                output.WriteString(22, field_names[21], Str22);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUsername)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Username);
                }
                if (hasNickname)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Nickname);
                }
                if (hasMobileMD5)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, MobileMD5);
                }
                if (hasSex)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, Sex);
                }
                if (hasProvince)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(5, Province);
                }
                if (hasCity)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(6, City);
                }
                if (hasSignature)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(7, Signature);
                }
                if (hasPersonalCard)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(8, PersonalCard);
                }
                if (hasAlias)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(9, Alias);
                }
                if (hasFBInfos)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(10, FBInfos);
                }
                if (hasAlbumFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(11, AlbumFlag);
                }
                if (hasAlbumStyle)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(12, AlbumStyle);
                }
                if (hasAlbumBGImgID)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(13, AlbumBGImgID);
                }
                if (hasSnsUserInfo)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(14, SnsUserInfo);
                }
                if (hasCountry)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(15, Country);
                }
                if (hasMyBrandList)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(16, MyBrandList);
                }
                if (hasCustomizedInfo)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(17, CustomizedInfo);
                }
                if (hasBigHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(18, BigHeadImgUrl);
                }
                if (hasSmallHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(19, SmallHeadImgUrl);
                }
                if (hasStr20)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(20, Str20);
                }
                if (hasStr21)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(21, Str21);
                }
                if (hasStr22)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(22, Str22);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static FriendObj ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static FriendObj ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static FriendObj ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static FriendObj ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static FriendObj ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static FriendObj ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static FriendObj ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static FriendObj ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static FriendObj ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static FriendObj ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private FriendObj MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(FriendObj prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<FriendObj, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(FriendObj cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private FriendObj result;

            private FriendObj PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    FriendObj original = result;
                    result = new FriendObj();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override FriendObj MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.FriendObj.Descriptor; }
            }

            public override FriendObj DefaultInstanceForType
            {
                get { return global::mm.command.FriendObj.DefaultInstance; }
            }

            public override FriendObj BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is FriendObj)
                {
                    return MergeFrom((FriendObj)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(FriendObj other)
            {
                if (other == global::mm.command.FriendObj.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUsername)
                {
                    Username = other.Username;
                }
                if (other.HasNickname)
                {
                    Nickname = other.Nickname;
                }
                if (other.HasMobileMD5)
                {
                    MobileMD5 = other.MobileMD5;
                }
                if (other.HasSex)
                {
                    Sex = other.Sex;
                }
                if (other.HasProvince)
                {
                    Province = other.Province;
                }
                if (other.HasCity)
                {
                    City = other.City;
                }
                if (other.HasSignature)
                {
                    Signature = other.Signature;
                }
                if (other.HasPersonalCard)
                {
                    PersonalCard = other.PersonalCard;
                }
                if (other.HasAlias)
                {
                    Alias = other.Alias;
                }
                if (other.HasFBInfos)
                {
                    MergeFBInfos(other.FBInfos);
                }
                if (other.HasAlbumFlag)
                {
                    AlbumFlag = other.AlbumFlag;
                }
                if (other.HasAlbumStyle)
                {
                    AlbumStyle = other.AlbumStyle;
                }
                if (other.HasAlbumBGImgID)
                {
                    AlbumBGImgID = other.AlbumBGImgID;
                }
                if (other.HasSnsUserInfo)
                {
                    MergeSnsUserInfo(other.SnsUserInfo);
                }
                if (other.HasCountry)
                {
                    Country = other.Country;
                }
                if (other.HasMyBrandList)
                {
                    MyBrandList = other.MyBrandList;
                }
                if (other.HasCustomizedInfo)
                {
                    MergeCustomizedInfo(other.CustomizedInfo);
                }
                if (other.HasBigHeadImgUrl)
                {
                    BigHeadImgUrl = other.BigHeadImgUrl;
                }
                if (other.HasSmallHeadImgUrl)
                {
                    SmallHeadImgUrl = other.SmallHeadImgUrl;
                }
                if (other.HasStr20)
                {
                    Str20 = other.Str20;
                }
                if (other.HasStr21)
                {
                    Str21 = other.Str21;
                }
                if (other.HasStr22)
                {
                    Str22 = other.Str22;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_friendObjFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _friendObjFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasUsername = input.ReadString(ref result.username_);
                                break;
                            }
                        case 18:
                            {
                                result.hasNickname = input.ReadString(ref result.nickname_);
                                break;
                            }
                        case 26:
                            {
                                result.hasMobileMD5 = input.ReadString(ref result.mobileMD5_);
                                break;
                            }
                        case 32:
                            {
                                result.hasSex = input.ReadInt32(ref result.sex_);
                                break;
                            }
                        case 42:
                            {
                                result.hasProvince = input.ReadString(ref result.province_);
                                break;
                            }
                        case 50:
                            {
                                result.hasCity = input.ReadString(ref result.city_);
                                break;
                            }
                        case 58:
                            {
                                result.hasSignature = input.ReadString(ref result.signature_);
                                break;
                            }
                        case 64:
                            {
                                result.hasPersonalCard = input.ReadInt32(ref result.personalCard_);
                                break;
                            }
                        case 74:
                            {
                                result.hasAlias = input.ReadString(ref result.alias_);
                                break;
                            }
                        case 82:
                            {
                                global::mm.command.FBInfo.Builder subBuilder = global::mm.command.FBInfo.CreateBuilder();
                                if (result.hasFBInfos)
                                {
                                    subBuilder.MergeFrom(FBInfos);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                FBInfos = subBuilder.BuildPartial();
                                break;
                            }
                        case 88:
                            {
                                result.hasAlbumFlag = input.ReadInt32(ref result.albumFlag_);
                                break;
                            }
                        case 96:
                            {
                                result.hasAlbumStyle = input.ReadInt32(ref result.albumStyle_);
                                break;
                            }
                        case 106:
                            {
                                result.hasAlbumBGImgID = input.ReadString(ref result.albumBGImgID_);
                                break;
                            }
                        case 114:
                            {
                                global::mm.command.SnsUser.Builder subBuilder = global::mm.command.SnsUser.CreateBuilder();
                                if (result.hasSnsUserInfo)
                                {
                                    subBuilder.MergeFrom(SnsUserInfo);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                SnsUserInfo = subBuilder.BuildPartial();
                                break;
                            }
                        case 122:
                            {
                                result.hasCountry = input.ReadString(ref result.country_);
                                break;
                            }
                        case 130:
                            {
                                result.hasMyBrandList = input.ReadString(ref result.myBrandList_);
                                break;
                            }
                        case 138:
                            {
                                global::mm.command.CustomInfo.Builder subBuilder = global::mm.command.CustomInfo.CreateBuilder();
                                if (result.hasCustomizedInfo)
                                {
                                    subBuilder.MergeFrom(CustomizedInfo);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                CustomizedInfo = subBuilder.BuildPartial();
                                break;
                            }
                        case 146:
                            {
                                result.hasBigHeadImgUrl = input.ReadString(ref result.bigHeadImgUrl_);
                                break;
                            }
                        case 154:
                            {
                                result.hasSmallHeadImgUrl = input.ReadString(ref result.smallHeadImgUrl_);
                                break;
                            }
                        case 162:
                            {
                                result.hasStr20 = input.ReadString(ref result.str20_);
                                break;
                            }
                        case 170:
                            {
                                result.hasStr21 = input.ReadString(ref result.str21_);
                                break;
                            }
                        case 178:
                            {
                                result.hasStr22 = input.ReadString(ref result.str22_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUsername
            {
                get { return result.hasUsername; }
            }
            public string Username
            {
                get { return result.Username; }
                set { SetUsername(value); }
            }
            public Builder SetUsername(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUsername = true;
                result.username_ = value;
                return this;
            }
            public Builder ClearUsername()
            {
                PrepareBuilder();
                result.hasUsername = false;
                result.username_ = "";
                return this;
            }

            public bool HasNickname
            {
                get { return result.hasNickname; }
            }
            public string Nickname
            {
                get { return result.Nickname; }
                set { SetNickname(value); }
            }
            public Builder SetNickname(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickname = true;
                result.nickname_ = value;
                return this;
            }
            public Builder ClearNickname()
            {
                PrepareBuilder();
                result.hasNickname = false;
                result.nickname_ = "";
                return this;
            }

            public bool HasMobileMD5
            {
                get { return result.hasMobileMD5; }
            }
            public string MobileMD5
            {
                get { return result.MobileMD5; }
                set { SetMobileMD5(value); }
            }
            public Builder SetMobileMD5(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMobileMD5 = true;
                result.mobileMD5_ = value;
                return this;
            }
            public Builder ClearMobileMD5()
            {
                PrepareBuilder();
                result.hasMobileMD5 = false;
                result.mobileMD5_ = "";
                return this;
            }

            public bool HasSex
            {
                get { return result.hasSex; }
            }
            public int Sex
            {
                get { return result.Sex; }
                set { SetSex(value); }
            }
            public Builder SetSex(int value)
            {
                PrepareBuilder();
                result.hasSex = true;
                result.sex_ = value;
                return this;
            }
            public Builder ClearSex()
            {
                PrepareBuilder();
                result.hasSex = false;
                result.sex_ = 0;
                return this;
            }

            public bool HasProvince
            {
                get { return result.hasProvince; }
            }
            public string Province
            {
                get { return result.Province; }
                set { SetProvince(value); }
            }
            public Builder SetProvince(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasProvince = true;
                result.province_ = value;
                return this;
            }
            public Builder ClearProvince()
            {
                PrepareBuilder();
                result.hasProvince = false;
                result.province_ = "";
                return this;
            }

            public bool HasCity
            {
                get { return result.hasCity; }
            }
            public string City
            {
                get { return result.City; }
                set { SetCity(value); }
            }
            public Builder SetCity(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCity = true;
                result.city_ = value;
                return this;
            }
            public Builder ClearCity()
            {
                PrepareBuilder();
                result.hasCity = false;
                result.city_ = "";
                return this;
            }

            public bool HasSignature
            {
                get { return result.hasSignature; }
            }
            public string Signature
            {
                get { return result.Signature; }
                set { SetSignature(value); }
            }
            public Builder SetSignature(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSignature = true;
                result.signature_ = value;
                return this;
            }
            public Builder ClearSignature()
            {
                PrepareBuilder();
                result.hasSignature = false;
                result.signature_ = "";
                return this;
            }

            public bool HasPersonalCard
            {
                get { return result.hasPersonalCard; }
            }
            public int PersonalCard
            {
                get { return result.PersonalCard; }
                set { SetPersonalCard(value); }
            }
            public Builder SetPersonalCard(int value)
            {
                PrepareBuilder();
                result.hasPersonalCard = true;
                result.personalCard_ = value;
                return this;
            }
            public Builder ClearPersonalCard()
            {
                PrepareBuilder();
                result.hasPersonalCard = false;
                result.personalCard_ = 0;
                return this;
            }

            public bool HasAlias
            {
                get { return result.hasAlias; }
            }
            public string Alias
            {
                get { return result.Alias; }
                set { SetAlias(value); }
            }
            public Builder SetAlias(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlias = true;
                result.alias_ = value;
                return this;
            }
            public Builder ClearAlias()
            {
                PrepareBuilder();
                result.hasAlias = false;
                result.alias_ = "";
                return this;
            }

            public bool HasFBInfos
            {
                get { return result.hasFBInfos; }
            }
            public global::mm.command.FBInfo FBInfos
            {
                get { return result.FBInfos; }
                set { SetFBInfos(value); }
            }
            public Builder SetFBInfos(global::mm.command.FBInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasFBInfos = true;
                result.fBInfos_ = value;
                return this;
            }
            public Builder SetFBInfos(global::mm.command.FBInfo.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasFBInfos = true;
                result.fBInfos_ = builderForValue.Build();
                return this;
            }
            public Builder MergeFBInfos(global::mm.command.FBInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasFBInfos &&
                    result.fBInfos_ != global::mm.command.FBInfo.DefaultInstance)
                {
                    result.fBInfos_ = global::mm.command.FBInfo.CreateBuilder(result.fBInfos_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.fBInfos_ = value;
                }
                result.hasFBInfos = true;
                return this;
            }
            public Builder ClearFBInfos()
            {
                PrepareBuilder();
                result.hasFBInfos = false;
                result.fBInfos_ = null;
                return this;
            }

            public bool HasAlbumFlag
            {
                get { return result.hasAlbumFlag; }
            }
            public int AlbumFlag
            {
                get { return result.AlbumFlag; }
                set { SetAlbumFlag(value); }
            }
            public Builder SetAlbumFlag(int value)
            {
                PrepareBuilder();
                result.hasAlbumFlag = true;
                result.albumFlag_ = value;
                return this;
            }
            public Builder ClearAlbumFlag()
            {
                PrepareBuilder();
                result.hasAlbumFlag = false;
                result.albumFlag_ = 0;
                return this;
            }

            public bool HasAlbumStyle
            {
                get { return result.hasAlbumStyle; }
            }
            public int AlbumStyle
            {
                get { return result.AlbumStyle; }
                set { SetAlbumStyle(value); }
            }
            public Builder SetAlbumStyle(int value)
            {
                PrepareBuilder();
                result.hasAlbumStyle = true;
                result.albumStyle_ = value;
                return this;
            }
            public Builder ClearAlbumStyle()
            {
                PrepareBuilder();
                result.hasAlbumStyle = false;
                result.albumStyle_ = 0;
                return this;
            }

            public bool HasAlbumBGImgID
            {
                get { return result.hasAlbumBGImgID; }
            }
            public string AlbumBGImgID
            {
                get { return result.AlbumBGImgID; }
                set { SetAlbumBGImgID(value); }
            }
            public Builder SetAlbumBGImgID(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlbumBGImgID = true;
                result.albumBGImgID_ = value;
                return this;
            }
            public Builder ClearAlbumBGImgID()
            {
                PrepareBuilder();
                result.hasAlbumBGImgID = false;
                result.albumBGImgID_ = "";
                return this;
            }

            public bool HasSnsUserInfo
            {
                get { return result.hasSnsUserInfo; }
            }
            public global::mm.command.SnsUser SnsUserInfo
            {
                get { return result.SnsUserInfo; }
                set { SetSnsUserInfo(value); }
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = value;
                return this;
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSnsUserInfo &&
                    result.snsUserInfo_ != global::mm.command.SnsUser.DefaultInstance)
                {
                    result.snsUserInfo_ = global::mm.command.SnsUser.CreateBuilder(result.snsUserInfo_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.snsUserInfo_ = value;
                }
                result.hasSnsUserInfo = true;
                return this;
            }
            public Builder ClearSnsUserInfo()
            {
                PrepareBuilder();
                result.hasSnsUserInfo = false;
                result.snsUserInfo_ = null;
                return this;
            }

            public bool HasCountry
            {
                get { return result.hasCountry; }
            }
            public string Country
            {
                get { return result.Country; }
                set { SetCountry(value); }
            }
            public Builder SetCountry(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCountry = true;
                result.country_ = value;
                return this;
            }
            public Builder ClearCountry()
            {
                PrepareBuilder();
                result.hasCountry = false;
                result.country_ = "";
                return this;
            }

            public bool HasMyBrandList
            {
                get { return result.hasMyBrandList; }
            }
            public string MyBrandList
            {
                get { return result.MyBrandList; }
                set { SetMyBrandList(value); }
            }
            public Builder SetMyBrandList(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMyBrandList = true;
                result.myBrandList_ = value;
                return this;
            }
            public Builder ClearMyBrandList()
            {
                PrepareBuilder();
                result.hasMyBrandList = false;
                result.myBrandList_ = "";
                return this;
            }

            public bool HasCustomizedInfo
            {
                get { return result.hasCustomizedInfo; }
            }
            public global::mm.command.CustomInfo CustomizedInfo
            {
                get { return result.CustomizedInfo; }
                set { SetCustomizedInfo(value); }
            }
            public Builder SetCustomizedInfo(global::mm.command.CustomInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCustomizedInfo = true;
                result.customizedInfo_ = value;
                return this;
            }
            public Builder SetCustomizedInfo(global::mm.command.CustomInfo.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasCustomizedInfo = true;
                result.customizedInfo_ = builderForValue.Build();
                return this;
            }
            public Builder MergeCustomizedInfo(global::mm.command.CustomInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasCustomizedInfo &&
                    result.customizedInfo_ != global::mm.command.CustomInfo.DefaultInstance)
                {
                    result.customizedInfo_ = global::mm.command.CustomInfo.CreateBuilder(result.customizedInfo_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.customizedInfo_ = value;
                }
                result.hasCustomizedInfo = true;
                return this;
            }
            public Builder ClearCustomizedInfo()
            {
                PrepareBuilder();
                result.hasCustomizedInfo = false;
                result.customizedInfo_ = null;
                return this;
            }

            public bool HasBigHeadImgUrl
            {
                get { return result.hasBigHeadImgUrl; }
            }
            public string BigHeadImgUrl
            {
                get { return result.BigHeadImgUrl; }
                set { SetBigHeadImgUrl(value); }
            }
            public Builder SetBigHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBigHeadImgUrl = true;
                result.bigHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearBigHeadImgUrl()
            {
                PrepareBuilder();
                result.hasBigHeadImgUrl = false;
                result.bigHeadImgUrl_ = "";
                return this;
            }

            public bool HasSmallHeadImgUrl
            {
                get { return result.hasSmallHeadImgUrl; }
            }
            public string SmallHeadImgUrl
            {
                get { return result.SmallHeadImgUrl; }
                set { SetSmallHeadImgUrl(value); }
            }
            public Builder SetSmallHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSmallHeadImgUrl = true;
                result.smallHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearSmallHeadImgUrl()
            {
                PrepareBuilder();
                result.hasSmallHeadImgUrl = false;
                result.smallHeadImgUrl_ = "";
                return this;
            }

            public bool HasStr20
            {
                get { return result.hasStr20; }
            }
            public string Str20
            {
                get { return result.Str20; }
                set { SetStr20(value); }
            }
            public Builder SetStr20(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr20 = true;
                result.str20_ = value;
                return this;
            }
            public Builder ClearStr20()
            {
                PrepareBuilder();
                result.hasStr20 = false;
                result.str20_ = "";
                return this;
            }

            public bool HasStr21
            {
                get { return result.hasStr21; }
            }
            public string Str21
            {
                get { return result.Str21; }
                set { SetStr21(value); }
            }
            public Builder SetStr21(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr21 = true;
                result.str21_ = value;
                return this;
            }
            public Builder ClearStr21()
            {
                PrepareBuilder();
                result.hasStr21 = false;
                result.str21_ = "";
                return this;
            }

            public bool HasStr22
            {
                get { return result.hasStr22; }
            }
            public string Str22
            {
                get { return result.Str22; }
                set { SetStr22(value); }
            }
            public Builder SetStr22(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr22 = true;
                result.str22_ = value;
                return this;
            }
            public Builder ClearStr22()
            {
                PrepareBuilder();
                result.hasStr22 = false;
                result.str22_ = "";
                return this;
            }
        }
        static FriendObj()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class UserObject : pb::GeneratedMessage<UserObject, UserObject.Builder>
    {
        private UserObject() { }
        private static readonly UserObject defaultInstance = new UserObject().MakeReadOnly();
        private static readonly string[] _userObjectFieldNames = new string[] { "CommentId", "Content", "CreateTime", "IsNotRichText", "Nickname", "ReplyCommentId", "ReplyUsername", "Source", "Type", "Username" };
        private static readonly uint[] _userObjectFieldTags = new uint[] { 56, 42, 48, 80, 18, 64, 74, 24, 32, 10 };
        public static UserObject DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override UserObject DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override UserObject ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_UserObject__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<UserObject, UserObject.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_UserObject__FieldAccessorTable; }
        }

        public const int UsernameFieldNumber = 1;
        private bool hasUsername;
        private string username_ = "";
        public bool HasUsername
        {
            get { return hasUsername; }
        }
        public string Username
        {
            get { return username_; }
        }

        public const int NicknameFieldNumber = 2;
        private bool hasNickname;
        private string nickname_ = "";
        public bool HasNickname
        {
            get { return hasNickname; }
        }
        public string Nickname
        {
            get { return nickname_; }
        }

        public const int SourceFieldNumber = 3;
        private bool hasSource;
        private int source_;
        public bool HasSource
        {
            get { return hasSource; }
        }
        public int Source
        {
            get { return source_; }
        }

        public const int TypeFieldNumber = 4;
        private bool hasType;
        private int type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public int Type
        {
            get { return type_; }
        }

        public const int ContentFieldNumber = 5;
        private bool hasContent;
        private string content_ = "";
        public bool HasContent
        {
            get { return hasContent; }
        }
        public string Content
        {
            get { return content_; }
        }

        public const int CreateTimeFieldNumber = 6;
        private bool hasCreateTime;
        private int createTime_;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public int CreateTime
        {
            get { return createTime_; }
        }

        public const int CommentIdFieldNumber = 7;
        private bool hasCommentId;
        private int commentId_;
        public bool HasCommentId
        {
            get { return hasCommentId; }
        }
        public int CommentId
        {
            get { return commentId_; }
        }

        public const int ReplyCommentIdFieldNumber = 8;
        private bool hasReplyCommentId;
        private int replyCommentId_;
        public bool HasReplyCommentId
        {
            get { return hasReplyCommentId; }
        }
        public int ReplyCommentId
        {
            get { return replyCommentId_; }
        }

        public const int ReplyUsernameFieldNumber = 9;
        private bool hasReplyUsername;
        private string replyUsername_ = "";
        public bool HasReplyUsername
        {
            get { return hasReplyUsername; }
        }
        public string ReplyUsername
        {
            get { return replyUsername_; }
        }

        public const int IsNotRichTextFieldNumber = 10;
        private bool hasIsNotRichText;
        private int isNotRichText_;
        public bool HasIsNotRichText
        {
            get { return hasIsNotRichText; }
        }
        public int IsNotRichText
        {
            get { return isNotRichText_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasSource) return false;
                if (!hasType) return false;
                if (!hasCreateTime) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _userObjectFieldNames;
            if (hasUsername)
            {
                output.WriteString(1, field_names[9], Username);
            }
            if (hasNickname)
            {
                output.WriteString(2, field_names[4], Nickname);
            }
            if (hasSource)
            {
                output.WriteInt32(3, field_names[7], Source);
            }
            if (hasType)
            {
                output.WriteInt32(4, field_names[8], Type);
            }
            if (hasContent)
            {
                output.WriteString(5, field_names[1], Content);
            }
            if (hasCreateTime)
            {
                output.WriteInt32(6, field_names[2], CreateTime);
            }
            if (hasCommentId)
            {
                output.WriteInt32(7, field_names[0], CommentId);
            }
            if (hasReplyCommentId)
            {
                output.WriteInt32(8, field_names[5], ReplyCommentId);
            }
            if (hasReplyUsername)
            {
                output.WriteString(9, field_names[6], ReplyUsername);
            }
            if (hasIsNotRichText)
            {
                output.WriteInt32(10, field_names[3], IsNotRichText);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUsername)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Username);
                }
                if (hasNickname)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Nickname);
                }
                if (hasSource)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(3, Source);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, Type);
                }
                if (hasContent)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(5, Content);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(6, CreateTime);
                }
                if (hasCommentId)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, CommentId);
                }
                if (hasReplyCommentId)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(8, ReplyCommentId);
                }
                if (hasReplyUsername)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(9, ReplyUsername);
                }
                if (hasIsNotRichText)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(10, IsNotRichText);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static UserObject ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UserObject ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UserObject ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static UserObject ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static UserObject ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UserObject ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static UserObject ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static UserObject ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static UserObject ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static UserObject ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private UserObject MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(UserObject prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<UserObject, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(UserObject cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private UserObject result;

            private UserObject PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    UserObject original = result;
                    result = new UserObject();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override UserObject MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.UserObject.Descriptor; }
            }

            public override UserObject DefaultInstanceForType
            {
                get { return global::mm.command.UserObject.DefaultInstance; }
            }

            public override UserObject BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is UserObject)
                {
                    return MergeFrom((UserObject)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(UserObject other)
            {
                if (other == global::mm.command.UserObject.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUsername)
                {
                    Username = other.Username;
                }
                if (other.HasNickname)
                {
                    Nickname = other.Nickname;
                }
                if (other.HasSource)
                {
                    Source = other.Source;
                }
                if (other.HasType)
                {
                    Type = other.Type;
                }
                if (other.HasContent)
                {
                    Content = other.Content;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasCommentId)
                {
                    CommentId = other.CommentId;
                }
                if (other.HasReplyCommentId)
                {
                    ReplyCommentId = other.ReplyCommentId;
                }
                if (other.HasReplyUsername)
                {
                    ReplyUsername = other.ReplyUsername;
                }
                if (other.HasIsNotRichText)
                {
                    IsNotRichText = other.IsNotRichText;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_userObjectFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _userObjectFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasUsername = input.ReadString(ref result.username_);
                                break;
                            }
                        case 18:
                            {
                                result.hasNickname = input.ReadString(ref result.nickname_);
                                break;
                            }
                        case 24:
                            {
                                result.hasSource = input.ReadInt32(ref result.source_);
                                break;
                            }
                        case 32:
                            {
                                result.hasType = input.ReadInt32(ref result.type_);
                                break;
                            }
                        case 42:
                            {
                                result.hasContent = input.ReadString(ref result.content_);
                                break;
                            }
                        case 48:
                            {
                                result.hasCreateTime = input.ReadInt32(ref result.createTime_);
                                break;
                            }
                        case 56:
                            {
                                result.hasCommentId = input.ReadInt32(ref result.commentId_);
                                break;
                            }
                        case 64:
                            {
                                result.hasReplyCommentId = input.ReadInt32(ref result.replyCommentId_);
                                break;
                            }
                        case 74:
                            {
                                result.hasReplyUsername = input.ReadString(ref result.replyUsername_);
                                break;
                            }
                        case 80:
                            {
                                result.hasIsNotRichText = input.ReadInt32(ref result.isNotRichText_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUsername
            {
                get { return result.hasUsername; }
            }
            public string Username
            {
                get { return result.Username; }
                set { SetUsername(value); }
            }
            public Builder SetUsername(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUsername = true;
                result.username_ = value;
                return this;
            }
            public Builder ClearUsername()
            {
                PrepareBuilder();
                result.hasUsername = false;
                result.username_ = "";
                return this;
            }

            public bool HasNickname
            {
                get { return result.hasNickname; }
            }
            public string Nickname
            {
                get { return result.Nickname; }
                set { SetNickname(value); }
            }
            public Builder SetNickname(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickname = true;
                result.nickname_ = value;
                return this;
            }
            public Builder ClearNickname()
            {
                PrepareBuilder();
                result.hasNickname = false;
                result.nickname_ = "";
                return this;
            }

            public bool HasSource
            {
                get { return result.hasSource; }
            }
            public int Source
            {
                get { return result.Source; }
                set { SetSource(value); }
            }
            public Builder SetSource(int value)
            {
                PrepareBuilder();
                result.hasSource = true;
                result.source_ = value;
                return this;
            }
            public Builder ClearSource()
            {
                PrepareBuilder();
                result.hasSource = false;
                result.source_ = 0;
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            public int Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(int value)
            {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = 0;
                return this;
            }

            public bool HasContent
            {
                get { return result.hasContent; }
            }
            public string Content
            {
                get { return result.Content; }
                set { SetContent(value); }
            }
            public Builder SetContent(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContent = true;
                result.content_ = value;
                return this;
            }
            public Builder ClearContent()
            {
                PrepareBuilder();
                result.hasContent = false;
                result.content_ = "";
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public int CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(int value)
            {
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = 0;
                return this;
            }

            public bool HasCommentId
            {
                get { return result.hasCommentId; }
            }
            public int CommentId
            {
                get { return result.CommentId; }
                set { SetCommentId(value); }
            }
            public Builder SetCommentId(int value)
            {
                PrepareBuilder();
                result.hasCommentId = true;
                result.commentId_ = value;
                return this;
            }
            public Builder ClearCommentId()
            {
                PrepareBuilder();
                result.hasCommentId = false;
                result.commentId_ = 0;
                return this;
            }

            public bool HasReplyCommentId
            {
                get { return result.hasReplyCommentId; }
            }
            public int ReplyCommentId
            {
                get { return result.ReplyCommentId; }
                set { SetReplyCommentId(value); }
            }
            public Builder SetReplyCommentId(int value)
            {
                PrepareBuilder();
                result.hasReplyCommentId = true;
                result.replyCommentId_ = value;
                return this;
            }
            public Builder ClearReplyCommentId()
            {
                PrepareBuilder();
                result.hasReplyCommentId = false;
                result.replyCommentId_ = 0;
                return this;
            }

            public bool HasReplyUsername
            {
                get { return result.hasReplyUsername; }
            }
            public string ReplyUsername
            {
                get { return result.ReplyUsername; }
                set { SetReplyUsername(value); }
            }
            public Builder SetReplyUsername(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasReplyUsername = true;
                result.replyUsername_ = value;
                return this;
            }
            public Builder ClearReplyUsername()
            {
                PrepareBuilder();
                result.hasReplyUsername = false;
                result.replyUsername_ = "";
                return this;
            }

            public bool HasIsNotRichText
            {
                get { return result.hasIsNotRichText; }
            }
            public int IsNotRichText
            {
                get { return result.IsNotRichText; }
                set { SetIsNotRichText(value); }
            }
            public Builder SetIsNotRichText(int value)
            {
                PrepareBuilder();
                result.hasIsNotRichText = true;
                result.isNotRichText_ = value;
                return this;
            }
            public Builder ClearIsNotRichText()
            {
                PrepareBuilder();
                result.hasIsNotRichText = false;
                result.isNotRichText_ = 0;
                return this;
            }
        }
        static UserObject()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class GroupObject : pb::GeneratedMessage<GroupObject, GroupObject.Builder>
    {
        private GroupObject() { }
        private static readonly GroupObject defaultInstance = new GroupObject().MakeReadOnly();
        private static readonly string[] _groupObjectFieldNames = new string[] { "GroupId" };
        private static readonly uint[] _groupObjectFieldTags = new uint[] { 8 };
        public static GroupObject DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override GroupObject DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override GroupObject ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_GroupObject__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<GroupObject, GroupObject.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_GroupObject__FieldAccessorTable; }
        }

        public const int GroupIdFieldNumber = 1;
        private bool hasGroupId;
        private long groupId_;
        public bool HasGroupId
        {
            get { return hasGroupId; }
        }
        public long GroupId
        {
            get { return groupId_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasGroupId) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _groupObjectFieldNames;
            if (hasGroupId)
            {
                output.WriteInt64(1, field_names[0], GroupId);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasGroupId)
                {
                    size += pb::CodedOutputStream.ComputeInt64Size(1, GroupId);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static GroupObject ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GroupObject ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GroupObject ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GroupObject ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GroupObject ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GroupObject ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static GroupObject ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static GroupObject ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static GroupObject ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GroupObject ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private GroupObject MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(GroupObject prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<GroupObject, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(GroupObject cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private GroupObject result;

            private GroupObject PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    GroupObject original = result;
                    result = new GroupObject();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override GroupObject MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.GroupObject.Descriptor; }
            }

            public override GroupObject DefaultInstanceForType
            {
                get { return global::mm.command.GroupObject.DefaultInstance; }
            }

            public override GroupObject BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is GroupObject)
                {
                    return MergeFrom((GroupObject)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(GroupObject other)
            {
                if (other == global::mm.command.GroupObject.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasGroupId)
                {
                    GroupId = other.GroupId;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_groupObjectFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _groupObjectFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasGroupId = input.ReadInt64(ref result.groupId_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasGroupId
            {
                get { return result.hasGroupId; }
            }
            public long GroupId
            {
                get { return result.GroupId; }
                set { SetGroupId(value); }
            }
            public Builder SetGroupId(long value)
            {
                PrepareBuilder();
                result.hasGroupId = true;
                result.groupId_ = value;
                return this;
            }
            public Builder ClearGroupId()
            {
                PrepareBuilder();
                result.hasGroupId = false;
                result.groupId_ = 0L;
                return this;
            }
        }
        static GroupObject()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PageObject : pb::GeneratedMessage<PageObject, PageObject.Builder>
    {
        private PageObject() { }
        private static readonly PageObject defaultInstance = new PageObject().MakeReadOnly();
        private static readonly string[] _pageObjectFieldNames = new string[] { "CommentCount", "CommentUser", "CommentUserListCount", "CreateTime", "ExtFlag", "Group", "GroupNumb", "Id", "IsNotRichText", "LikeCount", "LikeFlag", "LikeUser", "LikeUserListCount", "Nickname", "NoChange", "ObjectDesc", "ReferId", "ReferUsername", "Username", "WithUser", "WithUserListCount", "WithUserNumb" };
        private static readonly uint[] _pageObjectFieldTags = new uint[] { 80, 98, 88, 32, 128, 154, 144, 8, 160, 56, 48, 74, 64, 26, 136, 42, 176, 170, 18, 122, 112, 104 };
        public static PageObject DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override PageObject DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override PageObject ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_PageObject__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<PageObject, PageObject.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_PageObject__FieldAccessorTable; }
        }

        public const int IdFieldNumber = 1;
        private bool hasId;
        private long id_;
        public bool HasId
        {
            get { return hasId; }
        }
        public long Id
        {
            get { return id_; }
        }

        public const int UsernameFieldNumber = 2;
        private bool hasUsername;
        private string username_ = "";
        public bool HasUsername
        {
            get { return hasUsername; }
        }
        public string Username
        {
            get { return username_; }
        }

        public const int NicknameFieldNumber = 3;
        private bool hasNickname;
        private string nickname_ = "";
        public bool HasNickname
        {
            get { return hasNickname; }
        }
        public string Nickname
        {
            get { return nickname_; }
        }

        public const int CreateTimeFieldNumber = 4;
        private bool hasCreateTime;
        private int createTime_;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public int CreateTime
        {
            get { return createTime_; }
        }

        public const int ObjectDescFieldNumber = 5;
        private bool hasObjectDesc;
        private global::mm.command.SKBuiltinBuffer_t objectDesc_;
        public bool HasObjectDesc
        {
            get { return hasObjectDesc; }
        }
        public global::mm.command.SKBuiltinBuffer_t ObjectDesc
        {
            get { return objectDesc_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int LikeFlagFieldNumber = 6;
        private bool hasLikeFlag;
        private int likeFlag_;
        public bool HasLikeFlag
        {
            get { return hasLikeFlag; }
        }
        public int LikeFlag
        {
            get { return likeFlag_; }
        }

        public const int LikeCountFieldNumber = 7;
        private bool hasLikeCount;
        private int likeCount_;
        public bool HasLikeCount
        {
            get { return hasLikeCount; }
        }
        public int LikeCount
        {
            get { return likeCount_; }
        }

        public const int LikeUserListCountFieldNumber = 8;
        private bool hasLikeUserListCount;
        private int likeUserListCount_;
        public bool HasLikeUserListCount
        {
            get { return hasLikeUserListCount; }
        }
        public int LikeUserListCount
        {
            get { return likeUserListCount_; }
        }

        public const int LikeUserFieldNumber = 9;
        private pbc::PopsicleList<global::mm.command.UserObject> likeUser_ = new pbc::PopsicleList<global::mm.command.UserObject>();
        public scg::IList<global::mm.command.UserObject> LikeUserList
        {
            get { return likeUser_; }
        }
        public int LikeUserCount
        {
            get { return likeUser_.Count; }
        }
        public global::mm.command.UserObject GetLikeUser(int index)
        {
            return likeUser_[index];
        }

        public const int CommentCountFieldNumber = 10;
        private bool hasCommentCount;
        private int commentCount_;
        public bool HasCommentCount
        {
            get { return hasCommentCount; }
        }
        public int CommentCount
        {
            get { return commentCount_; }
        }

        public const int CommentUserListCountFieldNumber = 11;
        private bool hasCommentUserListCount;
        private int commentUserListCount_;
        public bool HasCommentUserListCount
        {
            get { return hasCommentUserListCount; }
        }
        public int CommentUserListCount
        {
            get { return commentUserListCount_; }
        }

        public const int CommentUserFieldNumber = 12;
        private pbc::PopsicleList<global::mm.command.UserObject> commentUser_ = new pbc::PopsicleList<global::mm.command.UserObject>();
        public scg::IList<global::mm.command.UserObject> CommentUserList
        {
            get { return commentUser_; }
        }
        public int CommentUserCount
        {
            get { return commentUser_.Count; }
        }
        public global::mm.command.UserObject GetCommentUser(int index)
        {
            return commentUser_[index];
        }

        public const int WithUserNumbFieldNumber = 13;
        private bool hasWithUserNumb;
        private int withUserNumb_;
        public bool HasWithUserNumb
        {
            get { return hasWithUserNumb; }
        }
        public int WithUserNumb
        {
            get { return withUserNumb_; }
        }

        public const int WithUserListCountFieldNumber = 14;
        private bool hasWithUserListCount;
        private int withUserListCount_;
        public bool HasWithUserListCount
        {
            get { return hasWithUserListCount; }
        }
        public int WithUserListCount
        {
            get { return withUserListCount_; }
        }

        public const int WithUserFieldNumber = 15;
        private pbc::PopsicleList<global::mm.command.UserObject> withUser_ = new pbc::PopsicleList<global::mm.command.UserObject>();
        public scg::IList<global::mm.command.UserObject> WithUserList
        {
            get { return withUser_; }
        }
        public int WithUserCount
        {
            get { return withUser_.Count; }
        }
        public global::mm.command.UserObject GetWithUser(int index)
        {
            return withUser_[index];
        }

        public const int ExtFlagFieldNumber = 16;
        private bool hasExtFlag;
        private int extFlag_;
        public bool HasExtFlag
        {
            get { return hasExtFlag; }
        }
        public int ExtFlag
        {
            get { return extFlag_; }
        }

        public const int NoChangeFieldNumber = 17;
        private bool hasNoChange;
        private int noChange_;
        public bool HasNoChange
        {
            get { return hasNoChange; }
        }
        public int NoChange
        {
            get { return noChange_; }
        }

        public const int GroupNumbFieldNumber = 18;
        private bool hasGroupNumb;
        private int groupNumb_;
        public bool HasGroupNumb
        {
            get { return hasGroupNumb; }
        }
        public int GroupNumb
        {
            get { return groupNumb_; }
        }

        public const int GroupFieldNumber = 19;
        private pbc::PopsicleList<global::mm.command.GroupObject> group_ = new pbc::PopsicleList<global::mm.command.GroupObject>();
        public scg::IList<global::mm.command.GroupObject> GroupList
        {
            get { return group_; }
        }
        public int GroupCount
        {
            get { return group_.Count; }
        }
        public global::mm.command.GroupObject GetGroup(int index)
        {
            return group_[index];
        }

        public const int IsNotRichTextFieldNumber = 20;
        private bool hasIsNotRichText;
        private int isNotRichText_;
        public bool HasIsNotRichText
        {
            get { return hasIsNotRichText; }
        }
        public int IsNotRichText
        {
            get { return isNotRichText_; }
        }

        public const int ReferUsernameFieldNumber = 21;
        private bool hasReferUsername;
        private string referUsername_ = "";
        public bool HasReferUsername
        {
            get { return hasReferUsername; }
        }
        public string ReferUsername
        {
            get { return referUsername_; }
        }

        public const int ReferIdFieldNumber = 22;
        private bool hasReferId;
        private long referId_;
        public bool HasReferId
        {
            get { return hasReferId; }
        }
        public long ReferId
        {
            get { return referId_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasId) return false;
                if (!hasCreateTime) return false;
                if (!hasObjectDesc) return false;
                if (!hasLikeFlag) return false;
                if (!hasLikeCount) return false;
                if (!hasLikeUserListCount) return false;
                if (!hasCommentCount) return false;
                if (!hasCommentUserListCount) return false;
                if (!hasWithUserNumb) return false;
                if (!hasWithUserListCount) return false;
                if (!ObjectDesc.IsInitialized) return false;
                foreach (global::mm.command.UserObject element in LikeUserList)
                {
                    if (!element.IsInitialized) return false;
                }
                foreach (global::mm.command.UserObject element in CommentUserList)
                {
                    if (!element.IsInitialized) return false;
                }
                foreach (global::mm.command.UserObject element in WithUserList)
                {
                    if (!element.IsInitialized) return false;
                }
                foreach (global::mm.command.GroupObject element in GroupList)
                {
                    if (!element.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _pageObjectFieldNames;
            if (hasId)
            {
                output.WriteInt64(1, field_names[7], Id);
            }
            if (hasUsername)
            {
                output.WriteString(2, field_names[18], Username);
            }
            if (hasNickname)
            {
                output.WriteString(3, field_names[13], Nickname);
            }
            if (hasCreateTime)
            {
                output.WriteInt32(4, field_names[3], CreateTime);
            }
            if (hasObjectDesc)
            {
                output.WriteMessage(5, field_names[15], ObjectDesc);
            }
            if (hasLikeFlag)
            {
                output.WriteInt32(6, field_names[10], LikeFlag);
            }
            if (hasLikeCount)
            {
                output.WriteInt32(7, field_names[9], LikeCount);
            }
            if (hasLikeUserListCount)
            {
                output.WriteInt32(8, field_names[12], LikeUserListCount);
            }
            if (likeUser_.Count > 0)
            {
                output.WriteMessageArray(9, field_names[11], likeUser_);
            }
            if (hasCommentCount)
            {
                output.WriteInt32(10, field_names[0], CommentCount);
            }
            if (hasCommentUserListCount)
            {
                output.WriteInt32(11, field_names[2], CommentUserListCount);
            }
            if (commentUser_.Count > 0)
            {
                output.WriteMessageArray(12, field_names[1], commentUser_);
            }
            if (hasWithUserNumb)
            {
                output.WriteInt32(13, field_names[21], WithUserNumb);
            }
            if (hasWithUserListCount)
            {
                output.WriteInt32(14, field_names[20], WithUserListCount);
            }
            if (withUser_.Count > 0)
            {
                output.WriteMessageArray(15, field_names[19], withUser_);
            }
            if (hasExtFlag)
            {
                output.WriteInt32(16, field_names[4], ExtFlag);
            }
            if (hasNoChange)
            {
                output.WriteInt32(17, field_names[14], NoChange);
            }
            if (hasGroupNumb)
            {
                output.WriteInt32(18, field_names[6], GroupNumb);
            }
            if (group_.Count > 0)
            {
                output.WriteMessageArray(19, field_names[5], group_);
            }
            if (hasIsNotRichText)
            {
                output.WriteInt32(20, field_names[8], IsNotRichText);
            }
            if (hasReferUsername)
            {
                output.WriteString(21, field_names[17], ReferUsername);
            }
            if (hasReferId)
            {
                output.WriteInt64(22, field_names[16], ReferId);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasId)
                {
                    size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
                }
                if (hasUsername)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Username);
                }
                if (hasNickname)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Nickname);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(4, CreateTime);
                }
                if (hasObjectDesc)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, ObjectDesc);
                }
                if (hasLikeFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(6, LikeFlag);
                }
                if (hasLikeCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, LikeCount);
                }
                if (hasLikeUserListCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(8, LikeUserListCount);
                }
                foreach (global::mm.command.UserObject element in LikeUserList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(9, element);
                }
                if (hasCommentCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(10, CommentCount);
                }
                if (hasCommentUserListCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(11, CommentUserListCount);
                }
                foreach (global::mm.command.UserObject element in CommentUserList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(12, element);
                }
                if (hasWithUserNumb)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(13, WithUserNumb);
                }
                if (hasWithUserListCount)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(14, WithUserListCount);
                }
                foreach (global::mm.command.UserObject element in WithUserList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(15, element);
                }
                if (hasExtFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(16, ExtFlag);
                }
                if (hasNoChange)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(17, NoChange);
                }
                if (hasGroupNumb)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(18, GroupNumb);
                }
                foreach (global::mm.command.GroupObject element in GroupList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(19, element);
                }
                if (hasIsNotRichText)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(20, IsNotRichText);
                }
                if (hasReferUsername)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(21, ReferUsername);
                }
                if (hasReferId)
                {
                    size += pb::CodedOutputStream.ComputeInt64Size(22, ReferId);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static PageObject ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PageObject ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PageObject ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static PageObject ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static PageObject ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PageObject ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static PageObject ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static PageObject ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static PageObject ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static PageObject ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private PageObject MakeReadOnly()
        {
            likeUser_.MakeReadOnly();
            commentUser_.MakeReadOnly();
            withUser_.MakeReadOnly();
            group_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(PageObject prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<PageObject, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(PageObject cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private PageObject result;

            private PageObject PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    PageObject original = result;
                    result = new PageObject();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override PageObject MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.PageObject.Descriptor; }
            }

            public override PageObject DefaultInstanceForType
            {
                get { return global::mm.command.PageObject.DefaultInstance; }
            }

            public override PageObject BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is PageObject)
                {
                    return MergeFrom((PageObject)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(PageObject other)
            {
                if (other == global::mm.command.PageObject.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasId)
                {
                    Id = other.Id;
                }
                if (other.HasUsername)
                {
                    Username = other.Username;
                }
                if (other.HasNickname)
                {
                    Nickname = other.Nickname;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasObjectDesc)
                {
                    MergeObjectDesc(other.ObjectDesc);
                }
                if (other.HasLikeFlag)
                {
                    LikeFlag = other.LikeFlag;
                }
                if (other.HasLikeCount)
                {
                    LikeCount = other.LikeCount;
                }
                if (other.HasLikeUserListCount)
                {
                    LikeUserListCount = other.LikeUserListCount;
                }
                if (other.likeUser_.Count != 0)
                {
                    result.likeUser_.Add(other.likeUser_);
                }
                if (other.HasCommentCount)
                {
                    CommentCount = other.CommentCount;
                }
                if (other.HasCommentUserListCount)
                {
                    CommentUserListCount = other.CommentUserListCount;
                }
                if (other.commentUser_.Count != 0)
                {
                    result.commentUser_.Add(other.commentUser_);
                }
                if (other.HasWithUserNumb)
                {
                    WithUserNumb = other.WithUserNumb;
                }
                if (other.HasWithUserListCount)
                {
                    WithUserListCount = other.WithUserListCount;
                }
                if (other.withUser_.Count != 0)
                {
                    result.withUser_.Add(other.withUser_);
                }
                if (other.HasExtFlag)
                {
                    ExtFlag = other.ExtFlag;
                }
                if (other.HasNoChange)
                {
                    NoChange = other.NoChange;
                }
                if (other.HasGroupNumb)
                {
                    GroupNumb = other.GroupNumb;
                }
                if (other.group_.Count != 0)
                {
                    result.group_.Add(other.group_);
                }
                if (other.HasIsNotRichText)
                {
                    IsNotRichText = other.IsNotRichText;
                }
                if (other.HasReferUsername)
                {
                    ReferUsername = other.ReferUsername;
                }
                if (other.HasReferId)
                {
                    ReferId = other.ReferId;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_pageObjectFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _pageObjectFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasId = input.ReadInt64(ref result.id_);
                                break;
                            }
                        case 18:
                            {
                                result.hasUsername = input.ReadString(ref result.username_);
                                break;
                            }
                        case 26:
                            {
                                result.hasNickname = input.ReadString(ref result.nickname_);
                                break;
                            }
                        case 32:
                            {
                                result.hasCreateTime = input.ReadInt32(ref result.createTime_);
                                break;
                            }
                        case 42:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasObjectDesc)
                                {
                                    subBuilder.MergeFrom(ObjectDesc);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ObjectDesc = subBuilder.BuildPartial();
                                break;
                            }
                        case 48:
                            {
                                result.hasLikeFlag = input.ReadInt32(ref result.likeFlag_);
                                break;
                            }
                        case 56:
                            {
                                result.hasLikeCount = input.ReadInt32(ref result.likeCount_);
                                break;
                            }
                        case 64:
                            {
                                result.hasLikeUserListCount = input.ReadInt32(ref result.likeUserListCount_);
                                break;
                            }
                        case 74:
                            {
                                input.ReadMessageArray(tag, field_name, result.likeUser_, global::mm.command.UserObject.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 80:
                            {
                                result.hasCommentCount = input.ReadInt32(ref result.commentCount_);
                                break;
                            }
                        case 88:
                            {
                                result.hasCommentUserListCount = input.ReadInt32(ref result.commentUserListCount_);
                                break;
                            }
                        case 98:
                            {
                                input.ReadMessageArray(tag, field_name, result.commentUser_, global::mm.command.UserObject.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 104:
                            {
                                result.hasWithUserNumb = input.ReadInt32(ref result.withUserNumb_);
                                break;
                            }
                        case 112:
                            {
                                result.hasWithUserListCount = input.ReadInt32(ref result.withUserListCount_);
                                break;
                            }
                        case 122:
                            {
                                input.ReadMessageArray(tag, field_name, result.withUser_, global::mm.command.UserObject.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 128:
                            {
                                result.hasExtFlag = input.ReadInt32(ref result.extFlag_);
                                break;
                            }
                        case 136:
                            {
                                result.hasNoChange = input.ReadInt32(ref result.noChange_);
                                break;
                            }
                        case 144:
                            {
                                result.hasGroupNumb = input.ReadInt32(ref result.groupNumb_);
                                break;
                            }
                        case 154:
                            {
                                input.ReadMessageArray(tag, field_name, result.group_, global::mm.command.GroupObject.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 160:
                            {
                                result.hasIsNotRichText = input.ReadInt32(ref result.isNotRichText_);
                                break;
                            }
                        case 170:
                            {
                                result.hasReferUsername = input.ReadString(ref result.referUsername_);
                                break;
                            }
                        case 176:
                            {
                                result.hasReferId = input.ReadInt64(ref result.referId_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasId
            {
                get { return result.hasId; }
            }
            public long Id
            {
                get { return result.Id; }
                set { SetId(value); }
            }
            public Builder SetId(long value)
            {
                PrepareBuilder();
                result.hasId = true;
                result.id_ = value;
                return this;
            }
            public Builder ClearId()
            {
                PrepareBuilder();
                result.hasId = false;
                result.id_ = 0L;
                return this;
            }

            public bool HasUsername
            {
                get { return result.hasUsername; }
            }
            public string Username
            {
                get { return result.Username; }
                set { SetUsername(value); }
            }
            public Builder SetUsername(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUsername = true;
                result.username_ = value;
                return this;
            }
            public Builder ClearUsername()
            {
                PrepareBuilder();
                result.hasUsername = false;
                result.username_ = "";
                return this;
            }

            public bool HasNickname
            {
                get { return result.hasNickname; }
            }
            public string Nickname
            {
                get { return result.Nickname; }
                set { SetNickname(value); }
            }
            public Builder SetNickname(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickname = true;
                result.nickname_ = value;
                return this;
            }
            public Builder ClearNickname()
            {
                PrepareBuilder();
                result.hasNickname = false;
                result.nickname_ = "";
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public int CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(int value)
            {
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = 0;
                return this;
            }

            public bool HasObjectDesc
            {
                get { return result.hasObjectDesc; }
            }
            public global::mm.command.SKBuiltinBuffer_t ObjectDesc
            {
                get { return result.ObjectDesc; }
                set { SetObjectDesc(value); }
            }
            public Builder SetObjectDesc(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasObjectDesc = true;
                result.objectDesc_ = value;
                return this;
            }
            public Builder SetObjectDesc(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasObjectDesc = true;
                result.objectDesc_ = builderForValue.Build();
                return this;
            }
            public Builder MergeObjectDesc(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasObjectDesc &&
                    result.objectDesc_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.objectDesc_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.objectDesc_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.objectDesc_ = value;
                }
                result.hasObjectDesc = true;
                return this;
            }
            public Builder ClearObjectDesc()
            {
                PrepareBuilder();
                result.hasObjectDesc = false;
                result.objectDesc_ = null;
                return this;
            }

            public bool HasLikeFlag
            {
                get { return result.hasLikeFlag; }
            }
            public int LikeFlag
            {
                get { return result.LikeFlag; }
                set { SetLikeFlag(value); }
            }
            public Builder SetLikeFlag(int value)
            {
                PrepareBuilder();
                result.hasLikeFlag = true;
                result.likeFlag_ = value;
                return this;
            }
            public Builder ClearLikeFlag()
            {
                PrepareBuilder();
                result.hasLikeFlag = false;
                result.likeFlag_ = 0;
                return this;
            }

            public bool HasLikeCount
            {
                get { return result.hasLikeCount; }
            }
            public int LikeCount
            {
                get { return result.LikeCount; }
                set { SetLikeCount(value); }
            }
            public Builder SetLikeCount(int value)
            {
                PrepareBuilder();
                result.hasLikeCount = true;
                result.likeCount_ = value;
                return this;
            }
            public Builder ClearLikeCount()
            {
                PrepareBuilder();
                result.hasLikeCount = false;
                result.likeCount_ = 0;
                return this;
            }

            public bool HasLikeUserListCount
            {
                get { return result.hasLikeUserListCount; }
            }
            public int LikeUserListCount
            {
                get { return result.LikeUserListCount; }
                set { SetLikeUserListCount(value); }
            }
            public Builder SetLikeUserListCount(int value)
            {
                PrepareBuilder();
                result.hasLikeUserListCount = true;
                result.likeUserListCount_ = value;
                return this;
            }
            public Builder ClearLikeUserListCount()
            {
                PrepareBuilder();
                result.hasLikeUserListCount = false;
                result.likeUserListCount_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.UserObject> LikeUserList
            {
                get { return PrepareBuilder().likeUser_; }
            }
            public int LikeUserCount
            {
                get { return result.LikeUserCount; }
            }
            public global::mm.command.UserObject GetLikeUser(int index)
            {
                return result.GetLikeUser(index);
            }
            public Builder SetLikeUser(int index, global::mm.command.UserObject value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.likeUser_[index] = value;
                return this;
            }
            public Builder SetLikeUser(int index, global::mm.command.UserObject.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.likeUser_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddLikeUser(global::mm.command.UserObject value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.likeUser_.Add(value);
                return this;
            }
            public Builder AddLikeUser(global::mm.command.UserObject.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.likeUser_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeLikeUser(scg::IEnumerable<global::mm.command.UserObject> values)
            {
                PrepareBuilder();
                result.likeUser_.Add(values);
                return this;
            }
            public Builder ClearLikeUser()
            {
                PrepareBuilder();
                result.likeUser_.Clear();
                return this;
            }

            public bool HasCommentCount
            {
                get { return result.hasCommentCount; }
            }
            public int CommentCount
            {
                get { return result.CommentCount; }
                set { SetCommentCount(value); }
            }
            public Builder SetCommentCount(int value)
            {
                PrepareBuilder();
                result.hasCommentCount = true;
                result.commentCount_ = value;
                return this;
            }
            public Builder ClearCommentCount()
            {
                PrepareBuilder();
                result.hasCommentCount = false;
                result.commentCount_ = 0;
                return this;
            }

            public bool HasCommentUserListCount
            {
                get { return result.hasCommentUserListCount; }
            }
            public int CommentUserListCount
            {
                get { return result.CommentUserListCount; }
                set { SetCommentUserListCount(value); }
            }
            public Builder SetCommentUserListCount(int value)
            {
                PrepareBuilder();
                result.hasCommentUserListCount = true;
                result.commentUserListCount_ = value;
                return this;
            }
            public Builder ClearCommentUserListCount()
            {
                PrepareBuilder();
                result.hasCommentUserListCount = false;
                result.commentUserListCount_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.UserObject> CommentUserList
            {
                get { return PrepareBuilder().commentUser_; }
            }
            public int CommentUserCount
            {
                get { return result.CommentUserCount; }
            }
            public global::mm.command.UserObject GetCommentUser(int index)
            {
                return result.GetCommentUser(index);
            }
            public Builder SetCommentUser(int index, global::mm.command.UserObject value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.commentUser_[index] = value;
                return this;
            }
            public Builder SetCommentUser(int index, global::mm.command.UserObject.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.commentUser_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddCommentUser(global::mm.command.UserObject value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.commentUser_.Add(value);
                return this;
            }
            public Builder AddCommentUser(global::mm.command.UserObject.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.commentUser_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeCommentUser(scg::IEnumerable<global::mm.command.UserObject> values)
            {
                PrepareBuilder();
                result.commentUser_.Add(values);
                return this;
            }
            public Builder ClearCommentUser()
            {
                PrepareBuilder();
                result.commentUser_.Clear();
                return this;
            }

            public bool HasWithUserNumb
            {
                get { return result.hasWithUserNumb; }
            }
            public int WithUserNumb
            {
                get { return result.WithUserNumb; }
                set { SetWithUserNumb(value); }
            }
            public Builder SetWithUserNumb(int value)
            {
                PrepareBuilder();
                result.hasWithUserNumb = true;
                result.withUserNumb_ = value;
                return this;
            }
            public Builder ClearWithUserNumb()
            {
                PrepareBuilder();
                result.hasWithUserNumb = false;
                result.withUserNumb_ = 0;
                return this;
            }

            public bool HasWithUserListCount
            {
                get { return result.hasWithUserListCount; }
            }
            public int WithUserListCount
            {
                get { return result.WithUserListCount; }
                set { SetWithUserListCount(value); }
            }
            public Builder SetWithUserListCount(int value)
            {
                PrepareBuilder();
                result.hasWithUserListCount = true;
                result.withUserListCount_ = value;
                return this;
            }
            public Builder ClearWithUserListCount()
            {
                PrepareBuilder();
                result.hasWithUserListCount = false;
                result.withUserListCount_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.UserObject> WithUserList
            {
                get { return PrepareBuilder().withUser_; }
            }
            public int WithUserCount
            {
                get { return result.WithUserCount; }
            }
            public global::mm.command.UserObject GetWithUser(int index)
            {
                return result.GetWithUser(index);
            }
            public Builder SetWithUser(int index, global::mm.command.UserObject value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.withUser_[index] = value;
                return this;
            }
            public Builder SetWithUser(int index, global::mm.command.UserObject.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.withUser_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddWithUser(global::mm.command.UserObject value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.withUser_.Add(value);
                return this;
            }
            public Builder AddWithUser(global::mm.command.UserObject.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.withUser_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeWithUser(scg::IEnumerable<global::mm.command.UserObject> values)
            {
                PrepareBuilder();
                result.withUser_.Add(values);
                return this;
            }
            public Builder ClearWithUser()
            {
                PrepareBuilder();
                result.withUser_.Clear();
                return this;
            }

            public bool HasExtFlag
            {
                get { return result.hasExtFlag; }
            }
            public int ExtFlag
            {
                get { return result.ExtFlag; }
                set { SetExtFlag(value); }
            }
            public Builder SetExtFlag(int value)
            {
                PrepareBuilder();
                result.hasExtFlag = true;
                result.extFlag_ = value;
                return this;
            }
            public Builder ClearExtFlag()
            {
                PrepareBuilder();
                result.hasExtFlag = false;
                result.extFlag_ = 0;
                return this;
            }

            public bool HasNoChange
            {
                get { return result.hasNoChange; }
            }
            public int NoChange
            {
                get { return result.NoChange; }
                set { SetNoChange(value); }
            }
            public Builder SetNoChange(int value)
            {
                PrepareBuilder();
                result.hasNoChange = true;
                result.noChange_ = value;
                return this;
            }
            public Builder ClearNoChange()
            {
                PrepareBuilder();
                result.hasNoChange = false;
                result.noChange_ = 0;
                return this;
            }

            public bool HasGroupNumb
            {
                get { return result.hasGroupNumb; }
            }
            public int GroupNumb
            {
                get { return result.GroupNumb; }
                set { SetGroupNumb(value); }
            }
            public Builder SetGroupNumb(int value)
            {
                PrepareBuilder();
                result.hasGroupNumb = true;
                result.groupNumb_ = value;
                return this;
            }
            public Builder ClearGroupNumb()
            {
                PrepareBuilder();
                result.hasGroupNumb = false;
                result.groupNumb_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.GroupObject> GroupList
            {
                get { return PrepareBuilder().group_; }
            }
            public int GroupCount
            {
                get { return result.GroupCount; }
            }
            public global::mm.command.GroupObject GetGroup(int index)
            {
                return result.GetGroup(index);
            }
            public Builder SetGroup(int index, global::mm.command.GroupObject value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.group_[index] = value;
                return this;
            }
            public Builder SetGroup(int index, global::mm.command.GroupObject.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.group_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddGroup(global::mm.command.GroupObject value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.group_.Add(value);
                return this;
            }
            public Builder AddGroup(global::mm.command.GroupObject.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.group_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeGroup(scg::IEnumerable<global::mm.command.GroupObject> values)
            {
                PrepareBuilder();
                result.group_.Add(values);
                return this;
            }
            public Builder ClearGroup()
            {
                PrepareBuilder();
                result.group_.Clear();
                return this;
            }

            public bool HasIsNotRichText
            {
                get { return result.hasIsNotRichText; }
            }
            public int IsNotRichText
            {
                get { return result.IsNotRichText; }
                set { SetIsNotRichText(value); }
            }
            public Builder SetIsNotRichText(int value)
            {
                PrepareBuilder();
                result.hasIsNotRichText = true;
                result.isNotRichText_ = value;
                return this;
            }
            public Builder ClearIsNotRichText()
            {
                PrepareBuilder();
                result.hasIsNotRichText = false;
                result.isNotRichText_ = 0;
                return this;
            }

            public bool HasReferUsername
            {
                get { return result.hasReferUsername; }
            }
            public string ReferUsername
            {
                get { return result.ReferUsername; }
                set { SetReferUsername(value); }
            }
            public Builder SetReferUsername(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasReferUsername = true;
                result.referUsername_ = value;
                return this;
            }
            public Builder ClearReferUsername()
            {
                PrepareBuilder();
                result.hasReferUsername = false;
                result.referUsername_ = "";
                return this;
            }

            public bool HasReferId
            {
                get { return result.hasReferId; }
            }
            public long ReferId
            {
                get { return result.ReferId; }
                set { SetReferId(value); }
            }
            public Builder SetReferId(long value)
            {
                PrepareBuilder();
                result.hasReferId = true;
                result.referId_ = value;
                return this;
            }
            public Builder ClearReferId()
            {
                PrepareBuilder();
                result.hasReferId = false;
                result.referId_ = 0L;
                return this;
            }
        }
        static PageObject()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class GeneralControlBitSet : pb::GeneratedMessage<GeneralControlBitSet, GeneralControlBitSet.Builder>
    {
        private GeneralControlBitSet() { }
        private static readonly GeneralControlBitSet defaultInstance = new GeneralControlBitSet().MakeReadOnly();
        private static readonly string[] _generalControlBitSetFieldNames = new string[] { "BitValue" };
        private static readonly uint[] _generalControlBitSetFieldTags = new uint[] { 8 };
        public static GeneralControlBitSet DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override GeneralControlBitSet DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override GeneralControlBitSet ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_GeneralControlBitSet__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<GeneralControlBitSet, GeneralControlBitSet.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_GeneralControlBitSet__FieldAccessorTable; }
        }

        public const int BitValueFieldNumber = 1;
        private bool hasBitValue;
        private int bitValue_;
        public bool HasBitValue
        {
            get { return hasBitValue; }
        }
        public int BitValue
        {
            get { return bitValue_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasBitValue) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _generalControlBitSetFieldNames;
            if (hasBitValue)
            {
                output.WriteInt32(1, field_names[0], BitValue);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasBitValue)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, BitValue);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static GeneralControlBitSet ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GeneralControlBitSet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GeneralControlBitSet ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static GeneralControlBitSet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static GeneralControlBitSet ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GeneralControlBitSet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static GeneralControlBitSet ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static GeneralControlBitSet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static GeneralControlBitSet ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static GeneralControlBitSet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private GeneralControlBitSet MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(GeneralControlBitSet prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<GeneralControlBitSet, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(GeneralControlBitSet cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private GeneralControlBitSet result;

            private GeneralControlBitSet PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    GeneralControlBitSet original = result;
                    result = new GeneralControlBitSet();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override GeneralControlBitSet MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.GeneralControlBitSet.Descriptor; }
            }

            public override GeneralControlBitSet DefaultInstanceForType
            {
                get { return global::mm.command.GeneralControlBitSet.DefaultInstance; }
            }

            public override GeneralControlBitSet BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is GeneralControlBitSet)
                {
                    return MergeFrom((GeneralControlBitSet)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(GeneralControlBitSet other)
            {
                if (other == global::mm.command.GeneralControlBitSet.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasBitValue)
                {
                    BitValue = other.BitValue;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_generalControlBitSetFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _generalControlBitSetFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasBitValue = input.ReadInt32(ref result.bitValue_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasBitValue
            {
                get { return result.hasBitValue; }
            }
            public int BitValue
            {
                get { return result.BitValue; }
                set { SetBitValue(value); }
            }
            public Builder SetBitValue(int value)
            {
                PrepareBuilder();
                result.hasBitValue = true;
                result.bitValue_ = value;
                return this;
            }
            public Builder ClearBitValue()
            {
                PrepareBuilder();
                result.hasBitValue = false;
                result.bitValue_ = 0;
                return this;
            }
        }
        static GeneralControlBitSet()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class JSAPIPermission : pb::GeneratedMessage<JSAPIPermission, JSAPIPermission.Builder>
    {
        private JSAPIPermission() { }
        private static readonly JSAPIPermission defaultInstance = new JSAPIPermission().MakeReadOnly();
        private static readonly string[] _jSAPIPermissionFieldNames = new string[] { "BitValue" };
        private static readonly uint[] _jSAPIPermissionFieldTags = new uint[] { 8 };
        public static JSAPIPermission DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override JSAPIPermission DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override JSAPIPermission ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_JSAPIPermission__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<JSAPIPermission, JSAPIPermission.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_JSAPIPermission__FieldAccessorTable; }
        }

        public const int BitValueFieldNumber = 1;
        private bool hasBitValue;
        private int bitValue_;
        public bool HasBitValue
        {
            get { return hasBitValue; }
        }
        public int BitValue
        {
            get { return bitValue_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasBitValue) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _jSAPIPermissionFieldNames;
            if (hasBitValue)
            {
                output.WriteInt32(1, field_names[0], BitValue);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasBitValue)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, BitValue);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static JSAPIPermission ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static JSAPIPermission ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static JSAPIPermission ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static JSAPIPermission ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static JSAPIPermission ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static JSAPIPermission ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static JSAPIPermission ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static JSAPIPermission ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static JSAPIPermission ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static JSAPIPermission ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private JSAPIPermission MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(JSAPIPermission prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<JSAPIPermission, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(JSAPIPermission cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private JSAPIPermission result;

            private JSAPIPermission PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    JSAPIPermission original = result;
                    result = new JSAPIPermission();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override JSAPIPermission MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.JSAPIPermission.Descriptor; }
            }

            public override JSAPIPermission DefaultInstanceForType
            {
                get { return global::mm.command.JSAPIPermission.DefaultInstance; }
            }

            public override JSAPIPermission BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is JSAPIPermission)
                {
                    return MergeFrom((JSAPIPermission)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(JSAPIPermission other)
            {
                if (other == global::mm.command.JSAPIPermission.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasBitValue)
                {
                    BitValue = other.BitValue;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_jSAPIPermissionFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _jSAPIPermissionFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasBitValue = input.ReadInt32(ref result.bitValue_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasBitValue
            {
                get { return result.hasBitValue; }
            }
            public int BitValue
            {
                get { return result.BitValue; }
                set { SetBitValue(value); }
            }
            public Builder SetBitValue(int value)
            {
                PrepareBuilder();
                result.hasBitValue = true;
                result.bitValue_ = value;
                return this;
            }
            public Builder ClearBitValue()
            {
                PrepareBuilder();
                result.hasBitValue = false;
                result.bitValue_ = 0;
                return this;
            }
        }
        static JSAPIPermission()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TwitterInfoObj : pb::GeneratedMessage<TwitterInfoObj, TwitterInfoObj.Builder>
    {
        private TwitterInfoObj() { }
        private static readonly TwitterInfoObj defaultInstance = new TwitterInfoObj().MakeReadOnly();
        private static readonly string[] _twitterInfoObjFieldNames = new string[] { "Oauth_Token", "Oauth_Token_Secret" };
        private static readonly uint[] _twitterInfoObjFieldTags = new uint[] { 10, 18 };
        public static TwitterInfoObj DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override TwitterInfoObj DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override TwitterInfoObj ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_TwitterInfoObj__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<TwitterInfoObj, TwitterInfoObj.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_TwitterInfoObj__FieldAccessorTable; }
        }

        public const int OauthTokenFieldNumber = 1;
        private bool hasOauthToken;
        private string oauthToken_ = "";
        public bool HasOauthToken
        {
            get { return hasOauthToken; }
        }
        public string OauthToken
        {
            get { return oauthToken_; }
        }

        public const int OauthTokenSecretFieldNumber = 2;
        private bool hasOauthTokenSecret;
        private string oauthTokenSecret_ = "";
        public bool HasOauthTokenSecret
        {
            get { return hasOauthTokenSecret; }
        }
        public string OauthTokenSecret
        {
            get { return oauthTokenSecret_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _twitterInfoObjFieldNames;
            if (hasOauthToken)
            {
                output.WriteString(1, field_names[0], OauthToken);
            }
            if (hasOauthTokenSecret)
            {
                output.WriteString(2, field_names[1], OauthTokenSecret);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasOauthToken)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, OauthToken);
                }
                if (hasOauthTokenSecret)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, OauthTokenSecret);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static TwitterInfoObj ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static TwitterInfoObj ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static TwitterInfoObj ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static TwitterInfoObj ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static TwitterInfoObj ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static TwitterInfoObj ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static TwitterInfoObj ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static TwitterInfoObj ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static TwitterInfoObj ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static TwitterInfoObj ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private TwitterInfoObj MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(TwitterInfoObj prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<TwitterInfoObj, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(TwitterInfoObj cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private TwitterInfoObj result;

            private TwitterInfoObj PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    TwitterInfoObj original = result;
                    result = new TwitterInfoObj();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override TwitterInfoObj MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.TwitterInfoObj.Descriptor; }
            }

            public override TwitterInfoObj DefaultInstanceForType
            {
                get { return global::mm.command.TwitterInfoObj.DefaultInstance; }
            }

            public override TwitterInfoObj BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is TwitterInfoObj)
                {
                    return MergeFrom((TwitterInfoObj)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(TwitterInfoObj other)
            {
                if (other == global::mm.command.TwitterInfoObj.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasOauthToken)
                {
                    OauthToken = other.OauthToken;
                }
                if (other.HasOauthTokenSecret)
                {
                    OauthTokenSecret = other.OauthTokenSecret;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_twitterInfoObjFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _twitterInfoObjFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasOauthToken = input.ReadString(ref result.oauthToken_);
                                break;
                            }
                        case 18:
                            {
                                result.hasOauthTokenSecret = input.ReadString(ref result.oauthTokenSecret_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasOauthToken
            {
                get { return result.hasOauthToken; }
            }
            public string OauthToken
            {
                get { return result.OauthToken; }
                set { SetOauthToken(value); }
            }
            public Builder SetOauthToken(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasOauthToken = true;
                result.oauthToken_ = value;
                return this;
            }
            public Builder ClearOauthToken()
            {
                PrepareBuilder();
                result.hasOauthToken = false;
                result.oauthToken_ = "";
                return this;
            }

            public bool HasOauthTokenSecret
            {
                get { return result.hasOauthTokenSecret; }
            }
            public string OauthTokenSecret
            {
                get { return result.OauthTokenSecret; }
                set { SetOauthTokenSecret(value); }
            }
            public Builder SetOauthTokenSecret(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasOauthTokenSecret = true;
                result.oauthTokenSecret_ = value;
                return this;
            }
            public Builder ClearOauthTokenSecret()
            {
                PrepareBuilder();
                result.hasOauthTokenSecret = false;
                result.oauthTokenSecret_ = "";
                return this;
            }
        }
        static TwitterInfoObj()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class BufferUrlObj : pb::GeneratedMessage<BufferUrlObj, BufferUrlObj.Builder>
    {
        private BufferUrlObj() { }
        private static readonly BufferUrlObj defaultInstance = new BufferUrlObj().MakeReadOnly();
        private static readonly string[] _bufferUrlObjFieldNames = new string[] { "Type", "Url" };
        private static readonly uint[] _bufferUrlObjFieldTags = new uint[] { 16, 10 };
        public static BufferUrlObj DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override BufferUrlObj DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override BufferUrlObj ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_BufferUrlObj__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<BufferUrlObj, BufferUrlObj.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_BufferUrlObj__FieldAccessorTable; }
        }

        public const int UrlFieldNumber = 1;
        private bool hasUrl;
        private string url_ = "";
        public bool HasUrl
        {
            get { return hasUrl; }
        }
        public string Url
        {
            get { return url_; }
        }

        public const int TypeFieldNumber = 2;
        private bool hasType;
        private int type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public int Type
        {
            get { return type_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasType) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _bufferUrlObjFieldNames;
            if (hasUrl)
            {
                output.WriteString(1, field_names[1], Url);
            }
            if (hasType)
            {
                output.WriteInt32(2, field_names[0], Type);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Url);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static BufferUrlObj ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BufferUrlObj ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BufferUrlObj ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static BufferUrlObj ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static BufferUrlObj ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BufferUrlObj ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static BufferUrlObj ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static BufferUrlObj ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static BufferUrlObj ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static BufferUrlObj ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private BufferUrlObj MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(BufferUrlObj prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<BufferUrlObj, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(BufferUrlObj cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private BufferUrlObj result;

            private BufferUrlObj PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    BufferUrlObj original = result;
                    result = new BufferUrlObj();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override BufferUrlObj MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.BufferUrlObj.Descriptor; }
            }

            public override BufferUrlObj DefaultInstanceForType
            {
                get { return global::mm.command.BufferUrlObj.DefaultInstance; }
            }

            public override BufferUrlObj BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is BufferUrlObj)
                {
                    return MergeFrom((BufferUrlObj)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(BufferUrlObj other)
            {
                if (other == global::mm.command.BufferUrlObj.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUrl)
                {
                    Url = other.Url;
                }
                if (other.HasType)
                {
                    Type = other.Type;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_bufferUrlObjFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _bufferUrlObjFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasUrl = input.ReadString(ref result.url_);
                                break;
                            }
                        case 16:
                            {
                                result.hasType = input.ReadInt32(ref result.type_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUrl
            {
                get { return result.hasUrl; }
            }
            public string Url
            {
                get { return result.Url; }
                set { SetUrl(value); }
            }
            public Builder SetUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUrl = true;
                result.url_ = value;
                return this;
            }
            public Builder ClearUrl()
            {
                PrepareBuilder();
                result.hasUrl = false;
                result.url_ = "";
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            public int Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(int value)
            {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = 0;
                return this;
            }
        }
        static BufferUrlObj()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class AppMsgObject : pb::GeneratedMessage<AppMsgObject, AppMsgObject.Builder>
    {
        private AppMsgObject() { }
        private static readonly AppMsgObject defaultInstance = new AppMsgObject().MakeReadOnly();
        private static readonly string[] _appMsgObjectFieldNames = new string[] { "AppId", "ClientMsgId", "Content", "CreateTime", "FromUserName", "MsgSource", "RemindId", "SdkVersion", "Source", "Thumb", "ToUsername", "Type" };
        private static readonly uint[] _appMsgObjectFieldTags = new uint[] { 18, 66, 50, 56, 10, 98, 88, 24, 80, 74, 34, 40 };
        public static AppMsgObject DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override AppMsgObject DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override AppMsgObject ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_AppMsgObject__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<AppMsgObject, AppMsgObject.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_AppMsgObject__FieldAccessorTable; }
        }

        public const int FromUserNameFieldNumber = 1;
        private bool hasFromUserName;
        private string fromUserName_ = "";
        public bool HasFromUserName
        {
            get { return hasFromUserName; }
        }
        public string FromUserName
        {
            get { return fromUserName_; }
        }

        public const int AppIdFieldNumber = 2;
        private bool hasAppId;
        private string appId_ = "";
        public bool HasAppId
        {
            get { return hasAppId; }
        }
        public string AppId
        {
            get { return appId_; }
        }

        public const int SdkVersionFieldNumber = 3;
        private bool hasSdkVersion;
        private int sdkVersion_;
        public bool HasSdkVersion
        {
            get { return hasSdkVersion; }
        }
        public int SdkVersion
        {
            get { return sdkVersion_; }
        }

        public const int ToUsernameFieldNumber = 4;
        private bool hasToUsername;
        private string toUsername_ = "";
        public bool HasToUsername
        {
            get { return hasToUsername; }
        }
        public string ToUsername
        {
            get { return toUsername_; }
        }

        public const int TypeFieldNumber = 5;
        private bool hasType;
        private int type_;
        public bool HasType
        {
            get { return hasType; }
        }
        public int Type
        {
            get { return type_; }
        }

        public const int ContentFieldNumber = 6;
        private bool hasContent;
        private string content_ = "";
        public bool HasContent
        {
            get { return hasContent; }
        }
        public string Content
        {
            get { return content_; }
        }

        public const int CreateTimeFieldNumber = 7;
        private bool hasCreateTime;
        private int createTime_;
        public bool HasCreateTime
        {
            get { return hasCreateTime; }
        }
        public int CreateTime
        {
            get { return createTime_; }
        }

        public const int ClientMsgIdFieldNumber = 8;
        private bool hasClientMsgId;
        private string clientMsgId_ = "";
        public bool HasClientMsgId
        {
            get { return hasClientMsgId; }
        }
        public string ClientMsgId
        {
            get { return clientMsgId_; }
        }

        public const int ThumbFieldNumber = 9;
        private bool hasThumb;
        private global::mm.command.SKBuiltinBuffer_t thumb_;
        public bool HasThumb
        {
            get { return hasThumb; }
        }
        public global::mm.command.SKBuiltinBuffer_t Thumb
        {
            get { return thumb_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int SourceFieldNumber = 10;
        private bool hasSource;
        private int source_;
        public bool HasSource
        {
            get { return hasSource; }
        }
        public int Source
        {
            get { return source_; }
        }

        public const int RemindIdFieldNumber = 11;
        private bool hasRemindId;
        private int remindId_;
        public bool HasRemindId
        {
            get { return hasRemindId; }
        }
        public int RemindId
        {
            get { return remindId_; }
        }

        public const int MsgSourceFieldNumber = 12;
        private bool hasMsgSource;
        private string msgSource_ = "";
        public bool HasMsgSource
        {
            get { return hasMsgSource; }
        }
        public string MsgSource
        {
            get { return msgSource_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasSdkVersion) return false;
                if (!hasType) return false;
                if (!hasCreateTime) return false;
                if (HasThumb)
                {
                    if (!Thumb.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _appMsgObjectFieldNames;
            if (hasFromUserName)
            {
                output.WriteString(1, field_names[4], FromUserName);
            }
            if (hasAppId)
            {
                output.WriteString(2, field_names[0], AppId);
            }
            if (hasSdkVersion)
            {
                output.WriteInt32(3, field_names[7], SdkVersion);
            }
            if (hasToUsername)
            {
                output.WriteString(4, field_names[10], ToUsername);
            }
            if (hasType)
            {
                output.WriteInt32(5, field_names[11], Type);
            }
            if (hasContent)
            {
                output.WriteString(6, field_names[2], Content);
            }
            if (hasCreateTime)
            {
                output.WriteInt32(7, field_names[3], CreateTime);
            }
            if (hasClientMsgId)
            {
                output.WriteString(8, field_names[1], ClientMsgId);
            }
            if (hasThumb)
            {
                output.WriteMessage(9, field_names[9], Thumb);
            }
            if (hasSource)
            {
                output.WriteInt32(10, field_names[8], Source);
            }
            if (hasRemindId)
            {
                output.WriteInt32(11, field_names[6], RemindId);
            }
            if (hasMsgSource)
            {
                output.WriteString(12, field_names[5], MsgSource);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasFromUserName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, FromUserName);
                }
                if (hasAppId)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, AppId);
                }
                if (hasSdkVersion)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(3, SdkVersion);
                }
                if (hasToUsername)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, ToUsername);
                }
                if (hasType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(5, Type);
                }
                if (hasContent)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(6, Content);
                }
                if (hasCreateTime)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, CreateTime);
                }
                if (hasClientMsgId)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(8, ClientMsgId);
                }
                if (hasThumb)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(9, Thumb);
                }
                if (hasSource)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(10, Source);
                }
                if (hasRemindId)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(11, RemindId);
                }
                if (hasMsgSource)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(12, MsgSource);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static AppMsgObject ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AppMsgObject ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AppMsgObject ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AppMsgObject ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AppMsgObject ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AppMsgObject ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AppMsgObject ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AppMsgObject ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AppMsgObject ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AppMsgObject ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AppMsgObject MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AppMsgObject prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<AppMsgObject, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(AppMsgObject cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private AppMsgObject result;

            private AppMsgObject PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    AppMsgObject original = result;
                    result = new AppMsgObject();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override AppMsgObject MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.AppMsgObject.Descriptor; }
            }

            public override AppMsgObject DefaultInstanceForType
            {
                get { return global::mm.command.AppMsgObject.DefaultInstance; }
            }

            public override AppMsgObject BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is AppMsgObject)
                {
                    return MergeFrom((AppMsgObject)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(AppMsgObject other)
            {
                if (other == global::mm.command.AppMsgObject.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasFromUserName)
                {
                    FromUserName = other.FromUserName;
                }
                if (other.HasAppId)
                {
                    AppId = other.AppId;
                }
                if (other.HasSdkVersion)
                {
                    SdkVersion = other.SdkVersion;
                }
                if (other.HasToUsername)
                {
                    ToUsername = other.ToUsername;
                }
                if (other.HasType)
                {
                    Type = other.Type;
                }
                if (other.HasContent)
                {
                    Content = other.Content;
                }
                if (other.HasCreateTime)
                {
                    CreateTime = other.CreateTime;
                }
                if (other.HasClientMsgId)
                {
                    ClientMsgId = other.ClientMsgId;
                }
                if (other.HasThumb)
                {
                    MergeThumb(other.Thumb);
                }
                if (other.HasSource)
                {
                    Source = other.Source;
                }
                if (other.HasRemindId)
                {
                    RemindId = other.RemindId;
                }
                if (other.HasMsgSource)
                {
                    MsgSource = other.MsgSource;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_appMsgObjectFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _appMsgObjectFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasFromUserName = input.ReadString(ref result.fromUserName_);
                                break;
                            }
                        case 18:
                            {
                                result.hasAppId = input.ReadString(ref result.appId_);
                                break;
                            }
                        case 24:
                            {
                                result.hasSdkVersion = input.ReadInt32(ref result.sdkVersion_);
                                break;
                            }
                        case 34:
                            {
                                result.hasToUsername = input.ReadString(ref result.toUsername_);
                                break;
                            }
                        case 40:
                            {
                                result.hasType = input.ReadInt32(ref result.type_);
                                break;
                            }
                        case 50:
                            {
                                result.hasContent = input.ReadString(ref result.content_);
                                break;
                            }
                        case 56:
                            {
                                result.hasCreateTime = input.ReadInt32(ref result.createTime_);
                                break;
                            }
                        case 66:
                            {
                                result.hasClientMsgId = input.ReadString(ref result.clientMsgId_);
                                break;
                            }
                        case 74:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasThumb)
                                {
                                    subBuilder.MergeFrom(Thumb);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Thumb = subBuilder.BuildPartial();
                                break;
                            }
                        case 80:
                            {
                                result.hasSource = input.ReadInt32(ref result.source_);
                                break;
                            }
                        case 88:
                            {
                                result.hasRemindId = input.ReadInt32(ref result.remindId_);
                                break;
                            }
                        case 98:
                            {
                                result.hasMsgSource = input.ReadString(ref result.msgSource_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasFromUserName
            {
                get { return result.hasFromUserName; }
            }
            public string FromUserName
            {
                get { return result.FromUserName; }
                set { SetFromUserName(value); }
            }
            public Builder SetFromUserName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasFromUserName = true;
                result.fromUserName_ = value;
                return this;
            }
            public Builder ClearFromUserName()
            {
                PrepareBuilder();
                result.hasFromUserName = false;
                result.fromUserName_ = "";
                return this;
            }

            public bool HasAppId
            {
                get { return result.hasAppId; }
            }
            public string AppId
            {
                get { return result.AppId; }
                set { SetAppId(value); }
            }
            public Builder SetAppId(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAppId = true;
                result.appId_ = value;
                return this;
            }
            public Builder ClearAppId()
            {
                PrepareBuilder();
                result.hasAppId = false;
                result.appId_ = "";
                return this;
            }

            public bool HasSdkVersion
            {
                get { return result.hasSdkVersion; }
            }
            public int SdkVersion
            {
                get { return result.SdkVersion; }
                set { SetSdkVersion(value); }
            }
            public Builder SetSdkVersion(int value)
            {
                PrepareBuilder();
                result.hasSdkVersion = true;
                result.sdkVersion_ = value;
                return this;
            }
            public Builder ClearSdkVersion()
            {
                PrepareBuilder();
                result.hasSdkVersion = false;
                result.sdkVersion_ = 0;
                return this;
            }

            public bool HasToUsername
            {
                get { return result.hasToUsername; }
            }
            public string ToUsername
            {
                get { return result.ToUsername; }
                set { SetToUsername(value); }
            }
            public Builder SetToUsername(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasToUsername = true;
                result.toUsername_ = value;
                return this;
            }
            public Builder ClearToUsername()
            {
                PrepareBuilder();
                result.hasToUsername = false;
                result.toUsername_ = "";
                return this;
            }

            public bool HasType
            {
                get { return result.hasType; }
            }
            public int Type
            {
                get { return result.Type; }
                set { SetType(value); }
            }
            public Builder SetType(int value)
            {
                PrepareBuilder();
                result.hasType = true;
                result.type_ = value;
                return this;
            }
            public Builder ClearType()
            {
                PrepareBuilder();
                result.hasType = false;
                result.type_ = 0;
                return this;
            }

            public bool HasContent
            {
                get { return result.hasContent; }
            }
            public string Content
            {
                get { return result.Content; }
                set { SetContent(value); }
            }
            public Builder SetContent(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContent = true;
                result.content_ = value;
                return this;
            }
            public Builder ClearContent()
            {
                PrepareBuilder();
                result.hasContent = false;
                result.content_ = "";
                return this;
            }

            public bool HasCreateTime
            {
                get { return result.hasCreateTime; }
            }
            public int CreateTime
            {
                get { return result.CreateTime; }
                set { SetCreateTime(value); }
            }
            public Builder SetCreateTime(int value)
            {
                PrepareBuilder();
                result.hasCreateTime = true;
                result.createTime_ = value;
                return this;
            }
            public Builder ClearCreateTime()
            {
                PrepareBuilder();
                result.hasCreateTime = false;
                result.createTime_ = 0;
                return this;
            }

            public bool HasClientMsgId
            {
                get { return result.hasClientMsgId; }
            }
            public string ClientMsgId
            {
                get { return result.ClientMsgId; }
                set { SetClientMsgId(value); }
            }
            public Builder SetClientMsgId(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasClientMsgId = true;
                result.clientMsgId_ = value;
                return this;
            }
            public Builder ClearClientMsgId()
            {
                PrepareBuilder();
                result.hasClientMsgId = false;
                result.clientMsgId_ = "";
                return this;
            }

            public bool HasThumb
            {
                get { return result.hasThumb; }
            }
            public global::mm.command.SKBuiltinBuffer_t Thumb
            {
                get { return result.Thumb; }
                set { SetThumb(value); }
            }
            public Builder SetThumb(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasThumb = true;
                result.thumb_ = value;
                return this;
            }
            public Builder SetThumb(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasThumb = true;
                result.thumb_ = builderForValue.Build();
                return this;
            }
            public Builder MergeThumb(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasThumb &&
                    result.thumb_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.thumb_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.thumb_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.thumb_ = value;
                }
                result.hasThumb = true;
                return this;
            }
            public Builder ClearThumb()
            {
                PrepareBuilder();
                result.hasThumb = false;
                result.thumb_ = null;
                return this;
            }

            public bool HasSource
            {
                get { return result.hasSource; }
            }
            public int Source
            {
                get { return result.Source; }
                set { SetSource(value); }
            }
            public Builder SetSource(int value)
            {
                PrepareBuilder();
                result.hasSource = true;
                result.source_ = value;
                return this;
            }
            public Builder ClearSource()
            {
                PrepareBuilder();
                result.hasSource = false;
                result.source_ = 0;
                return this;
            }

            public bool HasRemindId
            {
                get { return result.hasRemindId; }
            }
            public int RemindId
            {
                get { return result.RemindId; }
                set { SetRemindId(value); }
            }
            public Builder SetRemindId(int value)
            {
                PrepareBuilder();
                result.hasRemindId = true;
                result.remindId_ = value;
                return this;
            }
            public Builder ClearRemindId()
            {
                PrepareBuilder();
                result.hasRemindId = false;
                result.remindId_ = 0;
                return this;
            }

            public bool HasMsgSource
            {
                get { return result.hasMsgSource; }
            }
            public string MsgSource
            {
                get { return result.MsgSource; }
                set { SetMsgSource(value); }
            }
            public Builder SetMsgSource(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMsgSource = true;
                result.msgSource_ = value;
                return this;
            }
            public Builder ClearMsgSource()
            {
                PrepareBuilder();
                result.hasMsgSource = false;
                result.msgSource_ = "";
                return this;
            }
        }
        static AppMsgObject()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class RemoveFriendObject : pb::GeneratedMessage<RemoveFriendObject, RemoveFriendObject.Builder>
    {
        private RemoveFriendObject() { }
        private static readonly RemoveFriendObject defaultInstance = new RemoveFriendObject().MakeReadOnly();
        private static readonly string[] _removeFriendObjectFieldNames = new string[] { "UserName" };
        private static readonly uint[] _removeFriendObjectFieldTags = new uint[] { 10 };
        public static RemoveFriendObject DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override RemoveFriendObject DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override RemoveFriendObject ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_RemoveFriendObject__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<RemoveFriendObject, RemoveFriendObject.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_RemoveFriendObject__FieldAccessorTable; }
        }

        public const int UserNameFieldNumber = 1;
        private bool hasUserName;
        private global::mm.command.SKBuiltinString_t userName_;
        public bool HasUserName
        {
            get { return hasUserName; }
        }
        public global::mm.command.SKBuiltinString_t UserName
        {
            get { return userName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasUserName) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _removeFriendObjectFieldNames;
            if (hasUserName)
            {
                output.WriteMessage(1, field_names[0], UserName);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, UserName);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static RemoveFriendObject ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RemoveFriendObject ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RemoveFriendObject ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static RemoveFriendObject ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static RemoveFriendObject ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RemoveFriendObject ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static RemoveFriendObject ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static RemoveFriendObject ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static RemoveFriendObject ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static RemoveFriendObject ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private RemoveFriendObject MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(RemoveFriendObject prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<RemoveFriendObject, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(RemoveFriendObject cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private RemoveFriendObject result;

            private RemoveFriendObject PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    RemoveFriendObject original = result;
                    result = new RemoveFriendObject();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override RemoveFriendObject MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.RemoveFriendObject.Descriptor; }
            }

            public override RemoveFriendObject DefaultInstanceForType
            {
                get { return global::mm.command.RemoveFriendObject.DefaultInstance; }
            }

            public override RemoveFriendObject BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is RemoveFriendObject)
                {
                    return MergeFrom((RemoveFriendObject)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(RemoveFriendObject other)
            {
                if (other == global::mm.command.RemoveFriendObject.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUserName)
                {
                    MergeUserName(other.UserName);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_removeFriendObjectFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _removeFriendObjectFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasUserName)
                                {
                                    subBuilder.MergeFrom(UserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                UserName = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUserName
            {
                get { return result.hasUserName; }
            }
            public global::mm.command.SKBuiltinString_t UserName
            {
                get { return result.UserName; }
                set { SetUserName(value); }
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = value;
                return this;
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasUserName &&
                    result.userName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.userName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.userName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.userName_ = value;
                }
                result.hasUserName = true;
                return this;
            }
            public Builder ClearUserName()
            {
                PrepareBuilder();
                result.hasUserName = false;
                result.userName_ = null;
                return this;
            }
        }
        static RemoveFriendObject()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ShakeGetObj : pb::GeneratedMessage<ShakeGetObj, ShakeGetObj.Builder>
    {
        private ShakeGetObj() { }
        private static readonly ShakeGetObj defaultInstance = new ShakeGetObj().MakeReadOnly();
        private static readonly string[] _shakeGetObjFieldNames = new string[] { "BigHeadImgUrl", "City", "Country", "CustomizedInfo", "Distance", "HasHDImg", "HeadImgVersion", "ImgBuffer", "ImgStatus", "MyBrandList", "NickName", "NumDistance", "Province", "Sex", "Signature", "SmallHeadImgUrl", "SnsUserInfo", "UserName", "VerifyContent", "VerifyFlag", "VerifyInfo", "Weibo", "WeiboFlag", "WeiboNickname" };
        private static readonly uint[] _shakeGetObjFieldTags = new uint[] { 194, 34, 186, 218, 50, 72, 168, 82, 64, 210, 18, 88, 26, 56, 42, 202, 178, 10, 138, 120, 130, 98, 112, 106 };
        public static ShakeGetObj DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ShakeGetObj DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ShakeGetObj ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ShakeGetObj__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ShakeGetObj, ShakeGetObj.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ShakeGetObj__FieldAccessorTable; }
        }

        public const int UserNameFieldNumber = 1;
        private bool hasUserName;
        private string userName_ = "";
        public bool HasUserName
        {
            get { return hasUserName; }
        }
        public string UserName
        {
            get { return userName_; }
        }

        public const int NickNameFieldNumber = 2;
        private bool hasNickName;
        private string nickName_ = "";
        public bool HasNickName
        {
            get { return hasNickName; }
        }
        public string NickName
        {
            get { return nickName_; }
        }

        public const int ProvinceFieldNumber = 3;
        private bool hasProvince;
        private string province_ = "";
        public bool HasProvince
        {
            get { return hasProvince; }
        }
        public string Province
        {
            get { return province_; }
        }

        public const int CityFieldNumber = 4;
        private bool hasCity;
        private string city_ = "";
        public bool HasCity
        {
            get { return hasCity; }
        }
        public string City
        {
            get { return city_; }
        }

        public const int SignatureFieldNumber = 5;
        private bool hasSignature;
        private string signature_ = "";
        public bool HasSignature
        {
            get { return hasSignature; }
        }
        public string Signature
        {
            get { return signature_; }
        }

        public const int DistanceFieldNumber = 6;
        private bool hasDistance;
        private string distance_ = "";
        public bool HasDistance
        {
            get { return hasDistance; }
        }
        public string Distance
        {
            get { return distance_; }
        }

        public const int SexFieldNumber = 7;
        private bool hasSex;
        private int sex_;
        public bool HasSex
        {
            get { return hasSex; }
        }
        public int Sex
        {
            get { return sex_; }
        }

        public const int ImgStatusFieldNumber = 8;
        private bool hasImgStatus;
        private int imgStatus_;
        public bool HasImgStatus
        {
            get { return hasImgStatus; }
        }
        public int ImgStatus
        {
            get { return imgStatus_; }
        }

        public const int HasHDImgFieldNumber = 9;
        private bool hasHasHDImg;
        private int hasHDImg_;
        public bool HasHasHDImg
        {
            get { return hasHasHDImg; }
        }
        public int HasHDImg
        {
            get { return hasHDImg_; }
        }

        public const int ImgBufferFieldNumber = 10;
        private bool hasImgBuffer;
        private global::mm.command.SKBuiltinBuffer_t imgBuffer_;
        public bool HasImgBuffer
        {
            get { return hasImgBuffer; }
        }
        public global::mm.command.SKBuiltinBuffer_t ImgBuffer
        {
            get { return imgBuffer_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int NumDistanceFieldNumber = 11;
        private bool hasNumDistance;
        private int numDistance_;
        public bool HasNumDistance
        {
            get { return hasNumDistance; }
        }
        public int NumDistance
        {
            get { return numDistance_; }
        }

        public const int WeiboFieldNumber = 12;
        private bool hasWeibo;
        private string weibo_ = "";
        public bool HasWeibo
        {
            get { return hasWeibo; }
        }
        public string Weibo
        {
            get { return weibo_; }
        }

        public const int WeiboNicknameFieldNumber = 13;
        private bool hasWeiboNickname;
        private string weiboNickname_ = "";
        public bool HasWeiboNickname
        {
            get { return hasWeiboNickname; }
        }
        public string WeiboNickname
        {
            get { return weiboNickname_; }
        }

        public const int WeiboFlagFieldNumber = 14;
        private bool hasWeiboFlag;
        private int weiboFlag_;
        public bool HasWeiboFlag
        {
            get { return hasWeiboFlag; }
        }
        public int WeiboFlag
        {
            get { return weiboFlag_; }
        }

        public const int VerifyFlagFieldNumber = 15;
        private bool hasVerifyFlag;
        private int verifyFlag_;
        public bool HasVerifyFlag
        {
            get { return hasVerifyFlag; }
        }
        public int VerifyFlag
        {
            get { return verifyFlag_; }
        }

        public const int VerifyInfoFieldNumber = 16;
        private bool hasVerifyInfo;
        private string verifyInfo_ = "";
        public bool HasVerifyInfo
        {
            get { return hasVerifyInfo; }
        }
        public string VerifyInfo
        {
            get { return verifyInfo_; }
        }

        public const int VerifyContentFieldNumber = 17;
        private bool hasVerifyContent;
        private string verifyContent_ = "";
        public bool HasVerifyContent
        {
            get { return hasVerifyContent; }
        }
        public string VerifyContent
        {
            get { return verifyContent_; }
        }

        public const int HeadImgVersionFieldNumber = 21;
        private bool hasHeadImgVersion;
        private int headImgVersion_;
        public bool HasHeadImgVersion
        {
            get { return hasHeadImgVersion; }
        }
        public int HeadImgVersion
        {
            get { return headImgVersion_; }
        }

        public const int SnsUserInfoFieldNumber = 22;
        private bool hasSnsUserInfo;
        private global::mm.command.SnsUser snsUserInfo_;
        public bool HasSnsUserInfo
        {
            get { return hasSnsUserInfo; }
        }
        public global::mm.command.SnsUser SnsUserInfo
        {
            get { return snsUserInfo_ ?? global::mm.command.SnsUser.DefaultInstance; }
        }

        public const int CountryFieldNumber = 23;
        private bool hasCountry;
        private string country_ = "";
        public bool HasCountry
        {
            get { return hasCountry; }
        }
        public string Country
        {
            get { return country_; }
        }

        public const int BigHeadImgUrlFieldNumber = 24;
        private bool hasBigHeadImgUrl;
        private string bigHeadImgUrl_ = "";
        public bool HasBigHeadImgUrl
        {
            get { return hasBigHeadImgUrl; }
        }
        public string BigHeadImgUrl
        {
            get { return bigHeadImgUrl_; }
        }

        public const int SmallHeadImgUrlFieldNumber = 25;
        private bool hasSmallHeadImgUrl;
        private string smallHeadImgUrl_ = "";
        public bool HasSmallHeadImgUrl
        {
            get { return hasSmallHeadImgUrl; }
        }
        public string SmallHeadImgUrl
        {
            get { return smallHeadImgUrl_; }
        }

        public const int MyBrandListFieldNumber = 26;
        private bool hasMyBrandList;
        private string myBrandList_ = "";
        public bool HasMyBrandList
        {
            get { return hasMyBrandList; }
        }
        public string MyBrandList
        {
            get { return myBrandList_; }
        }

        public const int CustomizedInfoFieldNumber = 27;
        private bool hasCustomizedInfo;
        private global::mm.command.CustomInfo customizedInfo_;
        public bool HasCustomizedInfo
        {
            get { return hasCustomizedInfo; }
        }
        public global::mm.command.CustomInfo CustomizedInfo
        {
            get { return customizedInfo_ ?? global::mm.command.CustomInfo.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasSex) return false;
                if (!hasImgStatus) return false;
                if (!hasHasHDImg) return false;
                if (!hasImgBuffer) return false;
                if (!hasNumDistance) return false;
                if (!ImgBuffer.IsInitialized) return false;
                if (HasSnsUserInfo)
                {
                    if (!SnsUserInfo.IsInitialized) return false;
                }
                if (HasCustomizedInfo)
                {
                    if (!CustomizedInfo.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _shakeGetObjFieldNames;
            if (hasUserName)
            {
                output.WriteString(1, field_names[17], UserName);
            }
            if (hasNickName)
            {
                output.WriteString(2, field_names[10], NickName);
            }
            if (hasProvince)
            {
                output.WriteString(3, field_names[12], Province);
            }
            if (hasCity)
            {
                output.WriteString(4, field_names[1], City);
            }
            if (hasSignature)
            {
                output.WriteString(5, field_names[14], Signature);
            }
            if (hasDistance)
            {
                output.WriteString(6, field_names[4], Distance);
            }
            if (hasSex)
            {
                output.WriteInt32(7, field_names[13], Sex);
            }
            if (hasImgStatus)
            {
                output.WriteInt32(8, field_names[8], ImgStatus);
            }
            if (hasHasHDImg)
            {
                output.WriteInt32(9, field_names[5], HasHDImg);
            }
            if (hasImgBuffer)
            {
                output.WriteMessage(10, field_names[7], ImgBuffer);
            }
            if (hasNumDistance)
            {
                output.WriteInt32(11, field_names[11], NumDistance);
            }
            if (hasWeibo)
            {
                output.WriteString(12, field_names[21], Weibo);
            }
            if (hasWeiboNickname)
            {
                output.WriteString(13, field_names[23], WeiboNickname);
            }
            if (hasWeiboFlag)
            {
                output.WriteInt32(14, field_names[22], WeiboFlag);
            }
            if (hasVerifyFlag)
            {
                output.WriteInt32(15, field_names[19], VerifyFlag);
            }
            if (hasVerifyInfo)
            {
                output.WriteString(16, field_names[20], VerifyInfo);
            }
            if (hasVerifyContent)
            {
                output.WriteString(17, field_names[18], VerifyContent);
            }
            if (hasHeadImgVersion)
            {
                output.WriteInt32(21, field_names[6], HeadImgVersion);
            }
            if (hasSnsUserInfo)
            {
                output.WriteMessage(22, field_names[16], SnsUserInfo);
            }
            if (hasCountry)
            {
                output.WriteString(23, field_names[2], Country);
            }
            if (hasBigHeadImgUrl)
            {
                output.WriteString(24, field_names[0], BigHeadImgUrl);
            }
            if (hasSmallHeadImgUrl)
            {
                output.WriteString(25, field_names[15], SmallHeadImgUrl);
            }
            if (hasMyBrandList)
            {
                output.WriteString(26, field_names[9], MyBrandList);
            }
            if (hasCustomizedInfo)
            {
                output.WriteMessage(27, field_names[3], CustomizedInfo);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUserName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, UserName);
                }
                if (hasNickName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, NickName);
                }
                if (hasProvince)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Province);
                }
                if (hasCity)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, City);
                }
                if (hasSignature)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(5, Signature);
                }
                if (hasDistance)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(6, Distance);
                }
                if (hasSex)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(7, Sex);
                }
                if (hasImgStatus)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(8, ImgStatus);
                }
                if (hasHasHDImg)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(9, HasHDImg);
                }
                if (hasImgBuffer)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(10, ImgBuffer);
                }
                if (hasNumDistance)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(11, NumDistance);
                }
                if (hasWeibo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(12, Weibo);
                }
                if (hasWeiboNickname)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(13, WeiboNickname);
                }
                if (hasWeiboFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(14, WeiboFlag);
                }
                if (hasVerifyFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(15, VerifyFlag);
                }
                if (hasVerifyInfo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(16, VerifyInfo);
                }
                if (hasVerifyContent)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(17, VerifyContent);
                }
                if (hasHeadImgVersion)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(21, HeadImgVersion);
                }
                if (hasSnsUserInfo)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(22, SnsUserInfo);
                }
                if (hasCountry)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(23, Country);
                }
                if (hasBigHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(24, BigHeadImgUrl);
                }
                if (hasSmallHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(25, SmallHeadImgUrl);
                }
                if (hasMyBrandList)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(26, MyBrandList);
                }
                if (hasCustomizedInfo)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(27, CustomizedInfo);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ShakeGetObj ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ShakeGetObj ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ShakeGetObj ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ShakeGetObj ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ShakeGetObj ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ShakeGetObj ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ShakeGetObj ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ShakeGetObj ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ShakeGetObj ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ShakeGetObj ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ShakeGetObj MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ShakeGetObj prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ShakeGetObj, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ShakeGetObj cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ShakeGetObj result;

            private ShakeGetObj PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ShakeGetObj original = result;
                    result = new ShakeGetObj();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ShakeGetObj MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ShakeGetObj.Descriptor; }
            }

            public override ShakeGetObj DefaultInstanceForType
            {
                get { return global::mm.command.ShakeGetObj.DefaultInstance; }
            }

            public override ShakeGetObj BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ShakeGetObj)
                {
                    return MergeFrom((ShakeGetObj)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ShakeGetObj other)
            {
                if (other == global::mm.command.ShakeGetObj.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUserName)
                {
                    UserName = other.UserName;
                }
                if (other.HasNickName)
                {
                    NickName = other.NickName;
                }
                if (other.HasProvince)
                {
                    Province = other.Province;
                }
                if (other.HasCity)
                {
                    City = other.City;
                }
                if (other.HasSignature)
                {
                    Signature = other.Signature;
                }
                if (other.HasDistance)
                {
                    Distance = other.Distance;
                }
                if (other.HasSex)
                {
                    Sex = other.Sex;
                }
                if (other.HasImgStatus)
                {
                    ImgStatus = other.ImgStatus;
                }
                if (other.HasHasHDImg)
                {
                    HasHDImg = other.HasHDImg;
                }
                if (other.HasImgBuffer)
                {
                    MergeImgBuffer(other.ImgBuffer);
                }
                if (other.HasNumDistance)
                {
                    NumDistance = other.NumDistance;
                }
                if (other.HasWeibo)
                {
                    Weibo = other.Weibo;
                }
                if (other.HasWeiboNickname)
                {
                    WeiboNickname = other.WeiboNickname;
                }
                if (other.HasWeiboFlag)
                {
                    WeiboFlag = other.WeiboFlag;
                }
                if (other.HasVerifyFlag)
                {
                    VerifyFlag = other.VerifyFlag;
                }
                if (other.HasVerifyInfo)
                {
                    VerifyInfo = other.VerifyInfo;
                }
                if (other.HasVerifyContent)
                {
                    VerifyContent = other.VerifyContent;
                }
                if (other.HasHeadImgVersion)
                {
                    HeadImgVersion = other.HeadImgVersion;
                }
                if (other.HasSnsUserInfo)
                {
                    MergeSnsUserInfo(other.SnsUserInfo);
                }
                if (other.HasCountry)
                {
                    Country = other.Country;
                }
                if (other.HasBigHeadImgUrl)
                {
                    BigHeadImgUrl = other.BigHeadImgUrl;
                }
                if (other.HasSmallHeadImgUrl)
                {
                    SmallHeadImgUrl = other.SmallHeadImgUrl;
                }
                if (other.HasMyBrandList)
                {
                    MyBrandList = other.MyBrandList;
                }
                if (other.HasCustomizedInfo)
                {
                    MergeCustomizedInfo(other.CustomizedInfo);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_shakeGetObjFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _shakeGetObjFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasUserName = input.ReadString(ref result.userName_);
                                break;
                            }
                        case 18:
                            {
                                result.hasNickName = input.ReadString(ref result.nickName_);
                                break;
                            }
                        case 26:
                            {
                                result.hasProvince = input.ReadString(ref result.province_);
                                break;
                            }
                        case 34:
                            {
                                result.hasCity = input.ReadString(ref result.city_);
                                break;
                            }
                        case 42:
                            {
                                result.hasSignature = input.ReadString(ref result.signature_);
                                break;
                            }
                        case 50:
                            {
                                result.hasDistance = input.ReadString(ref result.distance_);
                                break;
                            }
                        case 56:
                            {
                                result.hasSex = input.ReadInt32(ref result.sex_);
                                break;
                            }
                        case 64:
                            {
                                result.hasImgStatus = input.ReadInt32(ref result.imgStatus_);
                                break;
                            }
                        case 72:
                            {
                                result.hasHasHDImg = input.ReadInt32(ref result.hasHDImg_);
                                break;
                            }
                        case 82:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasImgBuffer)
                                {
                                    subBuilder.MergeFrom(ImgBuffer);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ImgBuffer = subBuilder.BuildPartial();
                                break;
                            }
                        case 88:
                            {
                                result.hasNumDistance = input.ReadInt32(ref result.numDistance_);
                                break;
                            }
                        case 98:
                            {
                                result.hasWeibo = input.ReadString(ref result.weibo_);
                                break;
                            }
                        case 106:
                            {
                                result.hasWeiboNickname = input.ReadString(ref result.weiboNickname_);
                                break;
                            }
                        case 112:
                            {
                                result.hasWeiboFlag = input.ReadInt32(ref result.weiboFlag_);
                                break;
                            }
                        case 120:
                            {
                                result.hasVerifyFlag = input.ReadInt32(ref result.verifyFlag_);
                                break;
                            }
                        case 130:
                            {
                                result.hasVerifyInfo = input.ReadString(ref result.verifyInfo_);
                                break;
                            }
                        case 138:
                            {
                                result.hasVerifyContent = input.ReadString(ref result.verifyContent_);
                                break;
                            }
                        case 168:
                            {
                                result.hasHeadImgVersion = input.ReadInt32(ref result.headImgVersion_);
                                break;
                            }
                        case 178:
                            {
                                global::mm.command.SnsUser.Builder subBuilder = global::mm.command.SnsUser.CreateBuilder();
                                if (result.hasSnsUserInfo)
                                {
                                    subBuilder.MergeFrom(SnsUserInfo);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                SnsUserInfo = subBuilder.BuildPartial();
                                break;
                            }
                        case 186:
                            {
                                result.hasCountry = input.ReadString(ref result.country_);
                                break;
                            }
                        case 194:
                            {
                                result.hasBigHeadImgUrl = input.ReadString(ref result.bigHeadImgUrl_);
                                break;
                            }
                        case 202:
                            {
                                result.hasSmallHeadImgUrl = input.ReadString(ref result.smallHeadImgUrl_);
                                break;
                            }
                        case 210:
                            {
                                result.hasMyBrandList = input.ReadString(ref result.myBrandList_);
                                break;
                            }
                        case 218:
                            {
                                global::mm.command.CustomInfo.Builder subBuilder = global::mm.command.CustomInfo.CreateBuilder();
                                if (result.hasCustomizedInfo)
                                {
                                    subBuilder.MergeFrom(CustomizedInfo);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                CustomizedInfo = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUserName
            {
                get { return result.hasUserName; }
            }
            public string UserName
            {
                get { return result.UserName; }
                set { SetUserName(value); }
            }
            public Builder SetUserName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = value;
                return this;
            }
            public Builder ClearUserName()
            {
                PrepareBuilder();
                result.hasUserName = false;
                result.userName_ = "";
                return this;
            }

            public bool HasNickName
            {
                get { return result.hasNickName; }
            }
            public string NickName
            {
                get { return result.NickName; }
                set { SetNickName(value); }
            }
            public Builder SetNickName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = value;
                return this;
            }
            public Builder ClearNickName()
            {
                PrepareBuilder();
                result.hasNickName = false;
                result.nickName_ = "";
                return this;
            }

            public bool HasProvince
            {
                get { return result.hasProvince; }
            }
            public string Province
            {
                get { return result.Province; }
                set { SetProvince(value); }
            }
            public Builder SetProvince(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasProvince = true;
                result.province_ = value;
                return this;
            }
            public Builder ClearProvince()
            {
                PrepareBuilder();
                result.hasProvince = false;
                result.province_ = "";
                return this;
            }

            public bool HasCity
            {
                get { return result.hasCity; }
            }
            public string City
            {
                get { return result.City; }
                set { SetCity(value); }
            }
            public Builder SetCity(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCity = true;
                result.city_ = value;
                return this;
            }
            public Builder ClearCity()
            {
                PrepareBuilder();
                result.hasCity = false;
                result.city_ = "";
                return this;
            }

            public bool HasSignature
            {
                get { return result.hasSignature; }
            }
            public string Signature
            {
                get { return result.Signature; }
                set { SetSignature(value); }
            }
            public Builder SetSignature(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSignature = true;
                result.signature_ = value;
                return this;
            }
            public Builder ClearSignature()
            {
                PrepareBuilder();
                result.hasSignature = false;
                result.signature_ = "";
                return this;
            }

            public bool HasDistance
            {
                get { return result.hasDistance; }
            }
            public string Distance
            {
                get { return result.Distance; }
                set { SetDistance(value); }
            }
            public Builder SetDistance(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasDistance = true;
                result.distance_ = value;
                return this;
            }
            public Builder ClearDistance()
            {
                PrepareBuilder();
                result.hasDistance = false;
                result.distance_ = "";
                return this;
            }

            public bool HasSex
            {
                get { return result.hasSex; }
            }
            public int Sex
            {
                get { return result.Sex; }
                set { SetSex(value); }
            }
            public Builder SetSex(int value)
            {
                PrepareBuilder();
                result.hasSex = true;
                result.sex_ = value;
                return this;
            }
            public Builder ClearSex()
            {
                PrepareBuilder();
                result.hasSex = false;
                result.sex_ = 0;
                return this;
            }

            public bool HasImgStatus
            {
                get { return result.hasImgStatus; }
            }
            public int ImgStatus
            {
                get { return result.ImgStatus; }
                set { SetImgStatus(value); }
            }
            public Builder SetImgStatus(int value)
            {
                PrepareBuilder();
                result.hasImgStatus = true;
                result.imgStatus_ = value;
                return this;
            }
            public Builder ClearImgStatus()
            {
                PrepareBuilder();
                result.hasImgStatus = false;
                result.imgStatus_ = 0;
                return this;
            }

            public bool HasHasHDImg
            {
                get { return result.hasHasHDImg; }
            }
            public int HasHDImg
            {
                get { return result.HasHDImg; }
                set { SetHasHDImg(value); }
            }
            public Builder SetHasHDImg(int value)
            {
                PrepareBuilder();
                result.hasHasHDImg = true;
                result.hasHDImg_ = value;
                return this;
            }
            public Builder ClearHasHDImg()
            {
                PrepareBuilder();
                result.hasHasHDImg = false;
                result.hasHDImg_ = 0;
                return this;
            }

            public bool HasImgBuffer
            {
                get { return result.hasImgBuffer; }
            }
            public global::mm.command.SKBuiltinBuffer_t ImgBuffer
            {
                get { return result.ImgBuffer; }
                set { SetImgBuffer(value); }
            }
            public Builder SetImgBuffer(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasImgBuffer = true;
                result.imgBuffer_ = value;
                return this;
            }
            public Builder SetImgBuffer(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasImgBuffer = true;
                result.imgBuffer_ = builderForValue.Build();
                return this;
            }
            public Builder MergeImgBuffer(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasImgBuffer &&
                    result.imgBuffer_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.imgBuffer_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.imgBuffer_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.imgBuffer_ = value;
                }
                result.hasImgBuffer = true;
                return this;
            }
            public Builder ClearImgBuffer()
            {
                PrepareBuilder();
                result.hasImgBuffer = false;
                result.imgBuffer_ = null;
                return this;
            }

            public bool HasNumDistance
            {
                get { return result.hasNumDistance; }
            }
            public int NumDistance
            {
                get { return result.NumDistance; }
                set { SetNumDistance(value); }
            }
            public Builder SetNumDistance(int value)
            {
                PrepareBuilder();
                result.hasNumDistance = true;
                result.numDistance_ = value;
                return this;
            }
            public Builder ClearNumDistance()
            {
                PrepareBuilder();
                result.hasNumDistance = false;
                result.numDistance_ = 0;
                return this;
            }

            public bool HasWeibo
            {
                get { return result.hasWeibo; }
            }
            public string Weibo
            {
                get { return result.Weibo; }
                set { SetWeibo(value); }
            }
            public Builder SetWeibo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWeibo = true;
                result.weibo_ = value;
                return this;
            }
            public Builder ClearWeibo()
            {
                PrepareBuilder();
                result.hasWeibo = false;
                result.weibo_ = "";
                return this;
            }

            public bool HasWeiboNickname
            {
                get { return result.hasWeiboNickname; }
            }
            public string WeiboNickname
            {
                get { return result.WeiboNickname; }
                set { SetWeiboNickname(value); }
            }
            public Builder SetWeiboNickname(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWeiboNickname = true;
                result.weiboNickname_ = value;
                return this;
            }
            public Builder ClearWeiboNickname()
            {
                PrepareBuilder();
                result.hasWeiboNickname = false;
                result.weiboNickname_ = "";
                return this;
            }

            public bool HasWeiboFlag
            {
                get { return result.hasWeiboFlag; }
            }
            public int WeiboFlag
            {
                get { return result.WeiboFlag; }
                set { SetWeiboFlag(value); }
            }
            public Builder SetWeiboFlag(int value)
            {
                PrepareBuilder();
                result.hasWeiboFlag = true;
                result.weiboFlag_ = value;
                return this;
            }
            public Builder ClearWeiboFlag()
            {
                PrepareBuilder();
                result.hasWeiboFlag = false;
                result.weiboFlag_ = 0;
                return this;
            }

            public bool HasVerifyFlag
            {
                get { return result.hasVerifyFlag; }
            }
            public int VerifyFlag
            {
                get { return result.VerifyFlag; }
                set { SetVerifyFlag(value); }
            }
            public Builder SetVerifyFlag(int value)
            {
                PrepareBuilder();
                result.hasVerifyFlag = true;
                result.verifyFlag_ = value;
                return this;
            }
            public Builder ClearVerifyFlag()
            {
                PrepareBuilder();
                result.hasVerifyFlag = false;
                result.verifyFlag_ = 0;
                return this;
            }

            public bool HasVerifyInfo
            {
                get { return result.hasVerifyInfo; }
            }
            public string VerifyInfo
            {
                get { return result.VerifyInfo; }
                set { SetVerifyInfo(value); }
            }
            public Builder SetVerifyInfo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVerifyInfo = true;
                result.verifyInfo_ = value;
                return this;
            }
            public Builder ClearVerifyInfo()
            {
                PrepareBuilder();
                result.hasVerifyInfo = false;
                result.verifyInfo_ = "";
                return this;
            }

            public bool HasVerifyContent
            {
                get { return result.hasVerifyContent; }
            }
            public string VerifyContent
            {
                get { return result.VerifyContent; }
                set { SetVerifyContent(value); }
            }
            public Builder SetVerifyContent(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVerifyContent = true;
                result.verifyContent_ = value;
                return this;
            }
            public Builder ClearVerifyContent()
            {
                PrepareBuilder();
                result.hasVerifyContent = false;
                result.verifyContent_ = "";
                return this;
            }

            public bool HasHeadImgVersion
            {
                get { return result.hasHeadImgVersion; }
            }
            public int HeadImgVersion
            {
                get { return result.HeadImgVersion; }
                set { SetHeadImgVersion(value); }
            }
            public Builder SetHeadImgVersion(int value)
            {
                PrepareBuilder();
                result.hasHeadImgVersion = true;
                result.headImgVersion_ = value;
                return this;
            }
            public Builder ClearHeadImgVersion()
            {
                PrepareBuilder();
                result.hasHeadImgVersion = false;
                result.headImgVersion_ = 0;
                return this;
            }

            public bool HasSnsUserInfo
            {
                get { return result.hasSnsUserInfo; }
            }
            public global::mm.command.SnsUser SnsUserInfo
            {
                get { return result.SnsUserInfo; }
                set { SetSnsUserInfo(value); }
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = value;
                return this;
            }
            public Builder SetSnsUserInfo(global::mm.command.SnsUser.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSnsUserInfo = true;
                result.snsUserInfo_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSnsUserInfo(global::mm.command.SnsUser value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSnsUserInfo &&
                    result.snsUserInfo_ != global::mm.command.SnsUser.DefaultInstance)
                {
                    result.snsUserInfo_ = global::mm.command.SnsUser.CreateBuilder(result.snsUserInfo_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.snsUserInfo_ = value;
                }
                result.hasSnsUserInfo = true;
                return this;
            }
            public Builder ClearSnsUserInfo()
            {
                PrepareBuilder();
                result.hasSnsUserInfo = false;
                result.snsUserInfo_ = null;
                return this;
            }

            public bool HasCountry
            {
                get { return result.hasCountry; }
            }
            public string Country
            {
                get { return result.Country; }
                set { SetCountry(value); }
            }
            public Builder SetCountry(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCountry = true;
                result.country_ = value;
                return this;
            }
            public Builder ClearCountry()
            {
                PrepareBuilder();
                result.hasCountry = false;
                result.country_ = "";
                return this;
            }

            public bool HasBigHeadImgUrl
            {
                get { return result.hasBigHeadImgUrl; }
            }
            public string BigHeadImgUrl
            {
                get { return result.BigHeadImgUrl; }
                set { SetBigHeadImgUrl(value); }
            }
            public Builder SetBigHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBigHeadImgUrl = true;
                result.bigHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearBigHeadImgUrl()
            {
                PrepareBuilder();
                result.hasBigHeadImgUrl = false;
                result.bigHeadImgUrl_ = "";
                return this;
            }

            public bool HasSmallHeadImgUrl
            {
                get { return result.hasSmallHeadImgUrl; }
            }
            public string SmallHeadImgUrl
            {
                get { return result.SmallHeadImgUrl; }
                set { SetSmallHeadImgUrl(value); }
            }
            public Builder SetSmallHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSmallHeadImgUrl = true;
                result.smallHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearSmallHeadImgUrl()
            {
                PrepareBuilder();
                result.hasSmallHeadImgUrl = false;
                result.smallHeadImgUrl_ = "";
                return this;
            }

            public bool HasMyBrandList
            {
                get { return result.hasMyBrandList; }
            }
            public string MyBrandList
            {
                get { return result.MyBrandList; }
                set { SetMyBrandList(value); }
            }
            public Builder SetMyBrandList(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMyBrandList = true;
                result.myBrandList_ = value;
                return this;
            }
            public Builder ClearMyBrandList()
            {
                PrepareBuilder();
                result.hasMyBrandList = false;
                result.myBrandList_ = "";
                return this;
            }

            public bool HasCustomizedInfo
            {
                get { return result.hasCustomizedInfo; }
            }
            public global::mm.command.CustomInfo CustomizedInfo
            {
                get { return result.CustomizedInfo; }
                set { SetCustomizedInfo(value); }
            }
            public Builder SetCustomizedInfo(global::mm.command.CustomInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCustomizedInfo = true;
                result.customizedInfo_ = value;
                return this;
            }
            public Builder SetCustomizedInfo(global::mm.command.CustomInfo.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasCustomizedInfo = true;
                result.customizedInfo_ = builderForValue.Build();
                return this;
            }
            public Builder MergeCustomizedInfo(global::mm.command.CustomInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasCustomizedInfo &&
                    result.customizedInfo_ != global::mm.command.CustomInfo.DefaultInstance)
                {
                    result.customizedInfo_ = global::mm.command.CustomInfo.CreateBuilder(result.customizedInfo_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.customizedInfo_ = value;
                }
                result.hasCustomizedInfo = true;
                return this;
            }
            public Builder ClearCustomizedInfo()
            {
                PrepareBuilder();
                result.hasCustomizedInfo = false;
                result.customizedInfo_ = null;
                return this;
            }
        }
        static ShakeGetObj()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class CardInfo : pb::GeneratedMessage<CardInfo, CardInfo.Builder>
    {
        private CardInfo() { }
        private static readonly CardInfo defaultInstance = new CardInfo().MakeReadOnly();
        private static readonly string[] _cardInfoFieldNames = new string[] { "CardID", "itme3", "itme4", "itme5", "seq" };
        private static readonly uint[] _cardInfoFieldTags = new uint[] { 10, 24, 32, 40, 16 };
        public static CardInfo DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override CardInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override CardInfo ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_CardInfo__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<CardInfo, CardInfo.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_CardInfo__FieldAccessorTable; }
        }

        public const int CardIDFieldNumber = 1;
        private bool hasCardID;
        private string cardID_ = "";
        public bool HasCardID
        {
            get { return hasCardID; }
        }
        public string CardID
        {
            get { return cardID_; }
        }

        public const int SeqFieldNumber = 2;
        private bool hasSeq;
        private uint seq_;
        public bool HasSeq
        {
            get { return hasSeq; }
        }
        [global::System.CLSCompliant(false)]
        public uint Seq
        {
            get { return seq_; }
        }

        public const int Itme3FieldNumber = 3;
        private bool hasItme3;
        private uint itme3_;
        public bool HasItme3
        {
            get { return hasItme3; }
        }
        [global::System.CLSCompliant(false)]
        public uint Itme3
        {
            get { return itme3_; }
        }

        public const int Itme4FieldNumber = 4;
        private bool hasItme4;
        private uint itme4_;
        public bool HasItme4
        {
            get { return hasItme4; }
        }
        [global::System.CLSCompliant(false)]
        public uint Itme4
        {
            get { return itme4_; }
        }

        public const int Itme5FieldNumber = 5;
        private bool hasItme5;
        private uint itme5_;
        public bool HasItme5
        {
            get { return hasItme5; }
        }
        [global::System.CLSCompliant(false)]
        public uint Itme5
        {
            get { return itme5_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasCardID) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _cardInfoFieldNames;
            if (hasCardID)
            {
                output.WriteString(1, field_names[0], CardID);
            }
            if (hasSeq)
            {
                output.WriteUInt32(2, field_names[4], Seq);
            }
            if (hasItme3)
            {
                output.WriteUInt32(3, field_names[1], Itme3);
            }
            if (hasItme4)
            {
                output.WriteUInt32(4, field_names[2], Itme4);
            }
            if (hasItme5)
            {
                output.WriteUInt32(5, field_names[3], Itme5);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasCardID)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, CardID);
                }
                if (hasSeq)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(2, Seq);
                }
                if (hasItme3)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(3, Itme3);
                }
                if (hasItme4)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, Itme4);
                }
                if (hasItme5)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(5, Itme5);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static CardInfo ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CardInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CardInfo ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static CardInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static CardInfo ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CardInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static CardInfo ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static CardInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static CardInfo ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static CardInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private CardInfo MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(CardInfo prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<CardInfo, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(CardInfo cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private CardInfo result;

            private CardInfo PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    CardInfo original = result;
                    result = new CardInfo();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override CardInfo MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.CardInfo.Descriptor; }
            }

            public override CardInfo DefaultInstanceForType
            {
                get { return global::mm.command.CardInfo.DefaultInstance; }
            }

            public override CardInfo BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is CardInfo)
                {
                    return MergeFrom((CardInfo)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(CardInfo other)
            {
                if (other == global::mm.command.CardInfo.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasCardID)
                {
                    CardID = other.CardID;
                }
                if (other.HasSeq)
                {
                    Seq = other.Seq;
                }
                if (other.HasItme3)
                {
                    Itme3 = other.Itme3;
                }
                if (other.HasItme4)
                {
                    Itme4 = other.Itme4;
                }
                if (other.HasItme5)
                {
                    Itme5 = other.Itme5;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_cardInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _cardInfoFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasCardID = input.ReadString(ref result.cardID_);
                                break;
                            }
                        case 16:
                            {
                                result.hasSeq = input.ReadUInt32(ref result.seq_);
                                break;
                            }
                        case 24:
                            {
                                result.hasItme3 = input.ReadUInt32(ref result.itme3_);
                                break;
                            }
                        case 32:
                            {
                                result.hasItme4 = input.ReadUInt32(ref result.itme4_);
                                break;
                            }
                        case 40:
                            {
                                result.hasItme5 = input.ReadUInt32(ref result.itme5_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasCardID
            {
                get { return result.hasCardID; }
            }
            public string CardID
            {
                get { return result.CardID; }
                set { SetCardID(value); }
            }
            public Builder SetCardID(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCardID = true;
                result.cardID_ = value;
                return this;
            }
            public Builder ClearCardID()
            {
                PrepareBuilder();
                result.hasCardID = false;
                result.cardID_ = "";
                return this;
            }

            public bool HasSeq
            {
                get { return result.hasSeq; }
            }
            [global::System.CLSCompliant(false)]
            public uint Seq
            {
                get { return result.Seq; }
                set { SetSeq(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetSeq(uint value)
            {
                PrepareBuilder();
                result.hasSeq = true;
                result.seq_ = value;
                return this;
            }
            public Builder ClearSeq()
            {
                PrepareBuilder();
                result.hasSeq = false;
                result.seq_ = 0;
                return this;
            }

            public bool HasItme3
            {
                get { return result.hasItme3; }
            }
            [global::System.CLSCompliant(false)]
            public uint Itme3
            {
                get { return result.Itme3; }
                set { SetItme3(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetItme3(uint value)
            {
                PrepareBuilder();
                result.hasItme3 = true;
                result.itme3_ = value;
                return this;
            }
            public Builder ClearItme3()
            {
                PrepareBuilder();
                result.hasItme3 = false;
                result.itme3_ = 0;
                return this;
            }

            public bool HasItme4
            {
                get { return result.hasItme4; }
            }
            [global::System.CLSCompliant(false)]
            public uint Itme4
            {
                get { return result.Itme4; }
                set { SetItme4(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetItme4(uint value)
            {
                PrepareBuilder();
                result.hasItme4 = true;
                result.itme4_ = value;
                return this;
            }
            public Builder ClearItme4()
            {
                PrepareBuilder();
                result.hasItme4 = false;
                result.itme4_ = 0;
                return this;
            }

            public bool HasItme5
            {
                get { return result.hasItme5; }
            }
            [global::System.CLSCompliant(false)]
            public uint Itme5
            {
                get { return result.Itme5; }
                set { SetItme5(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetItme5(uint value)
            {
                PrepareBuilder();
                result.hasItme5 = true;
                result.itme5_ = value;
                return this;
            }
            public Builder ClearItme5()
            {
                PrepareBuilder();
                result.hasItme5 = false;
                result.itme5_ = 0;
                return this;
            }
        }
        static CardInfo()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ChatRoomItem : pb::GeneratedMessage<ChatRoomItem, ChatRoomItem.Builder>
    {
        private ChatRoomItem() { }
        private static readonly ChatRoomItem defaultInstance = new ChatRoomItem().MakeReadOnly();
        private static readonly string[] _chatRoomItemFieldNames = new string[] { "MemberName" };
        private static readonly uint[] _chatRoomItemFieldTags = new uint[] { 10 };
        public static ChatRoomItem DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ChatRoomItem DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ChatRoomItem ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ChatRoomItem__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ChatRoomItem, ChatRoomItem.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ChatRoomItem__FieldAccessorTable; }
        }

        public const int MemberNameFieldNumber = 1;
        private bool hasMemberName;
        private global::mm.command.SKBuiltinString_t memberName_;
        public bool HasMemberName
        {
            get { return hasMemberName; }
        }
        public global::mm.command.SKBuiltinString_t MemberName
        {
            get { return memberName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasMemberName) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _chatRoomItemFieldNames;
            if (hasMemberName)
            {
                output.WriteMessage(1, field_names[0], MemberName);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasMemberName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, MemberName);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ChatRoomItem ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChatRoomItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChatRoomItem ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChatRoomItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChatRoomItem ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChatRoomItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ChatRoomItem ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ChatRoomItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ChatRoomItem ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChatRoomItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ChatRoomItem MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ChatRoomItem prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ChatRoomItem, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ChatRoomItem cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ChatRoomItem result;

            private ChatRoomItem PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ChatRoomItem original = result;
                    result = new ChatRoomItem();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ChatRoomItem MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ChatRoomItem.Descriptor; }
            }

            public override ChatRoomItem DefaultInstanceForType
            {
                get { return global::mm.command.ChatRoomItem.DefaultInstance; }
            }

            public override ChatRoomItem BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ChatRoomItem)
                {
                    return MergeFrom((ChatRoomItem)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ChatRoomItem other)
            {
                if (other == global::mm.command.ChatRoomItem.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasMemberName)
                {
                    MergeMemberName(other.MemberName);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_chatRoomItemFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _chatRoomItemFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasMemberName)
                                {
                                    subBuilder.MergeFrom(MemberName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                MemberName = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasMemberName
            {
                get { return result.hasMemberName; }
            }
            public global::mm.command.SKBuiltinString_t MemberName
            {
                get { return result.MemberName; }
                set { SetMemberName(value); }
            }
            public Builder SetMemberName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMemberName = true;
                result.memberName_ = value;
                return this;
            }
            public Builder SetMemberName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasMemberName = true;
                result.memberName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeMemberName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasMemberName &&
                    result.memberName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.memberName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.memberName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.memberName_ = value;
                }
                result.hasMemberName = true;
                return this;
            }
            public Builder ClearMemberName()
            {
                PrepareBuilder();
                result.hasMemberName = false;
                result.memberName_ = null;
                return this;
            }
        }
        static ChatRoomItem()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class MemberInfo : pb::GeneratedMessage<MemberInfo, MemberInfo.Builder>
    {
        private MemberInfo() { }
        private static readonly MemberInfo defaultInstance = new MemberInfo().MakeReadOnly();
        private static readonly string[] _memberInfoFieldNames = new string[] { "City", "ContactType", "Country", "MemberName", "MemberStatus", "NickName", "PYInitial", "PersonalCard", "Province", "QuanPin", "Remark", "RemarkPYInitial", "RemarkQuanPin", "Sex", "Signature", "VerifyFlag", "VerifyInfo" };
        private static readonly uint[] _memberInfoFieldTags = new uint[] { 98, 80, 138, 10, 16, 26, 34, 112, 90, 42, 58, 66, 74, 48, 106, 120, 130 };
        public static MemberInfo DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override MemberInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override MemberInfo ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_MemberInfo__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<MemberInfo, MemberInfo.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_MemberInfo__FieldAccessorTable; }
        }

        public const int MemberNameFieldNumber = 1;
        private bool hasMemberName;
        private global::mm.command.SKBuiltinString_t memberName_;
        public bool HasMemberName
        {
            get { return hasMemberName; }
        }
        public global::mm.command.SKBuiltinString_t MemberName
        {
            get { return memberName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int MemberStatusFieldNumber = 2;
        private bool hasMemberStatus;
        private int memberStatus_;
        public bool HasMemberStatus
        {
            get { return hasMemberStatus; }
        }
        public int MemberStatus
        {
            get { return memberStatus_; }
        }

        public const int NickNameFieldNumber = 3;
        private bool hasNickName;
        private global::mm.command.SKBuiltinString_t nickName_;
        public bool HasNickName
        {
            get { return hasNickName; }
        }
        public global::mm.command.SKBuiltinString_t NickName
        {
            get { return nickName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int PYInitialFieldNumber = 4;
        private bool hasPYInitial;
        private global::mm.command.SKBuiltinString_t pYInitial_;
        public bool HasPYInitial
        {
            get { return hasPYInitial; }
        }
        public global::mm.command.SKBuiltinString_t PYInitial
        {
            get { return pYInitial_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int QuanPinFieldNumber = 5;
        private bool hasQuanPin;
        private global::mm.command.SKBuiltinString_t quanPin_;
        public bool HasQuanPin
        {
            get { return hasQuanPin; }
        }
        public global::mm.command.SKBuiltinString_t QuanPin
        {
            get { return quanPin_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int SexFieldNumber = 6;
        private bool hasSex;
        private int sex_;
        public bool HasSex
        {
            get { return hasSex; }
        }
        public int Sex
        {
            get { return sex_; }
        }

        public const int RemarkFieldNumber = 7;
        private bool hasRemark;
        private global::mm.command.SKBuiltinString_t remark_;
        public bool HasRemark
        {
            get { return hasRemark; }
        }
        public global::mm.command.SKBuiltinString_t Remark
        {
            get { return remark_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int RemarkPYInitialFieldNumber = 8;
        private bool hasRemarkPYInitial;
        private global::mm.command.SKBuiltinString_t remarkPYInitial_;
        public bool HasRemarkPYInitial
        {
            get { return hasRemarkPYInitial; }
        }
        public global::mm.command.SKBuiltinString_t RemarkPYInitial
        {
            get { return remarkPYInitial_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int RemarkQuanPinFieldNumber = 9;
        private bool hasRemarkQuanPin;
        private global::mm.command.SKBuiltinString_t remarkQuanPin_;
        public bool HasRemarkQuanPin
        {
            get { return hasRemarkQuanPin; }
        }
        public global::mm.command.SKBuiltinString_t RemarkQuanPin
        {
            get { return remarkQuanPin_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int ContactTypeFieldNumber = 10;
        private bool hasContactType;
        private int contactType_;
        public bool HasContactType
        {
            get { return hasContactType; }
        }
        public int ContactType
        {
            get { return contactType_; }
        }

        public const int ProvinceFieldNumber = 11;
        private bool hasProvince;
        private string province_ = "";
        public bool HasProvince
        {
            get { return hasProvince; }
        }
        public string Province
        {
            get { return province_; }
        }

        public const int CityFieldNumber = 12;
        private bool hasCity;
        private string city_ = "";
        public bool HasCity
        {
            get { return hasCity; }
        }
        public string City
        {
            get { return city_; }
        }

        public const int SignatureFieldNumber = 13;
        private bool hasSignature;
        private string signature_ = "";
        public bool HasSignature
        {
            get { return hasSignature; }
        }
        public string Signature
        {
            get { return signature_; }
        }

        public const int PersonalCardFieldNumber = 14;
        private bool hasPersonalCard;
        private int personalCard_;
        public bool HasPersonalCard
        {
            get { return hasPersonalCard; }
        }
        public int PersonalCard
        {
            get { return personalCard_; }
        }

        public const int VerifyFlagFieldNumber = 15;
        private bool hasVerifyFlag;
        private int verifyFlag_;
        public bool HasVerifyFlag
        {
            get { return hasVerifyFlag; }
        }
        public int VerifyFlag
        {
            get { return verifyFlag_; }
        }

        public const int VerifyInfoFieldNumber = 16;
        private bool hasVerifyInfo;
        private string verifyInfo_ = "";
        public bool HasVerifyInfo
        {
            get { return hasVerifyInfo; }
        }
        public string VerifyInfo
        {
            get { return verifyInfo_; }
        }

        public const int CountryFieldNumber = 17;
        private bool hasCountry;
        private string country_ = "";
        public bool HasCountry
        {
            get { return hasCountry; }
        }
        public string Country
        {
            get { return country_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _memberInfoFieldNames;
            if (hasMemberName)
            {
                output.WriteMessage(1, field_names[3], MemberName);
            }
            if (hasMemberStatus)
            {
                output.WriteInt32(2, field_names[4], MemberStatus);
            }
            if (hasNickName)
            {
                output.WriteMessage(3, field_names[5], NickName);
            }
            if (hasPYInitial)
            {
                output.WriteMessage(4, field_names[6], PYInitial);
            }
            if (hasQuanPin)
            {
                output.WriteMessage(5, field_names[9], QuanPin);
            }
            if (hasSex)
            {
                output.WriteInt32(6, field_names[13], Sex);
            }
            if (hasRemark)
            {
                output.WriteMessage(7, field_names[10], Remark);
            }
            if (hasRemarkPYInitial)
            {
                output.WriteMessage(8, field_names[11], RemarkPYInitial);
            }
            if (hasRemarkQuanPin)
            {
                output.WriteMessage(9, field_names[12], RemarkQuanPin);
            }
            if (hasContactType)
            {
                output.WriteInt32(10, field_names[1], ContactType);
            }
            if (hasProvince)
            {
                output.WriteString(11, field_names[8], Province);
            }
            if (hasCity)
            {
                output.WriteString(12, field_names[0], City);
            }
            if (hasSignature)
            {
                output.WriteString(13, field_names[14], Signature);
            }
            if (hasPersonalCard)
            {
                output.WriteInt32(14, field_names[7], PersonalCard);
            }
            if (hasVerifyFlag)
            {
                output.WriteInt32(15, field_names[15], VerifyFlag);
            }
            if (hasVerifyInfo)
            {
                output.WriteString(16, field_names[16], VerifyInfo);
            }
            if (hasCountry)
            {
                output.WriteString(17, field_names[2], Country);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasMemberName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, MemberName);
                }
                if (hasMemberStatus)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(2, MemberStatus);
                }
                if (hasNickName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, NickName);
                }
                if (hasPYInitial)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, PYInitial);
                }
                if (hasQuanPin)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, QuanPin);
                }
                if (hasSex)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(6, Sex);
                }
                if (hasRemark)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(7, Remark);
                }
                if (hasRemarkPYInitial)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(8, RemarkPYInitial);
                }
                if (hasRemarkQuanPin)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(9, RemarkQuanPin);
                }
                if (hasContactType)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(10, ContactType);
                }
                if (hasProvince)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(11, Province);
                }
                if (hasCity)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(12, City);
                }
                if (hasSignature)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(13, Signature);
                }
                if (hasPersonalCard)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(14, PersonalCard);
                }
                if (hasVerifyFlag)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(15, VerifyFlag);
                }
                if (hasVerifyInfo)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(16, VerifyInfo);
                }
                if (hasCountry)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(17, Country);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static MemberInfo ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MemberInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MemberInfo ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MemberInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MemberInfo ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MemberInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static MemberInfo ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static MemberInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static MemberInfo ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MemberInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private MemberInfo MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(MemberInfo prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<MemberInfo, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(MemberInfo cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private MemberInfo result;

            private MemberInfo PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    MemberInfo original = result;
                    result = new MemberInfo();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override MemberInfo MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.MemberInfo.Descriptor; }
            }

            public override MemberInfo DefaultInstanceForType
            {
                get { return global::mm.command.MemberInfo.DefaultInstance; }
            }

            public override MemberInfo BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is MemberInfo)
                {
                    return MergeFrom((MemberInfo)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(MemberInfo other)
            {
                if (other == global::mm.command.MemberInfo.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasMemberName)
                {
                    MergeMemberName(other.MemberName);
                }
                if (other.HasMemberStatus)
                {
                    MemberStatus = other.MemberStatus;
                }
                if (other.HasNickName)
                {
                    MergeNickName(other.NickName);
                }
                if (other.HasPYInitial)
                {
                    MergePYInitial(other.PYInitial);
                }
                if (other.HasQuanPin)
                {
                    MergeQuanPin(other.QuanPin);
                }
                if (other.HasSex)
                {
                    Sex = other.Sex;
                }
                if (other.HasRemark)
                {
                    MergeRemark(other.Remark);
                }
                if (other.HasRemarkPYInitial)
                {
                    MergeRemarkPYInitial(other.RemarkPYInitial);
                }
                if (other.HasRemarkQuanPin)
                {
                    MergeRemarkQuanPin(other.RemarkQuanPin);
                }
                if (other.HasContactType)
                {
                    ContactType = other.ContactType;
                }
                if (other.HasProvince)
                {
                    Province = other.Province;
                }
                if (other.HasCity)
                {
                    City = other.City;
                }
                if (other.HasSignature)
                {
                    Signature = other.Signature;
                }
                if (other.HasPersonalCard)
                {
                    PersonalCard = other.PersonalCard;
                }
                if (other.HasVerifyFlag)
                {
                    VerifyFlag = other.VerifyFlag;
                }
                if (other.HasVerifyInfo)
                {
                    VerifyInfo = other.VerifyInfo;
                }
                if (other.HasCountry)
                {
                    Country = other.Country;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_memberInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _memberInfoFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasMemberName)
                                {
                                    subBuilder.MergeFrom(MemberName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                MemberName = subBuilder.BuildPartial();
                                break;
                            }
                        case 16:
                            {
                                result.hasMemberStatus = input.ReadInt32(ref result.memberStatus_);
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasNickName)
                                {
                                    subBuilder.MergeFrom(NickName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                NickName = subBuilder.BuildPartial();
                                break;
                            }
                        case 34:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasPYInitial)
                                {
                                    subBuilder.MergeFrom(PYInitial);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                PYInitial = subBuilder.BuildPartial();
                                break;
                            }
                        case 42:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasQuanPin)
                                {
                                    subBuilder.MergeFrom(QuanPin);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                QuanPin = subBuilder.BuildPartial();
                                break;
                            }
                        case 48:
                            {
                                result.hasSex = input.ReadInt32(ref result.sex_);
                                break;
                            }
                        case 58:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasRemark)
                                {
                                    subBuilder.MergeFrom(Remark);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Remark = subBuilder.BuildPartial();
                                break;
                            }
                        case 66:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasRemarkPYInitial)
                                {
                                    subBuilder.MergeFrom(RemarkPYInitial);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                RemarkPYInitial = subBuilder.BuildPartial();
                                break;
                            }
                        case 74:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasRemarkQuanPin)
                                {
                                    subBuilder.MergeFrom(RemarkQuanPin);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                RemarkQuanPin = subBuilder.BuildPartial();
                                break;
                            }
                        case 80:
                            {
                                result.hasContactType = input.ReadInt32(ref result.contactType_);
                                break;
                            }
                        case 90:
                            {
                                result.hasProvince = input.ReadString(ref result.province_);
                                break;
                            }
                        case 98:
                            {
                                result.hasCity = input.ReadString(ref result.city_);
                                break;
                            }
                        case 106:
                            {
                                result.hasSignature = input.ReadString(ref result.signature_);
                                break;
                            }
                        case 112:
                            {
                                result.hasPersonalCard = input.ReadInt32(ref result.personalCard_);
                                break;
                            }
                        case 120:
                            {
                                result.hasVerifyFlag = input.ReadInt32(ref result.verifyFlag_);
                                break;
                            }
                        case 130:
                            {
                                result.hasVerifyInfo = input.ReadString(ref result.verifyInfo_);
                                break;
                            }
                        case 138:
                            {
                                result.hasCountry = input.ReadString(ref result.country_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasMemberName
            {
                get { return result.hasMemberName; }
            }
            public global::mm.command.SKBuiltinString_t MemberName
            {
                get { return result.MemberName; }
                set { SetMemberName(value); }
            }
            public Builder SetMemberName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasMemberName = true;
                result.memberName_ = value;
                return this;
            }
            public Builder SetMemberName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasMemberName = true;
                result.memberName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeMemberName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasMemberName &&
                    result.memberName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.memberName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.memberName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.memberName_ = value;
                }
                result.hasMemberName = true;
                return this;
            }
            public Builder ClearMemberName()
            {
                PrepareBuilder();
                result.hasMemberName = false;
                result.memberName_ = null;
                return this;
            }

            public bool HasMemberStatus
            {
                get { return result.hasMemberStatus; }
            }
            public int MemberStatus
            {
                get { return result.MemberStatus; }
                set { SetMemberStatus(value); }
            }
            public Builder SetMemberStatus(int value)
            {
                PrepareBuilder();
                result.hasMemberStatus = true;
                result.memberStatus_ = value;
                return this;
            }
            public Builder ClearMemberStatus()
            {
                PrepareBuilder();
                result.hasMemberStatus = false;
                result.memberStatus_ = 0;
                return this;
            }

            public bool HasNickName
            {
                get { return result.hasNickName; }
            }
            public global::mm.command.SKBuiltinString_t NickName
            {
                get { return result.NickName; }
                set { SetNickName(value); }
            }
            public Builder SetNickName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = value;
                return this;
            }
            public Builder SetNickName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeNickName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNickName &&
                    result.nickName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.nickName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.nickName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.nickName_ = value;
                }
                result.hasNickName = true;
                return this;
            }
            public Builder ClearNickName()
            {
                PrepareBuilder();
                result.hasNickName = false;
                result.nickName_ = null;
                return this;
            }

            public bool HasPYInitial
            {
                get { return result.hasPYInitial; }
            }
            public global::mm.command.SKBuiltinString_t PYInitial
            {
                get { return result.PYInitial; }
                set { SetPYInitial(value); }
            }
            public Builder SetPYInitial(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPYInitial = true;
                result.pYInitial_ = value;
                return this;
            }
            public Builder SetPYInitial(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasPYInitial = true;
                result.pYInitial_ = builderForValue.Build();
                return this;
            }
            public Builder MergePYInitial(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasPYInitial &&
                    result.pYInitial_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.pYInitial_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.pYInitial_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.pYInitial_ = value;
                }
                result.hasPYInitial = true;
                return this;
            }
            public Builder ClearPYInitial()
            {
                PrepareBuilder();
                result.hasPYInitial = false;
                result.pYInitial_ = null;
                return this;
            }

            public bool HasQuanPin
            {
                get { return result.hasQuanPin; }
            }
            public global::mm.command.SKBuiltinString_t QuanPin
            {
                get { return result.QuanPin; }
                set { SetQuanPin(value); }
            }
            public Builder SetQuanPin(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasQuanPin = true;
                result.quanPin_ = value;
                return this;
            }
            public Builder SetQuanPin(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasQuanPin = true;
                result.quanPin_ = builderForValue.Build();
                return this;
            }
            public Builder MergeQuanPin(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasQuanPin &&
                    result.quanPin_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.quanPin_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.quanPin_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.quanPin_ = value;
                }
                result.hasQuanPin = true;
                return this;
            }
            public Builder ClearQuanPin()
            {
                PrepareBuilder();
                result.hasQuanPin = false;
                result.quanPin_ = null;
                return this;
            }

            public bool HasSex
            {
                get { return result.hasSex; }
            }
            public int Sex
            {
                get { return result.Sex; }
                set { SetSex(value); }
            }
            public Builder SetSex(int value)
            {
                PrepareBuilder();
                result.hasSex = true;
                result.sex_ = value;
                return this;
            }
            public Builder ClearSex()
            {
                PrepareBuilder();
                result.hasSex = false;
                result.sex_ = 0;
                return this;
            }

            public bool HasRemark
            {
                get { return result.hasRemark; }
            }
            public global::mm.command.SKBuiltinString_t Remark
            {
                get { return result.Remark; }
                set { SetRemark(value); }
            }
            public Builder SetRemark(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRemark = true;
                result.remark_ = value;
                return this;
            }
            public Builder SetRemark(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasRemark = true;
                result.remark_ = builderForValue.Build();
                return this;
            }
            public Builder MergeRemark(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasRemark &&
                    result.remark_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.remark_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.remark_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.remark_ = value;
                }
                result.hasRemark = true;
                return this;
            }
            public Builder ClearRemark()
            {
                PrepareBuilder();
                result.hasRemark = false;
                result.remark_ = null;
                return this;
            }

            public bool HasRemarkPYInitial
            {
                get { return result.hasRemarkPYInitial; }
            }
            public global::mm.command.SKBuiltinString_t RemarkPYInitial
            {
                get { return result.RemarkPYInitial; }
                set { SetRemarkPYInitial(value); }
            }
            public Builder SetRemarkPYInitial(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRemarkPYInitial = true;
                result.remarkPYInitial_ = value;
                return this;
            }
            public Builder SetRemarkPYInitial(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasRemarkPYInitial = true;
                result.remarkPYInitial_ = builderForValue.Build();
                return this;
            }
            public Builder MergeRemarkPYInitial(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasRemarkPYInitial &&
                    result.remarkPYInitial_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.remarkPYInitial_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.remarkPYInitial_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.remarkPYInitial_ = value;
                }
                result.hasRemarkPYInitial = true;
                return this;
            }
            public Builder ClearRemarkPYInitial()
            {
                PrepareBuilder();
                result.hasRemarkPYInitial = false;
                result.remarkPYInitial_ = null;
                return this;
            }

            public bool HasRemarkQuanPin
            {
                get { return result.hasRemarkQuanPin; }
            }
            public global::mm.command.SKBuiltinString_t RemarkQuanPin
            {
                get { return result.RemarkQuanPin; }
                set { SetRemarkQuanPin(value); }
            }
            public Builder SetRemarkQuanPin(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRemarkQuanPin = true;
                result.remarkQuanPin_ = value;
                return this;
            }
            public Builder SetRemarkQuanPin(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasRemarkQuanPin = true;
                result.remarkQuanPin_ = builderForValue.Build();
                return this;
            }
            public Builder MergeRemarkQuanPin(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasRemarkQuanPin &&
                    result.remarkQuanPin_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.remarkQuanPin_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.remarkQuanPin_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.remarkQuanPin_ = value;
                }
                result.hasRemarkQuanPin = true;
                return this;
            }
            public Builder ClearRemarkQuanPin()
            {
                PrepareBuilder();
                result.hasRemarkQuanPin = false;
                result.remarkQuanPin_ = null;
                return this;
            }

            public bool HasContactType
            {
                get { return result.hasContactType; }
            }
            public int ContactType
            {
                get { return result.ContactType; }
                set { SetContactType(value); }
            }
            public Builder SetContactType(int value)
            {
                PrepareBuilder();
                result.hasContactType = true;
                result.contactType_ = value;
                return this;
            }
            public Builder ClearContactType()
            {
                PrepareBuilder();
                result.hasContactType = false;
                result.contactType_ = 0;
                return this;
            }

            public bool HasProvince
            {
                get { return result.hasProvince; }
            }
            public string Province
            {
                get { return result.Province; }
                set { SetProvince(value); }
            }
            public Builder SetProvince(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasProvince = true;
                result.province_ = value;
                return this;
            }
            public Builder ClearProvince()
            {
                PrepareBuilder();
                result.hasProvince = false;
                result.province_ = "";
                return this;
            }

            public bool HasCity
            {
                get { return result.hasCity; }
            }
            public string City
            {
                get { return result.City; }
                set { SetCity(value); }
            }
            public Builder SetCity(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCity = true;
                result.city_ = value;
                return this;
            }
            public Builder ClearCity()
            {
                PrepareBuilder();
                result.hasCity = false;
                result.city_ = "";
                return this;
            }

            public bool HasSignature
            {
                get { return result.hasSignature; }
            }
            public string Signature
            {
                get { return result.Signature; }
                set { SetSignature(value); }
            }
            public Builder SetSignature(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSignature = true;
                result.signature_ = value;
                return this;
            }
            public Builder ClearSignature()
            {
                PrepareBuilder();
                result.hasSignature = false;
                result.signature_ = "";
                return this;
            }

            public bool HasPersonalCard
            {
                get { return result.hasPersonalCard; }
            }
            public int PersonalCard
            {
                get { return result.PersonalCard; }
                set { SetPersonalCard(value); }
            }
            public Builder SetPersonalCard(int value)
            {
                PrepareBuilder();
                result.hasPersonalCard = true;
                result.personalCard_ = value;
                return this;
            }
            public Builder ClearPersonalCard()
            {
                PrepareBuilder();
                result.hasPersonalCard = false;
                result.personalCard_ = 0;
                return this;
            }

            public bool HasVerifyFlag
            {
                get { return result.hasVerifyFlag; }
            }
            public int VerifyFlag
            {
                get { return result.VerifyFlag; }
                set { SetVerifyFlag(value); }
            }
            public Builder SetVerifyFlag(int value)
            {
                PrepareBuilder();
                result.hasVerifyFlag = true;
                result.verifyFlag_ = value;
                return this;
            }
            public Builder ClearVerifyFlag()
            {
                PrepareBuilder();
                result.hasVerifyFlag = false;
                result.verifyFlag_ = 0;
                return this;
            }

            public bool HasVerifyInfo
            {
                get { return result.hasVerifyInfo; }
            }
            public string VerifyInfo
            {
                get { return result.VerifyInfo; }
                set { SetVerifyInfo(value); }
            }
            public Builder SetVerifyInfo(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVerifyInfo = true;
                result.verifyInfo_ = value;
                return this;
            }
            public Builder ClearVerifyInfo()
            {
                PrepareBuilder();
                result.hasVerifyInfo = false;
                result.verifyInfo_ = "";
                return this;
            }

            public bool HasCountry
            {
                get { return result.hasCountry; }
            }
            public string Country
            {
                get { return result.Country; }
                set { SetCountry(value); }
            }
            public Builder SetCountry(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCountry = true;
                result.country_ = value;
                return this;
            }
            public Builder ClearCountry()
            {
                PrepareBuilder();
                result.hasCountry = false;
                result.country_ = "";
                return this;
            }
        }
        static MemberInfo()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ECDHKey : pb::GeneratedMessage<ECDHKey, ECDHKey.Builder>
    {
        private ECDHKey() { }
        private static readonly ECDHKey defaultInstance = new ECDHKey().MakeReadOnly();
        private static readonly string[] _eCDHKeyFieldNames = new string[] { "Key", "NID" };
        private static readonly uint[] _eCDHKeyFieldTags = new uint[] { 18, 8 };
        public static ECDHKey DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ECDHKey DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ECDHKey ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ECDHKey__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ECDHKey, ECDHKey.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ECDHKey__FieldAccessorTable; }
        }

        public const int NIDFieldNumber = 1;
        private bool hasNID;
        private int nID_;
        public bool HasNID
        {
            get { return hasNID; }
        }
        public int NID
        {
            get { return nID_; }
        }

        public const int KeyFieldNumber = 2;
        private bool hasKey;
        private global::mm.command.SKBuiltinBuffer_t key_;
        public bool HasKey
        {
            get { return hasKey; }
        }
        public global::mm.command.SKBuiltinBuffer_t Key
        {
            get { return key_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasNID) return false;
                if (!hasKey) return false;
                if (!Key.IsInitialized) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _eCDHKeyFieldNames;
            if (hasNID)
            {
                output.WriteInt32(1, field_names[1], NID);
            }
            if (hasKey)
            {
                output.WriteMessage(2, field_names[0], Key);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasNID)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, NID);
                }
                if (hasKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, Key);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ECDHKey ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ECDHKey ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ECDHKey ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ECDHKey ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ECDHKey ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ECDHKey ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ECDHKey ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ECDHKey ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ECDHKey ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ECDHKey ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ECDHKey MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ECDHKey prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ECDHKey, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ECDHKey cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ECDHKey result;

            private ECDHKey PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ECDHKey original = result;
                    result = new ECDHKey();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ECDHKey MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ECDHKey.Descriptor; }
            }

            public override ECDHKey DefaultInstanceForType
            {
                get { return global::mm.command.ECDHKey.DefaultInstance; }
            }

            public override ECDHKey BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ECDHKey)
                {
                    return MergeFrom((ECDHKey)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ECDHKey other)
            {
                if (other == global::mm.command.ECDHKey.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasNID)
                {
                    NID = other.NID;
                }
                if (other.HasKey)
                {
                    MergeKey(other.Key);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_eCDHKeyFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _eCDHKeyFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasNID = input.ReadInt32(ref result.nID_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasKey)
                                {
                                    subBuilder.MergeFrom(Key);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Key = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasNID
            {
                get { return result.hasNID; }
            }
            public int NID
            {
                get { return result.NID; }
                set { SetNID(value); }
            }
            public Builder SetNID(int value)
            {
                PrepareBuilder();
                result.hasNID = true;
                result.nID_ = value;
                return this;
            }
            public Builder ClearNID()
            {
                PrepareBuilder();
                result.hasNID = false;
                result.nID_ = 0;
                return this;
            }

            public bool HasKey
            {
                get { return result.hasKey; }
            }
            public global::mm.command.SKBuiltinBuffer_t Key
            {
                get { return result.Key; }
                set { SetKey(value); }
            }
            public Builder SetKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasKey = true;
                result.key_ = value;
                return this;
            }
            public Builder SetKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasKey = true;
                result.key_ = builderForValue.Build();
                return this;
            }
            public Builder MergeKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasKey &&
                    result.key_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.key_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.key_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.key_ = value;
                }
                result.hasKey = true;
                return this;
            }
            public Builder ClearKey()
            {
                PrepareBuilder();
                result.hasKey = false;
                result.key_ = null;
                return this;
            }
        }
        static ECDHKey()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class InitKey : pb::GeneratedMessage<InitKey, InitKey.Builder>
    {
        private InitKey() { }
        private static readonly InitKey defaultInstance = new InitKey().MakeReadOnly();
        private static readonly string[] _initKeyFieldNames = new string[] { "Account", "CliPubECDHKey", "Pwd", "Pwd2", "RandomEncryKey" };
        private static readonly uint[] _initKeyFieldTags = new uint[] { 26, 18, 34, 42, 10 };
        public static InitKey DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override InitKey DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override InitKey ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_InitKey__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<InitKey, InitKey.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_InitKey__FieldAccessorTable; }
        }

        public const int RandomEncryKeyFieldNumber = 1;
        private bool hasRandomEncryKey;
        private global::mm.command.SKBuiltinBuffer_t randomEncryKey_;
        public bool HasRandomEncryKey
        {
            get { return hasRandomEncryKey; }
        }
        public global::mm.command.SKBuiltinBuffer_t RandomEncryKey
        {
            get { return randomEncryKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int CliPubECDHKeyFieldNumber = 2;
        private bool hasCliPubECDHKey;
        private global::mm.command.ECDHKey cliPubECDHKey_;
        public bool HasCliPubECDHKey
        {
            get { return hasCliPubECDHKey; }
        }
        public global::mm.command.ECDHKey CliPubECDHKey
        {
            get { return cliPubECDHKey_ ?? global::mm.command.ECDHKey.DefaultInstance; }
        }

        public const int AccountFieldNumber = 3;
        private bool hasAccount;
        private string account_ = "";
        public bool HasAccount
        {
            get { return hasAccount; }
        }
        public string Account
        {
            get { return account_; }
        }

        public const int PwdFieldNumber = 4;
        private bool hasPwd;
        private string pwd_ = "";
        public bool HasPwd
        {
            get { return hasPwd; }
        }
        public string Pwd
        {
            get { return pwd_; }
        }

        public const int Pwd2FieldNumber = 5;
        private bool hasPwd2;
        private string pwd2_ = "";
        public bool HasPwd2
        {
            get { return hasPwd2; }
        }
        public string Pwd2
        {
            get { return pwd2_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasRandomEncryKey) return false;
                if (!hasCliPubECDHKey) return false;
                if (!RandomEncryKey.IsInitialized) return false;
                if (!CliPubECDHKey.IsInitialized) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _initKeyFieldNames;
            if (hasRandomEncryKey)
            {
                output.WriteMessage(1, field_names[4], RandomEncryKey);
            }
            if (hasCliPubECDHKey)
            {
                output.WriteMessage(2, field_names[1], CliPubECDHKey);
            }
            if (hasAccount)
            {
                output.WriteString(3, field_names[0], Account);
            }
            if (hasPwd)
            {
                output.WriteString(4, field_names[2], Pwd);
            }
            if (hasPwd2)
            {
                output.WriteString(5, field_names[3], Pwd2);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasRandomEncryKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, RandomEncryKey);
                }
                if (hasCliPubECDHKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, CliPubECDHKey);
                }
                if (hasAccount)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Account);
                }
                if (hasPwd)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, Pwd);
                }
                if (hasPwd2)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(5, Pwd2);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static InitKey ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static InitKey ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static InitKey ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static InitKey ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static InitKey ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static InitKey ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static InitKey ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static InitKey ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static InitKey ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static InitKey ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private InitKey MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(InitKey prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<InitKey, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(InitKey cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private InitKey result;

            private InitKey PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    InitKey original = result;
                    result = new InitKey();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override InitKey MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.InitKey.Descriptor; }
            }

            public override InitKey DefaultInstanceForType
            {
                get { return global::mm.command.InitKey.DefaultInstance; }
            }

            public override InitKey BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is InitKey)
                {
                    return MergeFrom((InitKey)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(InitKey other)
            {
                if (other == global::mm.command.InitKey.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasRandomEncryKey)
                {
                    MergeRandomEncryKey(other.RandomEncryKey);
                }
                if (other.HasCliPubECDHKey)
                {
                    MergeCliPubECDHKey(other.CliPubECDHKey);
                }
                if (other.HasAccount)
                {
                    Account = other.Account;
                }
                if (other.HasPwd)
                {
                    Pwd = other.Pwd;
                }
                if (other.HasPwd2)
                {
                    Pwd2 = other.Pwd2;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_initKeyFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _initKeyFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasRandomEncryKey)
                                {
                                    subBuilder.MergeFrom(RandomEncryKey);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                RandomEncryKey = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.ECDHKey.Builder subBuilder = global::mm.command.ECDHKey.CreateBuilder();
                                if (result.hasCliPubECDHKey)
                                {
                                    subBuilder.MergeFrom(CliPubECDHKey);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                CliPubECDHKey = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                result.hasAccount = input.ReadString(ref result.account_);
                                break;
                            }
                        case 34:
                            {
                                result.hasPwd = input.ReadString(ref result.pwd_);
                                break;
                            }
                        case 42:
                            {
                                result.hasPwd2 = input.ReadString(ref result.pwd2_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasRandomEncryKey
            {
                get { return result.hasRandomEncryKey; }
            }
            public global::mm.command.SKBuiltinBuffer_t RandomEncryKey
            {
                get { return result.RandomEncryKey; }
                set { SetRandomEncryKey(value); }
            }
            public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasRandomEncryKey = true;
                result.randomEncryKey_ = value;
                return this;
            }
            public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasRandomEncryKey = true;
                result.randomEncryKey_ = builderForValue.Build();
                return this;
            }
            public Builder MergeRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasRandomEncryKey &&
                    result.randomEncryKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.randomEncryKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.randomEncryKey_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.randomEncryKey_ = value;
                }
                result.hasRandomEncryKey = true;
                return this;
            }
            public Builder ClearRandomEncryKey()
            {
                PrepareBuilder();
                result.hasRandomEncryKey = false;
                result.randomEncryKey_ = null;
                return this;
            }

            public bool HasCliPubECDHKey
            {
                get { return result.hasCliPubECDHKey; }
            }
            public global::mm.command.ECDHKey CliPubECDHKey
            {
                get { return result.CliPubECDHKey; }
                set { SetCliPubECDHKey(value); }
            }
            public Builder SetCliPubECDHKey(global::mm.command.ECDHKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCliPubECDHKey = true;
                result.cliPubECDHKey_ = value;
                return this;
            }
            public Builder SetCliPubECDHKey(global::mm.command.ECDHKey.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasCliPubECDHKey = true;
                result.cliPubECDHKey_ = builderForValue.Build();
                return this;
            }
            public Builder MergeCliPubECDHKey(global::mm.command.ECDHKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasCliPubECDHKey &&
                    result.cliPubECDHKey_ != global::mm.command.ECDHKey.DefaultInstance)
                {
                    result.cliPubECDHKey_ = global::mm.command.ECDHKey.CreateBuilder(result.cliPubECDHKey_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.cliPubECDHKey_ = value;
                }
                result.hasCliPubECDHKey = true;
                return this;
            }
            public Builder ClearCliPubECDHKey()
            {
                PrepareBuilder();
                result.hasCliPubECDHKey = false;
                result.cliPubECDHKey_ = null;
                return this;
            }

            public bool HasAccount
            {
                get { return result.hasAccount; }
            }
            public string Account
            {
                get { return result.Account; }
                set { SetAccount(value); }
            }
            public Builder SetAccount(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAccount = true;
                result.account_ = value;
                return this;
            }
            public Builder ClearAccount()
            {
                PrepareBuilder();
                result.hasAccount = false;
                result.account_ = "";
                return this;
            }

            public bool HasPwd
            {
                get { return result.hasPwd; }
            }
            public string Pwd
            {
                get { return result.Pwd; }
                set { SetPwd(value); }
            }
            public Builder SetPwd(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPwd = true;
                result.pwd_ = value;
                return this;
            }
            public Builder ClearPwd()
            {
                PrepareBuilder();
                result.hasPwd = false;
                result.pwd_ = "";
                return this;
            }

            public bool HasPwd2
            {
                get { return result.hasPwd2; }
            }
            public string Pwd2
            {
                get { return result.Pwd2; }
                set { SetPwd2(value); }
            }
            public Builder SetPwd2(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPwd2 = true;
                result.pwd2_ = value;
                return this;
            }
            public Builder ClearPwd2()
            {
                PrepareBuilder();
                result.hasPwd2 = false;
                result.pwd2_ = "";
                return this;
            }
        }
        static InitKey()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class AutoAuthRsaReqData : pb::GeneratedMessage<AutoAuthRsaReqData, AutoAuthRsaReqData.Builder>
    {
        private AutoAuthRsaReqData() { }
        private static readonly AutoAuthRsaReqData defaultInstance = new AutoAuthRsaReqData().MakeReadOnly();
        private static readonly string[] _autoAuthRsaReqDataFieldNames = new string[] { "AesEncryptKey", "CliPubECDHKey" };
        private static readonly uint[] _autoAuthRsaReqDataFieldTags = new uint[] { 10, 18 };
        public static AutoAuthRsaReqData DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override AutoAuthRsaReqData DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override AutoAuthRsaReqData ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_AutoAuthRsaReqData__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<AutoAuthRsaReqData, AutoAuthRsaReqData.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_AutoAuthRsaReqData__FieldAccessorTable; }
        }

        public const int AesEncryptKeyFieldNumber = 1;
        private bool hasAesEncryptKey;
        private global::mm.command.SKBuiltinBuffer_t aesEncryptKey_;
        public bool HasAesEncryptKey
        {
            get { return hasAesEncryptKey; }
        }
        public global::mm.command.SKBuiltinBuffer_t AesEncryptKey
        {
            get { return aesEncryptKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int CliPubECDHKeyFieldNumber = 2;
        private bool hasCliPubECDHKey;
        private global::mm.command.ECDHKey cliPubECDHKey_;
        public bool HasCliPubECDHKey
        {
            get { return hasCliPubECDHKey; }
        }
        public global::mm.command.ECDHKey CliPubECDHKey
        {
            get { return cliPubECDHKey_ ?? global::mm.command.ECDHKey.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasAesEncryptKey) return false;
                if (!hasCliPubECDHKey) return false;
                if (!AesEncryptKey.IsInitialized) return false;
                if (!CliPubECDHKey.IsInitialized) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _autoAuthRsaReqDataFieldNames;
            if (hasAesEncryptKey)
            {
                output.WriteMessage(1, field_names[0], AesEncryptKey);
            }
            if (hasCliPubECDHKey)
            {
                output.WriteMessage(2, field_names[1], CliPubECDHKey);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasAesEncryptKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, AesEncryptKey);
                }
                if (hasCliPubECDHKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, CliPubECDHKey);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static AutoAuthRsaReqData ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AutoAuthRsaReqData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AutoAuthRsaReqData ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AutoAuthRsaReqData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AutoAuthRsaReqData ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AutoAuthRsaReqData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AutoAuthRsaReqData ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AutoAuthRsaReqData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AutoAuthRsaReqData ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AutoAuthRsaReqData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AutoAuthRsaReqData MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AutoAuthRsaReqData prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<AutoAuthRsaReqData, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(AutoAuthRsaReqData cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private AutoAuthRsaReqData result;

            private AutoAuthRsaReqData PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    AutoAuthRsaReqData original = result;
                    result = new AutoAuthRsaReqData();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override AutoAuthRsaReqData MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.AutoAuthRsaReqData.Descriptor; }
            }

            public override AutoAuthRsaReqData DefaultInstanceForType
            {
                get { return global::mm.command.AutoAuthRsaReqData.DefaultInstance; }
            }

            public override AutoAuthRsaReqData BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is AutoAuthRsaReqData)
                {
                    return MergeFrom((AutoAuthRsaReqData)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(AutoAuthRsaReqData other)
            {
                if (other == global::mm.command.AutoAuthRsaReqData.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasAesEncryptKey)
                {
                    MergeAesEncryptKey(other.AesEncryptKey);
                }
                if (other.HasCliPubECDHKey)
                {
                    MergeCliPubECDHKey(other.CliPubECDHKey);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_autoAuthRsaReqDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _autoAuthRsaReqDataFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasAesEncryptKey)
                                {
                                    subBuilder.MergeFrom(AesEncryptKey);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                AesEncryptKey = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.ECDHKey.Builder subBuilder = global::mm.command.ECDHKey.CreateBuilder();
                                if (result.hasCliPubECDHKey)
                                {
                                    subBuilder.MergeFrom(CliPubECDHKey);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                CliPubECDHKey = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasAesEncryptKey
            {
                get { return result.hasAesEncryptKey; }
            }
            public global::mm.command.SKBuiltinBuffer_t AesEncryptKey
            {
                get { return result.AesEncryptKey; }
                set { SetAesEncryptKey(value); }
            }
            public Builder SetAesEncryptKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAesEncryptKey = true;
                result.aesEncryptKey_ = value;
                return this;
            }
            public Builder SetAesEncryptKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasAesEncryptKey = true;
                result.aesEncryptKey_ = builderForValue.Build();
                return this;
            }
            public Builder MergeAesEncryptKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasAesEncryptKey &&
                    result.aesEncryptKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.aesEncryptKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.aesEncryptKey_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.aesEncryptKey_ = value;
                }
                result.hasAesEncryptKey = true;
                return this;
            }
            public Builder ClearAesEncryptKey()
            {
                PrepareBuilder();
                result.hasAesEncryptKey = false;
                result.aesEncryptKey_ = null;
                return this;
            }

            public bool HasCliPubECDHKey
            {
                get { return result.hasCliPubECDHKey; }
            }
            public global::mm.command.ECDHKey CliPubECDHKey
            {
                get { return result.CliPubECDHKey; }
                set { SetCliPubECDHKey(value); }
            }
            public Builder SetCliPubECDHKey(global::mm.command.ECDHKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasCliPubECDHKey = true;
                result.cliPubECDHKey_ = value;
                return this;
            }
            public Builder SetCliPubECDHKey(global::mm.command.ECDHKey.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasCliPubECDHKey = true;
                result.cliPubECDHKey_ = builderForValue.Build();
                return this;
            }
            public Builder MergeCliPubECDHKey(global::mm.command.ECDHKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasCliPubECDHKey &&
                    result.cliPubECDHKey_ != global::mm.command.ECDHKey.DefaultInstance)
                {
                    result.cliPubECDHKey_ = global::mm.command.ECDHKey.CreateBuilder(result.cliPubECDHKey_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.cliPubECDHKey_ = value;
                }
                result.hasCliPubECDHKey = true;
                return this;
            }
            public Builder ClearCliPubECDHKey()
            {
                PrepareBuilder();
                result.hasCliPubECDHKey = false;
                result.cliPubECDHKey_ = null;
                return this;
            }
        }
        static AutoAuthRsaReqData()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class DataItem : pb::GeneratedMessage<DataItem, DataItem.Builder>
    {
        private DataItem() { }
        private static readonly DataItem defaultInstance = new DataItem().MakeReadOnly();
        private static readonly string[] _dataItemFieldNames = new string[] { "KSid", "str1", "str2", "str3" };
        private static readonly uint[] _dataItemFieldTags = new uint[] { 34, 10, 18, 26 };
        public static DataItem DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override DataItem DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override DataItem ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_DataItem__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<DataItem, DataItem.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_DataItem__FieldAccessorTable; }
        }

        public const int Str1FieldNumber = 1;
        private bool hasStr1;
        private string str1_ = "";
        public bool HasStr1
        {
            get { return hasStr1; }
        }
        public string Str1
        {
            get { return str1_; }
        }

        public const int Str2FieldNumber = 2;
        private bool hasStr2;
        private string str2_ = "";
        public bool HasStr2
        {
            get { return hasStr2; }
        }
        public string Str2
        {
            get { return str2_; }
        }

        public const int Str3FieldNumber = 3;
        private bool hasStr3;
        private string str3_ = "";
        public bool HasStr3
        {
            get { return hasStr3; }
        }
        public string Str3
        {
            get { return str3_; }
        }

        public const int KSidFieldNumber = 4;
        private bool hasKSid;
        private global::mm.command.SKBuiltinBuffer_t kSid_;
        public bool HasKSid
        {
            get { return hasKSid; }
        }
        public global::mm.command.SKBuiltinBuffer_t KSid
        {
            get { return kSid_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasKSid) return false;
                if (!KSid.IsInitialized) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _dataItemFieldNames;
            if (hasStr1)
            {
                output.WriteString(1, field_names[1], Str1);
            }
            if (hasStr2)
            {
                output.WriteString(2, field_names[2], Str2);
            }
            if (hasStr3)
            {
                output.WriteString(3, field_names[3], Str3);
            }
            if (hasKSid)
            {
                output.WriteMessage(4, field_names[0], KSid);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasStr1)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Str1);
                }
                if (hasStr2)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Str2);
                }
                if (hasStr3)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Str3);
                }
                if (hasKSid)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, KSid);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static DataItem ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DataItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DataItem ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DataItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DataItem ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DataItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DataItem ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DataItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DataItem ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DataItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DataItem MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DataItem prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<DataItem, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(DataItem cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private DataItem result;

            private DataItem PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    DataItem original = result;
                    result = new DataItem();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override DataItem MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.DataItem.Descriptor; }
            }

            public override DataItem DefaultInstanceForType
            {
                get { return global::mm.command.DataItem.DefaultInstance; }
            }

            public override DataItem BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is DataItem)
                {
                    return MergeFrom((DataItem)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(DataItem other)
            {
                if (other == global::mm.command.DataItem.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasStr1)
                {
                    Str1 = other.Str1;
                }
                if (other.HasStr2)
                {
                    Str2 = other.Str2;
                }
                if (other.HasStr3)
                {
                    Str3 = other.Str3;
                }
                if (other.HasKSid)
                {
                    MergeKSid(other.KSid);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_dataItemFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _dataItemFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasStr1 = input.ReadString(ref result.str1_);
                                break;
                            }
                        case 18:
                            {
                                result.hasStr2 = input.ReadString(ref result.str2_);
                                break;
                            }
                        case 26:
                            {
                                result.hasStr3 = input.ReadString(ref result.str3_);
                                break;
                            }
                        case 34:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasKSid)
                                {
                                    subBuilder.MergeFrom(KSid);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                KSid = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasStr1
            {
                get { return result.hasStr1; }
            }
            public string Str1
            {
                get { return result.Str1; }
                set { SetStr1(value); }
            }
            public Builder SetStr1(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr1 = true;
                result.str1_ = value;
                return this;
            }
            public Builder ClearStr1()
            {
                PrepareBuilder();
                result.hasStr1 = false;
                result.str1_ = "";
                return this;
            }

            public bool HasStr2
            {
                get { return result.hasStr2; }
            }
            public string Str2
            {
                get { return result.Str2; }
                set { SetStr2(value); }
            }
            public Builder SetStr2(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr2 = true;
                result.str2_ = value;
                return this;
            }
            public Builder ClearStr2()
            {
                PrepareBuilder();
                result.hasStr2 = false;
                result.str2_ = "";
                return this;
            }

            public bool HasStr3
            {
                get { return result.hasStr3; }
            }
            public string Str3
            {
                get { return result.Str3; }
                set { SetStr3(value); }
            }
            public Builder SetStr3(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr3 = true;
                result.str3_ = value;
                return this;
            }
            public Builder ClearStr3()
            {
                PrepareBuilder();
                result.hasStr3 = false;
                result.str3_ = "";
                return this;
            }

            public bool HasKSid
            {
                get { return result.hasKSid; }
            }
            public global::mm.command.SKBuiltinBuffer_t KSid
            {
                get { return result.KSid; }
                set { SetKSid(value); }
            }
            public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasKSid = true;
                result.kSid_ = value;
                return this;
            }
            public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasKSid = true;
                result.kSid_ = builderForValue.Build();
                return this;
            }
            public Builder MergeKSid(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasKSid &&
                    result.kSid_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.kSid_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.kSid_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.kSid_ = value;
                }
                result.hasKSid = true;
                return this;
            }
            public Builder ClearKSid()
            {
                PrepareBuilder();
                result.hasKSid = false;
                result.kSid_ = null;
                return this;
            }
        }
        static DataItem()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class DataItem2 : pb::GeneratedMessage<DataItem2, DataItem2.Builder>
    {
        private DataItem2() { }
        private static readonly DataItem2 defaultInstance = new DataItem2().MakeReadOnly();
        private static readonly string[] _dataItem2FieldNames = new string[] { "str1", "str2" };
        private static readonly uint[] _dataItem2FieldTags = new uint[] { 10, 18 };
        public static DataItem2 DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override DataItem2 DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override DataItem2 ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_DataItem2__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<DataItem2, DataItem2.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_DataItem2__FieldAccessorTable; }
        }

        public const int Str1FieldNumber = 1;
        private bool hasStr1;
        private string str1_ = "";
        public bool HasStr1
        {
            get { return hasStr1; }
        }
        public string Str1
        {
            get { return str1_; }
        }

        public const int Str2FieldNumber = 2;
        private bool hasStr2;
        private string str2_ = "";
        public bool HasStr2
        {
            get { return hasStr2; }
        }
        public string Str2
        {
            get { return str2_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _dataItem2FieldNames;
            if (hasStr1)
            {
                output.WriteString(1, field_names[0], Str1);
            }
            if (hasStr2)
            {
                output.WriteString(2, field_names[1], Str2);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasStr1)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Str1);
                }
                if (hasStr2)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Str2);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static DataItem2 ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DataItem2 ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DataItem2 ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DataItem2 ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DataItem2 ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DataItem2 ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DataItem2 ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DataItem2 ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DataItem2 ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DataItem2 ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DataItem2 MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DataItem2 prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<DataItem2, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(DataItem2 cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private DataItem2 result;

            private DataItem2 PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    DataItem2 original = result;
                    result = new DataItem2();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override DataItem2 MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.DataItem2.Descriptor; }
            }

            public override DataItem2 DefaultInstanceForType
            {
                get { return global::mm.command.DataItem2.DefaultInstance; }
            }

            public override DataItem2 BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is DataItem2)
                {
                    return MergeFrom((DataItem2)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(DataItem2 other)
            {
                if (other == global::mm.command.DataItem2.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasStr1)
                {
                    Str1 = other.Str1;
                }
                if (other.HasStr2)
                {
                    Str2 = other.Str2;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_dataItem2FieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _dataItem2FieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasStr1 = input.ReadString(ref result.str1_);
                                break;
                            }
                        case 18:
                            {
                                result.hasStr2 = input.ReadString(ref result.str2_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasStr1
            {
                get { return result.hasStr1; }
            }
            public string Str1
            {
                get { return result.Str1; }
                set { SetStr1(value); }
            }
            public Builder SetStr1(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr1 = true;
                result.str1_ = value;
                return this;
            }
            public Builder ClearStr1()
            {
                PrepareBuilder();
                result.hasStr1 = false;
                result.str1_ = "";
                return this;
            }

            public bool HasStr2
            {
                get { return result.hasStr2; }
            }
            public string Str2
            {
                get { return result.Str2; }
                set { SetStr2(value); }
            }
            public Builder SetStr2(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr2 = true;
                result.str2_ = value;
                return this;
            }
            public Builder ClearStr2()
            {
                PrepareBuilder();
                result.hasStr2 = false;
                result.str2_ = "";
                return this;
            }
        }
        static DataItem2()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ExtData : pb::GeneratedMessage<ExtData, ExtData.Builder>
    {
        private ExtData() { }
        private static readonly ExtData defaultInstance = new ExtData().MakeReadOnly();
        private static readonly string[] _extDataFieldNames = new string[] { "Buffer1", "Buffer4", "Buffer5", "Data3", "KSid", "int6", "str7" };
        private static readonly uint[] _extDataFieldTags = new uint[] { 10, 34, 42, 26, 18, 48, 58 };
        public static ExtData DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ExtData DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ExtData ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ExtData__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ExtData, ExtData.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ExtData__FieldAccessorTable; }
        }

        public const int Buffer1FieldNumber = 1;
        private bool hasBuffer1;
        private global::mm.command.SKBuiltinBuffer_t buffer1_;
        public bool HasBuffer1
        {
            get { return hasBuffer1; }
        }
        public global::mm.command.SKBuiltinBuffer_t Buffer1
        {
            get { return buffer1_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int KSidFieldNumber = 2;
        private bool hasKSid;
        private global::mm.command.DataItem kSid_;
        public bool HasKSid
        {
            get { return hasKSid; }
        }
        public global::mm.command.DataItem KSid
        {
            get { return kSid_ ?? global::mm.command.DataItem.DefaultInstance; }
        }

        public const int Data3FieldNumber = 3;
        private bool hasData3;
        private global::mm.command.DataItem2 data3_;
        public bool HasData3
        {
            get { return hasData3; }
        }
        public global::mm.command.DataItem2 Data3
        {
            get { return data3_ ?? global::mm.command.DataItem2.DefaultInstance; }
        }

        public const int Buffer4FieldNumber = 4;
        private bool hasBuffer4;
        private global::mm.command.SKBuiltinBuffer_t buffer4_;
        public bool HasBuffer4
        {
            get { return hasBuffer4; }
        }
        public global::mm.command.SKBuiltinBuffer_t Buffer4
        {
            get { return buffer4_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int Buffer5FieldNumber = 5;
        private bool hasBuffer5;
        private global::mm.command.SKBuiltinBuffer_t buffer5_;
        public bool HasBuffer5
        {
            get { return hasBuffer5; }
        }
        public global::mm.command.SKBuiltinBuffer_t Buffer5
        {
            get { return buffer5_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int Int6FieldNumber = 6;
        private bool hasInt6;
        private int int6_;
        public bool HasInt6
        {
            get { return hasInt6; }
        }
        public int Int6
        {
            get { return int6_; }
        }

        public const int Str7FieldNumber = 7;
        private bool hasStr7;
        private string str7_ = "";
        public bool HasStr7
        {
            get { return hasStr7; }
        }
        public string Str7
        {
            get { return str7_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasBuffer1)
                {
                    if (!Buffer1.IsInitialized) return false;
                }
                if (HasKSid)
                {
                    if (!KSid.IsInitialized) return false;
                }
                if (HasBuffer4)
                {
                    if (!Buffer4.IsInitialized) return false;
                }
                if (HasBuffer5)
                {
                    if (!Buffer5.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _extDataFieldNames;
            if (hasBuffer1)
            {
                output.WriteMessage(1, field_names[0], Buffer1);
            }
            if (hasKSid)
            {
                output.WriteMessage(2, field_names[4], KSid);
            }
            if (hasData3)
            {
                output.WriteMessage(3, field_names[3], Data3);
            }
            if (hasBuffer4)
            {
                output.WriteMessage(4, field_names[1], Buffer4);
            }
            if (hasBuffer5)
            {
                output.WriteMessage(5, field_names[2], Buffer5);
            }
            if (hasInt6)
            {
                output.WriteInt32(6, field_names[5], Int6);
            }
            if (hasStr7)
            {
                output.WriteString(7, field_names[6], Str7);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasBuffer1)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Buffer1);
                }
                if (hasKSid)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, KSid);
                }
                if (hasData3)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, Data3);
                }
                if (hasBuffer4)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, Buffer4);
                }
                if (hasBuffer5)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(5, Buffer5);
                }
                if (hasInt6)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(6, Int6);
                }
                if (hasStr7)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(7, Str7);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ExtData ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExtData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExtData ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExtData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExtData ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExtData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ExtData ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ExtData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ExtData ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExtData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ExtData MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ExtData prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ExtData, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ExtData cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ExtData result;

            private ExtData PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ExtData original = result;
                    result = new ExtData();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ExtData MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ExtData.Descriptor; }
            }

            public override ExtData DefaultInstanceForType
            {
                get { return global::mm.command.ExtData.DefaultInstance; }
            }

            public override ExtData BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ExtData)
                {
                    return MergeFrom((ExtData)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ExtData other)
            {
                if (other == global::mm.command.ExtData.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasBuffer1)
                {
                    MergeBuffer1(other.Buffer1);
                }
                if (other.HasKSid)
                {
                    MergeKSid(other.KSid);
                }
                if (other.HasData3)
                {
                    MergeData3(other.Data3);
                }
                if (other.HasBuffer4)
                {
                    MergeBuffer4(other.Buffer4);
                }
                if (other.HasBuffer5)
                {
                    MergeBuffer5(other.Buffer5);
                }
                if (other.HasInt6)
                {
                    Int6 = other.Int6;
                }
                if (other.HasStr7)
                {
                    Str7 = other.Str7;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_extDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _extDataFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasBuffer1)
                                {
                                    subBuilder.MergeFrom(Buffer1);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Buffer1 = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.DataItem.Builder subBuilder = global::mm.command.DataItem.CreateBuilder();
                                if (result.hasKSid)
                                {
                                    subBuilder.MergeFrom(KSid);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                KSid = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.DataItem2.Builder subBuilder = global::mm.command.DataItem2.CreateBuilder();
                                if (result.hasData3)
                                {
                                    subBuilder.MergeFrom(Data3);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Data3 = subBuilder.BuildPartial();
                                break;
                            }
                        case 34:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasBuffer4)
                                {
                                    subBuilder.MergeFrom(Buffer4);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Buffer4 = subBuilder.BuildPartial();
                                break;
                            }
                        case 42:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasBuffer5)
                                {
                                    subBuilder.MergeFrom(Buffer5);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Buffer5 = subBuilder.BuildPartial();
                                break;
                            }
                        case 48:
                            {
                                result.hasInt6 = input.ReadInt32(ref result.int6_);
                                break;
                            }
                        case 58:
                            {
                                result.hasStr7 = input.ReadString(ref result.str7_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasBuffer1
            {
                get { return result.hasBuffer1; }
            }
            public global::mm.command.SKBuiltinBuffer_t Buffer1
            {
                get { return result.Buffer1; }
                set { SetBuffer1(value); }
            }
            public Builder SetBuffer1(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBuffer1 = true;
                result.buffer1_ = value;
                return this;
            }
            public Builder SetBuffer1(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasBuffer1 = true;
                result.buffer1_ = builderForValue.Build();
                return this;
            }
            public Builder MergeBuffer1(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasBuffer1 &&
                    result.buffer1_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.buffer1_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.buffer1_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.buffer1_ = value;
                }
                result.hasBuffer1 = true;
                return this;
            }
            public Builder ClearBuffer1()
            {
                PrepareBuilder();
                result.hasBuffer1 = false;
                result.buffer1_ = null;
                return this;
            }

            public bool HasKSid
            {
                get { return result.hasKSid; }
            }
            public global::mm.command.DataItem KSid
            {
                get { return result.KSid; }
                set { SetKSid(value); }
            }
            public Builder SetKSid(global::mm.command.DataItem value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasKSid = true;
                result.kSid_ = value;
                return this;
            }
            public Builder SetKSid(global::mm.command.DataItem.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasKSid = true;
                result.kSid_ = builderForValue.Build();
                return this;
            }
            public Builder MergeKSid(global::mm.command.DataItem value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasKSid &&
                    result.kSid_ != global::mm.command.DataItem.DefaultInstance)
                {
                    result.kSid_ = global::mm.command.DataItem.CreateBuilder(result.kSid_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.kSid_ = value;
                }
                result.hasKSid = true;
                return this;
            }
            public Builder ClearKSid()
            {
                PrepareBuilder();
                result.hasKSid = false;
                result.kSid_ = null;
                return this;
            }

            public bool HasData3
            {
                get { return result.hasData3; }
            }
            public global::mm.command.DataItem2 Data3
            {
                get { return result.Data3; }
                set { SetData3(value); }
            }
            public Builder SetData3(global::mm.command.DataItem2 value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasData3 = true;
                result.data3_ = value;
                return this;
            }
            public Builder SetData3(global::mm.command.DataItem2.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasData3 = true;
                result.data3_ = builderForValue.Build();
                return this;
            }
            public Builder MergeData3(global::mm.command.DataItem2 value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasData3 &&
                    result.data3_ != global::mm.command.DataItem2.DefaultInstance)
                {
                    result.data3_ = global::mm.command.DataItem2.CreateBuilder(result.data3_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.data3_ = value;
                }
                result.hasData3 = true;
                return this;
            }
            public Builder ClearData3()
            {
                PrepareBuilder();
                result.hasData3 = false;
                result.data3_ = null;
                return this;
            }

            public bool HasBuffer4
            {
                get { return result.hasBuffer4; }
            }
            public global::mm.command.SKBuiltinBuffer_t Buffer4
            {
                get { return result.Buffer4; }
                set { SetBuffer4(value); }
            }
            public Builder SetBuffer4(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBuffer4 = true;
                result.buffer4_ = value;
                return this;
            }
            public Builder SetBuffer4(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasBuffer4 = true;
                result.buffer4_ = builderForValue.Build();
                return this;
            }
            public Builder MergeBuffer4(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasBuffer4 &&
                    result.buffer4_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.buffer4_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.buffer4_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.buffer4_ = value;
                }
                result.hasBuffer4 = true;
                return this;
            }
            public Builder ClearBuffer4()
            {
                PrepareBuilder();
                result.hasBuffer4 = false;
                result.buffer4_ = null;
                return this;
            }

            public bool HasBuffer5
            {
                get { return result.hasBuffer5; }
            }
            public global::mm.command.SKBuiltinBuffer_t Buffer5
            {
                get { return result.Buffer5; }
                set { SetBuffer5(value); }
            }
            public Builder SetBuffer5(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBuffer5 = true;
                result.buffer5_ = value;
                return this;
            }
            public Builder SetBuffer5(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasBuffer5 = true;
                result.buffer5_ = builderForValue.Build();
                return this;
            }
            public Builder MergeBuffer5(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasBuffer5 &&
                    result.buffer5_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.buffer5_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.buffer5_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.buffer5_ = value;
                }
                result.hasBuffer5 = true;
                return this;
            }
            public Builder ClearBuffer5()
            {
                PrepareBuilder();
                result.hasBuffer5 = false;
                result.buffer5_ = null;
                return this;
            }

            public bool HasInt6
            {
                get { return result.hasInt6; }
            }
            public int Int6
            {
                get { return result.Int6; }
                set { SetInt6(value); }
            }
            public Builder SetInt6(int value)
            {
                PrepareBuilder();
                result.hasInt6 = true;
                result.int6_ = value;
                return this;
            }
            public Builder ClearInt6()
            {
                PrepareBuilder();
                result.hasInt6 = false;
                result.int6_ = 0;
                return this;
            }

            public bool HasStr7
            {
                get { return result.hasStr7; }
            }
            public string Str7
            {
                get { return result.Str7; }
                set { SetStr7(value); }
            }
            public Builder SetStr7(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr7 = true;
                result.str7_ = value;
                return this;
            }
            public Builder ClearStr7()
            {
                PrepareBuilder();
                result.hasStr7 = false;
                result.str7_ = "";
                return this;
            }
        }
        static ExtData()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class KSidData : pb::GeneratedMessage<KSidData, KSidData.Builder>
    {
        private KSidData() { }
        private static readonly KSidData defaultInstance = new KSidData().MakeReadOnly();
        private static readonly string[] _kSidDataFieldNames = new string[] { "ImgBuf", "KSid", "str1", "str3" };
        private static readonly uint[] _kSidDataFieldTags = new uint[] { 34, 18, 10, 26 };
        public static KSidData DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override KSidData DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override KSidData ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_KSidData__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<KSidData, KSidData.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_KSidData__FieldAccessorTable; }
        }

        public const int Str1FieldNumber = 1;
        private bool hasStr1;
        private string str1_ = "";
        public bool HasStr1
        {
            get { return hasStr1; }
        }
        public string Str1
        {
            get { return str1_; }
        }

        public const int KSidFieldNumber = 2;
        private bool hasKSid;
        private global::mm.command.SKBuiltinBuffer_t kSid_;
        public bool HasKSid
        {
            get { return hasKSid; }
        }
        public global::mm.command.SKBuiltinBuffer_t KSid
        {
            get { return kSid_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int Str3FieldNumber = 3;
        private bool hasStr3;
        private string str3_ = "";
        public bool HasStr3
        {
            get { return hasStr3; }
        }
        public string Str3
        {
            get { return str3_; }
        }

        public const int ImgBufFieldNumber = 4;
        private bool hasImgBuf;
        private global::mm.command.SKBuiltinBuffer_t imgBuf_;
        public bool HasImgBuf
        {
            get { return hasImgBuf; }
        }
        public global::mm.command.SKBuiltinBuffer_t ImgBuf
        {
            get { return imgBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasKSid)
                {
                    if (!KSid.IsInitialized) return false;
                }
                if (HasImgBuf)
                {
                    if (!ImgBuf.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _kSidDataFieldNames;
            if (hasStr1)
            {
                output.WriteString(1, field_names[2], Str1);
            }
            if (hasKSid)
            {
                output.WriteMessage(2, field_names[1], KSid);
            }
            if (hasStr3)
            {
                output.WriteString(3, field_names[3], Str3);
            }
            if (hasImgBuf)
            {
                output.WriteMessage(4, field_names[0], ImgBuf);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasStr1)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Str1);
                }
                if (hasKSid)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, KSid);
                }
                if (hasStr3)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Str3);
                }
                if (hasImgBuf)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, ImgBuf);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static KSidData ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KSidData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KSidData ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static KSidData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static KSidData ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KSidData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static KSidData ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static KSidData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static KSidData ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static KSidData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private KSidData MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(KSidData prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<KSidData, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(KSidData cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private KSidData result;

            private KSidData PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    KSidData original = result;
                    result = new KSidData();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override KSidData MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.KSidData.Descriptor; }
            }

            public override KSidData DefaultInstanceForType
            {
                get { return global::mm.command.KSidData.DefaultInstance; }
            }

            public override KSidData BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is KSidData)
                {
                    return MergeFrom((KSidData)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(KSidData other)
            {
                if (other == global::mm.command.KSidData.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasStr1)
                {
                    Str1 = other.Str1;
                }
                if (other.HasKSid)
                {
                    MergeKSid(other.KSid);
                }
                if (other.HasStr3)
                {
                    Str3 = other.Str3;
                }
                if (other.HasImgBuf)
                {
                    MergeImgBuf(other.ImgBuf);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_kSidDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _kSidDataFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasStr1 = input.ReadString(ref result.str1_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasKSid)
                                {
                                    subBuilder.MergeFrom(KSid);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                KSid = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                result.hasStr3 = input.ReadString(ref result.str3_);
                                break;
                            }
                        case 34:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasImgBuf)
                                {
                                    subBuilder.MergeFrom(ImgBuf);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                ImgBuf = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasStr1
            {
                get { return result.hasStr1; }
            }
            public string Str1
            {
                get { return result.Str1; }
                set { SetStr1(value); }
            }
            public Builder SetStr1(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr1 = true;
                result.str1_ = value;
                return this;
            }
            public Builder ClearStr1()
            {
                PrepareBuilder();
                result.hasStr1 = false;
                result.str1_ = "";
                return this;
            }

            public bool HasKSid
            {
                get { return result.hasKSid; }
            }
            public global::mm.command.SKBuiltinBuffer_t KSid
            {
                get { return result.KSid; }
                set { SetKSid(value); }
            }
            public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasKSid = true;
                result.kSid_ = value;
                return this;
            }
            public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasKSid = true;
                result.kSid_ = builderForValue.Build();
                return this;
            }
            public Builder MergeKSid(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasKSid &&
                    result.kSid_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.kSid_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.kSid_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.kSid_ = value;
                }
                result.hasKSid = true;
                return this;
            }
            public Builder ClearKSid()
            {
                PrepareBuilder();
                result.hasKSid = false;
                result.kSid_ = null;
                return this;
            }

            public bool HasStr3
            {
                get { return result.hasStr3; }
            }
            public string Str3
            {
                get { return result.Str3; }
                set { SetStr3(value); }
            }
            public Builder SetStr3(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr3 = true;
                result.str3_ = value;
                return this;
            }
            public Builder ClearStr3()
            {
                PrepareBuilder();
                result.hasStr3 = false;
                result.str3_ = "";
                return this;
            }

            public bool HasImgBuf
            {
                get { return result.hasImgBuf; }
            }
            public global::mm.command.SKBuiltinBuffer_t ImgBuf
            {
                get { return result.ImgBuf; }
                set { SetImgBuf(value); }
            }
            public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasImgBuf = true;
                result.imgBuf_ = value;
                return this;
            }
            public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasImgBuf = true;
                result.imgBuf_ = builderForValue.Build();
                return this;
            }
            public Builder MergeImgBuf(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasImgBuf &&
                    result.imgBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.imgBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.imgBuf_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.imgBuf_ = value;
                }
                result.hasImgBuf = true;
                return this;
            }
            public Builder ClearImgBuf()
            {
                PrepareBuilder();
                result.hasImgBuf = false;
                result.imgBuf_ = null;
                return this;
            }
        }
        static KSidData()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ImgPic : pb::GeneratedMessage<ImgPic, ImgPic.Builder>
    {
        private ImgPic() { }
        private static readonly ImgPic defaultInstance = new ImgPic().MakeReadOnly();
        private static readonly string[] _imgPicFieldNames = new string[] { "VerifyBuff", "data" };
        private static readonly uint[] _imgPicFieldTags = new uint[] { 18, 10 };
        public static ImgPic DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ImgPic DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ImgPic ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ImgPic__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ImgPic, ImgPic.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ImgPic__FieldAccessorTable; }
        }

        public const int DataFieldNumber = 1;
        private bool hasData;
        private string data_ = "";
        public bool HasData
        {
            get { return hasData; }
        }
        public string Data
        {
            get { return data_; }
        }

        public const int VerifyBuffFieldNumber = 2;
        private bool hasVerifyBuff;
        private global::mm.command.SKBuiltinBuffer_t verifyBuff_;
        public bool HasVerifyBuff
        {
            get { return hasVerifyBuff; }
        }
        public global::mm.command.SKBuiltinBuffer_t VerifyBuff
        {
            get { return verifyBuff_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasVerifyBuff) return false;
                if (!VerifyBuff.IsInitialized) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _imgPicFieldNames;
            if (hasData)
            {
                output.WriteString(1, field_names[1], Data);
            }
            if (hasVerifyBuff)
            {
                output.WriteMessage(2, field_names[0], VerifyBuff);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasData)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Data);
                }
                if (hasVerifyBuff)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, VerifyBuff);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ImgPic ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ImgPic ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ImgPic ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ImgPic ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ImgPic ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ImgPic ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ImgPic ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ImgPic ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ImgPic ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ImgPic ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ImgPic MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ImgPic prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ImgPic, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ImgPic cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ImgPic result;

            private ImgPic PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ImgPic original = result;
                    result = new ImgPic();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ImgPic MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ImgPic.Descriptor; }
            }

            public override ImgPic DefaultInstanceForType
            {
                get { return global::mm.command.ImgPic.DefaultInstance; }
            }

            public override ImgPic BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ImgPic)
                {
                    return MergeFrom((ImgPic)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ImgPic other)
            {
                if (other == global::mm.command.ImgPic.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasData)
                {
                    Data = other.Data;
                }
                if (other.HasVerifyBuff)
                {
                    MergeVerifyBuff(other.VerifyBuff);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_imgPicFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _imgPicFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasData = input.ReadString(ref result.data_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasVerifyBuff)
                                {
                                    subBuilder.MergeFrom(VerifyBuff);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                VerifyBuff = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasData
            {
                get { return result.hasData; }
            }
            public string Data
            {
                get { return result.Data; }
                set { SetData(value); }
            }
            public Builder SetData(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasData = true;
                result.data_ = value;
                return this;
            }
            public Builder ClearData()
            {
                PrepareBuilder();
                result.hasData = false;
                result.data_ = "";
                return this;
            }

            public bool HasVerifyBuff
            {
                get { return result.hasVerifyBuff; }
            }
            public global::mm.command.SKBuiltinBuffer_t VerifyBuff
            {
                get { return result.VerifyBuff; }
                set { SetVerifyBuff(value); }
            }
            public Builder SetVerifyBuff(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasVerifyBuff = true;
                result.verifyBuff_ = value;
                return this;
            }
            public Builder SetVerifyBuff(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasVerifyBuff = true;
                result.verifyBuff_ = builderForValue.Build();
                return this;
            }
            public Builder MergeVerifyBuff(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasVerifyBuff &&
                    result.verifyBuff_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.verifyBuff_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.verifyBuff_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.verifyBuff_ = value;
                }
                result.hasVerifyBuff = true;
                return this;
            }
            public Builder ClearVerifyBuff()
            {
                PrepareBuilder();
                result.hasVerifyBuff = false;
                result.verifyBuff_ = null;
                return this;
            }
        }
        static ImgPic()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ShowStyleKey : pb::GeneratedMessage<ShowStyleKey, ShowStyleKey.Builder>
    {
        private ShowStyleKey() { }
        private static readonly ShowStyleKey defaultInstance = new ShowStyleKey().MakeReadOnly();
        private static readonly string[] _showStyleKeyFieldNames = new string[] { "Key", "KeyNumb" };
        private static readonly uint[] _showStyleKeyFieldTags = new uint[] { 18, 8 };
        public static ShowStyleKey DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ShowStyleKey DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ShowStyleKey ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ShowStyleKey__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ShowStyleKey, ShowStyleKey.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ShowStyleKey__FieldAccessorTable; }
        }

        public const int KeyNumbFieldNumber = 1;
        private bool hasKeyNumb;
        private int keyNumb_;
        public bool HasKeyNumb
        {
            get { return hasKeyNumb; }
        }
        public int KeyNumb
        {
            get { return keyNumb_; }
        }

        public const int KeyFieldNumber = 2;
        private pbc::PopsicleList<global::mm.command.StyleKeyItem> key_ = new pbc::PopsicleList<global::mm.command.StyleKeyItem>();
        public scg::IList<global::mm.command.StyleKeyItem> KeyList
        {
            get { return key_; }
        }
        public int KeyCount
        {
            get { return key_.Count; }
        }
        public global::mm.command.StyleKeyItem GetKey(int index)
        {
            return key_[index];
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasKeyNumb) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _showStyleKeyFieldNames;
            if (hasKeyNumb)
            {
                output.WriteInt32(1, field_names[1], KeyNumb);
            }
            if (key_.Count > 0)
            {
                output.WriteMessageArray(2, field_names[0], key_);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasKeyNumb)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, KeyNumb);
                }
                foreach (global::mm.command.StyleKeyItem element in KeyList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ShowStyleKey ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ShowStyleKey ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ShowStyleKey ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ShowStyleKey ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ShowStyleKey ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ShowStyleKey ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ShowStyleKey ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ShowStyleKey ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ShowStyleKey ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ShowStyleKey ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ShowStyleKey MakeReadOnly()
        {
            key_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ShowStyleKey prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ShowStyleKey, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ShowStyleKey cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ShowStyleKey result;

            private ShowStyleKey PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ShowStyleKey original = result;
                    result = new ShowStyleKey();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ShowStyleKey MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ShowStyleKey.Descriptor; }
            }

            public override ShowStyleKey DefaultInstanceForType
            {
                get { return global::mm.command.ShowStyleKey.DefaultInstance; }
            }

            public override ShowStyleKey BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ShowStyleKey)
                {
                    return MergeFrom((ShowStyleKey)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ShowStyleKey other)
            {
                if (other == global::mm.command.ShowStyleKey.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasKeyNumb)
                {
                    KeyNumb = other.KeyNumb;
                }
                if (other.key_.Count != 0)
                {
                    result.key_.Add(other.key_);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_showStyleKeyFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _showStyleKeyFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasKeyNumb = input.ReadInt32(ref result.keyNumb_);
                                break;
                            }
                        case 18:
                            {
                                input.ReadMessageArray(tag, field_name, result.key_, global::mm.command.StyleKeyItem.DefaultInstance, extensionRegistry);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasKeyNumb
            {
                get { return result.hasKeyNumb; }
            }
            public int KeyNumb
            {
                get { return result.KeyNumb; }
                set { SetKeyNumb(value); }
            }
            public Builder SetKeyNumb(int value)
            {
                PrepareBuilder();
                result.hasKeyNumb = true;
                result.keyNumb_ = value;
                return this;
            }
            public Builder ClearKeyNumb()
            {
                PrepareBuilder();
                result.hasKeyNumb = false;
                result.keyNumb_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.StyleKeyItem> KeyList
            {
                get { return PrepareBuilder().key_; }
            }
            public int KeyCount
            {
                get { return result.KeyCount; }
            }
            public global::mm.command.StyleKeyItem GetKey(int index)
            {
                return result.GetKey(index);
            }
            public Builder SetKey(int index, global::mm.command.StyleKeyItem value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.key_[index] = value;
                return this;
            }
            public Builder SetKey(int index, global::mm.command.StyleKeyItem.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.key_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddKey(global::mm.command.StyleKeyItem value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.key_.Add(value);
                return this;
            }
            public Builder AddKey(global::mm.command.StyleKeyItem.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.key_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeKey(scg::IEnumerable<global::mm.command.StyleKeyItem> values)
            {
                PrepareBuilder();
                result.key_.Add(values);
                return this;
            }
            public Builder ClearKey()
            {
                PrepareBuilder();
                result.key_.Clear();
                return this;
            }
        }
        static ShowStyleKey()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class StyleKeyItem : pb::GeneratedMessage<StyleKeyItem, StyleKeyItem.Builder>
    {
        private StyleKeyItem() { }
        private static readonly StyleKeyItem defaultInstance = new StyleKeyItem().MakeReadOnly();
        private static readonly string[] _styleKeyItemFieldNames = new string[] { "int1", "str2" };
        private static readonly uint[] _styleKeyItemFieldTags = new uint[] { 8, 18 };
        public static StyleKeyItem DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override StyleKeyItem DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override StyleKeyItem ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_StyleKeyItem__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<StyleKeyItem, StyleKeyItem.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_StyleKeyItem__FieldAccessorTable; }
        }

        public const int Int1FieldNumber = 1;
        private bool hasInt1;
        private int int1_;
        public bool HasInt1
        {
            get { return hasInt1; }
        }
        public int Int1
        {
            get { return int1_; }
        }

        public const int Str2FieldNumber = 2;
        private bool hasStr2;
        private string str2_ = "";
        public bool HasStr2
        {
            get { return hasStr2; }
        }
        public string Str2
        {
            get { return str2_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _styleKeyItemFieldNames;
            if (hasInt1)
            {
                output.WriteInt32(1, field_names[0], Int1);
            }
            if (hasStr2)
            {
                output.WriteString(2, field_names[1], Str2);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasInt1)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(1, Int1);
                }
                if (hasStr2)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Str2);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static StyleKeyItem ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StyleKeyItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StyleKeyItem ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static StyleKeyItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static StyleKeyItem ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StyleKeyItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static StyleKeyItem ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static StyleKeyItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static StyleKeyItem ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static StyleKeyItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private StyleKeyItem MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(StyleKeyItem prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<StyleKeyItem, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(StyleKeyItem cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private StyleKeyItem result;

            private StyleKeyItem PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    StyleKeyItem original = result;
                    result = new StyleKeyItem();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override StyleKeyItem MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.StyleKeyItem.Descriptor; }
            }

            public override StyleKeyItem DefaultInstanceForType
            {
                get { return global::mm.command.StyleKeyItem.DefaultInstance; }
            }

            public override StyleKeyItem BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is StyleKeyItem)
                {
                    return MergeFrom((StyleKeyItem)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(StyleKeyItem other)
            {
                if (other == global::mm.command.StyleKeyItem.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasInt1)
                {
                    Int1 = other.Int1;
                }
                if (other.HasStr2)
                {
                    Str2 = other.Str2;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_styleKeyItemFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _styleKeyItemFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasInt1 = input.ReadInt32(ref result.int1_);
                                break;
                            }
                        case 18:
                            {
                                result.hasStr2 = input.ReadString(ref result.str2_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasInt1
            {
                get { return result.hasInt1; }
            }
            public int Int1
            {
                get { return result.Int1; }
                set { SetInt1(value); }
            }
            public Builder SetInt1(int value)
            {
                PrepareBuilder();
                result.hasInt1 = true;
                result.int1_ = value;
                return this;
            }
            public Builder ClearInt1()
            {
                PrepareBuilder();
                result.hasInt1 = false;
                result.int1_ = 0;
                return this;
            }

            public bool HasStr2
            {
                get { return result.hasStr2; }
            }
            public string Str2
            {
                get { return result.Str2; }
                set { SetStr2(value); }
            }
            public Builder SetStr2(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr2 = true;
                result.str2_ = value;
                return this;
            }
            public Builder ClearStr2()
            {
                PrepareBuilder();
                result.hasStr2 = false;
                result.str2_ = "";
                return this;
            }
        }
        static StyleKeyItem()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class AuthData : pb::GeneratedMessage<AuthData, AuthData.Builder>
    {
        private AuthData() { }
        private static readonly AuthData defaultInstance = new AuthData().MakeReadOnly();
        private static readonly string[] _authDataFieldNames = new string[] { "AutoAuthKey", "Buffer10", "Buffer12", "Buffer6", "Buffer9", "FSURL", "KSid", "NewVersion", "PicData", "SessionKey", "SvrPubECDHKey", "Uin", "int18", "int19", "int5", "item15", "str11", "str14", "str16" };
        private static readonly uint[] _authDataFieldTags = new uint[] { 34, 82, 98, 50, 74, 162, 58, 136, 66, 26, 18, 8, 144, 152, 40, 122, 90, 114, 130 };
        public static AuthData DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override AuthData DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override AuthData ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_AuthData__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<AuthData, AuthData.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_AuthData__FieldAccessorTable; }
        }

        public const int UinFieldNumber = 1;
        private bool hasUin;
        private uint uin_;
        public bool HasUin
        {
            get { return hasUin; }
        }
        [global::System.CLSCompliant(false)]
        public uint Uin
        {
            get { return uin_; }
        }

        public const int SvrPubECDHKeyFieldNumber = 2;
        private bool hasSvrPubECDHKey;
        private global::mm.command.ECDHKey svrPubECDHKey_;
        public bool HasSvrPubECDHKey
        {
            get { return hasSvrPubECDHKey; }
        }
        public global::mm.command.ECDHKey SvrPubECDHKey
        {
            get { return svrPubECDHKey_ ?? global::mm.command.ECDHKey.DefaultInstance; }
        }

        public const int SessionKeyFieldNumber = 3;
        private bool hasSessionKey;
        private global::mm.command.SKBuiltinBuffer_t sessionKey_;
        public bool HasSessionKey
        {
            get { return hasSessionKey; }
        }
        public global::mm.command.SKBuiltinBuffer_t SessionKey
        {
            get { return sessionKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int AutoAuthKeyFieldNumber = 4;
        private bool hasAutoAuthKey;
        private global::mm.command.SKBuiltinBuffer_t autoAuthKey_;
        public bool HasAutoAuthKey
        {
            get { return hasAutoAuthKey; }
        }
        public global::mm.command.SKBuiltinBuffer_t AutoAuthKey
        {
            get { return autoAuthKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int Int5FieldNumber = 5;
        private bool hasInt5;
        private int int5_;
        public bool HasInt5
        {
            get { return hasInt5; }
        }
        public int Int5
        {
            get { return int5_; }
        }

        public const int Buffer6FieldNumber = 6;
        private bool hasBuffer6;
        private global::mm.command.SKBuiltinBuffer_t buffer6_;
        public bool HasBuffer6
        {
            get { return hasBuffer6; }
        }
        public global::mm.command.SKBuiltinBuffer_t Buffer6
        {
            get { return buffer6_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int KSidFieldNumber = 7;
        private bool hasKSid;
        private global::mm.command.KSidData kSid_;
        public bool HasKSid
        {
            get { return hasKSid; }
        }
        public global::mm.command.KSidData KSid
        {
            get { return kSid_ ?? global::mm.command.KSidData.DefaultInstance; }
        }

        public const int PicDataFieldNumber = 8;
        private bool hasPicData;
        private global::mm.command.ImgPic picData_;
        public bool HasPicData
        {
            get { return hasPicData; }
        }
        public global::mm.command.ImgPic PicData
        {
            get { return picData_ ?? global::mm.command.ImgPic.DefaultInstance; }
        }

        public const int Buffer9FieldNumber = 9;
        private bool hasBuffer9;
        private global::mm.command.SKBuiltinBuffer_t buffer9_;
        public bool HasBuffer9
        {
            get { return hasBuffer9; }
        }
        public global::mm.command.SKBuiltinBuffer_t Buffer9
        {
            get { return buffer9_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int Buffer10FieldNumber = 10;
        private bool hasBuffer10;
        private global::mm.command.SKBuiltinBuffer_t buffer10_;
        public bool HasBuffer10
        {
            get { return hasBuffer10; }
        }
        public global::mm.command.SKBuiltinBuffer_t Buffer10
        {
            get { return buffer10_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int Str11FieldNumber = 11;
        private bool hasStr11;
        private string str11_ = "";
        public bool HasStr11
        {
            get { return hasStr11; }
        }
        public string Str11
        {
            get { return str11_; }
        }

        public const int Buffer12FieldNumber = 12;
        private bool hasBuffer12;
        private global::mm.command.SKBuiltinBuffer_t buffer12_;
        public bool HasBuffer12
        {
            get { return hasBuffer12; }
        }
        public global::mm.command.SKBuiltinBuffer_t Buffer12
        {
            get { return buffer12_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int Str14FieldNumber = 14;
        private bool hasStr14;
        private string str14_ = "";
        public bool HasStr14
        {
            get { return hasStr14; }
        }
        public string Str14
        {
            get { return str14_; }
        }

        public const int Item15FieldNumber = 15;
        private bool hasItem15;
        private global::mm.command.ShowStyleKey item15_;
        public bool HasItem15
        {
            get { return hasItem15; }
        }
        public global::mm.command.ShowStyleKey Item15
        {
            get { return item15_ ?? global::mm.command.ShowStyleKey.DefaultInstance; }
        }

        public const int Str16FieldNumber = 16;
        private bool hasStr16;
        private string str16_ = "";
        public bool HasStr16
        {
            get { return hasStr16; }
        }
        public string Str16
        {
            get { return str16_; }
        }

        public const int NewVersionFieldNumber = 17;
        private bool hasNewVersion;
        private int newVersion_;
        public bool HasNewVersion
        {
            get { return hasNewVersion; }
        }
        public int NewVersion
        {
            get { return newVersion_; }
        }

        public const int Int18FieldNumber = 18;
        private bool hasInt18;
        private int int18_;
        public bool HasInt18
        {
            get { return hasInt18; }
        }
        public int Int18
        {
            get { return int18_; }
        }

        public const int Int19FieldNumber = 19;
        private bool hasInt19;
        private int int19_;
        public bool HasInt19
        {
            get { return hasInt19; }
        }
        public int Int19
        {
            get { return int19_; }
        }

        public const int FSURLFieldNumber = 20;
        private bool hasFSURL;
        private string fSURL_ = "";
        public bool HasFSURL
        {
            get { return hasFSURL; }
        }
        public string FSURL
        {
            get { return fSURL_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasUin) return false;
                if (!hasInt5) return false;
                if (!hasNewVersion) return false;
                if (!hasInt18) return false;
                if (!hasInt19) return false;
                if (HasSvrPubECDHKey)
                {
                    if (!SvrPubECDHKey.IsInitialized) return false;
                }
                if (HasSessionKey)
                {
                    if (!SessionKey.IsInitialized) return false;
                }
                if (HasAutoAuthKey)
                {
                    if (!AutoAuthKey.IsInitialized) return false;
                }
                if (HasBuffer6)
                {
                    if (!Buffer6.IsInitialized) return false;
                }
                if (HasKSid)
                {
                    if (!KSid.IsInitialized) return false;
                }
                if (HasPicData)
                {
                    if (!PicData.IsInitialized) return false;
                }
                if (HasBuffer9)
                {
                    if (!Buffer9.IsInitialized) return false;
                }
                if (HasBuffer10)
                {
                    if (!Buffer10.IsInitialized) return false;
                }
                if (HasBuffer12)
                {
                    if (!Buffer12.IsInitialized) return false;
                }
                if (HasItem15)
                {
                    if (!Item15.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _authDataFieldNames;
            if (hasUin)
            {
                output.WriteUInt32(1, field_names[11], Uin);
            }
            if (hasSvrPubECDHKey)
            {
                output.WriteMessage(2, field_names[10], SvrPubECDHKey);
            }
            if (hasSessionKey)
            {
                output.WriteMessage(3, field_names[9], SessionKey);
            }
            if (hasAutoAuthKey)
            {
                output.WriteMessage(4, field_names[0], AutoAuthKey);
            }
            if (hasInt5)
            {
                output.WriteInt32(5, field_names[14], Int5);
            }
            if (hasBuffer6)
            {
                output.WriteMessage(6, field_names[3], Buffer6);
            }
            if (hasKSid)
            {
                output.WriteMessage(7, field_names[6], KSid);
            }
            if (hasPicData)
            {
                output.WriteMessage(8, field_names[8], PicData);
            }
            if (hasBuffer9)
            {
                output.WriteMessage(9, field_names[4], Buffer9);
            }
            if (hasBuffer10)
            {
                output.WriteMessage(10, field_names[1], Buffer10);
            }
            if (hasStr11)
            {
                output.WriteString(11, field_names[16], Str11);
            }
            if (hasBuffer12)
            {
                output.WriteMessage(12, field_names[2], Buffer12);
            }
            if (hasStr14)
            {
                output.WriteString(14, field_names[17], Str14);
            }
            if (hasItem15)
            {
                output.WriteMessage(15, field_names[15], Item15);
            }
            if (hasStr16)
            {
                output.WriteString(16, field_names[18], Str16);
            }
            if (hasNewVersion)
            {
                output.WriteInt32(17, field_names[7], NewVersion);
            }
            if (hasInt18)
            {
                output.WriteInt32(18, field_names[12], Int18);
            }
            if (hasInt19)
            {
                output.WriteInt32(19, field_names[13], Int19);
            }
            if (hasFSURL)
            {
                output.WriteString(20, field_names[5], FSURL);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUin)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(1, Uin);
                }
                if (hasSvrPubECDHKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, SvrPubECDHKey);
                }
                if (hasSessionKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, SessionKey);
                }
                if (hasAutoAuthKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(4, AutoAuthKey);
                }
                if (hasInt5)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(5, Int5);
                }
                if (hasBuffer6)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(6, Buffer6);
                }
                if (hasKSid)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(7, KSid);
                }
                if (hasPicData)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(8, PicData);
                }
                if (hasBuffer9)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(9, Buffer9);
                }
                if (hasBuffer10)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(10, Buffer10);
                }
                if (hasStr11)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(11, Str11);
                }
                if (hasBuffer12)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(12, Buffer12);
                }
                if (hasStr14)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(14, Str14);
                }
                if (hasItem15)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(15, Item15);
                }
                if (hasStr16)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(16, Str16);
                }
                if (hasNewVersion)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(17, NewVersion);
                }
                if (hasInt18)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(18, Int18);
                }
                if (hasInt19)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(19, Int19);
                }
                if (hasFSURL)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(20, FSURL);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static AuthData ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AuthData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AuthData ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AuthData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AuthData ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AuthData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AuthData ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AuthData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AuthData ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AuthData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AuthData MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AuthData prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<AuthData, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(AuthData cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private AuthData result;

            private AuthData PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    AuthData original = result;
                    result = new AuthData();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override AuthData MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.AuthData.Descriptor; }
            }

            public override AuthData DefaultInstanceForType
            {
                get { return global::mm.command.AuthData.DefaultInstance; }
            }

            public override AuthData BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is AuthData)
                {
                    return MergeFrom((AuthData)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(AuthData other)
            {
                if (other == global::mm.command.AuthData.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUin)
                {
                    Uin = other.Uin;
                }
                if (other.HasSvrPubECDHKey)
                {
                    MergeSvrPubECDHKey(other.SvrPubECDHKey);
                }
                if (other.HasSessionKey)
                {
                    MergeSessionKey(other.SessionKey);
                }
                if (other.HasAutoAuthKey)
                {
                    MergeAutoAuthKey(other.AutoAuthKey);
                }
                if (other.HasInt5)
                {
                    Int5 = other.Int5;
                }
                if (other.HasBuffer6)
                {
                    MergeBuffer6(other.Buffer6);
                }
                if (other.HasKSid)
                {
                    MergeKSid(other.KSid);
                }
                if (other.HasPicData)
                {
                    MergePicData(other.PicData);
                }
                if (other.HasBuffer9)
                {
                    MergeBuffer9(other.Buffer9);
                }
                if (other.HasBuffer10)
                {
                    MergeBuffer10(other.Buffer10);
                }
                if (other.HasStr11)
                {
                    Str11 = other.Str11;
                }
                if (other.HasBuffer12)
                {
                    MergeBuffer12(other.Buffer12);
                }
                if (other.HasStr14)
                {
                    Str14 = other.Str14;
                }
                if (other.HasItem15)
                {
                    MergeItem15(other.Item15);
                }
                if (other.HasStr16)
                {
                    Str16 = other.Str16;
                }
                if (other.HasNewVersion)
                {
                    NewVersion = other.NewVersion;
                }
                if (other.HasInt18)
                {
                    Int18 = other.Int18;
                }
                if (other.HasInt19)
                {
                    Int19 = other.Int19;
                }
                if (other.HasFSURL)
                {
                    FSURL = other.FSURL;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_authDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _authDataFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasUin = input.ReadUInt32(ref result.uin_);
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.ECDHKey.Builder subBuilder = global::mm.command.ECDHKey.CreateBuilder();
                                if (result.hasSvrPubECDHKey)
                                {
                                    subBuilder.MergeFrom(SvrPubECDHKey);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                SvrPubECDHKey = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasSessionKey)
                                {
                                    subBuilder.MergeFrom(SessionKey);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                SessionKey = subBuilder.BuildPartial();
                                break;
                            }
                        case 34:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasAutoAuthKey)
                                {
                                    subBuilder.MergeFrom(AutoAuthKey);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                AutoAuthKey = subBuilder.BuildPartial();
                                break;
                            }
                        case 40:
                            {
                                result.hasInt5 = input.ReadInt32(ref result.int5_);
                                break;
                            }
                        case 50:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasBuffer6)
                                {
                                    subBuilder.MergeFrom(Buffer6);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Buffer6 = subBuilder.BuildPartial();
                                break;
                            }
                        case 58:
                            {
                                global::mm.command.KSidData.Builder subBuilder = global::mm.command.KSidData.CreateBuilder();
                                if (result.hasKSid)
                                {
                                    subBuilder.MergeFrom(KSid);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                KSid = subBuilder.BuildPartial();
                                break;
                            }
                        case 66:
                            {
                                global::mm.command.ImgPic.Builder subBuilder = global::mm.command.ImgPic.CreateBuilder();
                                if (result.hasPicData)
                                {
                                    subBuilder.MergeFrom(PicData);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                PicData = subBuilder.BuildPartial();
                                break;
                            }
                        case 74:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasBuffer9)
                                {
                                    subBuilder.MergeFrom(Buffer9);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Buffer9 = subBuilder.BuildPartial();
                                break;
                            }
                        case 82:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasBuffer10)
                                {
                                    subBuilder.MergeFrom(Buffer10);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Buffer10 = subBuilder.BuildPartial();
                                break;
                            }
                        case 90:
                            {
                                result.hasStr11 = input.ReadString(ref result.str11_);
                                break;
                            }
                        case 98:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasBuffer12)
                                {
                                    subBuilder.MergeFrom(Buffer12);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Buffer12 = subBuilder.BuildPartial();
                                break;
                            }
                        case 114:
                            {
                                result.hasStr14 = input.ReadString(ref result.str14_);
                                break;
                            }
                        case 122:
                            {
                                global::mm.command.ShowStyleKey.Builder subBuilder = global::mm.command.ShowStyleKey.CreateBuilder();
                                if (result.hasItem15)
                                {
                                    subBuilder.MergeFrom(Item15);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Item15 = subBuilder.BuildPartial();
                                break;
                            }
                        case 130:
                            {
                                result.hasStr16 = input.ReadString(ref result.str16_);
                                break;
                            }
                        case 136:
                            {
                                result.hasNewVersion = input.ReadInt32(ref result.newVersion_);
                                break;
                            }
                        case 144:
                            {
                                result.hasInt18 = input.ReadInt32(ref result.int18_);
                                break;
                            }
                        case 152:
                            {
                                result.hasInt19 = input.ReadInt32(ref result.int19_);
                                break;
                            }
                        case 162:
                            {
                                result.hasFSURL = input.ReadString(ref result.fSURL_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUin
            {
                get { return result.hasUin; }
            }
            [global::System.CLSCompliant(false)]
            public uint Uin
            {
                get { return result.Uin; }
                set { SetUin(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetUin(uint value)
            {
                PrepareBuilder();
                result.hasUin = true;
                result.uin_ = value;
                return this;
            }
            public Builder ClearUin()
            {
                PrepareBuilder();
                result.hasUin = false;
                result.uin_ = 0;
                return this;
            }

            public bool HasSvrPubECDHKey
            {
                get { return result.hasSvrPubECDHKey; }
            }
            public global::mm.command.ECDHKey SvrPubECDHKey
            {
                get { return result.SvrPubECDHKey; }
                set { SetSvrPubECDHKey(value); }
            }
            public Builder SetSvrPubECDHKey(global::mm.command.ECDHKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSvrPubECDHKey = true;
                result.svrPubECDHKey_ = value;
                return this;
            }
            public Builder SetSvrPubECDHKey(global::mm.command.ECDHKey.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSvrPubECDHKey = true;
                result.svrPubECDHKey_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSvrPubECDHKey(global::mm.command.ECDHKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSvrPubECDHKey &&
                    result.svrPubECDHKey_ != global::mm.command.ECDHKey.DefaultInstance)
                {
                    result.svrPubECDHKey_ = global::mm.command.ECDHKey.CreateBuilder(result.svrPubECDHKey_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.svrPubECDHKey_ = value;
                }
                result.hasSvrPubECDHKey = true;
                return this;
            }
            public Builder ClearSvrPubECDHKey()
            {
                PrepareBuilder();
                result.hasSvrPubECDHKey = false;
                result.svrPubECDHKey_ = null;
                return this;
            }

            public bool HasSessionKey
            {
                get { return result.hasSessionKey; }
            }
            public global::mm.command.SKBuiltinBuffer_t SessionKey
            {
                get { return result.SessionKey; }
                set { SetSessionKey(value); }
            }
            public Builder SetSessionKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSessionKey = true;
                result.sessionKey_ = value;
                return this;
            }
            public Builder SetSessionKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSessionKey = true;
                result.sessionKey_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSessionKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSessionKey &&
                    result.sessionKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.sessionKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.sessionKey_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.sessionKey_ = value;
                }
                result.hasSessionKey = true;
                return this;
            }
            public Builder ClearSessionKey()
            {
                PrepareBuilder();
                result.hasSessionKey = false;
                result.sessionKey_ = null;
                return this;
            }

            public bool HasAutoAuthKey
            {
                get { return result.hasAutoAuthKey; }
            }
            public global::mm.command.SKBuiltinBuffer_t AutoAuthKey
            {
                get { return result.AutoAuthKey; }
                set { SetAutoAuthKey(value); }
            }
            public Builder SetAutoAuthKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAutoAuthKey = true;
                result.autoAuthKey_ = value;
                return this;
            }
            public Builder SetAutoAuthKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasAutoAuthKey = true;
                result.autoAuthKey_ = builderForValue.Build();
                return this;
            }
            public Builder MergeAutoAuthKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasAutoAuthKey &&
                    result.autoAuthKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.autoAuthKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.autoAuthKey_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.autoAuthKey_ = value;
                }
                result.hasAutoAuthKey = true;
                return this;
            }
            public Builder ClearAutoAuthKey()
            {
                PrepareBuilder();
                result.hasAutoAuthKey = false;
                result.autoAuthKey_ = null;
                return this;
            }

            public bool HasInt5
            {
                get { return result.hasInt5; }
            }
            public int Int5
            {
                get { return result.Int5; }
                set { SetInt5(value); }
            }
            public Builder SetInt5(int value)
            {
                PrepareBuilder();
                result.hasInt5 = true;
                result.int5_ = value;
                return this;
            }
            public Builder ClearInt5()
            {
                PrepareBuilder();
                result.hasInt5 = false;
                result.int5_ = 0;
                return this;
            }

            public bool HasBuffer6
            {
                get { return result.hasBuffer6; }
            }
            public global::mm.command.SKBuiltinBuffer_t Buffer6
            {
                get { return result.Buffer6; }
                set { SetBuffer6(value); }
            }
            public Builder SetBuffer6(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBuffer6 = true;
                result.buffer6_ = value;
                return this;
            }
            public Builder SetBuffer6(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasBuffer6 = true;
                result.buffer6_ = builderForValue.Build();
                return this;
            }
            public Builder MergeBuffer6(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasBuffer6 &&
                    result.buffer6_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.buffer6_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.buffer6_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.buffer6_ = value;
                }
                result.hasBuffer6 = true;
                return this;
            }
            public Builder ClearBuffer6()
            {
                PrepareBuilder();
                result.hasBuffer6 = false;
                result.buffer6_ = null;
                return this;
            }

            public bool HasKSid
            {
                get { return result.hasKSid; }
            }
            public global::mm.command.KSidData KSid
            {
                get { return result.KSid; }
                set { SetKSid(value); }
            }
            public Builder SetKSid(global::mm.command.KSidData value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasKSid = true;
                result.kSid_ = value;
                return this;
            }
            public Builder SetKSid(global::mm.command.KSidData.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasKSid = true;
                result.kSid_ = builderForValue.Build();
                return this;
            }
            public Builder MergeKSid(global::mm.command.KSidData value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasKSid &&
                    result.kSid_ != global::mm.command.KSidData.DefaultInstance)
                {
                    result.kSid_ = global::mm.command.KSidData.CreateBuilder(result.kSid_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.kSid_ = value;
                }
                result.hasKSid = true;
                return this;
            }
            public Builder ClearKSid()
            {
                PrepareBuilder();
                result.hasKSid = false;
                result.kSid_ = null;
                return this;
            }

            public bool HasPicData
            {
                get { return result.hasPicData; }
            }
            public global::mm.command.ImgPic PicData
            {
                get { return result.PicData; }
                set { SetPicData(value); }
            }
            public Builder SetPicData(global::mm.command.ImgPic value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPicData = true;
                result.picData_ = value;
                return this;
            }
            public Builder SetPicData(global::mm.command.ImgPic.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasPicData = true;
                result.picData_ = builderForValue.Build();
                return this;
            }
            public Builder MergePicData(global::mm.command.ImgPic value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasPicData &&
                    result.picData_ != global::mm.command.ImgPic.DefaultInstance)
                {
                    result.picData_ = global::mm.command.ImgPic.CreateBuilder(result.picData_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.picData_ = value;
                }
                result.hasPicData = true;
                return this;
            }
            public Builder ClearPicData()
            {
                PrepareBuilder();
                result.hasPicData = false;
                result.picData_ = null;
                return this;
            }

            public bool HasBuffer9
            {
                get { return result.hasBuffer9; }
            }
            public global::mm.command.SKBuiltinBuffer_t Buffer9
            {
                get { return result.Buffer9; }
                set { SetBuffer9(value); }
            }
            public Builder SetBuffer9(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBuffer9 = true;
                result.buffer9_ = value;
                return this;
            }
            public Builder SetBuffer9(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasBuffer9 = true;
                result.buffer9_ = builderForValue.Build();
                return this;
            }
            public Builder MergeBuffer9(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasBuffer9 &&
                    result.buffer9_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.buffer9_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.buffer9_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.buffer9_ = value;
                }
                result.hasBuffer9 = true;
                return this;
            }
            public Builder ClearBuffer9()
            {
                PrepareBuilder();
                result.hasBuffer9 = false;
                result.buffer9_ = null;
                return this;
            }

            public bool HasBuffer10
            {
                get { return result.hasBuffer10; }
            }
            public global::mm.command.SKBuiltinBuffer_t Buffer10
            {
                get { return result.Buffer10; }
                set { SetBuffer10(value); }
            }
            public Builder SetBuffer10(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBuffer10 = true;
                result.buffer10_ = value;
                return this;
            }
            public Builder SetBuffer10(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasBuffer10 = true;
                result.buffer10_ = builderForValue.Build();
                return this;
            }
            public Builder MergeBuffer10(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasBuffer10 &&
                    result.buffer10_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.buffer10_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.buffer10_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.buffer10_ = value;
                }
                result.hasBuffer10 = true;
                return this;
            }
            public Builder ClearBuffer10()
            {
                PrepareBuilder();
                result.hasBuffer10 = false;
                result.buffer10_ = null;
                return this;
            }

            public bool HasStr11
            {
                get { return result.hasStr11; }
            }
            public string Str11
            {
                get { return result.Str11; }
                set { SetStr11(value); }
            }
            public Builder SetStr11(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr11 = true;
                result.str11_ = value;
                return this;
            }
            public Builder ClearStr11()
            {
                PrepareBuilder();
                result.hasStr11 = false;
                result.str11_ = "";
                return this;
            }

            public bool HasBuffer12
            {
                get { return result.hasBuffer12; }
            }
            public global::mm.command.SKBuiltinBuffer_t Buffer12
            {
                get { return result.Buffer12; }
                set { SetBuffer12(value); }
            }
            public Builder SetBuffer12(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBuffer12 = true;
                result.buffer12_ = value;
                return this;
            }
            public Builder SetBuffer12(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasBuffer12 = true;
                result.buffer12_ = builderForValue.Build();
                return this;
            }
            public Builder MergeBuffer12(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasBuffer12 &&
                    result.buffer12_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.buffer12_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.buffer12_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.buffer12_ = value;
                }
                result.hasBuffer12 = true;
                return this;
            }
            public Builder ClearBuffer12()
            {
                PrepareBuilder();
                result.hasBuffer12 = false;
                result.buffer12_ = null;
                return this;
            }

            public bool HasStr14
            {
                get { return result.hasStr14; }
            }
            public string Str14
            {
                get { return result.Str14; }
                set { SetStr14(value); }
            }
            public Builder SetStr14(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr14 = true;
                result.str14_ = value;
                return this;
            }
            public Builder ClearStr14()
            {
                PrepareBuilder();
                result.hasStr14 = false;
                result.str14_ = "";
                return this;
            }

            public bool HasItem15
            {
                get { return result.hasItem15; }
            }
            public global::mm.command.ShowStyleKey Item15
            {
                get { return result.Item15; }
                set { SetItem15(value); }
            }
            public Builder SetItem15(global::mm.command.ShowStyleKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasItem15 = true;
                result.item15_ = value;
                return this;
            }
            public Builder SetItem15(global::mm.command.ShowStyleKey.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasItem15 = true;
                result.item15_ = builderForValue.Build();
                return this;
            }
            public Builder MergeItem15(global::mm.command.ShowStyleKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasItem15 &&
                    result.item15_ != global::mm.command.ShowStyleKey.DefaultInstance)
                {
                    result.item15_ = global::mm.command.ShowStyleKey.CreateBuilder(result.item15_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.item15_ = value;
                }
                result.hasItem15 = true;
                return this;
            }
            public Builder ClearItem15()
            {
                PrepareBuilder();
                result.hasItem15 = false;
                result.item15_ = null;
                return this;
            }

            public bool HasStr16
            {
                get { return result.hasStr16; }
            }
            public string Str16
            {
                get { return result.Str16; }
                set { SetStr16(value); }
            }
            public Builder SetStr16(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr16 = true;
                result.str16_ = value;
                return this;
            }
            public Builder ClearStr16()
            {
                PrepareBuilder();
                result.hasStr16 = false;
                result.str16_ = "";
                return this;
            }

            public bool HasNewVersion
            {
                get { return result.hasNewVersion; }
            }
            public int NewVersion
            {
                get { return result.NewVersion; }
                set { SetNewVersion(value); }
            }
            public Builder SetNewVersion(int value)
            {
                PrepareBuilder();
                result.hasNewVersion = true;
                result.newVersion_ = value;
                return this;
            }
            public Builder ClearNewVersion()
            {
                PrepareBuilder();
                result.hasNewVersion = false;
                result.newVersion_ = 0;
                return this;
            }

            public bool HasInt18
            {
                get { return result.hasInt18; }
            }
            public int Int18
            {
                get { return result.Int18; }
                set { SetInt18(value); }
            }
            public Builder SetInt18(int value)
            {
                PrepareBuilder();
                result.hasInt18 = true;
                result.int18_ = value;
                return this;
            }
            public Builder ClearInt18()
            {
                PrepareBuilder();
                result.hasInt18 = false;
                result.int18_ = 0;
                return this;
            }

            public bool HasInt19
            {
                get { return result.hasInt19; }
            }
            public int Int19
            {
                get { return result.Int19; }
                set { SetInt19(value); }
            }
            public Builder SetInt19(int value)
            {
                PrepareBuilder();
                result.hasInt19 = true;
                result.int19_ = value;
                return this;
            }
            public Builder ClearInt19()
            {
                PrepareBuilder();
                result.hasInt19 = false;
                result.int19_ = 0;
                return this;
            }

            public bool HasFSURL
            {
                get { return result.hasFSURL; }
            }
            public string FSURL
            {
                get { return result.FSURL; }
                set { SetFSURL(value); }
            }
            public Builder SetFSURL(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasFSURL = true;
                result.fSURL_ = value;
                return this;
            }
            public Builder ClearFSURL()
            {
                PrepareBuilder();
                result.hasFSURL = false;
                result.fSURL_ = "";
                return this;
            }
        }
        static AuthData()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class AccountInfo : pb::GeneratedMessage<AccountInfo, AccountInfo.Builder>
    {
        private AccountInfo() { }
        private static readonly AccountInfo defaultInstance = new AccountInfo().MakeReadOnly();
        private static readonly string[] _accountInfoFieldNames = new string[] { "Alias", "BindEmail", "BindMobile", "BindUin", "FSURL", "NickName", "OfficialNickName", "OfficialUserName", "Status", "UserName", "int10", "int12", "int15", "int9", "str11" };
        private static readonly uint[] _accountInfoFieldTags = new uint[] { 50, 34, 42, 24, 130, 18, 114, 106, 64, 10, 80, 96, 120, 72, 90 };
        public static AccountInfo DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override AccountInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override AccountInfo ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_AccountInfo__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<AccountInfo, AccountInfo.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_AccountInfo__FieldAccessorTable; }
        }

        public const int UserNameFieldNumber = 1;
        private bool hasUserName;
        private string userName_ = "";
        public bool HasUserName
        {
            get { return hasUserName; }
        }
        public string UserName
        {
            get { return userName_; }
        }

        public const int NickNameFieldNumber = 2;
        private bool hasNickName;
        private string nickName_ = "";
        public bool HasNickName
        {
            get { return hasNickName; }
        }
        public string NickName
        {
            get { return nickName_; }
        }

        public const int BindUinFieldNumber = 3;
        private bool hasBindUin;
        private uint bindUin_;
        public bool HasBindUin
        {
            get { return hasBindUin; }
        }
        [global::System.CLSCompliant(false)]
        public uint BindUin
        {
            get { return bindUin_; }
        }

        public const int BindEmailFieldNumber = 4;
        private bool hasBindEmail;
        private string bindEmail_ = "";
        public bool HasBindEmail
        {
            get { return hasBindEmail; }
        }
        public string BindEmail
        {
            get { return bindEmail_; }
        }

        public const int BindMobileFieldNumber = 5;
        private bool hasBindMobile;
        private string bindMobile_ = "";
        public bool HasBindMobile
        {
            get { return hasBindMobile; }
        }
        public string BindMobile
        {
            get { return bindMobile_; }
        }

        public const int AliasFieldNumber = 6;
        private bool hasAlias;
        private string alias_ = "";
        public bool HasAlias
        {
            get { return hasAlias; }
        }
        public string Alias
        {
            get { return alias_; }
        }

        public const int StatusFieldNumber = 8;
        private bool hasStatus;
        private int status_;
        public bool HasStatus
        {
            get { return hasStatus; }
        }
        public int Status
        {
            get { return status_; }
        }

        public const int Int9FieldNumber = 9;
        private bool hasInt9;
        private int int9_;
        public bool HasInt9
        {
            get { return hasInt9; }
        }
        public int Int9
        {
            get { return int9_; }
        }

        public const int Int10FieldNumber = 10;
        private bool hasInt10;
        private int int10_;
        public bool HasInt10
        {
            get { return hasInt10; }
        }
        public int Int10
        {
            get { return int10_; }
        }

        public const int Str11FieldNumber = 11;
        private bool hasStr11;
        private string str11_ = "";
        public bool HasStr11
        {
            get { return hasStr11; }
        }
        public string Str11
        {
            get { return str11_; }
        }

        public const int Int12FieldNumber = 12;
        private bool hasInt12;
        private int int12_;
        public bool HasInt12
        {
            get { return hasInt12; }
        }
        public int Int12
        {
            get { return int12_; }
        }

        public const int OfficialUserNameFieldNumber = 13;
        private bool hasOfficialUserName;
        private string officialUserName_ = "";
        public bool HasOfficialUserName
        {
            get { return hasOfficialUserName; }
        }
        public string OfficialUserName
        {
            get { return officialUserName_; }
        }

        public const int OfficialNickNameFieldNumber = 14;
        private bool hasOfficialNickName;
        private string officialNickName_ = "";
        public bool HasOfficialNickName
        {
            get { return hasOfficialNickName; }
        }
        public string OfficialNickName
        {
            get { return officialNickName_; }
        }

        public const int Int15FieldNumber = 15;
        private bool hasInt15;
        private int int15_;
        public bool HasInt15
        {
            get { return hasInt15; }
        }
        public int Int15
        {
            get { return int15_; }
        }

        public const int FSURLFieldNumber = 16;
        private bool hasFSURL;
        private string fSURL_ = "";
        public bool HasFSURL
        {
            get { return hasFSURL; }
        }
        public string FSURL
        {
            get { return fSURL_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasStatus) return false;
                if (!hasInt9) return false;
                if (!hasInt10) return false;
                if (!hasInt12) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _accountInfoFieldNames;
            if (hasUserName)
            {
                output.WriteString(1, field_names[9], UserName);
            }
            if (hasNickName)
            {
                output.WriteString(2, field_names[5], NickName);
            }
            if (hasBindUin)
            {
                output.WriteUInt32(3, field_names[3], BindUin);
            }
            if (hasBindEmail)
            {
                output.WriteString(4, field_names[1], BindEmail);
            }
            if (hasBindMobile)
            {
                output.WriteString(5, field_names[2], BindMobile);
            }
            if (hasAlias)
            {
                output.WriteString(6, field_names[0], Alias);
            }
            if (hasStatus)
            {
                output.WriteInt32(8, field_names[8], Status);
            }
            if (hasInt9)
            {
                output.WriteInt32(9, field_names[13], Int9);
            }
            if (hasInt10)
            {
                output.WriteInt32(10, field_names[10], Int10);
            }
            if (hasStr11)
            {
                output.WriteString(11, field_names[14], Str11);
            }
            if (hasInt12)
            {
                output.WriteInt32(12, field_names[11], Int12);
            }
            if (hasOfficialUserName)
            {
                output.WriteString(13, field_names[7], OfficialUserName);
            }
            if (hasOfficialNickName)
            {
                output.WriteString(14, field_names[6], OfficialNickName);
            }
            if (hasInt15)
            {
                output.WriteInt32(15, field_names[12], Int15);
            }
            if (hasFSURL)
            {
                output.WriteString(16, field_names[4], FSURL);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUserName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, UserName);
                }
                if (hasNickName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, NickName);
                }
                if (hasBindUin)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(3, BindUin);
                }
                if (hasBindEmail)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, BindEmail);
                }
                if (hasBindMobile)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(5, BindMobile);
                }
                if (hasAlias)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(6, Alias);
                }
                if (hasStatus)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(8, Status);
                }
                if (hasInt9)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(9, Int9);
                }
                if (hasInt10)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(10, Int10);
                }
                if (hasStr11)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(11, Str11);
                }
                if (hasInt12)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(12, Int12);
                }
                if (hasOfficialUserName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(13, OfficialUserName);
                }
                if (hasOfficialNickName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(14, OfficialNickName);
                }
                if (hasInt15)
                {
                    size += pb::CodedOutputStream.ComputeInt32Size(15, Int15);
                }
                if (hasFSURL)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(16, FSURL);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static AccountInfo ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AccountInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AccountInfo ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static AccountInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static AccountInfo ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AccountInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static AccountInfo ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static AccountInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static AccountInfo ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static AccountInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private AccountInfo MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(AccountInfo prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<AccountInfo, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(AccountInfo cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private AccountInfo result;

            private AccountInfo PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    AccountInfo original = result;
                    result = new AccountInfo();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override AccountInfo MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.AccountInfo.Descriptor; }
            }

            public override AccountInfo DefaultInstanceForType
            {
                get { return global::mm.command.AccountInfo.DefaultInstance; }
            }

            public override AccountInfo BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is AccountInfo)
                {
                    return MergeFrom((AccountInfo)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(AccountInfo other)
            {
                if (other == global::mm.command.AccountInfo.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUserName)
                {
                    UserName = other.UserName;
                }
                if (other.HasNickName)
                {
                    NickName = other.NickName;
                }
                if (other.HasBindUin)
                {
                    BindUin = other.BindUin;
                }
                if (other.HasBindEmail)
                {
                    BindEmail = other.BindEmail;
                }
                if (other.HasBindMobile)
                {
                    BindMobile = other.BindMobile;
                }
                if (other.HasAlias)
                {
                    Alias = other.Alias;
                }
                if (other.HasStatus)
                {
                    Status = other.Status;
                }
                if (other.HasInt9)
                {
                    Int9 = other.Int9;
                }
                if (other.HasInt10)
                {
                    Int10 = other.Int10;
                }
                if (other.HasStr11)
                {
                    Str11 = other.Str11;
                }
                if (other.HasInt12)
                {
                    Int12 = other.Int12;
                }
                if (other.HasOfficialUserName)
                {
                    OfficialUserName = other.OfficialUserName;
                }
                if (other.HasOfficialNickName)
                {
                    OfficialNickName = other.OfficialNickName;
                }
                if (other.HasInt15)
                {
                    Int15 = other.Int15;
                }
                if (other.HasFSURL)
                {
                    FSURL = other.FSURL;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_accountInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _accountInfoFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasUserName = input.ReadString(ref result.userName_);
                                break;
                            }
                        case 18:
                            {
                                result.hasNickName = input.ReadString(ref result.nickName_);
                                break;
                            }
                        case 24:
                            {
                                result.hasBindUin = input.ReadUInt32(ref result.bindUin_);
                                break;
                            }
                        case 34:
                            {
                                result.hasBindEmail = input.ReadString(ref result.bindEmail_);
                                break;
                            }
                        case 42:
                            {
                                result.hasBindMobile = input.ReadString(ref result.bindMobile_);
                                break;
                            }
                        case 50:
                            {
                                result.hasAlias = input.ReadString(ref result.alias_);
                                break;
                            }
                        case 64:
                            {
                                result.hasStatus = input.ReadInt32(ref result.status_);
                                break;
                            }
                        case 72:
                            {
                                result.hasInt9 = input.ReadInt32(ref result.int9_);
                                break;
                            }
                        case 80:
                            {
                                result.hasInt10 = input.ReadInt32(ref result.int10_);
                                break;
                            }
                        case 90:
                            {
                                result.hasStr11 = input.ReadString(ref result.str11_);
                                break;
                            }
                        case 96:
                            {
                                result.hasInt12 = input.ReadInt32(ref result.int12_);
                                break;
                            }
                        case 106:
                            {
                                result.hasOfficialUserName = input.ReadString(ref result.officialUserName_);
                                break;
                            }
                        case 114:
                            {
                                result.hasOfficialNickName = input.ReadString(ref result.officialNickName_);
                                break;
                            }
                        case 120:
                            {
                                result.hasInt15 = input.ReadInt32(ref result.int15_);
                                break;
                            }
                        case 130:
                            {
                                result.hasFSURL = input.ReadString(ref result.fSURL_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUserName
            {
                get { return result.hasUserName; }
            }
            public string UserName
            {
                get { return result.UserName; }
                set { SetUserName(value); }
            }
            public Builder SetUserName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = value;
                return this;
            }
            public Builder ClearUserName()
            {
                PrepareBuilder();
                result.hasUserName = false;
                result.userName_ = "";
                return this;
            }

            public bool HasNickName
            {
                get { return result.hasNickName; }
            }
            public string NickName
            {
                get { return result.NickName; }
                set { SetNickName(value); }
            }
            public Builder SetNickName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = value;
                return this;
            }
            public Builder ClearNickName()
            {
                PrepareBuilder();
                result.hasNickName = false;
                result.nickName_ = "";
                return this;
            }

            public bool HasBindUin
            {
                get { return result.hasBindUin; }
            }
            [global::System.CLSCompliant(false)]
            public uint BindUin
            {
                get { return result.BindUin; }
                set { SetBindUin(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetBindUin(uint value)
            {
                PrepareBuilder();
                result.hasBindUin = true;
                result.bindUin_ = value;
                return this;
            }
            public Builder ClearBindUin()
            {
                PrepareBuilder();
                result.hasBindUin = false;
                result.bindUin_ = 0;
                return this;
            }

            public bool HasBindEmail
            {
                get { return result.hasBindEmail; }
            }
            public string BindEmail
            {
                get { return result.BindEmail; }
                set { SetBindEmail(value); }
            }
            public Builder SetBindEmail(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBindEmail = true;
                result.bindEmail_ = value;
                return this;
            }
            public Builder ClearBindEmail()
            {
                PrepareBuilder();
                result.hasBindEmail = false;
                result.bindEmail_ = "";
                return this;
            }

            public bool HasBindMobile
            {
                get { return result.hasBindMobile; }
            }
            public string BindMobile
            {
                get { return result.BindMobile; }
                set { SetBindMobile(value); }
            }
            public Builder SetBindMobile(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBindMobile = true;
                result.bindMobile_ = value;
                return this;
            }
            public Builder ClearBindMobile()
            {
                PrepareBuilder();
                result.hasBindMobile = false;
                result.bindMobile_ = "";
                return this;
            }

            public bool HasAlias
            {
                get { return result.hasAlias; }
            }
            public string Alias
            {
                get { return result.Alias; }
                set { SetAlias(value); }
            }
            public Builder SetAlias(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAlias = true;
                result.alias_ = value;
                return this;
            }
            public Builder ClearAlias()
            {
                PrepareBuilder();
                result.hasAlias = false;
                result.alias_ = "";
                return this;
            }

            public bool HasStatus
            {
                get { return result.hasStatus; }
            }
            public int Status
            {
                get { return result.Status; }
                set { SetStatus(value); }
            }
            public Builder SetStatus(int value)
            {
                PrepareBuilder();
                result.hasStatus = true;
                result.status_ = value;
                return this;
            }
            public Builder ClearStatus()
            {
                PrepareBuilder();
                result.hasStatus = false;
                result.status_ = 0;
                return this;
            }

            public bool HasInt9
            {
                get { return result.hasInt9; }
            }
            public int Int9
            {
                get { return result.Int9; }
                set { SetInt9(value); }
            }
            public Builder SetInt9(int value)
            {
                PrepareBuilder();
                result.hasInt9 = true;
                result.int9_ = value;
                return this;
            }
            public Builder ClearInt9()
            {
                PrepareBuilder();
                result.hasInt9 = false;
                result.int9_ = 0;
                return this;
            }

            public bool HasInt10
            {
                get { return result.hasInt10; }
            }
            public int Int10
            {
                get { return result.Int10; }
                set { SetInt10(value); }
            }
            public Builder SetInt10(int value)
            {
                PrepareBuilder();
                result.hasInt10 = true;
                result.int10_ = value;
                return this;
            }
            public Builder ClearInt10()
            {
                PrepareBuilder();
                result.hasInt10 = false;
                result.int10_ = 0;
                return this;
            }

            public bool HasStr11
            {
                get { return result.hasStr11; }
            }
            public string Str11
            {
                get { return result.Str11; }
                set { SetStr11(value); }
            }
            public Builder SetStr11(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasStr11 = true;
                result.str11_ = value;
                return this;
            }
            public Builder ClearStr11()
            {
                PrepareBuilder();
                result.hasStr11 = false;
                result.str11_ = "";
                return this;
            }

            public bool HasInt12
            {
                get { return result.hasInt12; }
            }
            public int Int12
            {
                get { return result.Int12; }
                set { SetInt12(value); }
            }
            public Builder SetInt12(int value)
            {
                PrepareBuilder();
                result.hasInt12 = true;
                result.int12_ = value;
                return this;
            }
            public Builder ClearInt12()
            {
                PrepareBuilder();
                result.hasInt12 = false;
                result.int12_ = 0;
                return this;
            }

            public bool HasOfficialUserName
            {
                get { return result.hasOfficialUserName; }
            }
            public string OfficialUserName
            {
                get { return result.OfficialUserName; }
                set { SetOfficialUserName(value); }
            }
            public Builder SetOfficialUserName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasOfficialUserName = true;
                result.officialUserName_ = value;
                return this;
            }
            public Builder ClearOfficialUserName()
            {
                PrepareBuilder();
                result.hasOfficialUserName = false;
                result.officialUserName_ = "";
                return this;
            }

            public bool HasOfficialNickName
            {
                get { return result.hasOfficialNickName; }
            }
            public string OfficialNickName
            {
                get { return result.OfficialNickName; }
                set { SetOfficialNickName(value); }
            }
            public Builder SetOfficialNickName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasOfficialNickName = true;
                result.officialNickName_ = value;
                return this;
            }
            public Builder ClearOfficialNickName()
            {
                PrepareBuilder();
                result.hasOfficialNickName = false;
                result.officialNickName_ = "";
                return this;
            }

            public bool HasInt15
            {
                get { return result.hasInt15; }
            }
            public int Int15
            {
                get { return result.Int15; }
                set { SetInt15(value); }
            }
            public Builder SetInt15(int value)
            {
                PrepareBuilder();
                result.hasInt15 = true;
                result.int15_ = value;
                return this;
            }
            public Builder ClearInt15()
            {
                PrepareBuilder();
                result.hasInt15 = false;
                result.int15_ = 0;
                return this;
            }

            public bool HasFSURL
            {
                get { return result.hasFSURL; }
            }
            public string FSURL
            {
                get { return result.FSURL; }
                set { SetFSURL(value); }
            }
            public Builder SetFSURL(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasFSURL = true;
                result.fSURL_ = value;
                return this;
            }
            public Builder ClearFSURL()
            {
                PrepareBuilder();
                result.hasFSURL = false;
                result.fSURL_ = "";
                return this;
            }
        }
        static AccountInfo()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ServerInfo : pb::GeneratedMessage<ServerInfo, ServerInfo.Builder>
    {
        private ServerInfo() { }
        private static readonly ServerInfo defaultInstance = new ServerInfo().MakeReadOnly();
        private static readonly string[] _serverInfoFieldNames = new string[] { "BuiltinIPList", "NetworkControl", "NewHostList" };
        private static readonly uint[] _serverInfoFieldTags = new uint[] { 26, 18, 10 };
        public static ServerInfo DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ServerInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ServerInfo ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ServerInfo__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ServerInfo, ServerInfo.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ServerInfo__FieldAccessorTable; }
        }

        public const int NewHostListFieldNumber = 1;
        private bool hasNewHostList;
        private global::mm.command.NewHostListType newHostList_;
        public bool HasNewHostList
        {
            get { return hasNewHostList; }
        }
        public global::mm.command.NewHostListType NewHostList
        {
            get { return newHostList_ ?? global::mm.command.NewHostListType.DefaultInstance; }
        }

        public const int NetworkControlFieldNumber = 2;
        private bool hasNetworkControl;
        private global::mm.command.NetworkControlType networkControl_;
        public bool HasNetworkControl
        {
            get { return hasNetworkControl; }
        }
        public global::mm.command.NetworkControlType NetworkControl
        {
            get { return networkControl_ ?? global::mm.command.NetworkControlType.DefaultInstance; }
        }

        public const int BuiltinIPListFieldNumber = 3;
        private bool hasBuiltinIPList;
        private global::mm.command.IPList builtinIPList_;
        public bool HasBuiltinIPList
        {
            get { return hasBuiltinIPList; }
        }
        public global::mm.command.IPList BuiltinIPList
        {
            get { return builtinIPList_ ?? global::mm.command.IPList.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasNewHostList)
                {
                    if (!NewHostList.IsInitialized) return false;
                }
                if (HasBuiltinIPList)
                {
                    if (!BuiltinIPList.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _serverInfoFieldNames;
            if (hasNewHostList)
            {
                output.WriteMessage(1, field_names[2], NewHostList);
            }
            if (hasNetworkControl)
            {
                output.WriteMessage(2, field_names[1], NetworkControl);
            }
            if (hasBuiltinIPList)
            {
                output.WriteMessage(3, field_names[0], BuiltinIPList);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasNewHostList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, NewHostList);
                }
                if (hasNetworkControl)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, NetworkControl);
                }
                if (hasBuiltinIPList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, BuiltinIPList);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ServerInfo ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ServerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ServerInfo ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ServerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ServerInfo ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ServerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ServerInfo ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ServerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ServerInfo ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ServerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ServerInfo MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ServerInfo prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ServerInfo, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ServerInfo cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ServerInfo result;

            private ServerInfo PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ServerInfo original = result;
                    result = new ServerInfo();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ServerInfo MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ServerInfo.Descriptor; }
            }

            public override ServerInfo DefaultInstanceForType
            {
                get { return global::mm.command.ServerInfo.DefaultInstance; }
            }

            public override ServerInfo BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ServerInfo)
                {
                    return MergeFrom((ServerInfo)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ServerInfo other)
            {
                if (other == global::mm.command.ServerInfo.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasNewHostList)
                {
                    MergeNewHostList(other.NewHostList);
                }
                if (other.HasNetworkControl)
                {
                    MergeNetworkControl(other.NetworkControl);
                }
                if (other.HasBuiltinIPList)
                {
                    MergeBuiltinIPList(other.BuiltinIPList);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_serverInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _serverInfoFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.NewHostListType.Builder subBuilder = global::mm.command.NewHostListType.CreateBuilder();
                                if (result.hasNewHostList)
                                {
                                    subBuilder.MergeFrom(NewHostList);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                NewHostList = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.NetworkControlType.Builder subBuilder = global::mm.command.NetworkControlType.CreateBuilder();
                                if (result.hasNetworkControl)
                                {
                                    subBuilder.MergeFrom(NetworkControl);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                NetworkControl = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.IPList.Builder subBuilder = global::mm.command.IPList.CreateBuilder();
                                if (result.hasBuiltinIPList)
                                {
                                    subBuilder.MergeFrom(BuiltinIPList);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                BuiltinIPList = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasNewHostList
            {
                get { return result.hasNewHostList; }
            }
            public global::mm.command.NewHostListType NewHostList
            {
                get { return result.NewHostList; }
                set { SetNewHostList(value); }
            }
            public Builder SetNewHostList(global::mm.command.NewHostListType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNewHostList = true;
                result.newHostList_ = value;
                return this;
            }
            public Builder SetNewHostList(global::mm.command.NewHostListType.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNewHostList = true;
                result.newHostList_ = builderForValue.Build();
                return this;
            }
            public Builder MergeNewHostList(global::mm.command.NewHostListType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNewHostList &&
                    result.newHostList_ != global::mm.command.NewHostListType.DefaultInstance)
                {
                    result.newHostList_ = global::mm.command.NewHostListType.CreateBuilder(result.newHostList_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.newHostList_ = value;
                }
                result.hasNewHostList = true;
                return this;
            }
            public Builder ClearNewHostList()
            {
                PrepareBuilder();
                result.hasNewHostList = false;
                result.newHostList_ = null;
                return this;
            }

            public bool HasNetworkControl
            {
                get { return result.hasNetworkControl; }
            }
            public global::mm.command.NetworkControlType NetworkControl
            {
                get { return result.NetworkControl; }
                set { SetNetworkControl(value); }
            }
            public Builder SetNetworkControl(global::mm.command.NetworkControlType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNetworkControl = true;
                result.networkControl_ = value;
                return this;
            }
            public Builder SetNetworkControl(global::mm.command.NetworkControlType.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNetworkControl = true;
                result.networkControl_ = builderForValue.Build();
                return this;
            }
            public Builder MergeNetworkControl(global::mm.command.NetworkControlType value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNetworkControl &&
                    result.networkControl_ != global::mm.command.NetworkControlType.DefaultInstance)
                {
                    result.networkControl_ = global::mm.command.NetworkControlType.CreateBuilder(result.networkControl_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.networkControl_ = value;
                }
                result.hasNetworkControl = true;
                return this;
            }
            public Builder ClearNetworkControl()
            {
                PrepareBuilder();
                result.hasNetworkControl = false;
                result.networkControl_ = null;
                return this;
            }

            public bool HasBuiltinIPList
            {
                get { return result.hasBuiltinIPList; }
            }
            public global::mm.command.IPList BuiltinIPList
            {
                get { return result.BuiltinIPList; }
                set { SetBuiltinIPList(value); }
            }
            public Builder SetBuiltinIPList(global::mm.command.IPList value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBuiltinIPList = true;
                result.builtinIPList_ = value;
                return this;
            }
            public Builder SetBuiltinIPList(global::mm.command.IPList.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasBuiltinIPList = true;
                result.builtinIPList_ = builderForValue.Build();
                return this;
            }
            public Builder MergeBuiltinIPList(global::mm.command.IPList value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasBuiltinIPList &&
                    result.builtinIPList_ != global::mm.command.IPList.DefaultInstance)
                {
                    result.builtinIPList_ = global::mm.command.IPList.CreateBuilder(result.builtinIPList_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.builtinIPList_ = value;
                }
                result.hasBuiltinIPList = true;
                return this;
            }
            public Builder ClearBuiltinIPList()
            {
                PrepareBuilder();
                result.hasBuiltinIPList = false;
                result.builtinIPList_ = null;
                return this;
            }
        }
        static ServerInfo()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SecAuthRegKeySect : pb::GeneratedMessage<SecAuthRegKeySect, SecAuthRegKeySect.Builder>
    {
        private SecAuthRegKeySect() { }
        private static readonly SecAuthRegKeySect defaultInstance = new SecAuthRegKeySect().MakeReadOnly();
        private static readonly string[] _secAuthRegKeySectFieldNames = new string[] { "authResultFlag", "autoAuthKey", "sessionKey", "svrPubEcdhkey" };
        private static readonly uint[] _secAuthRegKeySectFieldTags = new uint[] { 32, 10, 26, 18 };
        public static SecAuthRegKeySect DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override SecAuthRegKeySect DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override SecAuthRegKeySect ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SecAuthRegKeySect__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<SecAuthRegKeySect, SecAuthRegKeySect.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_SecAuthRegKeySect__FieldAccessorTable; }
        }

        public const int AutoAuthKeyFieldNumber = 1;
        private bool hasAutoAuthKey;
        private global::mm.command.SKBuiltinBuffer_t autoAuthKey_;
        public bool HasAutoAuthKey
        {
            get { return hasAutoAuthKey; }
        }
        public global::mm.command.SKBuiltinBuffer_t AutoAuthKey
        {
            get { return autoAuthKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int SvrPubEcdhkeyFieldNumber = 2;
        private bool hasSvrPubEcdhkey;
        private global::mm.command.ECDHKey svrPubEcdhkey_;
        public bool HasSvrPubEcdhkey
        {
            get { return hasSvrPubEcdhkey; }
        }
        public global::mm.command.ECDHKey SvrPubEcdhkey
        {
            get { return svrPubEcdhkey_ ?? global::mm.command.ECDHKey.DefaultInstance; }
        }

        public const int SessionKeyFieldNumber = 3;
        private bool hasSessionKey;
        private global::mm.command.SKBuiltinBuffer_t sessionKey_;
        public bool HasSessionKey
        {
            get { return hasSessionKey; }
        }
        public global::mm.command.SKBuiltinBuffer_t SessionKey
        {
            get { return sessionKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int AuthResultFlagFieldNumber = 4;
        private bool hasAuthResultFlag;
        private uint authResultFlag_;
        public bool HasAuthResultFlag
        {
            get { return hasAuthResultFlag; }
        }
        [global::System.CLSCompliant(false)]
        public uint AuthResultFlag
        {
            get { return authResultFlag_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (HasAutoAuthKey)
                {
                    if (!AutoAuthKey.IsInitialized) return false;
                }
                if (HasSvrPubEcdhkey)
                {
                    if (!SvrPubEcdhkey.IsInitialized) return false;
                }
                if (HasSessionKey)
                {
                    if (!SessionKey.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _secAuthRegKeySectFieldNames;
            if (hasAutoAuthKey)
            {
                output.WriteMessage(1, field_names[1], AutoAuthKey);
            }
            if (hasSvrPubEcdhkey)
            {
                output.WriteMessage(2, field_names[3], SvrPubEcdhkey);
            }
            if (hasSessionKey)
            {
                output.WriteMessage(3, field_names[2], SessionKey);
            }
            if (hasAuthResultFlag)
            {
                output.WriteUInt32(4, field_names[0], AuthResultFlag);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasAutoAuthKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, AutoAuthKey);
                }
                if (hasSvrPubEcdhkey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, SvrPubEcdhkey);
                }
                if (hasSessionKey)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(3, SessionKey);
                }
                if (hasAuthResultFlag)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(4, AuthResultFlag);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static SecAuthRegKeySect ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SecAuthRegKeySect ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SecAuthRegKeySect ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static SecAuthRegKeySect ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static SecAuthRegKeySect ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SecAuthRegKeySect ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static SecAuthRegKeySect ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static SecAuthRegKeySect ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static SecAuthRegKeySect ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static SecAuthRegKeySect ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private SecAuthRegKeySect MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(SecAuthRegKeySect prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<SecAuthRegKeySect, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(SecAuthRegKeySect cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private SecAuthRegKeySect result;

            private SecAuthRegKeySect PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    SecAuthRegKeySect original = result;
                    result = new SecAuthRegKeySect();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override SecAuthRegKeySect MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.SecAuthRegKeySect.Descriptor; }
            }

            public override SecAuthRegKeySect DefaultInstanceForType
            {
                get { return global::mm.command.SecAuthRegKeySect.DefaultInstance; }
            }

            public override SecAuthRegKeySect BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is SecAuthRegKeySect)
                {
                    return MergeFrom((SecAuthRegKeySect)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(SecAuthRegKeySect other)
            {
                if (other == global::mm.command.SecAuthRegKeySect.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasAutoAuthKey)
                {
                    MergeAutoAuthKey(other.AutoAuthKey);
                }
                if (other.HasSvrPubEcdhkey)
                {
                    MergeSvrPubEcdhkey(other.SvrPubEcdhkey);
                }
                if (other.HasSessionKey)
                {
                    MergeSessionKey(other.SessionKey);
                }
                if (other.HasAuthResultFlag)
                {
                    AuthResultFlag = other.AuthResultFlag;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_secAuthRegKeySectFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _secAuthRegKeySectFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasAutoAuthKey)
                                {
                                    subBuilder.MergeFrom(AutoAuthKey);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                AutoAuthKey = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.ECDHKey.Builder subBuilder = global::mm.command.ECDHKey.CreateBuilder();
                                if (result.hasSvrPubEcdhkey)
                                {
                                    subBuilder.MergeFrom(SvrPubEcdhkey);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                SvrPubEcdhkey = subBuilder.BuildPartial();
                                break;
                            }
                        case 26:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasSessionKey)
                                {
                                    subBuilder.MergeFrom(SessionKey);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                SessionKey = subBuilder.BuildPartial();
                                break;
                            }
                        case 32:
                            {
                                result.hasAuthResultFlag = input.ReadUInt32(ref result.authResultFlag_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasAutoAuthKey
            {
                get { return result.hasAutoAuthKey; }
            }
            public global::mm.command.SKBuiltinBuffer_t AutoAuthKey
            {
                get { return result.AutoAuthKey; }
                set { SetAutoAuthKey(value); }
            }
            public Builder SetAutoAuthKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasAutoAuthKey = true;
                result.autoAuthKey_ = value;
                return this;
            }
            public Builder SetAutoAuthKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasAutoAuthKey = true;
                result.autoAuthKey_ = builderForValue.Build();
                return this;
            }
            public Builder MergeAutoAuthKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasAutoAuthKey &&
                    result.autoAuthKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.autoAuthKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.autoAuthKey_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.autoAuthKey_ = value;
                }
                result.hasAutoAuthKey = true;
                return this;
            }
            public Builder ClearAutoAuthKey()
            {
                PrepareBuilder();
                result.hasAutoAuthKey = false;
                result.autoAuthKey_ = null;
                return this;
            }

            public bool HasSvrPubEcdhkey
            {
                get { return result.hasSvrPubEcdhkey; }
            }
            public global::mm.command.ECDHKey SvrPubEcdhkey
            {
                get { return result.SvrPubEcdhkey; }
                set { SetSvrPubEcdhkey(value); }
            }
            public Builder SetSvrPubEcdhkey(global::mm.command.ECDHKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSvrPubEcdhkey = true;
                result.svrPubEcdhkey_ = value;
                return this;
            }
            public Builder SetSvrPubEcdhkey(global::mm.command.ECDHKey.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSvrPubEcdhkey = true;
                result.svrPubEcdhkey_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSvrPubEcdhkey(global::mm.command.ECDHKey value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSvrPubEcdhkey &&
                    result.svrPubEcdhkey_ != global::mm.command.ECDHKey.DefaultInstance)
                {
                    result.svrPubEcdhkey_ = global::mm.command.ECDHKey.CreateBuilder(result.svrPubEcdhkey_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.svrPubEcdhkey_ = value;
                }
                result.hasSvrPubEcdhkey = true;
                return this;
            }
            public Builder ClearSvrPubEcdhkey()
            {
                PrepareBuilder();
                result.hasSvrPubEcdhkey = false;
                result.svrPubEcdhkey_ = null;
                return this;
            }

            public bool HasSessionKey
            {
                get { return result.hasSessionKey; }
            }
            public global::mm.command.SKBuiltinBuffer_t SessionKey
            {
                get { return result.SessionKey; }
                set { SetSessionKey(value); }
            }
            public Builder SetSessionKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSessionKey = true;
                result.sessionKey_ = value;
                return this;
            }
            public Builder SetSessionKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasSessionKey = true;
                result.sessionKey_ = builderForValue.Build();
                return this;
            }
            public Builder MergeSessionKey(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasSessionKey &&
                    result.sessionKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.sessionKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.sessionKey_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.sessionKey_ = value;
                }
                result.hasSessionKey = true;
                return this;
            }
            public Builder ClearSessionKey()
            {
                PrepareBuilder();
                result.hasSessionKey = false;
                result.sessionKey_ = null;
                return this;
            }

            public bool HasAuthResultFlag
            {
                get { return result.hasAuthResultFlag; }
            }
            [global::System.CLSCompliant(false)]
            public uint AuthResultFlag
            {
                get { return result.AuthResultFlag; }
                set { SetAuthResultFlag(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetAuthResultFlag(uint value)
            {
                PrepareBuilder();
                result.hasAuthResultFlag = true;
                result.authResultFlag_ = value;
                return this;
            }
            public Builder ClearAuthResultFlag()
            {
                PrepareBuilder();
                result.hasAuthResultFlag = false;
                result.authResultFlag_ = 0;
                return this;
            }
        }
        static SecAuthRegKeySect()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class LoginQRCodeNotifyPkg : pb::GeneratedMessage<LoginQRCodeNotifyPkg, LoginQRCodeNotifyPkg.Builder>
    {
        private LoginQRCodeNotifyPkg() { }
        private static readonly LoginQRCodeNotifyPkg defaultInstance = new LoginQRCodeNotifyPkg().MakeReadOnly();
        private static readonly string[] _loginQRCodeNotifyPkgFieldNames = new string[] { "NotifyData", "opcode" };
        private static readonly uint[] _loginQRCodeNotifyPkgFieldTags = new uint[] { 10, 16 };
        public static LoginQRCodeNotifyPkg DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override LoginQRCodeNotifyPkg DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override LoginQRCodeNotifyPkg ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_LoginQRCodeNotifyPkg__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<LoginQRCodeNotifyPkg, LoginQRCodeNotifyPkg.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_LoginQRCodeNotifyPkg__FieldAccessorTable; }
        }

        public const int NotifyDataFieldNumber = 1;
        private bool hasNotifyData;
        private global::mm.command.SKBuiltinBuffer_t notifyData_;
        public bool HasNotifyData
        {
            get { return hasNotifyData; }
        }
        public global::mm.command.SKBuiltinBuffer_t NotifyData
        {
            get { return notifyData_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
        }

        public const int OpcodeFieldNumber = 2;
        private bool hasOpcode;
        private uint opcode_;
        public bool HasOpcode
        {
            get { return hasOpcode; }
        }
        [global::System.CLSCompliant(false)]
        public uint Opcode
        {
            get { return opcode_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasNotifyData) return false;
                if (!hasOpcode) return false;
                if (!NotifyData.IsInitialized) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _loginQRCodeNotifyPkgFieldNames;
            if (hasNotifyData)
            {
                output.WriteMessage(1, field_names[0], NotifyData);
            }
            if (hasOpcode)
            {
                output.WriteUInt32(2, field_names[1], Opcode);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasNotifyData)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, NotifyData);
                }
                if (hasOpcode)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(2, Opcode);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static LoginQRCodeNotifyPkg ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LoginQRCodeNotifyPkg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LoginQRCodeNotifyPkg ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static LoginQRCodeNotifyPkg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static LoginQRCodeNotifyPkg ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LoginQRCodeNotifyPkg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static LoginQRCodeNotifyPkg ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static LoginQRCodeNotifyPkg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static LoginQRCodeNotifyPkg ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static LoginQRCodeNotifyPkg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private LoginQRCodeNotifyPkg MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(LoginQRCodeNotifyPkg prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<LoginQRCodeNotifyPkg, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(LoginQRCodeNotifyPkg cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private LoginQRCodeNotifyPkg result;

            private LoginQRCodeNotifyPkg PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    LoginQRCodeNotifyPkg original = result;
                    result = new LoginQRCodeNotifyPkg();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override LoginQRCodeNotifyPkg MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.LoginQRCodeNotifyPkg.Descriptor; }
            }

            public override LoginQRCodeNotifyPkg DefaultInstanceForType
            {
                get { return global::mm.command.LoginQRCodeNotifyPkg.DefaultInstance; }
            }

            public override LoginQRCodeNotifyPkg BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is LoginQRCodeNotifyPkg)
                {
                    return MergeFrom((LoginQRCodeNotifyPkg)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(LoginQRCodeNotifyPkg other)
            {
                if (other == global::mm.command.LoginQRCodeNotifyPkg.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasNotifyData)
                {
                    MergeNotifyData(other.NotifyData);
                }
                if (other.HasOpcode)
                {
                    Opcode = other.Opcode;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_loginQRCodeNotifyPkgFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _loginQRCodeNotifyPkgFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
                                if (result.hasNotifyData)
                                {
                                    subBuilder.MergeFrom(NotifyData);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                NotifyData = subBuilder.BuildPartial();
                                break;
                            }
                        case 16:
                            {
                                result.hasOpcode = input.ReadUInt32(ref result.opcode_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasNotifyData
            {
                get { return result.hasNotifyData; }
            }
            public global::mm.command.SKBuiltinBuffer_t NotifyData
            {
                get { return result.NotifyData; }
                set { SetNotifyData(value); }
            }
            public Builder SetNotifyData(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNotifyData = true;
                result.notifyData_ = value;
                return this;
            }
            public Builder SetNotifyData(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasNotifyData = true;
                result.notifyData_ = builderForValue.Build();
                return this;
            }
            public Builder MergeNotifyData(global::mm.command.SKBuiltinBuffer_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasNotifyData &&
                    result.notifyData_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance)
                {
                    result.notifyData_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.notifyData_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.notifyData_ = value;
                }
                result.hasNotifyData = true;
                return this;
            }
            public Builder ClearNotifyData()
            {
                PrepareBuilder();
                result.hasNotifyData = false;
                result.notifyData_ = null;
                return this;
            }

            public bool HasOpcode
            {
                get { return result.hasOpcode; }
            }
            [global::System.CLSCompliant(false)]
            public uint Opcode
            {
                get { return result.Opcode; }
                set { SetOpcode(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetOpcode(uint value)
            {
                PrepareBuilder();
                result.hasOpcode = true;
                result.opcode_ = value;
                return this;
            }
            public Builder ClearOpcode()
            {
                PrepareBuilder();
                result.hasOpcode = false;
                result.opcode_ = 0;
                return this;
            }
        }
        static LoginQRCodeNotifyPkg()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class NotifyMsg : pb::GeneratedMessage<NotifyMsg, NotifyMsg.Builder>
    {
        private NotifyMsg() { }
        private static readonly NotifyMsg defaultInstance = new NotifyMsg().MakeReadOnly();
        private static readonly string[] _notifyMsgFieldNames = new string[] { "imgurl", "nickname", "opcode", "pass", "platform", "unkownint10", "unkownint6", "unkownint8", "username", "uuid" };
        private static readonly uint[] _notifyMsgFieldTags = new uint[] { 42, 58, 16, 34, 90, 80, 48, 64, 26, 10 };
        public static NotifyMsg DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override NotifyMsg DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override NotifyMsg ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NotifyMsg__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<NotifyMsg, NotifyMsg.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_NotifyMsg__FieldAccessorTable; }
        }

        public const int UuidFieldNumber = 1;
        private bool hasUuid;
        private string uuid_ = "";
        public bool HasUuid
        {
            get { return hasUuid; }
        }
        public string Uuid
        {
            get { return uuid_; }
        }

        public const int OpcodeFieldNumber = 2;
        private bool hasOpcode;
        private uint opcode_;
        public bool HasOpcode
        {
            get { return hasOpcode; }
        }
        [global::System.CLSCompliant(false)]
        public uint Opcode
        {
            get { return opcode_; }
        }

        public const int UsernameFieldNumber = 3;
        private bool hasUsername;
        private string username_ = "";
        public bool HasUsername
        {
            get { return hasUsername; }
        }
        public string Username
        {
            get { return username_; }
        }

        public const int PassFieldNumber = 4;
        private bool hasPass;
        private string pass_ = "";
        public bool HasPass
        {
            get { return hasPass; }
        }
        public string Pass
        {
            get { return pass_; }
        }

        public const int ImgurlFieldNumber = 5;
        private bool hasImgurl;
        private string imgurl_ = "";
        public bool HasImgurl
        {
            get { return hasImgurl; }
        }
        public string Imgurl
        {
            get { return imgurl_; }
        }

        public const int Unkownint6FieldNumber = 6;
        private bool hasUnkownint6;
        private uint unkownint6_;
        public bool HasUnkownint6
        {
            get { return hasUnkownint6; }
        }
        [global::System.CLSCompliant(false)]
        public uint Unkownint6
        {
            get { return unkownint6_; }
        }

        public const int NicknameFieldNumber = 7;
        private bool hasNickname;
        private string nickname_ = "";
        public bool HasNickname
        {
            get { return hasNickname; }
        }
        public string Nickname
        {
            get { return nickname_; }
        }

        public const int Unkownint8FieldNumber = 8;
        private bool hasUnkownint8;
        private uint unkownint8_;
        public bool HasUnkownint8
        {
            get { return hasUnkownint8; }
        }
        [global::System.CLSCompliant(false)]
        public uint Unkownint8
        {
            get { return unkownint8_; }
        }

        public const int Unkownint10FieldNumber = 10;
        private bool hasUnkownint10;
        private uint unkownint10_;
        public bool HasUnkownint10
        {
            get { return hasUnkownint10; }
        }
        [global::System.CLSCompliant(false)]
        public uint Unkownint10
        {
            get { return unkownint10_; }
        }

        public const int PlatformFieldNumber = 11;
        private bool hasPlatform;
        private string platform_ = "";
        public bool HasPlatform
        {
            get { return hasPlatform; }
        }
        public string Platform
        {
            get { return platform_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasUuid) return false;
                if (!hasOpcode) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _notifyMsgFieldNames;
            if (hasUuid)
            {
                output.WriteString(1, field_names[9], Uuid);
            }
            if (hasOpcode)
            {
                output.WriteUInt32(2, field_names[2], Opcode);
            }
            if (hasUsername)
            {
                output.WriteString(3, field_names[8], Username);
            }
            if (hasPass)
            {
                output.WriteString(4, field_names[3], Pass);
            }
            if (hasImgurl)
            {
                output.WriteString(5, field_names[0], Imgurl);
            }
            if (hasUnkownint6)
            {
                output.WriteUInt32(6, field_names[6], Unkownint6);
            }
            if (hasNickname)
            {
                output.WriteString(7, field_names[1], Nickname);
            }
            if (hasUnkownint8)
            {
                output.WriteUInt32(8, field_names[7], Unkownint8);
            }
            if (hasUnkownint10)
            {
                output.WriteUInt32(10, field_names[5], Unkownint10);
            }
            if (hasPlatform)
            {
                output.WriteString(11, field_names[4], Platform);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUuid)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Uuid);
                }
                if (hasOpcode)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(2, Opcode);
                }
                if (hasUsername)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, Username);
                }
                if (hasPass)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, Pass);
                }
                if (hasImgurl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(5, Imgurl);
                }
                if (hasUnkownint6)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, Unkownint6);
                }
                if (hasNickname)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(7, Nickname);
                }
                if (hasUnkownint8)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(8, Unkownint8);
                }
                if (hasUnkownint10)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(10, Unkownint10);
                }
                if (hasPlatform)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(11, Platform);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static NotifyMsg ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NotifyMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NotifyMsg ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static NotifyMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static NotifyMsg ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NotifyMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static NotifyMsg ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static NotifyMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static NotifyMsg ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static NotifyMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private NotifyMsg MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(NotifyMsg prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<NotifyMsg, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(NotifyMsg cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private NotifyMsg result;

            private NotifyMsg PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    NotifyMsg original = result;
                    result = new NotifyMsg();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override NotifyMsg MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.NotifyMsg.Descriptor; }
            }

            public override NotifyMsg DefaultInstanceForType
            {
                get { return global::mm.command.NotifyMsg.DefaultInstance; }
            }

            public override NotifyMsg BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is NotifyMsg)
                {
                    return MergeFrom((NotifyMsg)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(NotifyMsg other)
            {
                if (other == global::mm.command.NotifyMsg.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUuid)
                {
                    Uuid = other.Uuid;
                }
                if (other.HasOpcode)
                {
                    Opcode = other.Opcode;
                }
                if (other.HasUsername)
                {
                    Username = other.Username;
                }
                if (other.HasPass)
                {
                    Pass = other.Pass;
                }
                if (other.HasImgurl)
                {
                    Imgurl = other.Imgurl;
                }
                if (other.HasUnkownint6)
                {
                    Unkownint6 = other.Unkownint6;
                }
                if (other.HasNickname)
                {
                    Nickname = other.Nickname;
                }
                if (other.HasUnkownint8)
                {
                    Unkownint8 = other.Unkownint8;
                }
                if (other.HasUnkownint10)
                {
                    Unkownint10 = other.Unkownint10;
                }
                if (other.HasPlatform)
                {
                    Platform = other.Platform;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_notifyMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _notifyMsgFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasUuid = input.ReadString(ref result.uuid_);
                                break;
                            }
                        case 16:
                            {
                                result.hasOpcode = input.ReadUInt32(ref result.opcode_);
                                break;
                            }
                        case 26:
                            {
                                result.hasUsername = input.ReadString(ref result.username_);
                                break;
                            }
                        case 34:
                            {
                                result.hasPass = input.ReadString(ref result.pass_);
                                break;
                            }
                        case 42:
                            {
                                result.hasImgurl = input.ReadString(ref result.imgurl_);
                                break;
                            }
                        case 48:
                            {
                                result.hasUnkownint6 = input.ReadUInt32(ref result.unkownint6_);
                                break;
                            }
                        case 58:
                            {
                                result.hasNickname = input.ReadString(ref result.nickname_);
                                break;
                            }
                        case 64:
                            {
                                result.hasUnkownint8 = input.ReadUInt32(ref result.unkownint8_);
                                break;
                            }
                        case 80:
                            {
                                result.hasUnkownint10 = input.ReadUInt32(ref result.unkownint10_);
                                break;
                            }
                        case 90:
                            {
                                result.hasPlatform = input.ReadString(ref result.platform_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUuid
            {
                get { return result.hasUuid; }
            }
            public string Uuid
            {
                get { return result.Uuid; }
                set { SetUuid(value); }
            }
            public Builder SetUuid(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUuid = true;
                result.uuid_ = value;
                return this;
            }
            public Builder ClearUuid()
            {
                PrepareBuilder();
                result.hasUuid = false;
                result.uuid_ = "";
                return this;
            }

            public bool HasOpcode
            {
                get { return result.hasOpcode; }
            }
            [global::System.CLSCompliant(false)]
            public uint Opcode
            {
                get { return result.Opcode; }
                set { SetOpcode(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetOpcode(uint value)
            {
                PrepareBuilder();
                result.hasOpcode = true;
                result.opcode_ = value;
                return this;
            }
            public Builder ClearOpcode()
            {
                PrepareBuilder();
                result.hasOpcode = false;
                result.opcode_ = 0;
                return this;
            }

            public bool HasUsername
            {
                get { return result.hasUsername; }
            }
            public string Username
            {
                get { return result.Username; }
                set { SetUsername(value); }
            }
            public Builder SetUsername(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUsername = true;
                result.username_ = value;
                return this;
            }
            public Builder ClearUsername()
            {
                PrepareBuilder();
                result.hasUsername = false;
                result.username_ = "";
                return this;
            }

            public bool HasPass
            {
                get { return result.hasPass; }
            }
            public string Pass
            {
                get { return result.Pass; }
                set { SetPass(value); }
            }
            public Builder SetPass(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPass = true;
                result.pass_ = value;
                return this;
            }
            public Builder ClearPass()
            {
                PrepareBuilder();
                result.hasPass = false;
                result.pass_ = "";
                return this;
            }

            public bool HasImgurl
            {
                get { return result.hasImgurl; }
            }
            public string Imgurl
            {
                get { return result.Imgurl; }
                set { SetImgurl(value); }
            }
            public Builder SetImgurl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasImgurl = true;
                result.imgurl_ = value;
                return this;
            }
            public Builder ClearImgurl()
            {
                PrepareBuilder();
                result.hasImgurl = false;
                result.imgurl_ = "";
                return this;
            }

            public bool HasUnkownint6
            {
                get { return result.hasUnkownint6; }
            }
            [global::System.CLSCompliant(false)]
            public uint Unkownint6
            {
                get { return result.Unkownint6; }
                set { SetUnkownint6(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetUnkownint6(uint value)
            {
                PrepareBuilder();
                result.hasUnkownint6 = true;
                result.unkownint6_ = value;
                return this;
            }
            public Builder ClearUnkownint6()
            {
                PrepareBuilder();
                result.hasUnkownint6 = false;
                result.unkownint6_ = 0;
                return this;
            }

            public bool HasNickname
            {
                get { return result.hasNickname; }
            }
            public string Nickname
            {
                get { return result.Nickname; }
                set { SetNickname(value); }
            }
            public Builder SetNickname(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickname = true;
                result.nickname_ = value;
                return this;
            }
            public Builder ClearNickname()
            {
                PrepareBuilder();
                result.hasNickname = false;
                result.nickname_ = "";
                return this;
            }

            public bool HasUnkownint8
            {
                get { return result.hasUnkownint8; }
            }
            [global::System.CLSCompliant(false)]
            public uint Unkownint8
            {
                get { return result.Unkownint8; }
                set { SetUnkownint8(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetUnkownint8(uint value)
            {
                PrepareBuilder();
                result.hasUnkownint8 = true;
                result.unkownint8_ = value;
                return this;
            }
            public Builder ClearUnkownint8()
            {
                PrepareBuilder();
                result.hasUnkownint8 = false;
                result.unkownint8_ = 0;
                return this;
            }

            public bool HasUnkownint10
            {
                get { return result.hasUnkownint10; }
            }
            [global::System.CLSCompliant(false)]
            public uint Unkownint10
            {
                get { return result.Unkownint10; }
                set { SetUnkownint10(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetUnkownint10(uint value)
            {
                PrepareBuilder();
                result.hasUnkownint10 = true;
                result.unkownint10_ = value;
                return this;
            }
            public Builder ClearUnkownint10()
            {
                PrepareBuilder();
                result.hasUnkownint10 = false;
                result.unkownint10_ = 0;
                return this;
            }

            public bool HasPlatform
            {
                get { return result.hasPlatform; }
            }
            public string Platform
            {
                get { return result.Platform; }
                set { SetPlatform(value); }
            }
            public Builder SetPlatform(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasPlatform = true;
                result.platform_ = value;
                return this;
            }
            public Builder ClearPlatform()
            {
                PrepareBuilder();
                result.hasPlatform = false;
                result.platform_ = "";
                return this;
            }
        }
        static NotifyMsg()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class HTTPHeader : pb::GeneratedMessage<HTTPHeader, HTTPHeader.Builder>
    {
        private HTTPHeader() { }
        private static readonly HTTPHeader defaultInstance = new HTTPHeader().MakeReadOnly();
        private static readonly string[] _hTTPHeaderFieldNames = new string[] { "key", "value" };
        private static readonly uint[] _hTTPHeaderFieldTags = new uint[] { 10, 18 };
        public static HTTPHeader DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override HTTPHeader DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override HTTPHeader ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_HTTPHeader__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<HTTPHeader, HTTPHeader.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_HTTPHeader__FieldAccessorTable; }
        }

        public const int KeyFieldNumber = 1;
        private bool hasKey;
        private string key_ = "";
        public bool HasKey
        {
            get { return hasKey; }
        }
        public string Key
        {
            get { return key_; }
        }

        public const int ValueFieldNumber = 2;
        private bool hasValue;
        private string value_ = "";
        public bool HasValue
        {
            get { return hasValue; }
        }
        public string Value
        {
            get { return value_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasKey) return false;
                if (!hasValue) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _hTTPHeaderFieldNames;
            if (hasKey)
            {
                output.WriteString(1, field_names[0], Key);
            }
            if (hasValue)
            {
                output.WriteString(2, field_names[1], Value);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasKey)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, Key);
                }
                if (hasValue)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, Value);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static HTTPHeader ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HTTPHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HTTPHeader ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static HTTPHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static HTTPHeader ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HTTPHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static HTTPHeader ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static HTTPHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static HTTPHeader ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static HTTPHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private HTTPHeader MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(HTTPHeader prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<HTTPHeader, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(HTTPHeader cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private HTTPHeader result;

            private HTTPHeader PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    HTTPHeader original = result;
                    result = new HTTPHeader();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override HTTPHeader MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.HTTPHeader.Descriptor; }
            }

            public override HTTPHeader DefaultInstanceForType
            {
                get { return global::mm.command.HTTPHeader.DefaultInstance; }
            }

            public override HTTPHeader BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is HTTPHeader)
                {
                    return MergeFrom((HTTPHeader)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(HTTPHeader other)
            {
                if (other == global::mm.command.HTTPHeader.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasKey)
                {
                    Key = other.Key;
                }
                if (other.HasValue)
                {
                    Value = other.Value;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_hTTPHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _hTTPHeaderFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasKey = input.ReadString(ref result.key_);
                                break;
                            }
                        case 18:
                            {
                                result.hasValue = input.ReadString(ref result.value_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasKey
            {
                get { return result.hasKey; }
            }
            public string Key
            {
                get { return result.Key; }
                set { SetKey(value); }
            }
            public Builder SetKey(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasKey = true;
                result.key_ = value;
                return this;
            }
            public Builder ClearKey()
            {
                PrepareBuilder();
                result.hasKey = false;
                result.key_ = "";
                return this;
            }

            public bool HasValue
            {
                get { return result.hasValue; }
            }
            public string Value
            {
                get { return result.Value; }
                set { SetValue(value); }
            }
            public Builder SetValue(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasValue = true;
                result.value_ = value;
                return this;
            }
            public Builder ClearValue()
            {
                PrepareBuilder();
                result.hasValue = false;
                result.value_ = "";
                return this;
            }
        }
        static HTTPHeader()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class DeepLinkBitSet : pb::GeneratedMessage<DeepLinkBitSet, DeepLinkBitSet.Builder>
    {
        private DeepLinkBitSet() { }
        private static readonly DeepLinkBitSet defaultInstance = new DeepLinkBitSet().MakeReadOnly();
        private static readonly string[] _deepLinkBitSetFieldNames = new string[] { "bitValue" };
        private static readonly uint[] _deepLinkBitSetFieldTags = new uint[] { 8 };
        public static DeepLinkBitSet DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override DeepLinkBitSet DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override DeepLinkBitSet ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_DeepLinkBitSet__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<DeepLinkBitSet, DeepLinkBitSet.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_DeepLinkBitSet__FieldAccessorTable; }
        }

        public const int BitValueFieldNumber = 1;
        private bool hasBitValue;
        private ulong bitValue_;
        public bool HasBitValue
        {
            get { return hasBitValue; }
        }
        [global::System.CLSCompliant(false)]
        public ulong BitValue
        {
            get { return bitValue_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasBitValue) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _deepLinkBitSetFieldNames;
            if (hasBitValue)
            {
                output.WriteUInt64(1, field_names[0], BitValue);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasBitValue)
                {
                    size += pb::CodedOutputStream.ComputeUInt64Size(1, BitValue);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static DeepLinkBitSet ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DeepLinkBitSet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DeepLinkBitSet ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static DeepLinkBitSet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static DeepLinkBitSet ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DeepLinkBitSet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static DeepLinkBitSet ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static DeepLinkBitSet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static DeepLinkBitSet ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static DeepLinkBitSet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private DeepLinkBitSet MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(DeepLinkBitSet prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<DeepLinkBitSet, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(DeepLinkBitSet cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private DeepLinkBitSet result;

            private DeepLinkBitSet PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    DeepLinkBitSet original = result;
                    result = new DeepLinkBitSet();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override DeepLinkBitSet MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.DeepLinkBitSet.Descriptor; }
            }

            public override DeepLinkBitSet DefaultInstanceForType
            {
                get { return global::mm.command.DeepLinkBitSet.DefaultInstance; }
            }

            public override DeepLinkBitSet BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is DeepLinkBitSet)
                {
                    return MergeFrom((DeepLinkBitSet)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(DeepLinkBitSet other)
            {
                if (other == global::mm.command.DeepLinkBitSet.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasBitValue)
                {
                    BitValue = other.BitValue;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_deepLinkBitSetFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _deepLinkBitSetFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasBitValue = input.ReadUInt64(ref result.bitValue_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasBitValue
            {
                get { return result.hasBitValue; }
            }
            [global::System.CLSCompliant(false)]
            public ulong BitValue
            {
                get { return result.BitValue; }
                set { SetBitValue(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetBitValue(ulong value)
            {
                PrepareBuilder();
                result.hasBitValue = true;
                result.bitValue_ = value;
                return this;
            }
            public Builder ClearBitValue()
            {
                PrepareBuilder();
                result.hasBitValue = false;
                result.bitValue_ = 0UL;
                return this;
            }
        }
        static DeepLinkBitSet()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ChatRoomMemberData : pb::GeneratedMessage<ChatRoomMemberData, ChatRoomMemberData.Builder>
    {
        private ChatRoomMemberData() { }
        private static readonly ChatRoomMemberData defaultInstance = new ChatRoomMemberData().MakeReadOnly();
        private static readonly string[] _chatRoomMemberDataFieldNames = new string[] { "chatroomMember", "infoMask", "memberCount" };
        private static readonly uint[] _chatRoomMemberDataFieldTags = new uint[] { 18, 24, 8 };
        public static ChatRoomMemberData DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ChatRoomMemberData DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ChatRoomMemberData ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ChatRoomMemberData__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ChatRoomMemberData, ChatRoomMemberData.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ChatRoomMemberData__FieldAccessorTable; }
        }

        public const int MemberCountFieldNumber = 1;
        private bool hasMemberCount;
        private uint memberCount_;
        public bool HasMemberCount
        {
            get { return hasMemberCount; }
        }
        [global::System.CLSCompliant(false)]
        public uint MemberCount
        {
            get { return memberCount_; }
        }

        public const int ChatroomMemberFieldNumber = 2;
        private pbc::PopsicleList<global::mm.command.ChatroomMemberInfo> chatroomMember_ = new pbc::PopsicleList<global::mm.command.ChatroomMemberInfo>();
        public scg::IList<global::mm.command.ChatroomMemberInfo> ChatroomMemberList
        {
            get { return chatroomMember_; }
        }
        public int ChatroomMemberCount
        {
            get { return chatroomMember_.Count; }
        }
        public global::mm.command.ChatroomMemberInfo GetChatroomMember(int index)
        {
            return chatroomMember_[index];
        }

        public const int InfoMaskFieldNumber = 3;
        private bool hasInfoMask;
        private uint infoMask_;
        public bool HasInfoMask
        {
            get { return hasInfoMask; }
        }
        [global::System.CLSCompliant(false)]
        public uint InfoMask
        {
            get { return infoMask_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasMemberCount) return false;
                foreach (global::mm.command.ChatroomMemberInfo element in ChatroomMemberList)
                {
                    if (!element.IsInitialized) return false;
                }
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _chatRoomMemberDataFieldNames;
            if (hasMemberCount)
            {
                output.WriteUInt32(1, field_names[2], MemberCount);
            }
            if (chatroomMember_.Count > 0)
            {
                output.WriteMessageArray(2, field_names[0], chatroomMember_);
            }
            if (hasInfoMask)
            {
                output.WriteUInt32(3, field_names[1], InfoMask);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasMemberCount)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(1, MemberCount);
                }
                foreach (global::mm.command.ChatroomMemberInfo element in ChatroomMemberList)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, element);
                }
                if (hasInfoMask)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(3, InfoMask);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ChatRoomMemberData ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChatRoomMemberData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChatRoomMemberData ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChatRoomMemberData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChatRoomMemberData ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChatRoomMemberData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ChatRoomMemberData ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ChatRoomMemberData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ChatRoomMemberData ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChatRoomMemberData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ChatRoomMemberData MakeReadOnly()
        {
            chatroomMember_.MakeReadOnly();
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ChatRoomMemberData prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ChatRoomMemberData, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ChatRoomMemberData cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ChatRoomMemberData result;

            private ChatRoomMemberData PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ChatRoomMemberData original = result;
                    result = new ChatRoomMemberData();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ChatRoomMemberData MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ChatRoomMemberData.Descriptor; }
            }

            public override ChatRoomMemberData DefaultInstanceForType
            {
                get { return global::mm.command.ChatRoomMemberData.DefaultInstance; }
            }

            public override ChatRoomMemberData BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ChatRoomMemberData)
                {
                    return MergeFrom((ChatRoomMemberData)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ChatRoomMemberData other)
            {
                if (other == global::mm.command.ChatRoomMemberData.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasMemberCount)
                {
                    MemberCount = other.MemberCount;
                }
                if (other.chatroomMember_.Count != 0)
                {
                    result.chatroomMember_.Add(other.chatroomMember_);
                }
                if (other.HasInfoMask)
                {
                    InfoMask = other.InfoMask;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_chatRoomMemberDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _chatRoomMemberDataFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasMemberCount = input.ReadUInt32(ref result.memberCount_);
                                break;
                            }
                        case 18:
                            {
                                input.ReadMessageArray(tag, field_name, result.chatroomMember_, global::mm.command.ChatroomMemberInfo.DefaultInstance, extensionRegistry);
                                break;
                            }
                        case 24:
                            {
                                result.hasInfoMask = input.ReadUInt32(ref result.infoMask_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasMemberCount
            {
                get { return result.hasMemberCount; }
            }
            [global::System.CLSCompliant(false)]
            public uint MemberCount
            {
                get { return result.MemberCount; }
                set { SetMemberCount(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetMemberCount(uint value)
            {
                PrepareBuilder();
                result.hasMemberCount = true;
                result.memberCount_ = value;
                return this;
            }
            public Builder ClearMemberCount()
            {
                PrepareBuilder();
                result.hasMemberCount = false;
                result.memberCount_ = 0;
                return this;
            }

            public pbc::IPopsicleList<global::mm.command.ChatroomMemberInfo> ChatroomMemberList
            {
                get { return PrepareBuilder().chatroomMember_; }
            }
            public int ChatroomMemberCount
            {
                get { return result.ChatroomMemberCount; }
            }
            public global::mm.command.ChatroomMemberInfo GetChatroomMember(int index)
            {
                return result.GetChatroomMember(index);
            }
            public Builder SetChatroomMember(int index, global::mm.command.ChatroomMemberInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.chatroomMember_[index] = value;
                return this;
            }
            public Builder SetChatroomMember(int index, global::mm.command.ChatroomMemberInfo.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.chatroomMember_[index] = builderForValue.Build();
                return this;
            }
            public Builder AddChatroomMember(global::mm.command.ChatroomMemberInfo value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.chatroomMember_.Add(value);
                return this;
            }
            public Builder AddChatroomMember(global::mm.command.ChatroomMemberInfo.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.chatroomMember_.Add(builderForValue.Build());
                return this;
            }
            public Builder AddRangeChatroomMember(scg::IEnumerable<global::mm.command.ChatroomMemberInfo> values)
            {
                PrepareBuilder();
                result.chatroomMember_.Add(values);
                return this;
            }
            public Builder ClearChatroomMember()
            {
                PrepareBuilder();
                result.chatroomMember_.Clear();
                return this;
            }

            public bool HasInfoMask
            {
                get { return result.hasInfoMask; }
            }
            [global::System.CLSCompliant(false)]
            public uint InfoMask
            {
                get { return result.InfoMask; }
                set { SetInfoMask(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetInfoMask(uint value)
            {
                PrepareBuilder();
                result.hasInfoMask = true;
                result.infoMask_ = value;
                return this;
            }
            public Builder ClearInfoMask()
            {
                PrepareBuilder();
                result.hasInfoMask = false;
                result.infoMask_ = 0;
                return this;
            }
        }
        static ChatRoomMemberData()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ChatroomMemberInfo : pb::GeneratedMessage<ChatroomMemberInfo, ChatroomMemberInfo.Builder>
    {
        private ChatroomMemberInfo() { }
        private static readonly ChatroomMemberInfo defaultInstance = new ChatroomMemberInfo().MakeReadOnly();
        private static readonly string[] _chatroomMemberInfoFieldNames = new string[] { "bigHeadImgUrl", "int6", "int8", "nickName", "owner", "smallHeadImgUrl", "userName" };
        private static readonly uint[] _chatroomMemberInfoFieldTags = new uint[] { 34, 48, 64, 18, 58, 42, 10 };
        public static ChatroomMemberInfo DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ChatroomMemberInfo DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ChatroomMemberInfo ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ChatroomMemberInfo__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ChatroomMemberInfo, ChatroomMemberInfo.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ChatroomMemberInfo__FieldAccessorTable; }
        }

        public const int UserNameFieldNumber = 1;
        private bool hasUserName;
        private string userName_ = "";
        public bool HasUserName
        {
            get { return hasUserName; }
        }
        public string UserName
        {
            get { return userName_; }
        }

        public const int NickNameFieldNumber = 2;
        private bool hasNickName;
        private string nickName_ = "";
        public bool HasNickName
        {
            get { return hasNickName; }
        }
        public string NickName
        {
            get { return nickName_; }
        }

        public const int BigHeadImgUrlFieldNumber = 4;
        private bool hasBigHeadImgUrl;
        private string bigHeadImgUrl_ = "";
        public bool HasBigHeadImgUrl
        {
            get { return hasBigHeadImgUrl; }
        }
        public string BigHeadImgUrl
        {
            get { return bigHeadImgUrl_; }
        }

        public const int SmallHeadImgUrlFieldNumber = 5;
        private bool hasSmallHeadImgUrl;
        private string smallHeadImgUrl_ = "";
        public bool HasSmallHeadImgUrl
        {
            get { return hasSmallHeadImgUrl; }
        }
        public string SmallHeadImgUrl
        {
            get { return smallHeadImgUrl_; }
        }

        public const int Int6FieldNumber = 6;
        private bool hasInt6;
        private uint int6_;
        public bool HasInt6
        {
            get { return hasInt6; }
        }
        [global::System.CLSCompliant(false)]
        public uint Int6
        {
            get { return int6_; }
        }

        public const int OwnerFieldNumber = 7;
        private bool hasOwner;
        private string owner_ = "";
        public bool HasOwner
        {
            get { return hasOwner; }
        }
        public string Owner
        {
            get { return owner_; }
        }

        public const int Int8FieldNumber = 8;
        private bool hasInt8;
        private uint int8_;
        public bool HasInt8
        {
            get { return hasInt8; }
        }
        [global::System.CLSCompliant(false)]
        public uint Int8
        {
            get { return int8_; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasUserName) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _chatroomMemberInfoFieldNames;
            if (hasUserName)
            {
                output.WriteString(1, field_names[6], UserName);
            }
            if (hasNickName)
            {
                output.WriteString(2, field_names[3], NickName);
            }
            if (hasBigHeadImgUrl)
            {
                output.WriteString(4, field_names[0], BigHeadImgUrl);
            }
            if (hasSmallHeadImgUrl)
            {
                output.WriteString(5, field_names[5], SmallHeadImgUrl);
            }
            if (hasInt6)
            {
                output.WriteUInt32(6, field_names[1], Int6);
            }
            if (hasOwner)
            {
                output.WriteString(7, field_names[4], Owner);
            }
            if (hasInt8)
            {
                output.WriteUInt32(8, field_names[2], Int8);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasUserName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(1, UserName);
                }
                if (hasNickName)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, NickName);
                }
                if (hasBigHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, BigHeadImgUrl);
                }
                if (hasSmallHeadImgUrl)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(5, SmallHeadImgUrl);
                }
                if (hasInt6)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, Int6);
                }
                if (hasOwner)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(7, Owner);
                }
                if (hasInt8)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(8, Int8);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ChatroomMemberInfo ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChatroomMemberInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChatroomMemberInfo ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ChatroomMemberInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ChatroomMemberInfo ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChatroomMemberInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ChatroomMemberInfo ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ChatroomMemberInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ChatroomMemberInfo ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ChatroomMemberInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ChatroomMemberInfo MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ChatroomMemberInfo prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ChatroomMemberInfo, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ChatroomMemberInfo cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ChatroomMemberInfo result;

            private ChatroomMemberInfo PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ChatroomMemberInfo original = result;
                    result = new ChatroomMemberInfo();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ChatroomMemberInfo MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ChatroomMemberInfo.Descriptor; }
            }

            public override ChatroomMemberInfo DefaultInstanceForType
            {
                get { return global::mm.command.ChatroomMemberInfo.DefaultInstance; }
            }

            public override ChatroomMemberInfo BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ChatroomMemberInfo)
                {
                    return MergeFrom((ChatroomMemberInfo)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ChatroomMemberInfo other)
            {
                if (other == global::mm.command.ChatroomMemberInfo.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasUserName)
                {
                    UserName = other.UserName;
                }
                if (other.HasNickName)
                {
                    NickName = other.NickName;
                }
                if (other.HasBigHeadImgUrl)
                {
                    BigHeadImgUrl = other.BigHeadImgUrl;
                }
                if (other.HasSmallHeadImgUrl)
                {
                    SmallHeadImgUrl = other.SmallHeadImgUrl;
                }
                if (other.HasInt6)
                {
                    Int6 = other.Int6;
                }
                if (other.HasOwner)
                {
                    Owner = other.Owner;
                }
                if (other.HasInt8)
                {
                    Int8 = other.Int8;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_chatroomMemberInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _chatroomMemberInfoFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                result.hasUserName = input.ReadString(ref result.userName_);
                                break;
                            }
                        case 18:
                            {
                                result.hasNickName = input.ReadString(ref result.nickName_);
                                break;
                            }
                        case 34:
                            {
                                result.hasBigHeadImgUrl = input.ReadString(ref result.bigHeadImgUrl_);
                                break;
                            }
                        case 42:
                            {
                                result.hasSmallHeadImgUrl = input.ReadString(ref result.smallHeadImgUrl_);
                                break;
                            }
                        case 48:
                            {
                                result.hasInt6 = input.ReadUInt32(ref result.int6_);
                                break;
                            }
                        case 58:
                            {
                                result.hasOwner = input.ReadString(ref result.owner_);
                                break;
                            }
                        case 64:
                            {
                                result.hasInt8 = input.ReadUInt32(ref result.int8_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasUserName
            {
                get { return result.hasUserName; }
            }
            public string UserName
            {
                get { return result.UserName; }
                set { SetUserName(value); }
            }
            public Builder SetUserName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = value;
                return this;
            }
            public Builder ClearUserName()
            {
                PrepareBuilder();
                result.hasUserName = false;
                result.userName_ = "";
                return this;
            }

            public bool HasNickName
            {
                get { return result.hasNickName; }
            }
            public string NickName
            {
                get { return result.NickName; }
                set { SetNickName(value); }
            }
            public Builder SetNickName(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasNickName = true;
                result.nickName_ = value;
                return this;
            }
            public Builder ClearNickName()
            {
                PrepareBuilder();
                result.hasNickName = false;
                result.nickName_ = "";
                return this;
            }

            public bool HasBigHeadImgUrl
            {
                get { return result.hasBigHeadImgUrl; }
            }
            public string BigHeadImgUrl
            {
                get { return result.BigHeadImgUrl; }
                set { SetBigHeadImgUrl(value); }
            }
            public Builder SetBigHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasBigHeadImgUrl = true;
                result.bigHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearBigHeadImgUrl()
            {
                PrepareBuilder();
                result.hasBigHeadImgUrl = false;
                result.bigHeadImgUrl_ = "";
                return this;
            }

            public bool HasSmallHeadImgUrl
            {
                get { return result.hasSmallHeadImgUrl; }
            }
            public string SmallHeadImgUrl
            {
                get { return result.SmallHeadImgUrl; }
                set { SetSmallHeadImgUrl(value); }
            }
            public Builder SetSmallHeadImgUrl(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasSmallHeadImgUrl = true;
                result.smallHeadImgUrl_ = value;
                return this;
            }
            public Builder ClearSmallHeadImgUrl()
            {
                PrepareBuilder();
                result.hasSmallHeadImgUrl = false;
                result.smallHeadImgUrl_ = "";
                return this;
            }

            public bool HasInt6
            {
                get { return result.hasInt6; }
            }
            [global::System.CLSCompliant(false)]
            public uint Int6
            {
                get { return result.Int6; }
                set { SetInt6(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetInt6(uint value)
            {
                PrepareBuilder();
                result.hasInt6 = true;
                result.int6_ = value;
                return this;
            }
            public Builder ClearInt6()
            {
                PrepareBuilder();
                result.hasInt6 = false;
                result.int6_ = 0;
                return this;
            }

            public bool HasOwner
            {
                get { return result.hasOwner; }
            }
            public string Owner
            {
                get { return result.Owner; }
                set { SetOwner(value); }
            }
            public Builder SetOwner(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasOwner = true;
                result.owner_ = value;
                return this;
            }
            public Builder ClearOwner()
            {
                PrepareBuilder();
                result.hasOwner = false;
                result.owner_ = "";
                return this;
            }

            public bool HasInt8
            {
                get { return result.hasInt8; }
            }
            [global::System.CLSCompliant(false)]
            public uint Int8
            {
                get { return result.Int8; }
                set { SetInt8(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetInt8(uint value)
            {
                PrepareBuilder();
                result.hasInt8 = true;
                result.int8_ = value;
                return this;
            }
            public Builder ClearInt8()
            {
                PrepareBuilder();
                result.hasInt8 = false;
                result.int8_ = 0;
                return this;
            }
        }
        static ChatroomMemberInfo()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ExitChatroomObject : pb::GeneratedMessage<ExitChatroomObject, ExitChatroomObject.Builder>
    {
        private ExitChatroomObject() { }
        private static readonly ExitChatroomObject defaultInstance = new ExitChatroomObject().MakeReadOnly();
        private static readonly string[] _exitChatroomObjectFieldNames = new string[] { "Chatroom", "UserName" };
        private static readonly uint[] _exitChatroomObjectFieldTags = new uint[] { 10, 18 };
        public static ExitChatroomObject DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ExitChatroomObject DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ExitChatroomObject ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ExitChatroomObject__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ExitChatroomObject, ExitChatroomObject.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ExitChatroomObject__FieldAccessorTable; }
        }

        public const int ChatroomFieldNumber = 1;
        private bool hasChatroom;
        private global::mm.command.SKBuiltinString_t chatroom_;
        public bool HasChatroom
        {
            get { return hasChatroom; }
        }
        public global::mm.command.SKBuiltinString_t Chatroom
        {
            get { return chatroom_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public const int UserNameFieldNumber = 2;
        private bool hasUserName;
        private global::mm.command.SKBuiltinString_t userName_;
        public bool HasUserName
        {
            get { return hasUserName; }
        }
        public global::mm.command.SKBuiltinString_t UserName
        {
            get { return userName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
        }

        public override bool IsInitialized
        {
            get
            {
                if (!hasChatroom) return false;
                if (!hasUserName) return false;
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _exitChatroomObjectFieldNames;
            if (hasChatroom)
            {
                output.WriteMessage(1, field_names[0], Chatroom);
            }
            if (hasUserName)
            {
                output.WriteMessage(2, field_names[1], UserName);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasChatroom)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(1, Chatroom);
                }
                if (hasUserName)
                {
                    size += pb::CodedOutputStream.ComputeMessageSize(2, UserName);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ExitChatroomObject ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExitChatroomObject ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExitChatroomObject ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExitChatroomObject ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExitChatroomObject ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExitChatroomObject ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ExitChatroomObject ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ExitChatroomObject ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ExitChatroomObject ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExitChatroomObject ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ExitChatroomObject MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ExitChatroomObject prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ExitChatroomObject, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ExitChatroomObject cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ExitChatroomObject result;

            private ExitChatroomObject PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ExitChatroomObject original = result;
                    result = new ExitChatroomObject();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ExitChatroomObject MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ExitChatroomObject.Descriptor; }
            }

            public override ExitChatroomObject DefaultInstanceForType
            {
                get { return global::mm.command.ExitChatroomObject.DefaultInstance; }
            }

            public override ExitChatroomObject BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ExitChatroomObject)
                {
                    return MergeFrom((ExitChatroomObject)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ExitChatroomObject other)
            {
                if (other == global::mm.command.ExitChatroomObject.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasChatroom)
                {
                    MergeChatroom(other.Chatroom);
                }
                if (other.HasUserName)
                {
                    MergeUserName(other.UserName);
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_exitChatroomObjectFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _exitChatroomObjectFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 10:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasChatroom)
                                {
                                    subBuilder.MergeFrom(Chatroom);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                Chatroom = subBuilder.BuildPartial();
                                break;
                            }
                        case 18:
                            {
                                global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
                                if (result.hasUserName)
                                {
                                    subBuilder.MergeFrom(UserName);
                                }
                                input.ReadMessage(subBuilder, extensionRegistry);
                                UserName = subBuilder.BuildPartial();
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasChatroom
            {
                get { return result.hasChatroom; }
            }
            public global::mm.command.SKBuiltinString_t Chatroom
            {
                get { return result.Chatroom; }
                set { SetChatroom(value); }
            }
            public Builder SetChatroom(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasChatroom = true;
                result.chatroom_ = value;
                return this;
            }
            public Builder SetChatroom(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasChatroom = true;
                result.chatroom_ = builderForValue.Build();
                return this;
            }
            public Builder MergeChatroom(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasChatroom &&
                    result.chatroom_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.chatroom_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.chatroom_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.chatroom_ = value;
                }
                result.hasChatroom = true;
                return this;
            }
            public Builder ClearChatroom()
            {
                PrepareBuilder();
                result.hasChatroom = false;
                result.chatroom_ = null;
                return this;
            }

            public bool HasUserName
            {
                get { return result.hasUserName; }
            }
            public global::mm.command.SKBuiltinString_t UserName
            {
                get { return result.UserName; }
                set { SetUserName(value); }
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = value;
                return this;
            }
            public Builder SetUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue)
            {
                pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
                PrepareBuilder();
                result.hasUserName = true;
                result.userName_ = builderForValue.Build();
                return this;
            }
            public Builder MergeUserName(global::mm.command.SKBuiltinString_t value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                if (result.hasUserName &&
                    result.userName_ != global::mm.command.SKBuiltinString_t.DefaultInstance)
                {
                    result.userName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.userName_).MergeFrom(value).BuildPartial();
                }
                else
                {
                    result.userName_ = value;
                }
                result.hasUserName = true;
                return this;
            }
            public Builder ClearUserName()
            {
                PrepareBuilder();
                result.hasUserName = false;
                result.userName_ = null;
                return this;
            }
        }
        static ExitChatroomObject()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ExtDeviceLoginConfirmErrorRet : pb::GeneratedMessage<ExtDeviceLoginConfirmErrorRet, ExtDeviceLoginConfirmErrorRet.Builder>
    {
        private ExtDeviceLoginConfirmErrorRet() { }
        private static readonly ExtDeviceLoginConfirmErrorRet defaultInstance = new ExtDeviceLoginConfirmErrorRet().MakeReadOnly();
        private static readonly string[] _extDeviceLoginConfirmErrorRetFieldNames = new string[] { "contentStr", "iconType" };
        private static readonly uint[] _extDeviceLoginConfirmErrorRetFieldTags = new uint[] { 18, 8 };
        public static ExtDeviceLoginConfirmErrorRet DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ExtDeviceLoginConfirmErrorRet DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ExtDeviceLoginConfirmErrorRet ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ExtDeviceLoginConfirmErrorRet__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ExtDeviceLoginConfirmErrorRet, ExtDeviceLoginConfirmErrorRet.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ExtDeviceLoginConfirmErrorRet__FieldAccessorTable; }
        }

        public const int IconTypeFieldNumber = 1;
        private bool hasIconType;
        private uint iconType_;
        public bool HasIconType
        {
            get { return hasIconType; }
        }
        [global::System.CLSCompliant(false)]
        public uint IconType
        {
            get { return iconType_; }
        }

        public const int ContentStrFieldNumber = 2;
        private bool hasContentStr;
        private string contentStr_ = "";
        public bool HasContentStr
        {
            get { return hasContentStr; }
        }
        public string ContentStr
        {
            get { return contentStr_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _extDeviceLoginConfirmErrorRetFieldNames;
            if (hasIconType)
            {
                output.WriteUInt32(1, field_names[1], IconType);
            }
            if (hasContentStr)
            {
                output.WriteString(2, field_names[0], ContentStr);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasIconType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(1, IconType);
                }
                if (hasContentStr)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, ContentStr);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ExtDeviceLoginConfirmErrorRet ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmErrorRet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmErrorRet ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmErrorRet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmErrorRet ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmErrorRet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmErrorRet ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ExtDeviceLoginConfirmErrorRet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ExtDeviceLoginConfirmErrorRet ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmErrorRet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ExtDeviceLoginConfirmErrorRet MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ExtDeviceLoginConfirmErrorRet prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ExtDeviceLoginConfirmErrorRet, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ExtDeviceLoginConfirmErrorRet cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ExtDeviceLoginConfirmErrorRet result;

            private ExtDeviceLoginConfirmErrorRet PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ExtDeviceLoginConfirmErrorRet original = result;
                    result = new ExtDeviceLoginConfirmErrorRet();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ExtDeviceLoginConfirmErrorRet MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ExtDeviceLoginConfirmErrorRet.Descriptor; }
            }

            public override ExtDeviceLoginConfirmErrorRet DefaultInstanceForType
            {
                get { return global::mm.command.ExtDeviceLoginConfirmErrorRet.DefaultInstance; }
            }

            public override ExtDeviceLoginConfirmErrorRet BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ExtDeviceLoginConfirmErrorRet)
                {
                    return MergeFrom((ExtDeviceLoginConfirmErrorRet)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ExtDeviceLoginConfirmErrorRet other)
            {
                if (other == global::mm.command.ExtDeviceLoginConfirmErrorRet.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasIconType)
                {
                    IconType = other.IconType;
                }
                if (other.HasContentStr)
                {
                    ContentStr = other.ContentStr;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_extDeviceLoginConfirmErrorRetFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _extDeviceLoginConfirmErrorRetFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasIconType = input.ReadUInt32(ref result.iconType_);
                                break;
                            }
                        case 18:
                            {
                                result.hasContentStr = input.ReadString(ref result.contentStr_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasIconType
            {
                get { return result.hasIconType; }
            }
            [global::System.CLSCompliant(false)]
            public uint IconType
            {
                get { return result.IconType; }
                set { SetIconType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetIconType(uint value)
            {
                PrepareBuilder();
                result.hasIconType = true;
                result.iconType_ = value;
                return this;
            }
            public Builder ClearIconType()
            {
                PrepareBuilder();
                result.hasIconType = false;
                result.iconType_ = 0;
                return this;
            }

            public bool HasContentStr
            {
                get { return result.hasContentStr; }
            }
            public string ContentStr
            {
                get { return result.ContentStr; }
                set { SetContentStr(value); }
            }
            public Builder SetContentStr(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContentStr = true;
                result.contentStr_ = value;
                return this;
            }
            public Builder ClearContentStr()
            {
                PrepareBuilder();
                result.hasContentStr = false;
                result.contentStr_ = "";
                return this;
            }
        }
        static ExtDeviceLoginConfirmErrorRet()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ExtDeviceLoginConfirmExpiredRet : pb::GeneratedMessage<ExtDeviceLoginConfirmExpiredRet, ExtDeviceLoginConfirmExpiredRet.Builder>
    {
        private ExtDeviceLoginConfirmExpiredRet() { }
        private static readonly ExtDeviceLoginConfirmExpiredRet defaultInstance = new ExtDeviceLoginConfirmExpiredRet().MakeReadOnly();
        private static readonly string[] _extDeviceLoginConfirmExpiredRetFieldNames = new string[] { "buttonStr", "contentStr", "iconType" };
        private static readonly uint[] _extDeviceLoginConfirmExpiredRetFieldTags = new uint[] { 26, 18, 8 };
        public static ExtDeviceLoginConfirmExpiredRet DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ExtDeviceLoginConfirmExpiredRet DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ExtDeviceLoginConfirmExpiredRet ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ExtDeviceLoginConfirmExpiredRet__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ExtDeviceLoginConfirmExpiredRet, ExtDeviceLoginConfirmExpiredRet.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ExtDeviceLoginConfirmExpiredRet__FieldAccessorTable; }
        }

        public const int IconTypeFieldNumber = 1;
        private bool hasIconType;
        private uint iconType_;
        public bool HasIconType
        {
            get { return hasIconType; }
        }
        [global::System.CLSCompliant(false)]
        public uint IconType
        {
            get { return iconType_; }
        }

        public const int ContentStrFieldNumber = 2;
        private bool hasContentStr;
        private string contentStr_ = "";
        public bool HasContentStr
        {
            get { return hasContentStr; }
        }
        public string ContentStr
        {
            get { return contentStr_; }
        }

        public const int ButtonStrFieldNumber = 3;
        private bool hasButtonStr;
        private string buttonStr_ = "";
        public bool HasButtonStr
        {
            get { return hasButtonStr; }
        }
        public string ButtonStr
        {
            get { return buttonStr_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _extDeviceLoginConfirmExpiredRetFieldNames;
            if (hasIconType)
            {
                output.WriteUInt32(1, field_names[2], IconType);
            }
            if (hasContentStr)
            {
                output.WriteString(2, field_names[1], ContentStr);
            }
            if (hasButtonStr)
            {
                output.WriteString(3, field_names[0], ButtonStr);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasIconType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(1, IconType);
                }
                if (hasContentStr)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, ContentStr);
                }
                if (hasButtonStr)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, ButtonStr);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ExtDeviceLoginConfirmExpiredRet ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmExpiredRet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmExpiredRet ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmExpiredRet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmExpiredRet ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmExpiredRet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmExpiredRet ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ExtDeviceLoginConfirmExpiredRet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ExtDeviceLoginConfirmExpiredRet ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmExpiredRet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ExtDeviceLoginConfirmExpiredRet MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ExtDeviceLoginConfirmExpiredRet prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ExtDeviceLoginConfirmExpiredRet, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ExtDeviceLoginConfirmExpiredRet cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ExtDeviceLoginConfirmExpiredRet result;

            private ExtDeviceLoginConfirmExpiredRet PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ExtDeviceLoginConfirmExpiredRet original = result;
                    result = new ExtDeviceLoginConfirmExpiredRet();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ExtDeviceLoginConfirmExpiredRet MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ExtDeviceLoginConfirmExpiredRet.Descriptor; }
            }

            public override ExtDeviceLoginConfirmExpiredRet DefaultInstanceForType
            {
                get { return global::mm.command.ExtDeviceLoginConfirmExpiredRet.DefaultInstance; }
            }

            public override ExtDeviceLoginConfirmExpiredRet BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ExtDeviceLoginConfirmExpiredRet)
                {
                    return MergeFrom((ExtDeviceLoginConfirmExpiredRet)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ExtDeviceLoginConfirmExpiredRet other)
            {
                if (other == global::mm.command.ExtDeviceLoginConfirmExpiredRet.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasIconType)
                {
                    IconType = other.IconType;
                }
                if (other.HasContentStr)
                {
                    ContentStr = other.ContentStr;
                }
                if (other.HasButtonStr)
                {
                    ButtonStr = other.ButtonStr;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_extDeviceLoginConfirmExpiredRetFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _extDeviceLoginConfirmExpiredRetFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasIconType = input.ReadUInt32(ref result.iconType_);
                                break;
                            }
                        case 18:
                            {
                                result.hasContentStr = input.ReadString(ref result.contentStr_);
                                break;
                            }
                        case 26:
                            {
                                result.hasButtonStr = input.ReadString(ref result.buttonStr_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasIconType
            {
                get { return result.hasIconType; }
            }
            [global::System.CLSCompliant(false)]
            public uint IconType
            {
                get { return result.IconType; }
                set { SetIconType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetIconType(uint value)
            {
                PrepareBuilder();
                result.hasIconType = true;
                result.iconType_ = value;
                return this;
            }
            public Builder ClearIconType()
            {
                PrepareBuilder();
                result.hasIconType = false;
                result.iconType_ = 0;
                return this;
            }

            public bool HasContentStr
            {
                get { return result.hasContentStr; }
            }
            public string ContentStr
            {
                get { return result.ContentStr; }
                set { SetContentStr(value); }
            }
            public Builder SetContentStr(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContentStr = true;
                result.contentStr_ = value;
                return this;
            }
            public Builder ClearContentStr()
            {
                PrepareBuilder();
                result.hasContentStr = false;
                result.contentStr_ = "";
                return this;
            }

            public bool HasButtonStr
            {
                get { return result.hasButtonStr; }
            }
            public string ButtonStr
            {
                get { return result.ButtonStr; }
                set { SetButtonStr(value); }
            }
            public Builder SetButtonStr(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasButtonStr = true;
                result.buttonStr_ = value;
                return this;
            }
            public Builder ClearButtonStr()
            {
                PrepareBuilder();
                result.hasButtonStr = false;
                result.buttonStr_ = "";
                return this;
            }
        }
        static ExtDeviceLoginConfirmExpiredRet()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class ExtDeviceLoginConfirmOKRet : pb::GeneratedMessage<ExtDeviceLoginConfirmOKRet, ExtDeviceLoginConfirmOKRet.Builder>
    {
        private ExtDeviceLoginConfirmOKRet() { }
        private static readonly ExtDeviceLoginConfirmOKRet defaultInstance = new ExtDeviceLoginConfirmOKRet().MakeReadOnly();
        private static readonly string[] _extDeviceLoginConfirmOKRetFieldNames = new string[] { "buttonCancelStr", "buttonOKStr", "confirmTimeOut", "contentStr", "iconType", "loginedDevTip", "reqSessionLimit", "titleStr", "warmingStr" };
        private static readonly uint[] _extDeviceLoginConfirmOKRetFieldTags = new uint[] { 34, 26, 48, 18, 8, 58, 40, 66, 74 };
        public static ExtDeviceLoginConfirmOKRet DefaultInstance
        {
            get { return defaultInstance; }
        }

        public override ExtDeviceLoginConfirmOKRet DefaultInstanceForType
        {
            get { return DefaultInstance; }
        }

        protected override ExtDeviceLoginConfirmOKRet ThisMessage
        {
            get { return this; }
        }

        public static pbd::MessageDescriptor Descriptor
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ExtDeviceLoginConfirmOKRet__Descriptor; }
        }

        protected override pb::FieldAccess.FieldAccessorTable<ExtDeviceLoginConfirmOKRet, ExtDeviceLoginConfirmOKRet.Builder> InternalFieldAccessors
        {
            get { return global::mm.command.MMCommon.internal__static_mm_command_ExtDeviceLoginConfirmOKRet__FieldAccessorTable; }
        }

        public const int IconTypeFieldNumber = 1;
        private bool hasIconType;
        private uint iconType_;
        public bool HasIconType
        {
            get { return hasIconType; }
        }
        [global::System.CLSCompliant(false)]
        public uint IconType
        {
            get { return iconType_; }
        }

        public const int ContentStrFieldNumber = 2;
        private bool hasContentStr;
        private string contentStr_ = "";
        public bool HasContentStr
        {
            get { return hasContentStr; }
        }
        public string ContentStr
        {
            get { return contentStr_; }
        }

        public const int ButtonOKStrFieldNumber = 3;
        private bool hasButtonOKStr;
        private string buttonOKStr_ = "";
        public bool HasButtonOKStr
        {
            get { return hasButtonOKStr; }
        }
        public string ButtonOKStr
        {
            get { return buttonOKStr_; }
        }

        public const int ButtonCancelStrFieldNumber = 4;
        private bool hasButtonCancelStr;
        private string buttonCancelStr_ = "";
        public bool HasButtonCancelStr
        {
            get { return hasButtonCancelStr; }
        }
        public string ButtonCancelStr
        {
            get { return buttonCancelStr_; }
        }

        public const int ReqSessionLimitFieldNumber = 5;
        private bool hasReqSessionLimit;
        private uint reqSessionLimit_;
        public bool HasReqSessionLimit
        {
            get { return hasReqSessionLimit; }
        }
        [global::System.CLSCompliant(false)]
        public uint ReqSessionLimit
        {
            get { return reqSessionLimit_; }
        }

        public const int ConfirmTimeOutFieldNumber = 6;
        private bool hasConfirmTimeOut;
        private uint confirmTimeOut_;
        public bool HasConfirmTimeOut
        {
            get { return hasConfirmTimeOut; }
        }
        [global::System.CLSCompliant(false)]
        public uint ConfirmTimeOut
        {
            get { return confirmTimeOut_; }
        }

        public const int LoginedDevTipFieldNumber = 7;
        private bool hasLoginedDevTip;
        private string loginedDevTip_ = "";
        public bool HasLoginedDevTip
        {
            get { return hasLoginedDevTip; }
        }
        public string LoginedDevTip
        {
            get { return loginedDevTip_; }
        }

        public const int TitleStrFieldNumber = 8;
        private bool hasTitleStr;
        private string titleStr_ = "";
        public bool HasTitleStr
        {
            get { return hasTitleStr; }
        }
        public string TitleStr
        {
            get { return titleStr_; }
        }

        public const int WarmingStrFieldNumber = 9;
        private bool hasWarmingStr;
        private string warmingStr_ = "";
        public bool HasWarmingStr
        {
            get { return hasWarmingStr; }
        }
        public string WarmingStr
        {
            get { return warmingStr_; }
        }

        public override bool IsInitialized
        {
            get
            {
                return true;
            }
        }

        public override void WriteTo(pb::ICodedOutputStream output)
        {
            int size = SerializedSize;
            string[] field_names = _extDeviceLoginConfirmOKRetFieldNames;
            if (hasIconType)
            {
                output.WriteUInt32(1, field_names[4], IconType);
            }
            if (hasContentStr)
            {
                output.WriteString(2, field_names[3], ContentStr);
            }
            if (hasButtonOKStr)
            {
                output.WriteString(3, field_names[1], ButtonOKStr);
            }
            if (hasButtonCancelStr)
            {
                output.WriteString(4, field_names[0], ButtonCancelStr);
            }
            if (hasReqSessionLimit)
            {
                output.WriteUInt32(5, field_names[6], ReqSessionLimit);
            }
            if (hasConfirmTimeOut)
            {
                output.WriteUInt32(6, field_names[2], ConfirmTimeOut);
            }
            if (hasLoginedDevTip)
            {
                output.WriteString(7, field_names[5], LoginedDevTip);
            }
            if (hasTitleStr)
            {
                output.WriteString(8, field_names[7], TitleStr);
            }
            if (hasWarmingStr)
            {
                output.WriteString(9, field_names[8], WarmingStr);
            }
            UnknownFields.WriteTo(output);
        }

        private int memoizedSerializedSize = -1;
        public override int SerializedSize
        {
            get
            {
                int size = memoizedSerializedSize;
                if (size != -1) return size;

                size = 0;
                if (hasIconType)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(1, IconType);
                }
                if (hasContentStr)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(2, ContentStr);
                }
                if (hasButtonOKStr)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(3, ButtonOKStr);
                }
                if (hasButtonCancelStr)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(4, ButtonCancelStr);
                }
                if (hasReqSessionLimit)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(5, ReqSessionLimit);
                }
                if (hasConfirmTimeOut)
                {
                    size += pb::CodedOutputStream.ComputeUInt32Size(6, ConfirmTimeOut);
                }
                if (hasLoginedDevTip)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(7, LoginedDevTip);
                }
                if (hasTitleStr)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(8, TitleStr);
                }
                if (hasWarmingStr)
                {
                    size += pb::CodedOutputStream.ComputeStringSize(9, WarmingStr);
                }
                size += UnknownFields.SerializedSize;
                memoizedSerializedSize = size;
                return size;
            }
        }

        public static ExtDeviceLoginConfirmOKRet ParseFrom(pb::ByteString data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmOKRet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmOKRet ParseFrom(byte[] data)
        {
            return ((Builder)CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmOKRet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmOKRet ParseFrom(global::System.IO.Stream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmOKRet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmOKRet ParseDelimitedFrom(global::System.IO.Stream input)
        {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static ExtDeviceLoginConfirmOKRet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry)
        {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static ExtDeviceLoginConfirmOKRet ParseFrom(pb::ICodedInputStream input)
        {
            return ((Builder)CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static ExtDeviceLoginConfirmOKRet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
        {
            return ((Builder)CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private ExtDeviceLoginConfirmOKRet MakeReadOnly()
        {
            return this;
        }

        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(ExtDeviceLoginConfirmOKRet prototype)
        {
            return new Builder(prototype);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class Builder : pb::GeneratedBuilder<ExtDeviceLoginConfirmOKRet, Builder>
        {
            protected override Builder ThisBuilder
            {
                get { return this; }
            }
            public Builder()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
            }
            internal Builder(ExtDeviceLoginConfirmOKRet cloneFrom)
            {
                result = cloneFrom;
                resultIsReadOnly = true;
            }

            private bool resultIsReadOnly;
            private ExtDeviceLoginConfirmOKRet result;

            private ExtDeviceLoginConfirmOKRet PrepareBuilder()
            {
                if (resultIsReadOnly)
                {
                    ExtDeviceLoginConfirmOKRet original = result;
                    result = new ExtDeviceLoginConfirmOKRet();
                    resultIsReadOnly = false;
                    MergeFrom(original);
                }
                return result;
            }

            public override bool IsInitialized
            {
                get { return result.IsInitialized; }
            }

            protected override ExtDeviceLoginConfirmOKRet MessageBeingBuilt
            {
                get { return PrepareBuilder(); }
            }

            public override Builder Clear()
            {
                result = DefaultInstance;
                resultIsReadOnly = true;
                return this;
            }

            public override Builder Clone()
            {
                if (resultIsReadOnly)
                {
                    return new Builder(result);
                }
                else
                {
                    return new Builder().MergeFrom(result);
                }
            }

            public override pbd::MessageDescriptor DescriptorForType
            {
                get { return global::mm.command.ExtDeviceLoginConfirmOKRet.Descriptor; }
            }

            public override ExtDeviceLoginConfirmOKRet DefaultInstanceForType
            {
                get { return global::mm.command.ExtDeviceLoginConfirmOKRet.DefaultInstance; }
            }

            public override ExtDeviceLoginConfirmOKRet BuildPartial()
            {
                if (resultIsReadOnly)
                {
                    return result;
                }
                resultIsReadOnly = true;
                return result.MakeReadOnly();
            }

            public override Builder MergeFrom(pb::IMessage other)
            {
                if (other is ExtDeviceLoginConfirmOKRet)
                {
                    return MergeFrom((ExtDeviceLoginConfirmOKRet)other);
                }
                else
                {
                    base.MergeFrom(other);
                    return this;
                }
            }

            public override Builder MergeFrom(ExtDeviceLoginConfirmOKRet other)
            {
                if (other == global::mm.command.ExtDeviceLoginConfirmOKRet.DefaultInstance) return this;
                PrepareBuilder();
                if (other.HasIconType)
                {
                    IconType = other.IconType;
                }
                if (other.HasContentStr)
                {
                    ContentStr = other.ContentStr;
                }
                if (other.HasButtonOKStr)
                {
                    ButtonOKStr = other.ButtonOKStr;
                }
                if (other.HasButtonCancelStr)
                {
                    ButtonCancelStr = other.ButtonCancelStr;
                }
                if (other.HasReqSessionLimit)
                {
                    ReqSessionLimit = other.ReqSessionLimit;
                }
                if (other.HasConfirmTimeOut)
                {
                    ConfirmTimeOut = other.ConfirmTimeOut;
                }
                if (other.HasLoginedDevTip)
                {
                    LoginedDevTip = other.LoginedDevTip;
                }
                if (other.HasTitleStr)
                {
                    TitleStr = other.TitleStr;
                }
                if (other.HasWarmingStr)
                {
                    WarmingStr = other.WarmingStr;
                }
                this.MergeUnknownFields(other.UnknownFields);
                return this;
            }

            public override Builder MergeFrom(pb::ICodedInputStream input)
            {
                return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }

            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry)
            {
                PrepareBuilder();
                pb::UnknownFieldSet.Builder unknownFields = null;
                uint tag;
                string field_name;
                while (input.ReadTag(out tag, out field_name))
                {
                    if (tag == 0 && field_name != null)
                    {
                        int field_ordinal = global::System.Array.BinarySearch(_extDeviceLoginConfirmOKRetFieldNames, field_name, global::System.StringComparer.Ordinal);
                        if (field_ordinal >= 0)
                            tag = _extDeviceLoginConfirmOKRetFieldTags[field_ordinal];
                        else
                        {
                            if (unknownFields == null)
                            {
                                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                            }
                            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                            continue;
                        }
                    }
                    switch (tag)
                    {
                        case 0:
                            {
                                throw pb::InvalidProtocolBufferException.InvalidTag();
                            }
                        default:
                            {
                                if (pb::WireFormat.IsEndGroupTag(tag))
                                {
                                    if (unknownFields != null)
                                    {
                                        this.UnknownFields = unknownFields.Build();
                                    }
                                    return this;
                                }
                                if (unknownFields == null)
                                {
                                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                                }
                                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                                break;
                            }
                        case 8:
                            {
                                result.hasIconType = input.ReadUInt32(ref result.iconType_);
                                break;
                            }
                        case 18:
                            {
                                result.hasContentStr = input.ReadString(ref result.contentStr_);
                                break;
                            }
                        case 26:
                            {
                                result.hasButtonOKStr = input.ReadString(ref result.buttonOKStr_);
                                break;
                            }
                        case 34:
                            {
                                result.hasButtonCancelStr = input.ReadString(ref result.buttonCancelStr_);
                                break;
                            }
                        case 40:
                            {
                                result.hasReqSessionLimit = input.ReadUInt32(ref result.reqSessionLimit_);
                                break;
                            }
                        case 48:
                            {
                                result.hasConfirmTimeOut = input.ReadUInt32(ref result.confirmTimeOut_);
                                break;
                            }
                        case 58:
                            {
                                result.hasLoginedDevTip = input.ReadString(ref result.loginedDevTip_);
                                break;
                            }
                        case 66:
                            {
                                result.hasTitleStr = input.ReadString(ref result.titleStr_);
                                break;
                            }
                        case 74:
                            {
                                result.hasWarmingStr = input.ReadString(ref result.warmingStr_);
                                break;
                            }
                    }
                }

                if (unknownFields != null)
                {
                    this.UnknownFields = unknownFields.Build();
                }
                return this;
            }


            public bool HasIconType
            {
                get { return result.hasIconType; }
            }
            [global::System.CLSCompliant(false)]
            public uint IconType
            {
                get { return result.IconType; }
                set { SetIconType(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetIconType(uint value)
            {
                PrepareBuilder();
                result.hasIconType = true;
                result.iconType_ = value;
                return this;
            }
            public Builder ClearIconType()
            {
                PrepareBuilder();
                result.hasIconType = false;
                result.iconType_ = 0;
                return this;
            }

            public bool HasContentStr
            {
                get { return result.hasContentStr; }
            }
            public string ContentStr
            {
                get { return result.ContentStr; }
                set { SetContentStr(value); }
            }
            public Builder SetContentStr(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasContentStr = true;
                result.contentStr_ = value;
                return this;
            }
            public Builder ClearContentStr()
            {
                PrepareBuilder();
                result.hasContentStr = false;
                result.contentStr_ = "";
                return this;
            }

            public bool HasButtonOKStr
            {
                get { return result.hasButtonOKStr; }
            }
            public string ButtonOKStr
            {
                get { return result.ButtonOKStr; }
                set { SetButtonOKStr(value); }
            }
            public Builder SetButtonOKStr(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasButtonOKStr = true;
                result.buttonOKStr_ = value;
                return this;
            }
            public Builder ClearButtonOKStr()
            {
                PrepareBuilder();
                result.hasButtonOKStr = false;
                result.buttonOKStr_ = "";
                return this;
            }

            public bool HasButtonCancelStr
            {
                get { return result.hasButtonCancelStr; }
            }
            public string ButtonCancelStr
            {
                get { return result.ButtonCancelStr; }
                set { SetButtonCancelStr(value); }
            }
            public Builder SetButtonCancelStr(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasButtonCancelStr = true;
                result.buttonCancelStr_ = value;
                return this;
            }
            public Builder ClearButtonCancelStr()
            {
                PrepareBuilder();
                result.hasButtonCancelStr = false;
                result.buttonCancelStr_ = "";
                return this;
            }

            public bool HasReqSessionLimit
            {
                get { return result.hasReqSessionLimit; }
            }
            [global::System.CLSCompliant(false)]
            public uint ReqSessionLimit
            {
                get { return result.ReqSessionLimit; }
                set { SetReqSessionLimit(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetReqSessionLimit(uint value)
            {
                PrepareBuilder();
                result.hasReqSessionLimit = true;
                result.reqSessionLimit_ = value;
                return this;
            }
            public Builder ClearReqSessionLimit()
            {
                PrepareBuilder();
                result.hasReqSessionLimit = false;
                result.reqSessionLimit_ = 0;
                return this;
            }

            public bool HasConfirmTimeOut
            {
                get { return result.hasConfirmTimeOut; }
            }
            [global::System.CLSCompliant(false)]
            public uint ConfirmTimeOut
            {
                get { return result.ConfirmTimeOut; }
                set { SetConfirmTimeOut(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetConfirmTimeOut(uint value)
            {
                PrepareBuilder();
                result.hasConfirmTimeOut = true;
                result.confirmTimeOut_ = value;
                return this;
            }
            public Builder ClearConfirmTimeOut()
            {
                PrepareBuilder();
                result.hasConfirmTimeOut = false;
                result.confirmTimeOut_ = 0;
                return this;
            }

            public bool HasLoginedDevTip
            {
                get { return result.hasLoginedDevTip; }
            }
            public string LoginedDevTip
            {
                get { return result.LoginedDevTip; }
                set { SetLoginedDevTip(value); }
            }
            public Builder SetLoginedDevTip(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasLoginedDevTip = true;
                result.loginedDevTip_ = value;
                return this;
            }
            public Builder ClearLoginedDevTip()
            {
                PrepareBuilder();
                result.hasLoginedDevTip = false;
                result.loginedDevTip_ = "";
                return this;
            }

            public bool HasTitleStr
            {
                get { return result.hasTitleStr; }
            }
            public string TitleStr
            {
                get { return result.TitleStr; }
                set { SetTitleStr(value); }
            }
            public Builder SetTitleStr(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasTitleStr = true;
                result.titleStr_ = value;
                return this;
            }
            public Builder ClearTitleStr()
            {
                PrepareBuilder();
                result.hasTitleStr = false;
                result.titleStr_ = "";
                return this;
            }

            public bool HasWarmingStr
            {
                get { return result.hasWarmingStr; }
            }
            public string WarmingStr
            {
                get { return result.WarmingStr; }
                set { SetWarmingStr(value); }
            }
            public Builder SetWarmingStr(string value)
            {
                pb::ThrowHelper.ThrowIfNull(value, "value");
                PrepareBuilder();
                result.hasWarmingStr = true;
                result.warmingStr_ = value;
                return this;
            }
            public Builder ClearWarmingStr()
            {
                PrepareBuilder();
                result.hasWarmingStr = false;
                result.warmingStr_ = "";
                return this;
            }
        }
        static ExtDeviceLoginConfirmOKRet()
        {
            object.ReferenceEquals(global::mm.command.MMCommon.Descriptor, null);
        }
    }

    #endregion

}

#endregion Designer generated code
