// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace mm.command {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MicroMsg {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_mm_command_GHMenu__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GHMenu, global::mm.command.GHMenu.Builder> internal__static_mm_command_GHMenu__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_AuthRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.AuthRequest, global::mm.command.AuthRequest.Builder> internal__static_mm_command_AuthRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_AuthResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.AuthResponse, global::mm.command.AuthResponse.Builder> internal__static_mm_command_AuthResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewSendMsgRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSendMsgRequest, global::mm.command.NewSendMsgRequest.Builder> internal__static_mm_command_NewSendMsgRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewSendMsgResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSendMsgResponse, global::mm.command.NewSendMsgResponse.Builder> internal__static_mm_command_NewSendMsgResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_SendMsgRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SendMsgRequest, global::mm.command.SendMsgRequest.Builder> internal__static_mm_command_SendMsgRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_SendMsgResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SendMsgResponse, global::mm.command.SendMsgResponse.Builder> internal__static_mm_command_SendMsgResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_OplogRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.OplogRequest, global::mm.command.OplogRequest.Builder> internal__static_mm_command_OplogRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_OplogResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.OplogResponse, global::mm.command.OplogResponse.Builder> internal__static_mm_command_OplogResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewSyncRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSyncRequest, global::mm.command.NewSyncRequest.Builder> internal__static_mm_command_NewSyncRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewSyncResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSyncResponse, global::mm.command.NewSyncResponse.Builder> internal__static_mm_command_NewSyncResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_MMSnsSyncRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MMSnsSyncRequest, global::mm.command.MMSnsSyncRequest.Builder> internal__static_mm_command_MMSnsSyncRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_MMSnsSyncResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MMSnsSyncResponse, global::mm.command.MMSnsSyncResponse.Builder> internal__static_mm_command_MMSnsSyncResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_LBSFindRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.LBSFindRequest, global::mm.command.LBSFindRequest.Builder> internal__static_mm_command_LBSFindRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_LBSFindResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.LBSFindResponse, global::mm.command.LBSFindResponse.Builder> internal__static_mm_command_LBSFindResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetBrandListRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetBrandListRequest, global::mm.command.GetBrandListRequest.Builder> internal__static_mm_command_GetBrandListRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetBrandListResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetBrandListResponse, global::mm.command.GetBrandListResponse.Builder> internal__static_mm_command_GetBrandListResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_UploadhdheadimgRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadhdheadimgRequest, global::mm.command.UploadhdheadimgRequest.Builder> internal__static_mm_command_UploadhdheadimgRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_UploadhdheadimgResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadhdheadimgResponse, global::mm.command.UploadhdheadimgResponse.Builder> internal__static_mm_command_UploadhdheadimgResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewInitRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewInitRequest, global::mm.command.NewInitRequest.Builder> internal__static_mm_command_NewInitRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewInitResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewInitResponse, global::mm.command.NewInitResponse.Builder> internal__static_mm_command_NewInitResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewRegRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewRegRequest, global::mm.command.NewRegRequest.Builder> internal__static_mm_command_NewRegRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewRegResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewRegResponse, global::mm.command.NewRegResponse.Builder> internal__static_mm_command_NewRegResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_LogoutRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.LogoutRequest, global::mm.command.LogoutRequest.Builder> internal__static_mm_command_LogoutRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_LogoutResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.LogoutResponse, global::mm.command.LogoutResponse.Builder> internal__static_mm_command_LogoutResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_VerifyUserRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.VerifyUserRequest, global::mm.command.VerifyUserRequest.Builder> internal__static_mm_command_VerifyUserRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_VerifyUserResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.VerifyUserResponse, global::mm.command.VerifyUserResponse.Builder> internal__static_mm_command_VerifyUserResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_SearchContactRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SearchContactRequest, global::mm.command.SearchContactRequest.Builder> internal__static_mm_command_SearchContactRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_SearchContactResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SearchContactResponse, global::mm.command.SearchContactResponse.Builder> internal__static_mm_command_SearchContactResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetContactRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetContactRequest, global::mm.command.GetContactRequest.Builder> internal__static_mm_command_GetContactRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetContactResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetContactResponse, global::mm.command.GetContactResponse.Builder> internal__static_mm_command_GetContactResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetPackageListRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetPackageListRequest, global::mm.command.GetPackageListRequest.Builder> internal__static_mm_command_GetPackageListRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetPackageListResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetPackageListResponse, global::mm.command.GetPackageListResponse.Builder> internal__static_mm_command_GetPackageListResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetHDHeadImgRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetHDHeadImgRequest, global::mm.command.GetHDHeadImgRequest.Builder> internal__static_mm_command_GetHDHeadImgRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetHDHeadImgResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetHDHeadImgResponse, global::mm.command.GetHDHeadImgResponse.Builder> internal__static_mm_command_GetHDHeadImgResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetVUserInfoRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetVUserInfoRequest, global::mm.command.GetVUserInfoRequest.Builder> internal__static_mm_command_GetVUserInfoRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetVUserInfoResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetVUserInfoResponse, global::mm.command.GetVUserInfoResponse.Builder> internal__static_mm_command_GetVUserInfoResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ClickCommandRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ClickCommandRequest, global::mm.command.ClickCommandRequest.Builder> internal__static_mm_command_ClickCommandRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ClickCommandResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ClickCommandResponse, global::mm.command.ClickCommandResponse.Builder> internal__static_mm_command_ClickCommandResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_BindopMobileForRegRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.BindopMobileForRegRequest, global::mm.command.BindopMobileForRegRequest.Builder> internal__static_mm_command_BindopMobileForRegRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_BindopMobileForRegResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.BindopMobileForRegResponse, global::mm.command.BindopMobileForRegResponse.Builder> internal__static_mm_command_BindopMobileForRegResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewSetPasswdRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSetPasswdRequest, global::mm.command.NewSetPasswdRequest.Builder> internal__static_mm_command_NewSetPasswdRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewSetPasswdResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSetPasswdResponse, global::mm.command.NewSetPasswdResponse.Builder> internal__static_mm_command_NewSetPasswdResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewVerifyPasswdRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewVerifyPasswdRequest, global::mm.command.NewVerifyPasswdRequest.Builder> internal__static_mm_command_NewVerifyPasswdRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewVerifyPasswdResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewVerifyPasswdResponse, global::mm.command.NewVerifyPasswdResponse.Builder> internal__static_mm_command_NewVerifyPasswdResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_BindEmailRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.BindEmailRequest, global::mm.command.BindEmailRequest.Builder> internal__static_mm_command_BindEmailRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_BindEmailResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.BindEmailResponse, global::mm.command.BindEmailResponse.Builder> internal__static_mm_command_BindEmailResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_CheckUnbindRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.CheckUnbindRequest, global::mm.command.CheckUnbindRequest.Builder> internal__static_mm_command_CheckUnbindRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_CheckUnbindResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.CheckUnbindResponse, global::mm.command.CheckUnbindResponse.Builder> internal__static_mm_command_CheckUnbindResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_UploadMContact__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadMContact, global::mm.command.UploadMContact.Builder> internal__static_mm_command_UploadMContact__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_UploadMContactResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadMContactResponse, global::mm.command.UploadMContactResponse.Builder> internal__static_mm_command_UploadMContactResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetMFriendRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetMFriendRequest, global::mm.command.GetMFriendRequest.Builder> internal__static_mm_command_GetMFriendRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetMFriendResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetMFriendResponse, global::mm.command.GetMFriendResponse.Builder> internal__static_mm_command_GetMFriendResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_Geta8keyRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.Geta8keyRequest, global::mm.command.Geta8keyRequest.Builder> internal__static_mm_command_Geta8keyRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_Geta8keyResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.Geta8keyResponse, global::mm.command.Geta8keyResponse.Builder> internal__static_mm_command_Geta8keyResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_MMSnsPostRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MMSnsPostRequest, global::mm.command.MMSnsPostRequest.Builder> internal__static_mm_command_MMSnsPostRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_MMSnsPostResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MMSnsPostResponse, global::mm.command.MMSnsPostResponse.Builder> internal__static_mm_command_MMSnsPostResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_MmsnsuploadRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MmsnsuploadRequest, global::mm.command.MmsnsuploadRequest.Builder> internal__static_mm_command_MmsnsuploadRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_MmsnsuploadResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MmsnsuploadResponse, global::mm.command.MmsnsuploadResponse.Builder> internal__static_mm_command_MmsnsuploadResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_UploadMsgImgRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadMsgImgRequest, global::mm.command.UploadMsgImgRequest.Builder> internal__static_mm_command_UploadMsgImgRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_UploadMsgImgResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadMsgImgResponse, global::mm.command.UploadMsgImgResponse.Builder> internal__static_mm_command_UploadMsgImgResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GeneralSetRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GeneralSetRequest, global::mm.command.GeneralSetRequest.Builder> internal__static_mm_command_GeneralSetRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GeneralSetResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GeneralSetResponse, global::mm.command.GeneralSetResponse.Builder> internal__static_mm_command_GeneralSetResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_UnbindqqRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UnbindqqRequest, global::mm.command.UnbindqqRequest.Builder> internal__static_mm_command_UnbindqqRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_UnbindqqResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UnbindqqResponse, global::mm.command.UnbindqqResponse.Builder> internal__static_mm_command_UnbindqqResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_SendAppMsgRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SendAppMsgRequest, global::mm.command.SendAppMsgRequest.Builder> internal__static_mm_command_SendAppMsgRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_SendAppMsgResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.SendAppMsgResponse, global::mm.command.SendAppMsgResponse.Builder> internal__static_mm_command_SendAppMsgResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_BindOpMobileRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.BindOpMobileRequest, global::mm.command.BindOpMobileRequest.Builder> internal__static_mm_command_BindOpMobileRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_BindOpMobileResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.BindOpMobileResponse, global::mm.command.BindOpMobileResponse.Builder> internal__static_mm_command_BindOpMobileResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_BindQQRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.BindQQRequest, global::mm.command.BindQQRequest.Builder> internal__static_mm_command_BindQQRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_BindQQResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.BindQQResponse, global::mm.command.BindQQResponse.Builder> internal__static_mm_command_BindQQResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ThrowBottleRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ThrowBottleRequest, global::mm.command.ThrowBottleRequest.Builder> internal__static_mm_command_ThrowBottleRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ThrowBottleResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ThrowBottleResponse, global::mm.command.ThrowBottleResponse.Builder> internal__static_mm_command_ThrowBottleResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ShakereportRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ShakereportRequest, global::mm.command.ShakereportRequest.Builder> internal__static_mm_command_ShakereportRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ShakereportResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ShakereportResponse, global::mm.command.ShakereportResponse.Builder> internal__static_mm_command_ShakereportResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ShakegetRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ShakegetRequest, global::mm.command.ShakegetRequest.Builder> internal__static_mm_command_ShakegetRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ShakegetResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ShakegetResponse, global::mm.command.ShakegetResponse.Builder> internal__static_mm_command_ShakegetResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ManualAuthRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ManualAuthRequest, global::mm.command.ManualAuthRequest.Builder> internal__static_mm_command_ManualAuthRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_AutoAuthRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.AutoAuthRequest, global::mm.command.AutoAuthRequest.Builder> internal__static_mm_command_AutoAuthRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetLoginQRCodeRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetLoginQRCodeRequest, global::mm.command.GetLoginQRCodeRequest.Builder> internal__static_mm_command_GetLoginQRCodeRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetLoginQRCodeResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetLoginQRCodeResponse, global::mm.command.GetLoginQRCodeResponse.Builder> internal__static_mm_command_GetLoginQRCodeResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_NewAuthResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.NewAuthResponse, global::mm.command.NewAuthResponse.Builder> internal__static_mm_command_NewAuthResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_CheckLoginQRCodeRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.CheckLoginQRCodeRequest, global::mm.command.CheckLoginQRCodeRequest.Builder> internal__static_mm_command_CheckLoginQRCodeRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_CheckLoginQRCodeResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.CheckLoginQRCodeResponse, global::mm.command.CheckLoginQRCodeResponse.Builder> internal__static_mm_command_CheckLoginQRCodeResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_TenpayRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.TenpayRequest, global::mm.command.TenpayRequest.Builder> internal__static_mm_command_TenpayRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_TenpayResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.TenpayResponse, global::mm.command.TenpayResponse.Builder> internal__static_mm_command_TenpayResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_CreateChatRoomRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.CreateChatRoomRequest, global::mm.command.CreateChatRoomRequest.Builder> internal__static_mm_command_CreateChatRoomRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_CreateChatRoomResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.CreateChatRoomResponse, global::mm.command.CreateChatRoomResponse.Builder> internal__static_mm_command_CreateChatRoomResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_AddChatRoomMemberRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.AddChatRoomMemberRequest, global::mm.command.AddChatRoomMemberRequest.Builder> internal__static_mm_command_AddChatRoomMemberRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_AddChatRoomMemberResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.AddChatRoomMemberResponse, global::mm.command.AddChatRoomMemberResponse.Builder> internal__static_mm_command_AddChatRoomMemberResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_DelChatRoomMemberRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.DelChatRoomMemberRequest, global::mm.command.DelChatRoomMemberRequest.Builder> internal__static_mm_command_DelChatRoomMemberRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_DelChatRoomMemberResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.DelChatRoomMemberResponse, global::mm.command.DelChatRoomMemberResponse.Builder> internal__static_mm_command_DelChatRoomMemberResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetChatRoomMemberDetailRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetChatRoomMemberDetailRequest, global::mm.command.GetChatRoomMemberDetailRequest.Builder> internal__static_mm_command_GetChatRoomMemberDetailRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetChatRoomMemberDetailResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetChatRoomMemberDetailResponse, global::mm.command.GetChatRoomMemberDetailResponse.Builder> internal__static_mm_command_GetChatRoomMemberDetailResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_UploadvoiceRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadvoiceRequest, global::mm.command.UploadvoiceRequest.Builder> internal__static_mm_command_UploadvoiceRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_UploadvoiceResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadvoiceResponse, global::mm.command.UploadvoiceResponse.Builder> internal__static_mm_command_UploadvoiceResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ExtDeviceLoginConfirmGetRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmGetRequest, global::mm.command.ExtDeviceLoginConfirmGetRequest.Builder> internal__static_mm_command_ExtDeviceLoginConfirmGetRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ExtDeviceLoginConfirmGetResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmGetResponse, global::mm.command.ExtDeviceLoginConfirmGetResponse.Builder> internal__static_mm_command_ExtDeviceLoginConfirmGetResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ExtDeviceLoginConfirmOKRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmOKRequest, global::mm.command.ExtDeviceLoginConfirmOKRequest.Builder> internal__static_mm_command_ExtDeviceLoginConfirmOKRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_ExtDeviceLoginConfirmOKResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmOKResponse, global::mm.command.ExtDeviceLoginConfirmOKResponse.Builder> internal__static_mm_command_ExtDeviceLoginConfirmOKResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_LogOutWebWxRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.LogOutWebWxRequest, global::mm.command.LogOutWebWxRequest.Builder> internal__static_mm_command_LogOutWebWxRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_LogOutWebWxResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.LogOutWebWxResponse, global::mm.command.LogOutWebWxResponse.Builder> internal__static_mm_command_LogOutWebWxResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetBioConfigRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetBioConfigRequest, global::mm.command.GetBioConfigRequest.Builder> internal__static_mm_command_GetBioConfigRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetBioConfigResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetBioConfigResponse, global::mm.command.GetBioConfigResponse.Builder> internal__static_mm_command_GetBioConfigResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_RegisterFaceRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.RegisterFaceRequest, global::mm.command.RegisterFaceRequest.Builder> internal__static_mm_command_RegisterFaceRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_RegisterFaceResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.RegisterFaceResponse, global::mm.command.RegisterFaceResponse.Builder> internal__static_mm_command_RegisterFaceResponse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetSafetyInfoRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetSafetyInfoRequest, global::mm.command.GetSafetyInfoRequest.Builder> internal__static_mm_command_GetSafetyInfoRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_GetSafetyInfoRespsonse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.GetSafetyInfoRespsonse, global::mm.command.GetSafetyInfoRespsonse.Builder> internal__static_mm_command_GetSafetyInfoRespsonse__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_MmsnsuserpageRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MmsnsuserpageRequest, global::mm.command.MmsnsuserpageRequest.Builder> internal__static_mm_command_MmsnsuserpageRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_mm_command_MmsnsuserpageResponse__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::mm.command.MmsnsuserpageResponse, global::mm.command.MmsnsuserpageResponse.Builder> internal__static_mm_command_MmsnsuserpageResponse__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static MicroMsg() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "Cg5NaWNyb01zZy5wcm90bxIKbW0uY29tbWFuZBoOTU1Db21tb24ucHJvdG8i" + 
          "WQoGR0hNZW51EiUKBGJhc2UYASACKAsyFy5tbS5jb21tYW5kLkJhc2VSZXF1" + 
          "ZXN0Eg0KBW9wY29kGAIgASgFEgsKA2NtZBgDIAEoCRIMCgRnaGlkGAQgASgJ" + 
          "IuwFCgtBdXRoUmVxdWVzdBIlCgRiYXNlGAEgAigLMhcubW0uY29tbWFuZC5C" + 
          "YXNlUmVxdWVzdBIvCghVc2VyTmFtZRgCIAIoCzIdLm1tLmNvbW1hbmQuU0tC" + 
          "dWlsdGluU3RyaW5nX3QSKgoDUHdkGAMgAigLMh0ubW0uY29tbWFuZC5TS0J1" + 
          "aWx0aW5TdHJpbmdfdBItCgZJbWdTaWQYBCACKAsyHS5tbS5jb21tYW5kLlNL" + 
          "QnVpbHRpblN0cmluZ190Ei4KB0ltZ0NvZGUYBSACKAsyHS5tbS5jb21tYW5k" + 
          "LlNLQnVpbHRpblN0cmluZ190EgwKBFB3ZDIYBiABKAkSFAoMQnVpbHRpbklQ" + 
          "U2VxGAcgASgFEg4KBmV4dFB3ZBgIIAEoCRIPCgdleHRQd2QyGAkgASgJEhAK" + 
          "CFRpbWVab25lGAogASgJEhAKCExhbmd1YWdlGAsgASgJEgwKBElNRUkYDCAB" + 
          "KAkSDwoHQ2hhbm5lbBgNIAEoBRIRCglJUGhvbmVWZXIYDiABKAkSNAoNSW1n" + 
          "RW5jcnlwdEtleRgPIAEoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5n" + 
          "X3QSKwoES1NpZBgQIAEoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluQnVmZmVy" + 
          "X3QSEQoJVGltZVN0YW1wGBEgASgJEhMKC0RldmljZUJyYW5kGBIgASgJEhMK" + 
          "C0RldmljZU1vZGVsGBMgASgJEg4KBk9TVHlwZRgUIAEoCRISCgpEZXZpY2VU" + 
          "eXBlGBUgASgJEhAKCFNvZnRUeXBlGBYgASgJEhIKCkF1dGhUaWNrZXQYFyAB" + 
          "KAkSEwoLUmVhbENvdW50cnkYGCABKAkSEQoJU2lnbmF0dXJlGBkgASgJEjUK" + 
          "DlJhbmRvbUVuY3J5S2V5GBogAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5C" + 
          "dWZmZXJfdBIWCg5BdXRvQXV0aFRpY2tldBgbIAEoCSLoCwoMQXV0aFJlc3Bv" + 
          "bnNlEiYKBGJhc2UYASACKAsyGC5tbS5jb21tYW5kLkJhc2VSZXNwb25zZRIL" + 
          "CgNVaW4YAiACKA0SLwoIVXNlck5hbWUYAyACKAsyHS5tbS5jb21tYW5kLlNL" + 
          "QnVpbHRpblN0cmluZ190Ei8KCE5pY2tOYW1lGAQgAigLMh0ubW0uY29tbWFu" + 
          "ZC5TS0J1aWx0aW5TdHJpbmdfdBIPCgdCaW5kVWluGAUgAigNEjAKCUJpbmRF" + 
          "bWFpbBgGIAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSMQoK" + 
          "QmluZE1vYmlsZRgHIAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5n" + 
          "X3QSDgoGU3RhdHVzGAggAigFEhIKClNlc3Npb25LZXkYCSACKAwSLQoGSW1n" + 
          "U2lkGAogAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBItCgZJ" + 
          "bWdCdWYYCyACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90EjcK" + 
          "EE9mZmljaWFsVXNlck5hbWUYDCACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRp" + 
          "blN0cmluZ190EjcKEE9mZmljaWFsTmlja05hbWUYDSACKAsyHS5tbS5jb21t" + 
          "YW5kLlNLQnVpbHRpblN0cmluZ190EjoKE1FRTWljcm9CbG9nVXNlck5hbWUY" + 
          "DiABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0cmluZ190EhkKEVFRTWlj" + 
          "cm9CbG9nU3RhdHVzGA8gASgFEhIKCk5ld1ZlcnNpb24YECABKAUSDgoGVGlj" + 
          "a2V0GBEgASgJEhYKDlB1c2hNYWlsU3RhdHVzGBIgASgFEhcKD1NlbmRDYXJk" + 
          "Qml0RmxhZxgTIAEoBRIdChVQdXNoTWFpbFNldHRpbmdUaWNrZXQYFCABKAkS" + 
          "KQoNQnVpbHRpbklQTGlzdBgVIAEoCzISLm1tLmNvbW1hbmQuSVBMaXN0Eg0K" + 
          "BUZTVVJMGBYgASgJEjYKDk5ldHdvcmtDb250cm9sGBcgASgLMh4ubW0uY29t" + 
          "bWFuZC5OZXR3b3JrQ29udHJvbFR5cGUSEgoKUGx1Z2luRmxhZxgYIAEoBRIN" + 
          "CgVBbGlhcxgZIAEoCRIPCgdSZWdUeXBlGBogASgFEg8KB0F1dGhLZXkYGyAB" + 
          "KAkSCwoDU2lkGBwgASgJEjQKDVBsdWdpbktleUxpc3QYHSABKAsyHS5tbS5j" + 
          "b21tYW5kLlBsdWdpbktleUxpc3RUeXBlEjQKDUltZ0VuY3J5cHRLZXkYHiAB" + 
          "KAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0cmluZ190EiwKBUEyS2V5GB8g" + 
          "ASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdBIrCgRLU2lkGCAg" + 
          "ASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdBITCgtQcm9maWxl" + 
          "RmxhZxghIAEoBRIQCghQYXNzd29yZBgiIAEoCRIRCglUaW1lU3RhbXAYIyAB" + 
          "KAUSEQoJSXNBdXRvUmVnGCQgASgFEhQKDEtpY2tSZXNwb25zZRglIAEoCRIU" + 
          "CgxBcHBseUJldGFVcmwYJiABKAkSFQoNRGV2aWNlSW5mb1htbBgnIAEoCRIV" + 
          "Cg1Tb2Z0Q29uZmlnWG1sGCggASgJEjAKC05ld0hvc3RMaXN0GCkgASgLMhsu" + 
          "bW0uY29tbWFuZC5OZXdIb3N0TGlzdFR5cGUSEgoKQXV0aFRpY2tldBgqIAEo" + 
          "CRISCgpTYWZlRGV2aWNlGCsgASgFEhQKDE1haW5BY2N0VHlwZRgsIAEoBRIX" + 
          "Cg9OZWVkU2V0RW1haWxQd2QYLSABKAUSDwoHSGludE1zZxguIAEoCRIWCg5B" + 
          "dXRvQXV0aFRpY2tldBgvIAEoCRIoCgdEbnNJbmZvGDAgASgLMhcubW0uY29t" + 
          "bWFuZC5EbnNJbmZvVHlwZSJPChFOZXdTZW5kTXNnUmVxdWVzdBINCgVDb3Vu" + 
          "dBgBIAIoBRIrCgRMaXN0GAIgAygLMh0ubW0uY29tbWFuZC5OZXdNc2dSZXF1" + 
          "ZXN0Qm9keSJ5ChJOZXdTZW5kTXNnUmVzcG9uc2USJgoEYmFzZRgBIAIoCzIY" + 
          "Lm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEg0KBUNvdW50GAIgAigNEiwKBExp" + 
          "c3QYAyADKAsyHi5tbS5jb21tYW5kLk5ld01zZ1Jlc3BvbnNlQm9keSJwCg5T" + 
          "ZW5kTXNnUmVxdWVzdBIlCgRiYXNlGAEgAigLMhcubW0uY29tbWFuZC5CYXNl" + 
          "UmVxdWVzdBINCgVDb3VudBgCIAIoBRIoCgRMaXN0GAMgAygLMhoubW0uY29t" + 
          "bWFuZC5Nc2dSZXF1ZXN0Qm9keSJzCg9TZW5kTXNnUmVzcG9uc2USJgoEYmFz" + 
          "ZRgBIAIoCzIYLm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEg0KBUNvdW50GAIg" + 
          "AigFEikKBExpc3QYAyADKAsyGy5tbS5jb21tYW5kLk1zZ1Jlc3BvbnNlQm9k" + 
          "eSIyCgxPcGxvZ1JlcXVlc3QSIgoFT3Bsb2cYASACKAsyEy5tbS5jb21tYW5k" + 
          "LkNtZExpc3QiHAoNT3Bsb2dSZXNwb25zZRILCgNyZXQYASACKAUirwEKDk5l" + 
          "d1N5bmNSZXF1ZXN0EiIKBU9wbG9nGAEgAigLMhMubW0uY29tbWFuZC5DbWRM" + 
          "aXN0EhAKCFNlbGVjdG9yGAIgAigFEi0KBktleUJ1ZhgDIAIoCzIdLm1tLmNv" + 
          "bW1hbmQuU0tCdWlsdGluQnVmZmVyX3QSDQoFU2NlbmUYBCABKAUSEgoKRGV2" + 
          "aWNlVHlwZRgFIAEoCRIVCg1zeW5jTXNnRGlnZXN0GAYgASgNIsEBCg9OZXdT" + 
          "eW5jUmVzcG9uc2USCwoDUmV0GAEgAigFEiQKB0NtZExpc3QYAiACKAsyEy5t" + 
          "bS5jb21tYW5kLkNtZExpc3QSFAoMQ29udGludWVGbGFnGAMgAigNEi0KBktl" + 
          "eUJ1ZhgEIAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluQnVmZmVyX3QSDgoG" + 
          "U3RhdHVzGAUgASgNEhUKDU9ubGluZVZlcnNpb24YBiABKA0SDwoHU3ZyVGlt" + 
          "ZRgHIAEoDSJ6ChBNTVNuc1N5bmNSZXF1ZXN0EiUKBGJhc2UYASACKAsyFy5t" + 
          "bS5jb21tYW5kLkJhc2VSZXF1ZXN0EhAKCFNlbGVjdG9yGAIgAigFEi0KBktl" + 
          "eUJ1ZhgDIAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluQnVmZmVyX3QipgEK" + 
          "EU1NU25zU3luY1Jlc3BvbnNlEiYKBGJhc2UYASACKAsyGC5tbS5jb21tYW5k" + 
          "LkJhc2VSZXNwb25zZRIkCgdDbWRMaXN0GAIgAigLMhMubW0uY29tbWFuZC5D" + 
          "bWRMaXN0EhQKDENvbnRpbnVlRmxhZxgDIAIoBRItCgZLZXlCdWYYBCACKAsy" + 
          "HS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90IrMBCg5MQlNGaW5kUmVx" + 
          "dWVzdBIlCgRiYXNlGAEgAigLMhcubW0uY29tbWFuZC5CYXNlUmVxdWVzdBIO" + 
          "CgZPcENvZGUYAiACKAUSEQoJTG9uZ2l0dWRlGAMgAigCEhAKCExhdGl0dWRl" + 
          "GAQgAigCEhEKCVByZWNpc2lvbhgFIAIoBRIPCgdNYWNBZGRyGAYgASgJEg4K" + 
          "BkNlbGxJZBgHIAEoCRIRCglHUFNTb3VyY2UYCCABKAUizgEKD0xCU0ZpbmRS" + 
          "ZXNwb25zZRImCgRiYXNlGAEgAigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9u" + 
          "c2USFAoMQ29udGFjdENvdW50GAIgAigFEi4KC0NvbnRhY3RMaXN0GAMgAygL" + 
          "MhkubW0uY29tbWFuZC5Db250YWN0T2JqZWN0Eg0KBVN0YXRlGAQgASgFEhEK" + 
          "CUZsdXNoVGltZRgFIAEoBRISCgpJc1Nob3dSb29tGAYgASgFEhcKD1Jvb21N" + 
          "ZW1iZXJDb3VudBgHIAEoBSKEAQoTR2V0QnJhbmRMaXN0UmVxdWVzdBIlCgRi" + 
          "YXNlGAEgAigLMhcubW0uY29tbWFuZC5CYXNlUmVxdWVzdBIQCghVc2VyTmFt" + 
          "ZRgCIAEoCRI0Cg1SZXF1ZXN0QnVmZmVyGAMgAigLMh0ubW0uY29tbWFuZC5T" + 
          "S0J1aWx0aW5CdWZmZXJfdCKHAQoUR2V0QnJhbmRMaXN0UmVzcG9uc2USJgoE" + 
          "YmFzZRgBIAIoCzIYLm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEhEKCUJyYW5k" + 
          "TGlzdBgCIAEoCRI0Cg1SZXF1ZXN0QnVmZmVyGAMgAigLMh0ubW0uY29tbWFu" + 
          "ZC5TS0J1aWx0aW5CdWZmZXJfdCLIAQoWVXBsb2FkaGRoZWFkaW1nUmVxdWVz" + 
          "dBIlCgRiYXNlGAEgAigLMhcubW0uY29tbWFuZC5CYXNlUmVxdWVzdBIQCghU" + 
          "b3RhbExlbhgCIAIoBRIQCghTdGFydFBvcxgDIAIoBRITCgtIZWFkSW1nVHlw" + 
          "ZRgEIAIoBRIrCgREYXRhGAUgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5C" + 
          "dWZmZXJfdBIPCgdJbWdIYXNoGAYgASgJEhAKCFVzZXJOYW1lGAcgASgJIn0K" + 
          "F1VwbG9hZGhkaGVhZGltZ1Jlc3BvbnNlEiYKBGJhc2UYASACKAsyGC5tbS5j" + 
          "b21tYW5kLkJhc2VSZXNwb25zZRIQCghUb3RhbExlbhgCIAIoBRIQCghTdGFy" + 
          "dFBvcxgDIAIoBRIWCg5GaW5hbEltZ01kNXN1bRgEIAEoCSLFAQoOTmV3SW5p" + 
          "dFJlcXVlc3QSJQoEYmFzZRgBIAIoCzIXLm1tLmNvbW1hbmQuQmFzZVJlcXVl" + 
          "c3QSEAoIVXNlck5hbWUYAiABKAkSNQoOQ3VycmVudFN5bmNrZXkYAyACKAsy" + 
          "HS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90EjEKCk1heFN5bmNrZXkY" + 
          "BCACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90EhAKCExhbmd1" + 
          "YWdlGAUgASgJIpYCCg9OZXdJbml0UmVzcG9uc2USJgoEYmFzZRgBIAIoCzIY" + 
          "Lm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEjUKDkN1cnJlbnRTeW5ja2V5GAIg" + 
          "AigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdBIxCgpNYXhTeW5j" + 
          "a2V5GAMgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdBIUCgxD" + 
          "b250aW51ZUZsYWcYBCACKAUSFAoMU2VsZWN0Qml0bWFwGAUgAigFEhAKCENt" + 
          "ZENvdW50GAYgAigFEiQKB0NtZExpc3QYByADKAsyEy5tbS5jb21tYW5kLkNt" + 
          "ZEl0ZW0SDQoFUmF0aW8YCCACKAUitgYKDU5ld1JlZ1JlcXVlc3QSJQoEYmFz" + 
          "ZRgBIAIoCzIXLm1tLmNvbW1hbmQuQmFzZVJlcXVlc3QSEAoIVXNlck5hbWUY" + 
          "AiABKAkSCwoDUHdkGAMgASgJEhAKCE5pY2tOYW1lGAQgASgJEg8KB0JpbmRV" + 
          "aW4YBSACKA0SEQoJQmluZEVtYWlsGAYgAigJEhIKCkJpbmRNb2JpbGUYByAB" + 
          "KAkSDgoGVGlja2V0GAggASgJEhQKDEJ1aWx0aW5JUFNlcRgMIAEoBRINCgVE" + 
          "TFNyYxgNIAEoBRIPCgdSZWdNb2RlGA4gASgFEhAKCFRpbWVab25lGA8gASgJ" + 
          "EhAKCExhbmd1YWdlGBAgASgJEhAKCEZvcmNlUmVnGBEgASgFEhMKC1JlYWxD" + 
          "b3VudHJ5GBIgASgJEjUKDlJhbmRvbUVuY3J5S2V5GBMgAigLMh0ubW0uY29t" + 
          "bWFuZC5TS0J1aWx0aW5CdWZmZXJfdBINCgVhbGlhcxgUIAEoCRIXCg92ZXJp" + 
          "ZnlTaWduYXR1cmUYFSABKAkSFQoNdmVyaWZ5Q29udGVudBgWIAEoCRISCgpo" + 
          "YXNIZWFkSW1nGBcgASgNEhIKCnN1Z2dlc3RSZXQYGCABKA0SEwoLY2xpZW50" + 
          "U2VxSWQYHyABKAkSEAoIYWRTb3VyY2UYICABKAkSEQoJYW5kcm9pZElkGCEg" + 
          "ASgJEg8KB21hY0FkZHIYIiABKAkSGQoRYW5kcm9pZEluc3RhbGxSZWYYIyAB" + 
          "KAkSGQoRY2xpZW50RmluZ2VycHJpbnQYJCABKAkSKgoNY2xpUHViRWNkaGtl" + 
          "eRglIAEoCzITLm1tLmNvbW1hbmQuRUNESEtleRIRCglnb29nbGVBaWQYJiAB" + 
          "KAkSEAoIYnVuZGxlSWQYJyABKAkSFAoMYmlvU2lnVGlja2V0GCkgASgJEhcK" + 
          "D2Jpb1NpZ0NoZWNrVHlwZRgqIAEoDRI2Cg9jbGllbnRDaGVja0RhdGEYKyAB" + 
          "KAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90EhcKD21vYmlsZUNo" + 
          "ZWNrVHlwZRgsIAEoDRIUCgxyZWdTZXNzaW9uSWQYLSABKAkiyQcKDk5ld1Jl" + 
          "Z1Jlc3BvbnNlEiYKBGJhc2UYASACKAsyGC5tbS5jb21tYW5kLkJhc2VSZXNw" + 
          "b25zZRILCgNVaW4YAiACKA0SEgoKU2Vzc2lvbktleRgDIAEoCRIYChBPZmZp" + 
          "Y2lhbFVzZXJOYW1lGAQgASgJEhgKEE9mZmljaWFsTmlja05hbWUYBSABKAkS" + 
          "GwoTUVFNaWNyb0Jsb2dVc2VyTmFtZRgGIAEoCRIRCglCaW5kRW1haWwYByAB" + 
          "KAkSFgoOUHVzaE1haWxTdGF0dXMYCCACKAUSFwoPU2VuZENhcmRCaXRGbGFn" + 
          "GAkgASgFEh0KFVB1c2hNYWlsU2V0dGluZ1RpY2tldBgKIAEoCRIpCg1CdWls" + 
          "dGluSVBMaXN0GA4gASgLMhIubW0uY29tbWFuZC5JUExpc3QSDQoFRlNVUkwY" + 
          "DyABKAkSEAoIVXNlck5hbWUYECABKAkSDgoGU3RhdHVzGBEgASgFEjYKDk5l" + 
          "dHdvcmtDb250cm9sGBIgASgLMh4ubW0uY29tbWFuZC5OZXR3b3JrQ29udHJv" + 
          "bFR5cGUSEgoKUmV0dXJuRmxhZxgTIAEoBRIPCgdSZWdUeXBlGBQgASgFEg8K" + 
          "B0F1dGhLZXkYFSABKAkSNAoNUGx1Z2luS2V5TGlzdBgWIAEoCzIdLm1tLmNv" + 
          "bW1hbmQuUGx1Z2luS2V5TGlzdFR5cGUSEAoIUGFzc3dvcmQYFyABKAkSEwoL" + 
          "UHJvZmlsZUZsYWcYGCABKAUSMAoLTmV3SG9zdExpc3QYGSABKAsyGy5tbS5j" + 
          "b21tYW5kLk5ld0hvc3RMaXN0VHlwZRIWCg5BdXRvQXV0aFRpY2tldBgaIAEo" + 
          "CRIoCgdEbnNJbmZvGBsgASgLMhcubW0uY29tbWFuZC5EbnNJbmZvVHlwZRIS" + 
          "CgpzdGVwVGlja2V0GBwgASgJEhcKD3ZlcmlmeVNpZ25hdHVyZRgdIAEoCRIx" + 
          "Cgp2ZXJpZnlCdWZmGB4gASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZm" + 
          "ZXJfdBIrCglzaG93U3R5bGUYHyABKAsyGC5tbS5jb21tYW5kLlNob3dTdHls" + 
          "ZUtleRIrCgpzbnNEbnNJbmZvGCAgASgLMhcubW0uY29tbWFuZC5EbnNJbmZv" + 
          "VHlwZRIrCgphcHBEbnNJbmZvGCEgASgLMhcubW0uY29tbWFuZC5EbnNJbmZv" + 
          "VHlwZRI4ChFzZWNBdXRoUmVnS2V5U2VjdBgiIAEoCzIdLm1tLmNvbW1hbmQu" + 
          "U2VjQXV0aFJlZ0tleVNlY3QiRQoNTG9nb3V0UmVxdWVzdBIlCgRiYXNlGAEg" + 
          "AigLMhcubW0uY29tbWFuZC5CYXNlUmVxdWVzdBINCgVTY2VuZRgCIAIoBSI4" + 
          "Cg5Mb2dvdXRSZXNwb25zZRImCgRiYXNlGAEgAigLMhgubW0uY29tbWFuZC5C" + 
          "YXNlUmVzcG9uc2UixgIKEVZlcmlmeVVzZXJSZXF1ZXN0EiUKBGJhc2UYASAC" + 
          "KAsyFy5tbS5jb21tYW5kLkJhc2VSZXF1ZXN0Eg4KBk9wY29kZRgCIAIoBRIa" + 
          "ChJWZXJpZnlVc2VyTGlzdFNpemUYAyACKAUSMQoOVmVyaWZ5VXNlckxpc3QY" + 
          "BCADKAsyGS5tbS5jb21tYW5kLlZlcmlmeVVzZXJPYmoSFQoNVmVyaWZ5Q29u" + 
          "dGVudBgFIAEoCRIVCg1TY2VuZUxpc3ROdW1iGAYgASgFEhEKCVNjZW5lTGlz" + 
          "dBgHIAMoCRIaChJWZXJpZnlJbmZvTGlzdE51bWIYCCABKA0SFgoOVmVyaWZ5" + 
          "SW5mb0xpc3QYCSADKAkSNgoPQ2xpZW50Q2hlY2tEYXRhGAogASgLMh0ubW0u" + 
          "Y29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdCJOChJWZXJpZnlVc2VyUmVzcG9u" + 
          "c2USJgoEYmFzZRgBIAIoCzIYLm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEhAK" + 
          "CFVzZXJOYW1lGAIgASgJIn4KFFNlYXJjaENvbnRhY3RSZXF1ZXN0EiUKBGJh" + 
          "c2UYASACKAsyFy5tbS5jb21tYW5kLkJhc2VSZXF1ZXN0Ei8KCFVzZXJOYW1l" + 
          "GAIgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIOCgZvcENv" + 
          "ZGUYAyACKAUioAcKFVNlYXJjaENvbnRhY3RSZXNwb25zZRImCgRiYXNlGAEg" + 
          "AigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9uc2USLwoIVXNlck5hbWUYAiAC" + 
          "KAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0cmluZ190Ei8KCE5pY2tOYW1l" + 
          "GAMgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIwCglQWUlu" + 
          "aXRpYWwYBCACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0cmluZ190Ei4K" + 
          "B1F1YW5QaW4YBSACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0cmluZ190" + 
          "EgsKA1NleBgGIAIoBRItCgZJbWdCdWYYByACKAsyHS5tbS5jb21tYW5kLlNL" + 
          "QnVpbHRpbkJ1ZmZlcl90EhAKCFByb3ZpbmNlGAggASgJEgwKBENpdHkYCSAB" + 
          "KAkSEQoJU2lnbmF0dXJlGAogASgJEhQKDFBlcnNvbmFsQ2FyZBgLIAEoBRIS" + 
          "CgpWZXJpZnlGbGFnGAwgASgFEhIKClZlcmlmeUluZm8YDSABKAkSDQoFV2Vp" + 
          "Ym8YDiABKAkSDQoFQWxpYXMYDyABKAkSFQoNV2VpYm9OaWNrbmFtZRgQIAEo" + 
          "CRIRCglXZWlib0ZsYWcYESABKAUSEgoKQWxidW1TdHlsZRgSIAEoBRIRCglB" + 
          "bGJ1bUZsYWcYEyABKAUSFAoMQWxidW1CR0ltZ0lEGBQgASgJEigKC1Nuc1Vz" + 
          "ZXJJbmZvGBUgASgLMhMubW0uY29tbWFuZC5TbnNVc2VyEg8KB0NvdW50cnkY" + 
          "FiABKAkSEwoLTXlCcmFuZExpc3QYFyABKAkSNQoOQ3VzdG9taXplZEluZm8Y" + 
          "GCABKAsyHS5tbS5jb21tYW5kLkN1c3RvbWl6ZWRJbmZvT2JqEhQKDENvbnRh" + 
          "Y3RDb3VudBgZIAEoBRIuCgtDb250YWN0TGlzdBgaIAMoCzIZLm1tLmNvbW1h" + 
          "bmQuU2VhcmNoQ29udGFjdBIVCg1CaWdIZWFkSW1nVXJsGBsgASgJEhcKD1Nt" + 
          "YWxsSGVhZEltZ1VybBgcIAEoCRItCgZSZXNCdWYYHSABKAsyHS5tbS5jb21t" + 
          "YW5kLlNLQnVpbHRpbkJ1ZmZlcl90EhYKDmFudGlzcGFtVGlja2V0GB4gASgJ" + 
          "EhIKCmtmd29ya2VySWQYHyABKAkSEQoJbWF0Y2hUeXBlGCAgASgNIuECChFH" + 
          "ZXRDb250YWN0UmVxdWVzdBIlCgRiYXNlGAEgAigLMhcubW0uY29tbWFuZC5C" + 
          "YXNlUmVxdWVzdBIRCglVc2VyQ291bnQYAiACKAUSMwoMVXNlck5hbWVMaXN0" + 
          "GAMgAygLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIaChJhbnRp" + 
          "c3BhbVRpY2tldE51bWIYBCABKA0SFgoOYW50aXNwYW1UaWNrZXQYBSADKAkS" + 
          "GAoQZnJvbUNoYXRSb29tTnVtYhgGIAEoDRIzCgxmcm9tQ2hhdFJvb20YByAD" + 
          "KAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0cmluZ190EhcKD2dldENvbnRh" + 
          "Y3RTY2VuZRgIIAEoDRJBChpjaGF0Um9vbUFjY2Vzc1ZlcmlmeVRpY2tldBgJ" + 
          "IAEoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QikAEKEkdldENv" + 
          "bnRhY3RSZXNwb25zZRImCgRiYXNlGAEgAigLMhgubW0uY29tbWFuZC5CYXNl" + 
          "UmVzcG9uc2USFAoMQ29udGFjdENvdW50GAIgAigFEi8KC0NvbnRhY3RMaXN0" + 
          "GAMgAygLMhoubW0uY29tbWFuZC5Db250YWN0UHJvZmlsZRILCgNSZXQYBCAD" + 
          "KAkiggEKFUdldFBhY2thZ2VMaXN0UmVxdWVzdBIlCgRiYXNlGAEgAigLMhcu" + 
          "bW0uY29tbWFuZC5CYXNlUmVxdWVzdBINCgVDb3VudBgCIAIoBRIlCgRMaXN0" + 
          "GAMgAygLMhcubW0uY29tbWFuZC5QYWNrZWdlSW5mbxIMCgRUeXBlGAQgASgF" + 
          "IqwBChZHZXRQYWNrYWdlTGlzdFJlc3BvbnNlEiYKBGJhc2UYASACKAsyGC5t" + 
          "bS5jb21tYW5kLkJhc2VSZXNwb25zZRINCgVDb3VudBgCIAIoBRIlCgRMaXN0" + 
          "GAMgAygLMhcubW0uY29tbWFuZC5QYWNrZWdlSW5mbxIUCgxDb250aW51ZUZs" + 
          "YWcYBCACKAUSEAoIU3ZyQ291bnQYBSACKAUSDAoEVHlwZRgGIAEoBSK/AQoT" + 
          "R2V0SERIZWFkSW1nUmVxdWVzdBIlCgRiYXNlGAEgAigLMhcubW0uY29tbWFu" + 
          "ZC5CYXNlUmVxdWVzdBIQCghVc2VyTmFtZRgCIAEoCRIQCghJbWdXaWR0aBgD" + 
          "IAIoBRIRCglJbWdIZWlnaHQYBCACKAUSEQoJSW1nRm9ybWF0GAUgASgJEhAK" + 
          "CFRvdGFsTGVuGAYgAigFEhAKCFN0YXJ0UG9zGAcgAigFEhMKC0hlYWRJbWdU" + 
          "eXBlGAggAigFIqEBChRHZXRIREhlYWRJbWdSZXNwb25zZRImCgRiYXNlGAEg" + 
          "AigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9uc2USEAoIVXNlck5hbWUYAiAB" + 
          "KAkSEAoIVG90YWxMZW4YAyACKAUSEAoIU3RhcnRQb3MYBCACKAUSKwoERGF0" + 
          "YRgFIAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluQnVmZmVyX3QiTQoTR2V0" + 
          "VlVzZXJJbmZvUmVxdWVzdBIlCgRiYXNlGAEgAigLMhcubW0uY29tbWFuZC5C" + 
          "YXNlUmVxdWVzdBIPCgdWZXJzaW9uGAIgAigFIo0BChRHZXRWVXNlckluZm9S" + 
          "ZXNwb25zZRImCgRiYXNlGAEgAigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9u" + 
          "c2USDwoHVmVyc2lvbhgCIAIoBRISCgpWVXNlckNvdW50GAMgAigFEigKCVZV" + 
          "c2VyTGlzdBgEIAMoCzIVLm1tLmNvbW1hbmQuVlVzZXJJbmZvIncKE0NsaWNr" + 
          "Q29tbWFuZFJlcXVlc3QSJQoEYmFzZRgBIAIoCzIXLm1tLmNvbW1hbmQuQmFz" + 
          "ZVJlcXVlc3QSEQoJQ2xpY2tUeXBlGAIgAigFEhEKCUNsaWNrSW5mbxgDIAEo" + 
          "CRITCgtCaXpVc2VyTmFtZRgEIAEoCSI+ChRDbGlja0NvbW1hbmRSZXNwb25z" + 
          "ZRImCgRiYXNlGAEgAigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9uc2UivQMK" + 
          "GUJpbmRvcE1vYmlsZUZvclJlZ1JlcXVlc3QSJQoEYmFzZRgBIAIoCzIXLm1t" + 
          "LmNvbW1hbmQuQmFzZVJlcXVlc3QSEAoIVXNlck5hbWUYAiABKAkSDgoGTW9i" + 
          "aWxlGAMgASgJEg4KBk9wY29kZRgEIAIoBRISCgpWZXJpZnljb2RlGAUgASgJ" + 
          "EhAKCERpYWxGbGFnGAYgASgFEhAKCERpYWxMYW5nGAcgASgJEhIKCkF1dGhU" + 
          "aWNrZXQYCCABKAkSEAoIRm9yY2VSZWcYCSABKAUSFgoOU2FmZURldmljZU5h" + 
          "bWUYCiABKAkSFgoOU2FmZURldmljZVR5cGUYCyABKAkSNQoOUmFuZG9tRW5j" + 
          "cnlLZXkYDCABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90EhAK" + 
          "CExhbmd1YWdlGA0gASgJEhkKEWlucHV0TW9iaWxlUmV0cnlzGA4gASgFEhEK" + 
          "CWFkanVzdFJldBgPIAEoBRITCgtjbGllbnRTZXFJZBgQIAEoCRIXCg9tb2Jp" + 
          "bGVDaGVja1R5cGUYESABKA0SFAoMcmVnU2Vzc2lvbklEGBIgASgJIvgEChpC" + 
          "aW5kb3BNb2JpbGVGb3JSZWdSZXNwb25zZRImCgRiYXNlGAEgAigLMhgubW0u" + 
          "Y29tbWFuZC5CYXNlUmVzcG9uc2USDgoGdGlja2V0GAIgASgJEg0KBVNtc05v" + 
          "GAMgASgJEhIKCk5lZWRTZXRQd2QYBCABKAUSCwoDUHdkGAUgASgJEhAKCFVz" + 
          "ZXJuYW1lGAYgASgJEjAKC05ld0hvc3RMaXN0GAcgASgLMhsubW0uY29tbWFu" + 
          "ZC5OZXdIb3N0TGlzdFR5cGUSKQoNQnVpbHRpbklQTGlzdBgIIAEoCzISLm1t" + 
          "LmNvbW1hbmQuSVBMaXN0EjYKDk5ldHdvcmtDb250cm9sGAkgASgLMh4ubW0u" + 
          "Y29tbWFuZC5OZXR3b3JrQ29udHJvbFR5cGUSEgoKQXV0aFRpY2tldBgKIAEo" + 
          "CRISCgpTYWZlRGV2aWNlGAsgASgFEhAKCE1haW5BY2N0GAwgASgJEhQKDE1h" + 
          "aW5BY2N0VHlwZRgNIAEoDRIuCg5TYWZlRGV2aWNlTGlzdBgOIAEoCzIWLm1t" + 
          "LmNvbW1hbmQuU2FmZURldmljZRISCgpwdXJlTW9iaWxlGA8gASgJEhYKDmZv" + 
          "cm1hdGVkTW9iaWxlGBAgASgJEisKCXNob3dTdHlsZRgRIAEoCzIYLm1tLmNv" + 
          "bW1hbmQuU2hvd1N0eWxlS2V5EhsKE21tdGxzQ29udHJvbEJpdEZsYWcYEiAB" + 
          "KA0SEQoJc21zVXBDb2RlGBMgASgJEhMKC3Ntc1VwTW9iaWxlGBQgASgJEhcK" + 
          "D21vYmlsZUNoZWNrVHlwZRgVIAEoDRIUCgxyZWdTZXNzaW9uSUQYFiABKAki" + 
          "kgEKE05ld1NldFBhc3N3ZFJlcXVlc3QSJQoEYmFzZRgBIAIoCzIXLm1tLmNv" + 
          "bW1hbmQuQmFzZVJlcXVlc3QSEAoIUGFzc3dvcmQYAiABKAkSDgoGVGlja2V0" + 
          "GAMgASgJEjIKC0F1dG9BdXRoS2V5GAQgASgLMh0ubW0uY29tbWFuZC5TS0J1" + 
          "aWx0aW5CdWZmZXJfdCJyChROZXdTZXRQYXNzd2RSZXNwb25zZRImCgRiYXNl" + 
          "GAEgAigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9uc2USMgoLQXV0b0F1dGhL" + 
          "ZXkYAiABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90Iq0CChZO" + 
          "ZXdWZXJpZnlQYXNzd2RSZXF1ZXN0EiUKBGJhc2UYASACKAsyFy5tbS5jb21t" + 
          "YW5kLkJhc2VSZXF1ZXN0Eg4KBk9wQ29kZRgCIAIoBRIMCgRQd2QxGAMgASgJ" + 
          "EgwKBFB3ZDIYBCABKAkSLQoGSW1nU2lkGAUgASgLMh0ubW0uY29tbWFuZC5T" + 
          "S0J1aWx0aW5TdHJpbmdfdBIuCgdJbWdDb2RlGAYgASgLMh0ubW0uY29tbWFu" + 
          "ZC5TS0J1aWx0aW5TdHJpbmdfdBI0Cg1JbWdFbmNyeXB0S2V5GAcgASgLMh0u" + 
          "bW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIrCgRLU2lkGAggASgLMh0u" + 
          "bW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdCLAAgoXTmV3VmVyaWZ5UGFz" + 
          "c3dkUmVzcG9uc2USJgoEYmFzZRgBIAIoCzIYLm1tLmNvbW1hbmQuQmFzZVJl" + 
          "c3BvbnNlEi0KBkltZ1NpZBgCIAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGlu" + 
          "U3RyaW5nX3QSLQoGSW1nQnVmGAMgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0" + 
          "aW5CdWZmZXJfdBIOCgZUaWNrZXQYBCABKAkSNAoNSW1nRW5jcnlwdEtleRgF" + 
          "IAEoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSLAoFQTJLZXkY" + 
          "BiABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90EisKBEtTaWQY" + 
          "ByABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90IlgKEEJpbmRF" + 
          "bWFpbFJlcXVlc3QSJQoEYmFzZRgBIAIoCzIXLm1tLmNvbW1hbmQuQmFzZVJl" + 
          "cXVlc3QSDgoGT3BDb2RlGAIgAigFEg0KBUVtYWlsGAMgASgJIjsKEUJpbmRF" + 
          "bWFpbFJlc3BvbnNlEiYKBGJhc2UYASACKAsyGC5tbS5jb21tYW5kLkJhc2VS" + 
          "ZXNwb25zZSJNChJDaGVja1VuYmluZFJlcXVlc3QSJQoEYmFzZRgBIAIoCzIX" + 
          "Lm1tLmNvbW1hbmQuQmFzZVJlcXVlc3QSEAoIQmluZFR5cGUYAiACKAUiUwoT" + 
          "Q2hlY2tVbmJpbmRSZXNwb25zZRImCgRiYXNlGAEgAigLMhgubW0uY29tbWFu" + 
          "ZC5CYXNlUmVzcG9uc2USFAoMUmFuZG9tUGFzc3dkGAIgASgJIvYBCg5VcGxv" + 
          "YWRNQ29udGFjdBIlCgRiYXNlGAEgAigLMhcubW0uY29tbWFuZC5CYXNlUmVx" + 
          "dWVzdBIQCghVc2VyTmFtZRgCIAEoCRIOCgZPcGNvZGUYAyACKAUSDgoGTW9i" + 
          "aWxlGAQgASgJEhYKDk1vYmlsZUxpc3RTaXplGAUgAigFEi4KB01vYmlsZXMY" + 
          "BiADKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0cmluZ190EhUKDUVtYWls" + 
          "TGlzdFNpemUYByACKAUSLAoFRW1haWwYCCADKAsyHS5tbS5jb21tYW5kLlNL" + 
          "QnVpbHRpblN0cmluZ190IkAKFlVwbG9hZE1Db250YWN0UmVzcG9uc2USJgoE" + 
          "YmFzZRgBIAIoCzIYLm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlIlcKEUdldE1G" + 
          "cmllbmRSZXF1ZXN0EiUKBGJhc2UYASACKAsyFy5tbS5jb21tYW5kLkJhc2VS" + 
          "ZXF1ZXN0Eg4KBk9wVHlwZRgCIAEoBRILCgNNRDUYAyABKAkifwoSR2V0TUZy" + 
          "aWVuZFJlc3BvbnNlEiYKBGJhc2UYASACKAsyGC5tbS5jb21tYW5kLkJhc2VS" + 
          "ZXNwb25zZRINCgVDb3VudBgCIAIoBRIlCgZGcmllbmQYAyADKAsyFS5tbS5j" + 
          "b21tYW5kLkZyaWVuZE9iahILCgNNRDUYBCABKAkijAMKD0dldGE4a2V5UmVx" + 
          "dWVzdBIlCgRiYXNlGAEgAigLMhcubW0uY29tbWFuZC5CYXNlUmVxdWVzdBIO" + 
          "CgZPcENvZGUYAiACKAUSLAoFQTJLZXkYAyABKAsyHS5tbS5jb21tYW5kLlNL" + 
          "QnVpbHRpbkJ1ZmZlcl90EiwKBUFwcElEGAQgASgLMh0ubW0uY29tbWFuZC5T" + 
          "S0J1aWx0aW5TdHJpbmdfdBIsCgVTY29wZRgFIAEoCzIdLm1tLmNvbW1hbmQu" + 
          "U0tCdWlsdGluU3RyaW5nX3QSLAoFU3RhdGUYBiABKAsyHS5tbS5jb21tYW5k" + 
          "LlNLQnVpbHRpblN0cmluZ190Ei0KBlJlcVVybBgHIAEoCzIdLm1tLmNvbW1h" + 
          "bmQuU0tCdWlsdGluU3RyaW5nX3QSFgoORnJpZW5kVXNlck5hbWUYCCABKAkS" + 
          "EAoIRnJpZW5kUVEYCSABKAUSDQoFU2NlbmUYCiABKAUSEAoIVXNlck5hbWUY" + 
          "CyABKAkSEAoIQnVuZGxlSUQYDCABKAkipAQKEEdldGE4a2V5UmVzcG9uc2US" + 
          "JgoEYmFzZRgBIAIoCzIYLm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEg8KB0Z1" + 
          "bGxVUkwYAiABKAkSDQoFQThLZXkYAyABKAkSEgoKQWN0aW9uQ29kZRgEIAEo" + 
          "BRINCgVUaXRsZRgFIAEoCRIPCgdDb250ZW50GAYgASgJEi8KClBlcm1pc3Np" + 
          "b24YByABKAsyGy5tbS5jb21tYW5kLkpTQVBJUGVybWlzc2lvbhI3Cg1Db250" + 
          "cm9sQml0U2V0GAggASgLMiAubW0uY29tbWFuZC5HZW5lcmFsQ29udHJvbEJp" + 
          "dFNldBIQCghVc2VyTmFtZRgJIAEoCRIQCghTaGFyZVVybBgPIAEoCRISCgpT" + 
          "Y29wZUNvdW50GBAgASgNEhEKCVNjb3BlTGlzdBgRIAMoBRIWCg5hbnRpc3Bh" + 
          "bVRpY2tldBgSIAEoCRIMCgRzc2lkGBMgASgJEgsKA21pZBgUIAEoCRIuCgpE" + 
          "ZWVwTGlua0JUGBYgASgLMhoubW0uY29tbWFuZC5EZWVwTGlua0JpdFNldBI4" + 
          "ChFqc2FwaWNvbnRyb2xCeXRlcxgXIAEoCzIdLm1tLmNvbW1hbmQuU0tCdWls" + 
          "dGluQnVmZmVyX3QSFgoOSHR0cEhlYWRlck51bWIYGCABKA0SKgoKSHR0cEhl" + 
          "YWRlchgZIAMoCzIWLm1tLmNvbW1hbmQuSFRUUEhlYWRlciLfAgoQTU1TbnNQ" + 
          "b3N0UmVxdWVzdBIlCgRiYXNlGAEgAigLMhcubW0uY29tbWFuZC5CYXNlUmVx" + 
          "dWVzdBIxCgpPYmplY3REZXNjGAIgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0" + 
          "aW5CdWZmZXJfdBIYChBXaXRoVXNlckxpc3ROdW1iGAMgASgFEhQKDFdpdGhV" + 
          "c2VyTGlzdBgEIAMoCRIPCgdQcml2YWN5GAUgASgFEhAKCFN5bmNGbGFnGAYg" + 
          "ASgFEhAKCENsaWVudElkGAcgASgJEhUKDVBvc3RCR0ltZ1R5cGUYCCABKAUS" + 
          "EgoKR3JvdXBDb3VudBgJIAEoBRIQCghHcm91cElkcxgKIAMoCRIUCgxPYmpl" + 
          "Y3RTb3VyY2UYCyABKAUSDwoHUmVmZXJJZBgMIAEoAxIVCg1CbGFja0xpc3RO" + 
          "dW1iGA0gASgFEhEKCUJsYWNrTGlzdBgOIAMoCSI7ChFNTVNuc1Bvc3RSZXNw" + 
          "b25zZRImCgRiYXNlGAEgAigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9uc2Ui" + 
          "vwIKEk1tc25zdXBsb2FkUmVxdWVzdBIlCgRiYXNlGAEgAigLMhcubW0uY29t" + 
          "bWFuZC5CYXNlUmVxdWVzdBIMCgRUeXBlGAIgAigFEhAKCFN0YXJ0UG9zGAMg" + 
          "AigFEhAKCFRvdGFsTGVuGAQgAigFEi0KBkJ1ZmZlchgFIAIoCzIdLm1tLmNv" + 
          "bW1hbmQuU0tCdWlsdGluQnVmZmVyX3QSEAoIQ2xpZW50SWQYBiABKAkSEwoL" + 
          "RmlsdGVyU3R5cGUYByABKAUSEAoIU3luY0ZsYWcYCCABKAUSEwoLRGVzY3Jp" + 
          "cHRpb24YCSABKAkSEQoJUGhvdG9Gcm9tGAogASgFEg8KB05ldFR5cGUYCyAB" + 
          "KAUSLwoLVHdpdHRlckluZm8YDCABKAsyGi5tbS5jb21tYW5kLlR3aXR0ZXJJ" + 
          "bmZvT2JqIv4BChNNbXNuc3VwbG9hZFJlc3BvbnNlEiYKBGJhc2UYASACKAsy" + 
          "GC5tbS5jb21tYW5kLkJhc2VSZXNwb25zZRIQCghTdGFydFBvcxgCIAIoBRIQ" + 
          "CghUb3RhbExlbhgDIAIoBRIQCghDbGllbnRJZBgEIAEoCRIrCglCdWZmZXJV" + 
          "cmwYBSACKAsyGC5tbS5jb21tYW5kLkJ1ZmZlclVybE9iahIVCg1UaHVtYlVy" + 
          "bENvdW50GAYgAigFEisKCVRodW1iVXJscxgHIAMoCzIYLm1tLmNvbW1hbmQu" + 
          "QnVmZmVyVXJsT2JqEgoKAklkGAggAigDEgwKBFR5cGUYCSACKAUiowUKE1Vw" + 
          "bG9hZE1zZ0ltZ1JlcXVlc3QSJQoEYmFzZRgBIAIoCzIXLm1tLmNvbW1hbmQu" + 
          "QmFzZVJlcXVlc3QSMgoLQ2xpZW50SW1nSWQYAiACKAsyHS5tbS5jb21tYW5k" + 
          "LlNLQnVpbHRpblN0cmluZ190EjMKDEZyb21Vc2VyTmFtZRgDIAIoCzIdLm1t" + 
          "LmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSMQoKVG9Vc2VyTmFtZRgEIAIo" + 
          "CzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSEAoIVG90YWxMZW4Y" + 
          "BSACKAUSEAoIU3RhcnRQb3MYBiACKAUSDwoHRGF0YUxlbhgHIAIoBRIrCgRE" + 
          "YXRhGAggAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdBIPCgdN" + 
          "c2dUeXBlGAkgASgFEhEKCU1zZ1NvdXJjZRgKIAEoCRIUCgxDb21wcmVzc1R5" + 
          "cGUYCyABKAUSDwoHTmV0VHlwZRgMIAEoBRIRCglQaG90b0Zyb20YDSABKAUS" + 
          "DwoHTWVkaWFJZBgOIAEoCRIUCgxDRE5CaWdJbWdVcmwYDyABKAkSFAoMQ0RO" + 
          "TWlkSW1nVXJsGBAgASgJEg4KBkFFU0tleRgRIAEoCRIQCghFbmNyeVZlchgS" + 
          "IAEoBRIVCg1DRE5CaWdJbWdTaXplGBMgASgFEhUKDUNETk1pZEltZ1NpemUY" + 
          "FCABKAUSFgoOQ0ROVGh1bWJJbWdVcmwYFSABKAkSFwoPQ0ROVGh1bWJJbWdT" + 
          "aXplGBYgASgFEhkKEUNETlRodW1iSW1nSGVpZ2h0GBcgASgFEhgKEENETlRo" + 
          "dW1iSW1nV2lkdGgYGCABKAUSFgoOQ0ROVGh1bWJBRVNLZXkYGSABKAkisgIK" + 
          "FFVwbG9hZE1zZ0ltZ1Jlc3BvbnNlEiYKBGJhc2UYASACKAsyGC5tbS5jb21t" + 
          "YW5kLkJhc2VSZXNwb25zZRINCgVNc2dJZBgCIAIoBRIyCgtDbGllbnRJbWdJ" + 
          "ZBgDIAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSMwoMRnJv" + 
          "bVVzZXJOYW1lGAQgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdf" + 
          "dBIxCgpUb1VzZXJOYW1lGAUgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5T" + 
          "dHJpbmdfdBIQCghUb3RhbExlbhgGIAIoBRIQCghTdGFydFBvcxgHIAIoBRIP" + 
          "CgdEYXRhTGVuGAggAigFEhIKCkNyZWF0ZVRpbWUYCSACKAUiXQoRR2VuZXJh" + 
          "bFNldFJlcXVlc3QSJQoEYmFzZRgBIAIoCzIXLm1tLmNvbW1hbmQuQmFzZVJl" + 
          "cXVlc3QSDwoHU2V0VHlwZRgCIAIoBRIQCghTZXRWYWx1ZRgDIAEoCSI8ChJH" + 
          "ZW5lcmFsU2V0UmVzcG9uc2USJgoEYmFzZRgBIAIoCzIYLm1tLmNvbW1hbmQu" + 
          "QmFzZVJlc3BvbnNlIkgKD1VuYmluZHFxUmVxdWVzdBIlCgRiYXNlGAEgAigL" + 
          "MhcubW0uY29tbWFuZC5CYXNlUmVxdWVzdBIOCgZUaWNrZXQYAiABKAkiOgoQ" + 
          "VW5iaW5kcXFSZXNwb25zZRImCgRiYXNlGAEgAigLMhgubW0uY29tbWFuZC5C" + 
          "YXNlUmVzcG9uc2UidQoRU2VuZEFwcE1zZ1JlcXVlc3QSJQoEYmFzZRgBIAIo" + 
          "CzIXLm1tLmNvbW1hbmQuQmFzZVJlcXVlc3QSJQoDTXNnGAIgAigLMhgubW0u" + 
          "Y29tbWFuZC5BcHBNc2dPYmplY3QSEgoKQ29tbWVudFVybBgDIAEoCSK7AQoS" + 
          "U2VuZEFwcE1zZ1Jlc3BvbnNlEiYKBGJhc2UYASACKAsyGC5tbS5jb21tYW5k" + 
          "LkJhc2VSZXNwb25zZRINCgVBcHBJZBgCIAEoCRIUCgxGcm9tVXNlck5hbWUY" + 
          "AyABKAkSEgoKVG9Vc2VyTmFtZRgEIAEoCRINCgVNc2dJZBgFIAIoBRITCgtD" + 
          "bGllbnRNc2dJZBgGIAEoCRISCgpDcmVhdGVUaW1lGAcgAigFEgwKBFR5cGUY" + 
          "CCABKAUiswIKE0JpbmRPcE1vYmlsZVJlcXVlc3QSJQoEYmFzZRgBIAIoCzIX" + 
          "Lm1tLmNvbW1hbmQuQmFzZVJlcXVlc3QSEAoIVXNlck5hbWUYAiABKAkSDgoG" + 
          "TW9iaWxlGAMgASgJEg4KBk9wY29kZRgEIAIoBRISCgpWZXJpZnljb2RlGAUg" + 
          "ASgJEhAKCERpYWxGbGFnGAYgASgFEhAKCERpYWxMYW5nGAcgASgJEhIKCkF1" + 
          "dGhUaWNrZXQYCCABKAkSEAoIRm9yY2VSZWcYCSABKAUSFgoOU2FmZURldmlj" + 
          "ZU5hbWUYCiABKAkSFgoOU2FmZURldmljZVR5cGUYCyABKAkSNQoOUmFuZG9t" + 
          "RW5jcnlLZXkYDCABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90" + 
          "IqUDChRCaW5kT3BNb2JpbGVSZXNwb25zZRImCgRiYXNlGAEgAigLMhgubW0u" + 
          "Y29tbWFuZC5CYXNlUmVzcG9uc2USDgoGdGlja2V0GAIgASgJEg0KBVNtc05v" + 
          "GAMgASgJEhIKCk5lZWRTZXRQd2QYBCABKAUSCwoDUHdkGAUgASgJEhAKCFVz" + 
          "ZXJuYW1lGAYgASgJEjAKC05ld0hvc3RMaXN0GAcgASgLMhsubW0uY29tbWFu" + 
          "ZC5OZXdIb3N0TGlzdFR5cGUSKQoNQnVpbHRpbklQTGlzdBgIIAEoCzISLm1t" + 
          "LmNvbW1hbmQuSVBMaXN0EjYKDk5ldHdvcmtDb250cm9sGAkgASgLMh4ubW0u" + 
          "Y29tbWFuZC5OZXR3b3JrQ29udHJvbFR5cGUSEgoKQXV0aFRpY2tldBgKIAEo" + 
          "CRISCgpTYWZlRGV2aWNlGAsgASgFEhAKCE1haW5BY2N0GAwgASgJEhQKDE1h" + 
          "aW5BY2N0VHlwZRgNIAEoBRIuCg5TYWZlRGV2aWNlTGlzdBgOIAEoCzIWLm1t" + 
          "LmNvbW1hbmQuU2FmZURldmljZSK4AgoNQmluZFFRUmVxdWVzdBIlCgRiYXNl" + 
          "GAEgAigLMhcubW0uY29tbWFuZC5CYXNlUmVxdWVzdBIKCgJRURgCIAIoDRIL" + 
          "CgNQd2QYAyABKAkSDAoEUHdkMhgEIAEoCRIOCgZJbWdTaWQYBSABKAkSDwoH" + 
          "SW1nQ29kZRgGIAEoCRIOCgZPUENvZGUYByACKAUSNAoNSW1nRW5jcnlwdEtl" + 
          "eRgIIAEoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QSKwoES1Np" + 
          "ZBgJIAEoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluQnVmZmVyX3QSFQoNU2V0" + 
          "QXNNYWluQWNjdBgKIAEoBRIWCg5TYWZlRGV2aWNlTmFtZRgLIAEoCRIWCg5T" + 
          "YWZlRGV2aWNlVHlwZRgMIAEoCSK5AwoOQmluZFFRUmVzcG9uc2USJgoEYmFz" + 
          "ZRgBIAIoCzIYLm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEg4KBkltZ1NpZBgC" + 
          "IAEoCRItCgZJbWdCdWYYAyACKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1" + 
          "ZmZlcl90EhYKDlB1c2hNYWlsU3RhdHVzGAQgASgFEhgKEFByaXZhdGVNc2dT" + 
          "dGF0dXMYBSABKAUSFQoNTWljcm9CbG9nTmFtZRgGIAEoCRIOCgZTdGF0dXMY" + 
          "ByABKAUSEgoKUVFNYWlsU2tleRgIIAEoCRI0Cg1JbWdFbmNyeXB0S2V5GAkg" + 
          "ASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIsCgVBMktleRgK" + 
          "IAEoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluQnVmZmVyX3QSKwoES1NpZBgL" + 
          "IAEoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluQnVmZmVyX3QSLgoOU2FmZURl" + 
          "dmljZUxpc3QYDCABKAsyFi5tbS5jb21tYW5kLlNhZmVEZXZpY2USEgoKU2Fm" + 
          "ZURldmljZRgNIAEoBSLbAQoSVGhyb3dCb3R0bGVSZXF1ZXN0EiUKBGJhc2UY" + 
          "ASACKAsyFy5tbS5jb21tYW5kLkJhc2VSZXF1ZXN0Eg8KB01zZ1R5cGUYAiAC" + 
          "KAUSEgoKQm90dGxlVHlwZRgDIAIoBRIuCgdDb250ZW50GAQgAigLMh0ubW0u" + 
          "Y29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdBIQCghTdGFydFBvcxgFIAIoBRIQ" + 
          "CghUb3RhbExlbhgGIAIoBRIQCghDbGllbnRJRBgHIAEoCRITCgtWb2ljZUxl" + 
          "bmd0aBgIIAEoBSLlAQoTVGhyb3dCb3R0bGVSZXNwb25zZRImCgRiYXNlGAEg" + 
          "AigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9uc2USEAoIU3RhcnRQb3MYAiAC" + 
          "KAUSEAoIVG90YWxMZW4YAyACKAUSEgoKVGhyb3dDb3VudBgEIAIoBRIRCglQ" + 
          "aWNrQ291bnQYBSACKAUSFgoOQm90dGxlTGlzdE51bWIYBiACKAUSMQoKQm90" + 
          "dGxlTGlzdBgHIAMoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QS" + 
          "EAoIRGlzdGFuY2UYCCACKAUi1QEKElNoYWtlcmVwb3J0UmVxdWVzdBIlCgRi" + 
          "YXNlGAEgAigLMhcubW0uY29tbWFuZC5CYXNlUmVxdWVzdBIOCgZPcENvZGUY" + 
          "AiACKAUSEQoJTG9uZ2l0dWRlGAMgAigCEhAKCExhdGl0dWRlGAQgAigCEhEK" + 
          "CVByZWNpc2lvbhgFIAIoBRIPCgdNYWNBZGRyGAYgASgJEg4KBkNlbGxJZBgH" + 
          "IAEoCRINCgVJbWdJZBgIIAIoBRINCgVUaW1lcxgJIAIoBRIRCglHUFNTb3Vy" + 
          "Y2UYCiABKAUingEKE1NoYWtlcmVwb3J0UmVzcG9uc2USJgoEYmFzZRgBIAIo" + 
          "CzIYLm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEi0KBkJ1ZmZlchgCIAIoCzId" + 
          "Lm1tLmNvbW1hbmQuU0tCdWlsdGluQnVmZmVyX3QSCwoDUmV0GAMgAigFEg0K" + 
          "BUltZ0lkGAQgAigFEhQKDEltZ1RvdG9hbExlbhgFIAEoBSJ8Cg9TaGFrZWdl" + 
          "dFJlcXVlc3QSJQoEYmFzZRgBIAIoCzIXLm1tLmNvbW1hbmQuQmFzZVJlcXVl" + 
          "c3QSLQoGQnVmZmVyGAIgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZm" + 
          "ZXJfdBITCgtJc05ld1ZlcnNvbhgDIAEoBSKjAQoQU2hha2VnZXRSZXNwb25z" + 
          "ZRImCgRiYXNlGAEgAigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9uc2USDQoF" + 
          "Q291bnQYAiACKAUSLQoMU2hha2VHZXRMaXN0GAMgAygLMhcubW0uY29tbWFu" + 
          "ZC5TaGFrZUdldE9iahIMCgRUaXBzGAQgASgJEg4KBlNjZW5jZRgFIAIoBRIL" + 
          "CgNSZXQYBiACKAUigwQKEU1hbnVhbEF1dGhSZXF1ZXN0EiUKBGJhc2UYASAC" + 
          "KAsyFy5tbS5jb21tYW5kLkJhc2VSZXF1ZXN0EigKC0Jhc2VSZXFJbmZvGAIg" + 
          "ASgLMhMubW0uY29tbWFuZC5FeHREYXRhEgwKBElNRUkYAyABKAkSEAoIU29m" + 
          "dFR5cGUYBCABKAkSFAoMYnVpbHRpbklwc2VxGAUgASgNEhMKC0NsaWVudFNl" + 
          "cUlkGAYgASgJEhEKCVNpZ25hdHVyZRgHIAEoCRISCgpEZXZpY2VOYW1lGAgg" + 
          "ASgJEhIKCkRldmljZVR5cGUYCSABKAkSEAoITGFuZ3VhZ2UYCiABKAkSEAoI" + 
          "VGltZVpvbmUYCyABKAkSDwoHQ2hhbm5lbBgNIAEoBRIRCglUaW1lU3RhbXAY" + 
          "DiACKA0SEwoLRGV2aWNlQnJhbmQYDyABKAkSEwoLRGV2aWNlTW9kZWwYECAB" + 
          "KAkSDgoGT1NUeXBlGBEgASgJEhMKC0NvdW50cnlDb2RlGBIgASgJEhAKCEJ1" + 
          "bmRsZUlkGBMgASgJEhAKCEFEU291cmNlGBQgASgJEhEKCUlwaG9uZVZlchgV" + 
          "IAEoCRIRCglJbnB1dFR5cGUYFiABKAUSNgoPQ2xpZW50Q2hlY2tEYXRhGBcg" + 
          "ASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdCLAAgoPQXV0b0F1" + 
          "dGhSZXF1ZXN0EiUKBGJhc2UYASACKAsyFy5tbS5jb21tYW5kLkJhc2VSZXF1" + 
          "ZXN0EigKC0Jhc2VSZXFJbmZvGAIgASgLMhMubW0uY29tbWFuZC5FeHREYXRh" + 
          "EjIKC0F1dG9BdXRoS2V5GAMgASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5C" + 
          "dWZmZXJfdBIMCgRJTUVJGAQgASgJEhAKCFNvZnRUeXBlGAUgASgJEhQKDGJ1" + 
          "aWx0aW5JcHNlcRgGIAIoDRITCgtDbGllbnRTZXFJZBgHIAEoCRIRCglTaWdu" + 
          "YXR1cmUYCCABKAkSEgoKRGV2aWNlTmFtZRgJIAEoCRISCgpEZXZpY2VUeXBl" + 
          "GAogASgJEhAKCExhbmd1YWdlGAsgASgJEhAKCFRpbWVab25lGAwgASgJIqsB" + 
          "ChVHZXRMb2dpblFSQ29kZVJlcXVlc3QSJQoEYmFzZRgBIAIoCzIXLm1tLmNv" + 
          "bW1hbmQuQmFzZVJlcXVlc3QSNQoOcmFuZG9tRW5jcnlLZXkYAiACKAsyHS5t" + 
          "bS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90Eg4KBm9wY29kZRgDIAIoDRIS" + 
          "CgpkZXZpY2VOYW1lGAQgASgJEhAKCHVzZXJuYW1lGAUgASgJIrkCChZHZXRM" + 
          "b2dpblFSQ29kZVJlc3BvbnNlEiYKBEJhc2UYASACKAsyGC5tbS5jb21tYW5k" + 
          "LkJhc2VSZXNwb25zZRItCgZRUkNvZGUYAiACKAsyHS5tbS5jb21tYW5kLlNL" + 
          "QnVpbHRpbkJ1ZmZlcl90EgwKBFVVSUQYAyACKAkSEQoJQ2hlY2tUaW1lGAQg" + 
          "AigNEjAKCU5vdGlmeUtleRgFIAEoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGlu" + 
          "QnVmZmVyX3QSEwoLRXhwaXJlZFRpbWUYBiABKA0SHgoWQmx1ZVRvb3RoQnJv" + 
          "YWRDYXN0VXVpZBgHIAEoCRJAChlCbHVlVG9vdGhCcm9hZENhc3RDb250ZW50" + 
          "GAggASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdCK6AQoPTmV3" + 
          "QXV0aFJlc3BvbnNlEiYKBGJhc2UYASACKAsyGC5tbS5jb21tYW5kLkJhc2VS" + 
          "ZXNwb25zZRIMCgRpbnQyGAIgASgFEiIKBEF1dGgYAyABKAsyFC5tbS5jb21t" + 
          "YW5kLkF1dGhEYXRhEiUKBFVzZXIYBCABKAsyFy5tbS5jb21tYW5kLkFjY291" + 
          "bnRJbmZvEiYKBlNlcnZlchgFIAEoCzIWLm1tLmNvbW1hbmQuU2VydmVySW5m" + 
          "byKoAQoXQ2hlY2tMb2dpblFSQ29kZVJlcXVlc3QSJQoEYmFzZRgBIAIoCzIX" + 
          "Lm1tLmNvbW1hbmQuQmFzZVJlcXVlc3QSNQoOcmFuZG9tRW5jcnlLZXkYAiAC" + 
          "KAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90EgwKBHV1aWQYAyAC" + 
          "KAkSEQoJdGltZVN0YW1wGAQgAigNEg4KBm9wY29kZRgFIAIoDSJ3ChhDaGVj" + 
          "a0xvZ2luUVJDb2RlUmVzcG9uc2USJgoEYmFzZRgBIAIoCzIYLm1tLmNvbW1h" + 
          "bmQuQmFzZVJlc3BvbnNlEjMKCW5vdGlmeVBrZxgDIAEoCzIgLm1tLmNvbW1h" + 
          "bmQuTG9naW5RUkNvZGVOb3RpZnlQa2cisgEKDVRlbnBheVJlcXVlc3QSJQoE" + 
          "YmFzZRgBIAIoCzIXLm1tLmNvbW1hbmQuQmFzZVJlcXVlc3QSDQoFQ21kSUQY" + 
          "AiACKAUSDQoFU2NlbmUYAyACKAUSLQoGQ21kU3RyGAQgAigLMh0ubW0uY29t" + 
          "bWFuZC5TS0J1aWx0aW5CdWZmZXJfdBItCgZDbWRBdXgYBSABKAsyHS5tbS5j" + 
          "b21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90IrIBCg5UZW5wYXlSZXNwb25zZRIm" + 
          "CgRiYXNlGAEgAigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9uc2USLQoGQ21k" + 
          "U3RyGAIgASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZmZXJfdBINCgVp" + 
          "dGVtMxgDIAEoBRINCgVpdGVtNBgEIAEoCRINCgVpdGVtNRgFIAEoBRINCgVp" + 
          "dGVtNhgGIAEoBRINCgVpdGVtNxgHIAEoCSKsAQoVQ3JlYXRlQ2hhdFJvb21S" + 
          "ZXF1ZXN0EiUKBGJhc2UYASACKAsyFy5tbS5jb21tYW5kLkJhc2VSZXF1ZXN0" + 
          "EiwKBVRvcGljGAIgAigLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdf" + 
          "dBITCgtNZW1iZXJDb3VudBgDIAIoBRIpCgdNZW1iZXJzGAQgAygLMhgubW0u" + 
          "Y29tbWFuZC5DaGF0Um9vbUl0ZW0iogMKFkNyZWF0ZUNoYXRSb29tUmVzcG9u" + 
          "c2USJgoEYmFzZRgBIAIoCzIYLm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEiwK" + 
          "BVRvcGljGAIgASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBIw" + 
          "CglQWUluaXRpYWwYAyABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0cmlu" + 
          "Z190Ei4KB1F1YW5QaW4YBCABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpblN0" + 
          "cmluZ190EhMKC01lbWJlckNvdW50GAUgASgFEicKB01lbWJlcnMYBiADKAsy" + 
          "Fi5tbS5jb21tYW5kLk1lbWJlckluZm8SMwoMQ2hhdFJvb21OYW1lGAcgASgL" + 
          "Mh0ubW0uY29tbWFuZC5TS0J1aWx0aW5TdHJpbmdfdBItCgZJbWdCdWYYCCAB" + 
          "KAsyHS5tbS5jb21tYW5kLlNLQnVpbHRpbkJ1ZmZlcl90EhUKDUJpZ0hlYWRJ" + 
          "bWdVcmwYCSABKAkSFwoPU21hbGxIZWFkSW1nVXJsGAogASgJIrYBChhBZGRD" + 
          "aGF0Um9vbU1lbWJlclJlcXVlc3QSJQoEYmFzZRgBIAIoCzIXLm1tLmNvbW1h" + 
          "bmQuQmFzZVJlcXVlc3QSEwoLTWVtYmVyQ291bnQYAiACKAUSKQoHTWVtYmVy" + 
          "cxgDIAMoCzIYLm1tLmNvbW1hbmQuQ2hhdFJvb21JdGVtEjMKDENoYXRSb29t" + 
          "TmFtZRgEIAIoCzIdLm1tLmNvbW1hbmQuU0tCdWlsdGluU3RyaW5nX3QigQEK" + 
          "GUFkZENoYXRSb29tTWVtYmVyUmVzcG9uc2USJgoEYmFzZRgBIAIoCzIYLm1t" + 
          "LmNvbW1hbmQuQmFzZVJlc3BvbnNlEhMKC01lbWJlckNvdW50GAIgAigFEicK" + 
          "B01lbWJlcnMYAyADKAsyFi5tbS5jb21tYW5kLk1lbWJlckluZm8ilwEKGERl" + 
          "bENoYXRSb29tTWVtYmVyUmVxdWVzdBIlCgRiYXNlGAEgAigLMhcubW0uY29t" + 
          "bWFuZC5CYXNlUmVxdWVzdBITCgtNZW1iZXJDb3VudBgCIAIoBRIpCgdNZW1i" + 
          "ZXJzGAMgAygLMhgubW0uY29tbWFuZC5DaGF0Um9vbUl0ZW0SFAoMQ2hhdFJv" + 
          "b21OYW1lGAQgASgJIoMBChlEZWxDaGF0Um9vbU1lbWJlclJlc3BvbnNlEiYK" + 
          "BGJhc2UYASACKAsyGC5tbS5jb21tYW5kLkJhc2VSZXNwb25zZRITCgtNZW1i" + 
          "ZXJDb3VudBgCIAIoBRIpCgdNZW1iZXJzGAMgAygLMhgubW0uY29tbWFuZC5D" + 
          "aGF0Um9vbUl0ZW0ieAoeR2V0Q2hhdFJvb21NZW1iZXJEZXRhaWxSZXF1ZXN0" + 
          "EiUKBGJhc2UYASACKAsyFy5tbS5jb21tYW5kLkJhc2VSZXF1ZXN0EhgKEGNo" + 
          "YXRyb29tVXNlck5hbWUYAiACKAkSFQoNY2xpZW50VmVyc2lvbhgDIAIoDSKz" + 
          "AQofR2V0Q2hhdFJvb21NZW1iZXJEZXRhaWxSZXNwb25zZRImCgRiYXNlGAEg" + 
          "AigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9uc2USGAoQY2hhdHJvb21Vc2Vy" + 
          "TmFtZRgCIAEoCRIVCg1jbGllbnRWZXJzaW9uGAMgASgNEjcKD25ld0NoYXRy" + 
          "b29tRGF0YRgEIAEoCzIeLm1tLmNvbW1hbmQuQ2hhdFJvb21NZW1iZXJEYXRh" + 
          "IuMCChJVcGxvYWR2b2ljZVJlcXVlc3QSFAoMRnJvbVVzZXJOYW1lGAEgASgJ" + 
          "EhIKClRvVXNlck5hbWUYAiABKAkSDgoGT2Zmc2V0GAMgAigFEg4KBkxlbmd0" + 
          "aBgEIAIoBRITCgtDbGllbnRNc2dJZBgFIAEoCRINCgVNc2dJZBgGIAIoBRIT" + 
          "CgtWb2ljZUxlbmd0aBgHIAIoBRIrCgREYXRhGAggAigLMh0ubW0uY29tbWFu" + 
          "ZC5TS0J1aWx0aW5CdWZmZXJfdBIPCgdFbmRGbGFnGAkgAigFEiUKBGJhc2UY" + 
          "CiACKAsyFy5tbS5jb21tYW5kLkJhc2VSZXF1ZXN0EhIKCkNhbmNlbEZsYWcY" + 
          "CyABKAUSEQoJTXNnU291cmNlGAwgASgJEhMKC1ZvaWNlRm9ybWF0GA0gASgF" + 
          "EhQKDFVJQ3JlYXRlVGltZRgOIAEoBRITCgtGb3J3YXJkRmxhZxgPIAEoBSL5" + 
          "AQoTVXBsb2Fkdm9pY2VSZXNwb25zZRIUCgxGcm9tVXNlck5hbWUYASABKAkS" + 
          "EgoKVG9Vc2VyTmFtZRgCIAEoCRIOCgZPZmZzZXQYAyACKAUSDgoGTGVuZ3Ro" + 
          "GAQgAigFEhIKCkNyZWF0ZVRpbWUYBSACKAUSEwoLQ2xpZW50TXNnSWQYBiAB" + 
          "KAkSDQoFTXNnSWQYByACKAUSEwoLVm9pY2VMZW5ndGgYCCACKAUSDwoHRW5k" + 
          "RmxhZxgJIAIoBRImCgRiYXNlGAogAigLMhgubW0uY29tbWFuZC5CYXNlUmVz" + 
          "cG9uc2USEgoKQ2FuY2VsRmxhZxgLIAEoBSJHCh9FeHREZXZpY2VMb2dpbkNv" + 
          "bmZpcm1HZXRSZXF1ZXN0EhAKCGxvZ2luVXJsGAEgAigJEhIKCmRldmljZU5h" + 
          "bWUYAiABKAkizAIKIEV4dERldmljZUxvZ2luQ29uZmlybUdldFJlc3BvbnNl" + 
          "Ei4KDGJhc2VSZXNwb25zZRgBIAIoCzIYLm1tLmNvbW1hbmQuQmFzZVJlc3Bv" + 
          "bnNlEjUKBW9rcmV0GAIgASgLMiYubW0uY29tbWFuZC5FeHREZXZpY2VMb2dp" + 
          "bkNvbmZpcm1PS1JldBI7CghlcnJvclJldBgDIAEoCzIpLm1tLmNvbW1hbmQu" + 
          "RXh0RGV2aWNlTG9naW5Db25maXJtRXJyb3JSZXQSPwoKZXhwaXJlZFJldBgE" + 
          "IAEoCzIrLm1tLmNvbW1hbmQuRXh0RGV2aWNlTG9naW5Db25maXJtRXhwaXJl" + 
          "ZFJldBIVCg1kZXZpY2VOYW1lU3RyGAUgASgJEhoKEmxvZ2luQ2xpZW50VmVy" + 
          "c2lvbhgGIAEoDRIQCghmdW5jQ3RybBgHIAEoDSJ3Ch5FeHREZXZpY2VMb2dp" + 
          "bkNvbmZpcm1PS1JlcXVlc3QSEAoIbG9naW5VcmwYASACKAkSEwoLc2Vzc2lv" + 
          "bkxpc3QYAiABKAkSHQoVdW5SZWFkQ2hhdENvbnRhY3RMaXN0GAMgAygJEg8K" + 
          "B3N5bmNNc2cYBCABKA0iawofRXh0RGV2aWNlTG9naW5Db25maXJtT0tSZXNw" + 
          "b25zZRIuCgxiYXNlUmVzcG9uc2UYASACKAsyGC5tbS5jb21tYW5kLkJhc2VS" + 
          "ZXNwb25zZRIYChBtc2dDb250ZXh0UHViS2V5GAIgASgMIksKEkxvZ091dFdl" + 
          "Yld4UmVxdWVzdBIlCgRiYXNlGAEgAigLMhcubW0uY29tbWFuZC5CYXNlUmVx" + 
          "dWVzdBIOCgZvcENvZGUYAiABKA0iVQoTTG9nT3V0V2ViV3hSZXNwb25zZRIu" + 
          "CgxiYXNlUmVzcG9uc2UYASACKAsyGC5tbS5jb21tYW5kLkJhc2VSZXNwb25z" + 
          "ZRIOCgZvcENvZGUYAiABKA0ipAEKE0dldEJpb0NvbmZpZ1JlcXVlc3QSJQoE" + 
          "YmFzZRgBIAIoCzIXLm1tLmNvbW1hbmQuQmFzZVJlcXVlc3QSDAoEdHlwZRgC" + 
          "IAEoDRINCgVzY2VuZRgDIAEoDRISCgpVc2VyVGlja2V0GAQgASgJEjUKDlJh" + 
          "bmRvbUVuY3J5S2V5GAUgASgLMh0ubW0uY29tbWFuZC5TS0J1aWx0aW5CdWZm" + 
          "ZXJfdCKuAQoUR2V0QmlvQ29uZmlnUmVzcG9uc2USJgoEYmFzZRgBIAIoCzIY" + 
          "Lm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEg0KBUJpb0lEGAIgASgEEhEKCWNm" + 
          "Z0J1ZmZlchgDIAEoDBImCgZzZXJ2ZXIYBCABKAsyFi5tbS5jb21tYW5kLlNl" + 
          "cnZlckluZm8SJAoHY2RuSW5mbxgFIAEoCzITLm1tLmNvbW1hbmQuQ2RuSW5m" + 
          "byLIAQoTUmVnaXN0ZXJGYWNlUmVxdWVzdBIlCgRiYXNlGAEgAigLMhcubW0u" + 
          "Y29tbWFuZC5CYXNlUmVxdWVzdBINCgVCaW9JRBgCIAIoBBIRCglDRE5GaWxl" + 
          "SUQYAyABKAkSDgoGQ0ROS2V5GAQgASgJEhIKClVzZXJUaWNrZXQYBSABKAkS" + 
          "NQoOUmFuZG9tRW5jcnlLZXkYBiABKAsyHS5tbS5jb21tYW5kLlNLQnVpbHRp" + 
          "bkJ1ZmZlcl90Eg0KBXNjZW5lGAcgASgNIo0BChRSZWdpc3RlckZhY2VSZXNw" + 
          "b25zZRImCgRiYXNlGAEgAigLMhgubW0uY29tbWFuZC5CYXNlUmVzcG9uc2US" + 
          "EgoKUGFzc1RpY2tldBgCIAEoCRImCgZzZXJ2ZXIYAyABKAsyFi5tbS5jb21t" + 
          "YW5kLlNlcnZlckluZm8SEQoJRGV0YWlsUmV0GAQgASgFIj0KFEdldFNhZmV0" + 
          "eUluZm9SZXF1ZXN0EiUKBGJhc2UYASACKAsyFy5tbS5jb21tYW5kLkJhc2VS" + 
          "ZXF1ZXN0ImYKFkdldFNhZmV0eUluZm9SZXNwc29uc2USJgoEYmFzZRgBIAIo" + 
          "CzIYLm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEiQKBGluZm8YAiABKAsyFi5t" + 
          "bS5jb21tYW5kLlNhZmV0eUluZm8isgEKFE1tc25zdXNlcnBhZ2VSZXF1ZXN0" + 
          "EiUKBGJhc2UYASACKAsyFy5tbS5jb21tYW5kLkJhc2VSZXF1ZXN0EhQKDEZp" + 
          "cnN0UGFnZU1kNRgCIAEoCRIQCghVc2VybmFtZRgDIAEoCRINCgVNYXhJZBgE" + 
          "IAIoBBIOCgZTb3VyY2UYBSABKAUSEwoLTWluRmlsdGVySWQYBiABKAQSFwoP" + 
          "TGFzdFJlcXVlc3RUaW1lGAcgASgFIpECChVNbXNuc3VzZXJwYWdlUmVzcG9u" + 
          "c2USJgoEYmFzZRgBIAIoCzIYLm1tLmNvbW1hbmQuQmFzZVJlc3BvbnNlEhQK" + 
          "DEZpcnN0UGFnZU1kNRgCIAEoCRITCgtPYmplY3RDb3VudBgDIAIoBRIqCgpP" + 
          "YmplY3RMaXN0GAQgAygLMhYubW0uY29tbWFuZC5QYWdlT2JqZWN0EhgKEE9i" + 
          "amVjdFRvdGFsQ291bnQYBSACKAUSKAoLU25zVXNlckluZm8YBiABKAsyEy5t" + 
          "bS5jb21tYW5kLlNuc1VzZXISFgoOTmV3UmVxdWVzdFRpbWUYByABKAUSHQoV" + 
          "T2JqZWN0Q291bnRGb3JTYW1lTWQ1GAggASgF");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_mm_command_GHMenu__Descriptor = Descriptor.MessageTypes[0];
        internal__static_mm_command_GHMenu__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GHMenu, global::mm.command.GHMenu.Builder>(internal__static_mm_command_GHMenu__Descriptor,
                new string[] { "Base", "Opcod", "Cmd", "Ghid", });
        internal__static_mm_command_AuthRequest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_mm_command_AuthRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.AuthRequest, global::mm.command.AuthRequest.Builder>(internal__static_mm_command_AuthRequest__Descriptor,
                new string[] { "Base", "UserName", "Pwd", "ImgSid", "ImgCode", "Pwd2", "BuiltinIPSeq", "ExtPwd", "ExtPwd2", "TimeZone", "Language", "IMEI", "Channel", "IPhoneVer", "ImgEncryptKey", "KSid", "TimeStamp", "DeviceBrand", "DeviceModel", "OSType", "DeviceType", "SoftType", "AuthTicket", "RealCountry", "Signature", "RandomEncryKey", "AutoAuthTicket", });
        internal__static_mm_command_AuthResponse__Descriptor = Descriptor.MessageTypes[2];
        internal__static_mm_command_AuthResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.AuthResponse, global::mm.command.AuthResponse.Builder>(internal__static_mm_command_AuthResponse__Descriptor,
                new string[] { "Base", "Uin", "UserName", "NickName", "BindUin", "BindEmail", "BindMobile", "Status", "SessionKey", "ImgSid", "ImgBuf", "OfficialUserName", "OfficialNickName", "QQMicroBlogUserName", "QQMicroBlogStatus", "NewVersion", "Ticket", "PushMailStatus", "SendCardBitFlag", "PushMailSettingTicket", "BuiltinIPList", "FSURL", "NetworkControl", "PluginFlag", "Alias", "RegType", "AuthKey", "Sid", "PluginKeyList", "ImgEncryptKey", "A2Key", "KSid", "ProfileFlag", "Password", "TimeStamp", "IsAutoReg", "KickResponse", "ApplyBetaUrl", "DeviceInfoXml", "SoftConfigXml", "NewHostList", "AuthTicket", "SafeDevice", "MainAcctType", "NeedSetEmailPwd", "HintMsg", "AutoAuthTicket", "DnsInfo", });
        internal__static_mm_command_NewSendMsgRequest__Descriptor = Descriptor.MessageTypes[3];
        internal__static_mm_command_NewSendMsgRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSendMsgRequest, global::mm.command.NewSendMsgRequest.Builder>(internal__static_mm_command_NewSendMsgRequest__Descriptor,
                new string[] { "Count", "List", });
        internal__static_mm_command_NewSendMsgResponse__Descriptor = Descriptor.MessageTypes[4];
        internal__static_mm_command_NewSendMsgResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSendMsgResponse, global::mm.command.NewSendMsgResponse.Builder>(internal__static_mm_command_NewSendMsgResponse__Descriptor,
                new string[] { "Base", "Count", "List", });
        internal__static_mm_command_SendMsgRequest__Descriptor = Descriptor.MessageTypes[5];
        internal__static_mm_command_SendMsgRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.SendMsgRequest, global::mm.command.SendMsgRequest.Builder>(internal__static_mm_command_SendMsgRequest__Descriptor,
                new string[] { "Base", "Count", "List", });
        internal__static_mm_command_SendMsgResponse__Descriptor = Descriptor.MessageTypes[6];
        internal__static_mm_command_SendMsgResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.SendMsgResponse, global::mm.command.SendMsgResponse.Builder>(internal__static_mm_command_SendMsgResponse__Descriptor,
                new string[] { "Base", "Count", "List", });
        internal__static_mm_command_OplogRequest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_mm_command_OplogRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.OplogRequest, global::mm.command.OplogRequest.Builder>(internal__static_mm_command_OplogRequest__Descriptor,
                new string[] { "Oplog", });
        internal__static_mm_command_OplogResponse__Descriptor = Descriptor.MessageTypes[8];
        internal__static_mm_command_OplogResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.OplogResponse, global::mm.command.OplogResponse.Builder>(internal__static_mm_command_OplogResponse__Descriptor,
                new string[] { "Ret", });
        internal__static_mm_command_NewSyncRequest__Descriptor = Descriptor.MessageTypes[9];
        internal__static_mm_command_NewSyncRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSyncRequest, global::mm.command.NewSyncRequest.Builder>(internal__static_mm_command_NewSyncRequest__Descriptor,
                new string[] { "Oplog", "Selector", "KeyBuf", "Scene", "DeviceType", "SyncMsgDigest", });
        internal__static_mm_command_NewSyncResponse__Descriptor = Descriptor.MessageTypes[10];
        internal__static_mm_command_NewSyncResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSyncResponse, global::mm.command.NewSyncResponse.Builder>(internal__static_mm_command_NewSyncResponse__Descriptor,
                new string[] { "Ret", "CmdList", "ContinueFlag", "KeyBuf", "Status", "OnlineVersion", "SvrTime", });
        internal__static_mm_command_MMSnsSyncRequest__Descriptor = Descriptor.MessageTypes[11];
        internal__static_mm_command_MMSnsSyncRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.MMSnsSyncRequest, global::mm.command.MMSnsSyncRequest.Builder>(internal__static_mm_command_MMSnsSyncRequest__Descriptor,
                new string[] { "Base", "Selector", "KeyBuf", });
        internal__static_mm_command_MMSnsSyncResponse__Descriptor = Descriptor.MessageTypes[12];
        internal__static_mm_command_MMSnsSyncResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.MMSnsSyncResponse, global::mm.command.MMSnsSyncResponse.Builder>(internal__static_mm_command_MMSnsSyncResponse__Descriptor,
                new string[] { "Base", "CmdList", "ContinueFlag", "KeyBuf", });
        internal__static_mm_command_LBSFindRequest__Descriptor = Descriptor.MessageTypes[13];
        internal__static_mm_command_LBSFindRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.LBSFindRequest, global::mm.command.LBSFindRequest.Builder>(internal__static_mm_command_LBSFindRequest__Descriptor,
                new string[] { "Base", "OpCode", "Longitude", "Latitude", "Precision", "MacAddr", "CellId", "GPSSource", });
        internal__static_mm_command_LBSFindResponse__Descriptor = Descriptor.MessageTypes[14];
        internal__static_mm_command_LBSFindResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.LBSFindResponse, global::mm.command.LBSFindResponse.Builder>(internal__static_mm_command_LBSFindResponse__Descriptor,
                new string[] { "Base", "ContactCount", "ContactList", "State", "FlushTime", "IsShowRoom", "RoomMemberCount", });
        internal__static_mm_command_GetBrandListRequest__Descriptor = Descriptor.MessageTypes[15];
        internal__static_mm_command_GetBrandListRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetBrandListRequest, global::mm.command.GetBrandListRequest.Builder>(internal__static_mm_command_GetBrandListRequest__Descriptor,
                new string[] { "Base", "UserName", "RequestBuffer", });
        internal__static_mm_command_GetBrandListResponse__Descriptor = Descriptor.MessageTypes[16];
        internal__static_mm_command_GetBrandListResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetBrandListResponse, global::mm.command.GetBrandListResponse.Builder>(internal__static_mm_command_GetBrandListResponse__Descriptor,
                new string[] { "Base", "BrandList", "RequestBuffer", });
        internal__static_mm_command_UploadhdheadimgRequest__Descriptor = Descriptor.MessageTypes[17];
        internal__static_mm_command_UploadhdheadimgRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadhdheadimgRequest, global::mm.command.UploadhdheadimgRequest.Builder>(internal__static_mm_command_UploadhdheadimgRequest__Descriptor,
                new string[] { "Base", "TotalLen", "StartPos", "HeadImgType", "Data", "ImgHash", "UserName", });
        internal__static_mm_command_UploadhdheadimgResponse__Descriptor = Descriptor.MessageTypes[18];
        internal__static_mm_command_UploadhdheadimgResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadhdheadimgResponse, global::mm.command.UploadhdheadimgResponse.Builder>(internal__static_mm_command_UploadhdheadimgResponse__Descriptor,
                new string[] { "Base", "TotalLen", "StartPos", "FinalImgMd5Sum", });
        internal__static_mm_command_NewInitRequest__Descriptor = Descriptor.MessageTypes[19];
        internal__static_mm_command_NewInitRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewInitRequest, global::mm.command.NewInitRequest.Builder>(internal__static_mm_command_NewInitRequest__Descriptor,
                new string[] { "Base", "UserName", "CurrentSynckey", "MaxSynckey", "Language", });
        internal__static_mm_command_NewInitResponse__Descriptor = Descriptor.MessageTypes[20];
        internal__static_mm_command_NewInitResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewInitResponse, global::mm.command.NewInitResponse.Builder>(internal__static_mm_command_NewInitResponse__Descriptor,
                new string[] { "Base", "CurrentSynckey", "MaxSynckey", "ContinueFlag", "SelectBitmap", "CmdCount", "CmdList", "Ratio", });
        internal__static_mm_command_NewRegRequest__Descriptor = Descriptor.MessageTypes[21];
        internal__static_mm_command_NewRegRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewRegRequest, global::mm.command.NewRegRequest.Builder>(internal__static_mm_command_NewRegRequest__Descriptor,
                new string[] { "Base", "UserName", "Pwd", "NickName", "BindUin", "BindEmail", "BindMobile", "Ticket", "BuiltinIPSeq", "DLSrc", "RegMode", "TimeZone", "Language", "ForceReg", "RealCountry", "RandomEncryKey", "Alias", "VerifySignature", "VerifyContent", "HasHeadImg", "SuggestRet", "ClientSeqId", "AdSource", "AndroidId", "MacAddr", "AndroidInstallRef", "ClientFingerprint", "CliPubEcdhkey", "GoogleAid", "BundleId", "BioSigTicket", "BioSigCheckType", "ClientCheckData", "MobileCheckType", "RegSessionId", });
        internal__static_mm_command_NewRegResponse__Descriptor = Descriptor.MessageTypes[22];
        internal__static_mm_command_NewRegResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewRegResponse, global::mm.command.NewRegResponse.Builder>(internal__static_mm_command_NewRegResponse__Descriptor,
                new string[] { "Base", "Uin", "SessionKey", "OfficialUserName", "OfficialNickName", "QQMicroBlogUserName", "BindEmail", "PushMailStatus", "SendCardBitFlag", "PushMailSettingTicket", "BuiltinIPList", "FSURL", "UserName", "Status", "NetworkControl", "ReturnFlag", "RegType", "AuthKey", "PluginKeyList", "Password", "ProfileFlag", "NewHostList", "AutoAuthTicket", "DnsInfo", "StepTicket", "VerifySignature", "VerifyBuff", "ShowStyle", "SnsDnsInfo", "AppDnsInfo", "SecAuthRegKeySect", });
        internal__static_mm_command_LogoutRequest__Descriptor = Descriptor.MessageTypes[23];
        internal__static_mm_command_LogoutRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.LogoutRequest, global::mm.command.LogoutRequest.Builder>(internal__static_mm_command_LogoutRequest__Descriptor,
                new string[] { "Base", "Scene", });
        internal__static_mm_command_LogoutResponse__Descriptor = Descriptor.MessageTypes[24];
        internal__static_mm_command_LogoutResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.LogoutResponse, global::mm.command.LogoutResponse.Builder>(internal__static_mm_command_LogoutResponse__Descriptor,
                new string[] { "Base", });
        internal__static_mm_command_VerifyUserRequest__Descriptor = Descriptor.MessageTypes[25];
        internal__static_mm_command_VerifyUserRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.VerifyUserRequest, global::mm.command.VerifyUserRequest.Builder>(internal__static_mm_command_VerifyUserRequest__Descriptor,
                new string[] { "Base", "Opcode", "VerifyUserListSize", "VerifyUserList", "VerifyContent", "SceneListNumb", "SceneList", "VerifyInfoListNumb", "VerifyInfoList", "ClientCheckData", });
        internal__static_mm_command_VerifyUserResponse__Descriptor = Descriptor.MessageTypes[26];
        internal__static_mm_command_VerifyUserResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.VerifyUserResponse, global::mm.command.VerifyUserResponse.Builder>(internal__static_mm_command_VerifyUserResponse__Descriptor,
                new string[] { "Base", "UserName", });
        internal__static_mm_command_SearchContactRequest__Descriptor = Descriptor.MessageTypes[27];
        internal__static_mm_command_SearchContactRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.SearchContactRequest, global::mm.command.SearchContactRequest.Builder>(internal__static_mm_command_SearchContactRequest__Descriptor,
                new string[] { "Base", "UserName", "OpCode", });
        internal__static_mm_command_SearchContactResponse__Descriptor = Descriptor.MessageTypes[28];
        internal__static_mm_command_SearchContactResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.SearchContactResponse, global::mm.command.SearchContactResponse.Builder>(internal__static_mm_command_SearchContactResponse__Descriptor,
                new string[] { "Base", "UserName", "NickName", "PYInitial", "QuanPin", "Sex", "ImgBuf", "Province", "City", "Signature", "PersonalCard", "VerifyFlag", "VerifyInfo", "Weibo", "Alias", "WeiboNickname", "WeiboFlag", "AlbumStyle", "AlbumFlag", "AlbumBGImgID", "SnsUserInfo", "Country", "MyBrandList", "CustomizedInfo", "ContactCount", "ContactList", "BigHeadImgUrl", "SmallHeadImgUrl", "ResBuf", "AntispamTicket", "KfworkerId", "MatchType", });
        internal__static_mm_command_GetContactRequest__Descriptor = Descriptor.MessageTypes[29];
        internal__static_mm_command_GetContactRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetContactRequest, global::mm.command.GetContactRequest.Builder>(internal__static_mm_command_GetContactRequest__Descriptor,
                new string[] { "Base", "UserCount", "UserNameList", "AntispamTicketNumb", "AntispamTicket", "FromChatRoomNumb", "FromChatRoom", "GetContactScene", "ChatRoomAccessVerifyTicket", });
        internal__static_mm_command_GetContactResponse__Descriptor = Descriptor.MessageTypes[30];
        internal__static_mm_command_GetContactResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetContactResponse, global::mm.command.GetContactResponse.Builder>(internal__static_mm_command_GetContactResponse__Descriptor,
                new string[] { "Base", "ContactCount", "ContactList", "Ret", });
        internal__static_mm_command_GetPackageListRequest__Descriptor = Descriptor.MessageTypes[31];
        internal__static_mm_command_GetPackageListRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetPackageListRequest, global::mm.command.GetPackageListRequest.Builder>(internal__static_mm_command_GetPackageListRequest__Descriptor,
                new string[] { "Base", "Count", "List", "Type", });
        internal__static_mm_command_GetPackageListResponse__Descriptor = Descriptor.MessageTypes[32];
        internal__static_mm_command_GetPackageListResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetPackageListResponse, global::mm.command.GetPackageListResponse.Builder>(internal__static_mm_command_GetPackageListResponse__Descriptor,
                new string[] { "Base", "Count", "List", "ContinueFlag", "SvrCount", "Type", });
        internal__static_mm_command_GetHDHeadImgRequest__Descriptor = Descriptor.MessageTypes[33];
        internal__static_mm_command_GetHDHeadImgRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetHDHeadImgRequest, global::mm.command.GetHDHeadImgRequest.Builder>(internal__static_mm_command_GetHDHeadImgRequest__Descriptor,
                new string[] { "Base", "UserName", "ImgWidth", "ImgHeight", "ImgFormat", "TotalLen", "StartPos", "HeadImgType", });
        internal__static_mm_command_GetHDHeadImgResponse__Descriptor = Descriptor.MessageTypes[34];
        internal__static_mm_command_GetHDHeadImgResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetHDHeadImgResponse, global::mm.command.GetHDHeadImgResponse.Builder>(internal__static_mm_command_GetHDHeadImgResponse__Descriptor,
                new string[] { "Base", "UserName", "TotalLen", "StartPos", "Data", });
        internal__static_mm_command_GetVUserInfoRequest__Descriptor = Descriptor.MessageTypes[35];
        internal__static_mm_command_GetVUserInfoRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetVUserInfoRequest, global::mm.command.GetVUserInfoRequest.Builder>(internal__static_mm_command_GetVUserInfoRequest__Descriptor,
                new string[] { "Base", "Version", });
        internal__static_mm_command_GetVUserInfoResponse__Descriptor = Descriptor.MessageTypes[36];
        internal__static_mm_command_GetVUserInfoResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetVUserInfoResponse, global::mm.command.GetVUserInfoResponse.Builder>(internal__static_mm_command_GetVUserInfoResponse__Descriptor,
                new string[] { "Base", "Version", "VUserCount", "VUserList", });
        internal__static_mm_command_ClickCommandRequest__Descriptor = Descriptor.MessageTypes[37];
        internal__static_mm_command_ClickCommandRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ClickCommandRequest, global::mm.command.ClickCommandRequest.Builder>(internal__static_mm_command_ClickCommandRequest__Descriptor,
                new string[] { "Base", "ClickType", "ClickInfo", "BizUserName", });
        internal__static_mm_command_ClickCommandResponse__Descriptor = Descriptor.MessageTypes[38];
        internal__static_mm_command_ClickCommandResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ClickCommandResponse, global::mm.command.ClickCommandResponse.Builder>(internal__static_mm_command_ClickCommandResponse__Descriptor,
                new string[] { "Base", });
        internal__static_mm_command_BindopMobileForRegRequest__Descriptor = Descriptor.MessageTypes[39];
        internal__static_mm_command_BindopMobileForRegRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.BindopMobileForRegRequest, global::mm.command.BindopMobileForRegRequest.Builder>(internal__static_mm_command_BindopMobileForRegRequest__Descriptor,
                new string[] { "Base", "UserName", "Mobile", "Opcode", "Verifycode", "DialFlag", "DialLang", "AuthTicket", "ForceReg", "SafeDeviceName", "SafeDeviceType", "RandomEncryKey", "Language", "InputMobileRetrys", "AdjustRet", "ClientSeqId", "MobileCheckType", "RegSessionID", });
        internal__static_mm_command_BindopMobileForRegResponse__Descriptor = Descriptor.MessageTypes[40];
        internal__static_mm_command_BindopMobileForRegResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.BindopMobileForRegResponse, global::mm.command.BindopMobileForRegResponse.Builder>(internal__static_mm_command_BindopMobileForRegResponse__Descriptor,
                new string[] { "Base", "Ticket", "SmsNo", "NeedSetPwd", "Pwd", "Username", "NewHostList", "BuiltinIPList", "NetworkControl", "AuthTicket", "SafeDevice", "MainAcct", "MainAcctType", "SafeDeviceList", "PureMobile", "FormatedMobile", "ShowStyle", "MmtlsControlBitFlag", "SmsUpCode", "SmsUpMobile", "MobileCheckType", "RegSessionID", });
        internal__static_mm_command_NewSetPasswdRequest__Descriptor = Descriptor.MessageTypes[41];
        internal__static_mm_command_NewSetPasswdRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSetPasswdRequest, global::mm.command.NewSetPasswdRequest.Builder>(internal__static_mm_command_NewSetPasswdRequest__Descriptor,
                new string[] { "Base", "Password", "Ticket", "AutoAuthKey", });
        internal__static_mm_command_NewSetPasswdResponse__Descriptor = Descriptor.MessageTypes[42];
        internal__static_mm_command_NewSetPasswdResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewSetPasswdResponse, global::mm.command.NewSetPasswdResponse.Builder>(internal__static_mm_command_NewSetPasswdResponse__Descriptor,
                new string[] { "Base", "AutoAuthKey", });
        internal__static_mm_command_NewVerifyPasswdRequest__Descriptor = Descriptor.MessageTypes[43];
        internal__static_mm_command_NewVerifyPasswdRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewVerifyPasswdRequest, global::mm.command.NewVerifyPasswdRequest.Builder>(internal__static_mm_command_NewVerifyPasswdRequest__Descriptor,
                new string[] { "Base", "OpCode", "Pwd1", "Pwd2", "ImgSid", "ImgCode", "ImgEncryptKey", "KSid", });
        internal__static_mm_command_NewVerifyPasswdResponse__Descriptor = Descriptor.MessageTypes[44];
        internal__static_mm_command_NewVerifyPasswdResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewVerifyPasswdResponse, global::mm.command.NewVerifyPasswdResponse.Builder>(internal__static_mm_command_NewVerifyPasswdResponse__Descriptor,
                new string[] { "Base", "ImgSid", "ImgBuf", "Ticket", "ImgEncryptKey", "A2Key", "KSid", });
        internal__static_mm_command_BindEmailRequest__Descriptor = Descriptor.MessageTypes[45];
        internal__static_mm_command_BindEmailRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.BindEmailRequest, global::mm.command.BindEmailRequest.Builder>(internal__static_mm_command_BindEmailRequest__Descriptor,
                new string[] { "Base", "OpCode", "Email", });
        internal__static_mm_command_BindEmailResponse__Descriptor = Descriptor.MessageTypes[46];
        internal__static_mm_command_BindEmailResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.BindEmailResponse, global::mm.command.BindEmailResponse.Builder>(internal__static_mm_command_BindEmailResponse__Descriptor,
                new string[] { "Base", });
        internal__static_mm_command_CheckUnbindRequest__Descriptor = Descriptor.MessageTypes[47];
        internal__static_mm_command_CheckUnbindRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.CheckUnbindRequest, global::mm.command.CheckUnbindRequest.Builder>(internal__static_mm_command_CheckUnbindRequest__Descriptor,
                new string[] { "Base", "BindType", });
        internal__static_mm_command_CheckUnbindResponse__Descriptor = Descriptor.MessageTypes[48];
        internal__static_mm_command_CheckUnbindResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.CheckUnbindResponse, global::mm.command.CheckUnbindResponse.Builder>(internal__static_mm_command_CheckUnbindResponse__Descriptor,
                new string[] { "Base", "RandomPasswd", });
        internal__static_mm_command_UploadMContact__Descriptor = Descriptor.MessageTypes[49];
        internal__static_mm_command_UploadMContact__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadMContact, global::mm.command.UploadMContact.Builder>(internal__static_mm_command_UploadMContact__Descriptor,
                new string[] { "Base", "UserName", "Opcode", "Mobile", "MobileListSize", "Mobiles", "EmailListSize", "Email", });
        internal__static_mm_command_UploadMContactResponse__Descriptor = Descriptor.MessageTypes[50];
        internal__static_mm_command_UploadMContactResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadMContactResponse, global::mm.command.UploadMContactResponse.Builder>(internal__static_mm_command_UploadMContactResponse__Descriptor,
                new string[] { "Base", });
        internal__static_mm_command_GetMFriendRequest__Descriptor = Descriptor.MessageTypes[51];
        internal__static_mm_command_GetMFriendRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetMFriendRequest, global::mm.command.GetMFriendRequest.Builder>(internal__static_mm_command_GetMFriendRequest__Descriptor,
                new string[] { "Base", "OpType", "MD5", });
        internal__static_mm_command_GetMFriendResponse__Descriptor = Descriptor.MessageTypes[52];
        internal__static_mm_command_GetMFriendResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetMFriendResponse, global::mm.command.GetMFriendResponse.Builder>(internal__static_mm_command_GetMFriendResponse__Descriptor,
                new string[] { "Base", "Count", "Friend", "MD5", });
        internal__static_mm_command_Geta8keyRequest__Descriptor = Descriptor.MessageTypes[53];
        internal__static_mm_command_Geta8keyRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.Geta8keyRequest, global::mm.command.Geta8keyRequest.Builder>(internal__static_mm_command_Geta8keyRequest__Descriptor,
                new string[] { "Base", "OpCode", "A2Key", "AppID", "Scope", "State", "ReqUrl", "FriendUserName", "FriendQQ", "Scene", "UserName", "BundleID", });
        internal__static_mm_command_Geta8keyResponse__Descriptor = Descriptor.MessageTypes[54];
        internal__static_mm_command_Geta8keyResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.Geta8keyResponse, global::mm.command.Geta8keyResponse.Builder>(internal__static_mm_command_Geta8keyResponse__Descriptor,
                new string[] { "Base", "FullURL", "A8Key", "ActionCode", "Title", "Content", "Permission", "ControlBitSet", "UserName", "ShareUrl", "ScopeCount", "ScopeList", "AntispamTicket", "Ssid", "Mid", "DeepLinkBT", "JsapicontrolBytes", "HttpHeaderNumb", "HttpHeader", });
        internal__static_mm_command_MMSnsPostRequest__Descriptor = Descriptor.MessageTypes[55];
        internal__static_mm_command_MMSnsPostRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.MMSnsPostRequest, global::mm.command.MMSnsPostRequest.Builder>(internal__static_mm_command_MMSnsPostRequest__Descriptor,
                new string[] { "Base", "ObjectDesc", "WithUserListNumb", "WithUserList", "Privacy", "SyncFlag", "ClientId", "PostBGImgType", "GroupCount", "GroupIds", "ObjectSource", "ReferId", "BlackListNumb", "BlackList", });
        internal__static_mm_command_MMSnsPostResponse__Descriptor = Descriptor.MessageTypes[56];
        internal__static_mm_command_MMSnsPostResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.MMSnsPostResponse, global::mm.command.MMSnsPostResponse.Builder>(internal__static_mm_command_MMSnsPostResponse__Descriptor,
                new string[] { "Base", });
        internal__static_mm_command_MmsnsuploadRequest__Descriptor = Descriptor.MessageTypes[57];
        internal__static_mm_command_MmsnsuploadRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.MmsnsuploadRequest, global::mm.command.MmsnsuploadRequest.Builder>(internal__static_mm_command_MmsnsuploadRequest__Descriptor,
                new string[] { "Base", "Type", "StartPos", "TotalLen", "Buffer", "ClientId", "FilterStype", "SyncFlag", "Description", "PhotoFrom", "NetType", "TwitterInfo", });
        internal__static_mm_command_MmsnsuploadResponse__Descriptor = Descriptor.MessageTypes[58];
        internal__static_mm_command_MmsnsuploadResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.MmsnsuploadResponse, global::mm.command.MmsnsuploadResponse.Builder>(internal__static_mm_command_MmsnsuploadResponse__Descriptor,
                new string[] { "Base", "StartPos", "TotalLen", "ClientId", "BufferUrl", "ThumbUrlCount", "ThumbUrls", "Id", "Type", });
        internal__static_mm_command_UploadMsgImgRequest__Descriptor = Descriptor.MessageTypes[59];
        internal__static_mm_command_UploadMsgImgRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadMsgImgRequest, global::mm.command.UploadMsgImgRequest.Builder>(internal__static_mm_command_UploadMsgImgRequest__Descriptor,
                new string[] { "Base", "ClientImgId", "FromUserName", "ToUserName", "TotalLen", "StartPos", "DataLen", "Data", "MsgType", "MsgSource", "CompressType", "NetType", "PhotoFrom", "MediaId", "CDNBigImgUrl", "CDNMidImgUrl", "AESKey", "EncryVer", "CDNBigImgSize", "CDNMidImgSize", "CDNThumbImgUrl", "CDNThumbImgSize", "CDNThumbImgHeight", "CDNThumbImgWidth", "CDNThumbAESKey", });
        internal__static_mm_command_UploadMsgImgResponse__Descriptor = Descriptor.MessageTypes[60];
        internal__static_mm_command_UploadMsgImgResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadMsgImgResponse, global::mm.command.UploadMsgImgResponse.Builder>(internal__static_mm_command_UploadMsgImgResponse__Descriptor,
                new string[] { "Base", "MsgId", "ClientImgId", "FromUserName", "ToUserName", "TotalLen", "StartPos", "DataLen", "CreateTime", });
        internal__static_mm_command_GeneralSetRequest__Descriptor = Descriptor.MessageTypes[61];
        internal__static_mm_command_GeneralSetRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GeneralSetRequest, global::mm.command.GeneralSetRequest.Builder>(internal__static_mm_command_GeneralSetRequest__Descriptor,
                new string[] { "Base", "SetType", "SetValue", });
        internal__static_mm_command_GeneralSetResponse__Descriptor = Descriptor.MessageTypes[62];
        internal__static_mm_command_GeneralSetResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GeneralSetResponse, global::mm.command.GeneralSetResponse.Builder>(internal__static_mm_command_GeneralSetResponse__Descriptor,
                new string[] { "Base", });
        internal__static_mm_command_UnbindqqRequest__Descriptor = Descriptor.MessageTypes[63];
        internal__static_mm_command_UnbindqqRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.UnbindqqRequest, global::mm.command.UnbindqqRequest.Builder>(internal__static_mm_command_UnbindqqRequest__Descriptor,
                new string[] { "Base", "Ticket", });
        internal__static_mm_command_UnbindqqResponse__Descriptor = Descriptor.MessageTypes[64];
        internal__static_mm_command_UnbindqqResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.UnbindqqResponse, global::mm.command.UnbindqqResponse.Builder>(internal__static_mm_command_UnbindqqResponse__Descriptor,
                new string[] { "Base", });
        internal__static_mm_command_SendAppMsgRequest__Descriptor = Descriptor.MessageTypes[65];
        internal__static_mm_command_SendAppMsgRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.SendAppMsgRequest, global::mm.command.SendAppMsgRequest.Builder>(internal__static_mm_command_SendAppMsgRequest__Descriptor,
                new string[] { "Base", "Msg", "CommentUrl", });
        internal__static_mm_command_SendAppMsgResponse__Descriptor = Descriptor.MessageTypes[66];
        internal__static_mm_command_SendAppMsgResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.SendAppMsgResponse, global::mm.command.SendAppMsgResponse.Builder>(internal__static_mm_command_SendAppMsgResponse__Descriptor,
                new string[] { "Base", "AppId", "FromUserName", "ToUserName", "MsgId", "ClientMsgId", "CreateTime", "Type", });
        internal__static_mm_command_BindOpMobileRequest__Descriptor = Descriptor.MessageTypes[67];
        internal__static_mm_command_BindOpMobileRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.BindOpMobileRequest, global::mm.command.BindOpMobileRequest.Builder>(internal__static_mm_command_BindOpMobileRequest__Descriptor,
                new string[] { "Base", "UserName", "Mobile", "Opcode", "Verifycode", "DialFlag", "DialLang", "AuthTicket", "ForceReg", "SafeDeviceName", "SafeDeviceType", "RandomEncryKey", });
        internal__static_mm_command_BindOpMobileResponse__Descriptor = Descriptor.MessageTypes[68];
        internal__static_mm_command_BindOpMobileResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.BindOpMobileResponse, global::mm.command.BindOpMobileResponse.Builder>(internal__static_mm_command_BindOpMobileResponse__Descriptor,
                new string[] { "Base", "Ticket", "SmsNo", "NeedSetPwd", "Pwd", "Username", "NewHostList", "BuiltinIPList", "NetworkControl", "AuthTicket", "SafeDevice", "MainAcct", "MainAcctType", "SafeDeviceList", });
        internal__static_mm_command_BindQQRequest__Descriptor = Descriptor.MessageTypes[69];
        internal__static_mm_command_BindQQRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.BindQQRequest, global::mm.command.BindQQRequest.Builder>(internal__static_mm_command_BindQQRequest__Descriptor,
                new string[] { "Base", "QQ", "Pwd", "Pwd2", "ImgSid", "ImgCode", "OPCode", "ImgEncryptKey", "KSid", "SetAsMainAcct", "SafeDeviceName", "SafeDeviceType", });
        internal__static_mm_command_BindQQResponse__Descriptor = Descriptor.MessageTypes[70];
        internal__static_mm_command_BindQQResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.BindQQResponse, global::mm.command.BindQQResponse.Builder>(internal__static_mm_command_BindQQResponse__Descriptor,
                new string[] { "Base", "ImgSid", "ImgBuf", "PushMailStatus", "PrivateMsgStatus", "MicroBlogName", "Status", "QQMailSkey", "ImgEncryptKey", "A2Key", "KSid", "SafeDeviceList", "SafeDevice", });
        internal__static_mm_command_ThrowBottleRequest__Descriptor = Descriptor.MessageTypes[71];
        internal__static_mm_command_ThrowBottleRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ThrowBottleRequest, global::mm.command.ThrowBottleRequest.Builder>(internal__static_mm_command_ThrowBottleRequest__Descriptor,
                new string[] { "Base", "MsgType", "BottleType", "Content", "StartPos", "TotalLen", "ClientID", "VoiceLength", });
        internal__static_mm_command_ThrowBottleResponse__Descriptor = Descriptor.MessageTypes[72];
        internal__static_mm_command_ThrowBottleResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ThrowBottleResponse, global::mm.command.ThrowBottleResponse.Builder>(internal__static_mm_command_ThrowBottleResponse__Descriptor,
                new string[] { "Base", "StartPos", "TotalLen", "ThrowCount", "PickCount", "BottleListNumb", "BottleList", "Distance", });
        internal__static_mm_command_ShakereportRequest__Descriptor = Descriptor.MessageTypes[73];
        internal__static_mm_command_ShakereportRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ShakereportRequest, global::mm.command.ShakereportRequest.Builder>(internal__static_mm_command_ShakereportRequest__Descriptor,
                new string[] { "Base", "OpCode", "Longitude", "Latitude", "Precision", "MacAddr", "CellId", "ImgId", "Times", "GPSSource", });
        internal__static_mm_command_ShakereportResponse__Descriptor = Descriptor.MessageTypes[74];
        internal__static_mm_command_ShakereportResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ShakereportResponse, global::mm.command.ShakereportResponse.Builder>(internal__static_mm_command_ShakereportResponse__Descriptor,
                new string[] { "Base", "Buffer", "Ret", "ImgId", "ImgTotoalLen", });
        internal__static_mm_command_ShakegetRequest__Descriptor = Descriptor.MessageTypes[75];
        internal__static_mm_command_ShakegetRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ShakegetRequest, global::mm.command.ShakegetRequest.Builder>(internal__static_mm_command_ShakegetRequest__Descriptor,
                new string[] { "Base", "Buffer", "IsNewVerson", });
        internal__static_mm_command_ShakegetResponse__Descriptor = Descriptor.MessageTypes[76];
        internal__static_mm_command_ShakegetResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ShakegetResponse, global::mm.command.ShakegetResponse.Builder>(internal__static_mm_command_ShakegetResponse__Descriptor,
                new string[] { "Base", "Count", "ShakeGetList", "Tips", "Scence", "Ret", });
        internal__static_mm_command_ManualAuthRequest__Descriptor = Descriptor.MessageTypes[77];
        internal__static_mm_command_ManualAuthRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ManualAuthRequest, global::mm.command.ManualAuthRequest.Builder>(internal__static_mm_command_ManualAuthRequest__Descriptor,
                new string[] { "Base", "BaseReqInfo", "IMEI", "SoftType", "BuiltinIpseq", "ClientSeqId", "Signature", "DeviceName", "DeviceType", "Language", "TimeZone", "Channel", "TimeStamp", "DeviceBrand", "DeviceModel", "OSType", "CountryCode", "BundleId", "ADSource", "IphoneVer", "InputType", "ClientCheckData", });
        internal__static_mm_command_AutoAuthRequest__Descriptor = Descriptor.MessageTypes[78];
        internal__static_mm_command_AutoAuthRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.AutoAuthRequest, global::mm.command.AutoAuthRequest.Builder>(internal__static_mm_command_AutoAuthRequest__Descriptor,
                new string[] { "Base", "BaseReqInfo", "AutoAuthKey", "IMEI", "SoftType", "BuiltinIpseq", "ClientSeqId", "Signature", "DeviceName", "DeviceType", "Language", "TimeZone", });
        internal__static_mm_command_GetLoginQRCodeRequest__Descriptor = Descriptor.MessageTypes[79];
        internal__static_mm_command_GetLoginQRCodeRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetLoginQRCodeRequest, global::mm.command.GetLoginQRCodeRequest.Builder>(internal__static_mm_command_GetLoginQRCodeRequest__Descriptor,
                new string[] { "Base", "RandomEncryKey", "Opcode", "DeviceName", "Username", });
        internal__static_mm_command_GetLoginQRCodeResponse__Descriptor = Descriptor.MessageTypes[80];
        internal__static_mm_command_GetLoginQRCodeResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetLoginQRCodeResponse, global::mm.command.GetLoginQRCodeResponse.Builder>(internal__static_mm_command_GetLoginQRCodeResponse__Descriptor,
                new string[] { "Base", "QRCode", "UUID", "CheckTime", "NotifyKey", "ExpiredTime", "BlueToothBroadCastUuid", "BlueToothBroadCastContent", });
        internal__static_mm_command_NewAuthResponse__Descriptor = Descriptor.MessageTypes[81];
        internal__static_mm_command_NewAuthResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.NewAuthResponse, global::mm.command.NewAuthResponse.Builder>(internal__static_mm_command_NewAuthResponse__Descriptor,
                new string[] { "Base", "Int2", "Auth", "User", "Server", });
        internal__static_mm_command_CheckLoginQRCodeRequest__Descriptor = Descriptor.MessageTypes[82];
        internal__static_mm_command_CheckLoginQRCodeRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.CheckLoginQRCodeRequest, global::mm.command.CheckLoginQRCodeRequest.Builder>(internal__static_mm_command_CheckLoginQRCodeRequest__Descriptor,
                new string[] { "Base", "RandomEncryKey", "Uuid", "TimeStamp", "Opcode", });
        internal__static_mm_command_CheckLoginQRCodeResponse__Descriptor = Descriptor.MessageTypes[83];
        internal__static_mm_command_CheckLoginQRCodeResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.CheckLoginQRCodeResponse, global::mm.command.CheckLoginQRCodeResponse.Builder>(internal__static_mm_command_CheckLoginQRCodeResponse__Descriptor,
                new string[] { "Base", "NotifyPkg", });
        internal__static_mm_command_TenpayRequest__Descriptor = Descriptor.MessageTypes[84];
        internal__static_mm_command_TenpayRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.TenpayRequest, global::mm.command.TenpayRequest.Builder>(internal__static_mm_command_TenpayRequest__Descriptor,
                new string[] { "Base", "CmdID", "Scene", "CmdStr", "CmdAux", });
        internal__static_mm_command_TenpayResponse__Descriptor = Descriptor.MessageTypes[85];
        internal__static_mm_command_TenpayResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.TenpayResponse, global::mm.command.TenpayResponse.Builder>(internal__static_mm_command_TenpayResponse__Descriptor,
                new string[] { "Base", "CmdStr", "Item3", "Item4", "Item5", "Item6", "Item7", });
        internal__static_mm_command_CreateChatRoomRequest__Descriptor = Descriptor.MessageTypes[86];
        internal__static_mm_command_CreateChatRoomRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.CreateChatRoomRequest, global::mm.command.CreateChatRoomRequest.Builder>(internal__static_mm_command_CreateChatRoomRequest__Descriptor,
                new string[] { "Base", "Topic", "MemberCount", "Members", });
        internal__static_mm_command_CreateChatRoomResponse__Descriptor = Descriptor.MessageTypes[87];
        internal__static_mm_command_CreateChatRoomResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.CreateChatRoomResponse, global::mm.command.CreateChatRoomResponse.Builder>(internal__static_mm_command_CreateChatRoomResponse__Descriptor,
                new string[] { "Base", "Topic", "PYInitial", "QuanPin", "MemberCount", "Members", "ChatRoomName", "ImgBuf", "BigHeadImgUrl", "SmallHeadImgUrl", });
        internal__static_mm_command_AddChatRoomMemberRequest__Descriptor = Descriptor.MessageTypes[88];
        internal__static_mm_command_AddChatRoomMemberRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.AddChatRoomMemberRequest, global::mm.command.AddChatRoomMemberRequest.Builder>(internal__static_mm_command_AddChatRoomMemberRequest__Descriptor,
                new string[] { "Base", "MemberCount", "Members", "ChatRoomName", });
        internal__static_mm_command_AddChatRoomMemberResponse__Descriptor = Descriptor.MessageTypes[89];
        internal__static_mm_command_AddChatRoomMemberResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.AddChatRoomMemberResponse, global::mm.command.AddChatRoomMemberResponse.Builder>(internal__static_mm_command_AddChatRoomMemberResponse__Descriptor,
                new string[] { "Base", "MemberCount", "Members", });
        internal__static_mm_command_DelChatRoomMemberRequest__Descriptor = Descriptor.MessageTypes[90];
        internal__static_mm_command_DelChatRoomMemberRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.DelChatRoomMemberRequest, global::mm.command.DelChatRoomMemberRequest.Builder>(internal__static_mm_command_DelChatRoomMemberRequest__Descriptor,
                new string[] { "Base", "MemberCount", "Members", "ChatRoomName", });
        internal__static_mm_command_DelChatRoomMemberResponse__Descriptor = Descriptor.MessageTypes[91];
        internal__static_mm_command_DelChatRoomMemberResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.DelChatRoomMemberResponse, global::mm.command.DelChatRoomMemberResponse.Builder>(internal__static_mm_command_DelChatRoomMemberResponse__Descriptor,
                new string[] { "Base", "MemberCount", "Members", });
        internal__static_mm_command_GetChatRoomMemberDetailRequest__Descriptor = Descriptor.MessageTypes[92];
        internal__static_mm_command_GetChatRoomMemberDetailRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetChatRoomMemberDetailRequest, global::mm.command.GetChatRoomMemberDetailRequest.Builder>(internal__static_mm_command_GetChatRoomMemberDetailRequest__Descriptor,
                new string[] { "Base", "ChatroomUserName", "ClientVersion", });
        internal__static_mm_command_GetChatRoomMemberDetailResponse__Descriptor = Descriptor.MessageTypes[93];
        internal__static_mm_command_GetChatRoomMemberDetailResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetChatRoomMemberDetailResponse, global::mm.command.GetChatRoomMemberDetailResponse.Builder>(internal__static_mm_command_GetChatRoomMemberDetailResponse__Descriptor,
                new string[] { "Base", "ChatroomUserName", "ClientVersion", "NewChatroomData", });
        internal__static_mm_command_UploadvoiceRequest__Descriptor = Descriptor.MessageTypes[94];
        internal__static_mm_command_UploadvoiceRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadvoiceRequest, global::mm.command.UploadvoiceRequest.Builder>(internal__static_mm_command_UploadvoiceRequest__Descriptor,
                new string[] { "FromUserName", "ToUserName", "Offset", "Length", "ClientMsgId", "MsgId", "VoiceLength", "Data", "EndFlag", "Base", "CancelFlag", "MsgSource", "VoiceFormat", "UICreateTime", "ForwardFlag", });
        internal__static_mm_command_UploadvoiceResponse__Descriptor = Descriptor.MessageTypes[95];
        internal__static_mm_command_UploadvoiceResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.UploadvoiceResponse, global::mm.command.UploadvoiceResponse.Builder>(internal__static_mm_command_UploadvoiceResponse__Descriptor,
                new string[] { "FromUserName", "ToUserName", "Offset", "Length", "CreateTime", "ClientMsgId", "MsgId", "VoiceLength", "EndFlag", "Base", "CancelFlag", });
        internal__static_mm_command_ExtDeviceLoginConfirmGetRequest__Descriptor = Descriptor.MessageTypes[96];
        internal__static_mm_command_ExtDeviceLoginConfirmGetRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmGetRequest, global::mm.command.ExtDeviceLoginConfirmGetRequest.Builder>(internal__static_mm_command_ExtDeviceLoginConfirmGetRequest__Descriptor,
                new string[] { "LoginUrl", "DeviceName", });
        internal__static_mm_command_ExtDeviceLoginConfirmGetResponse__Descriptor = Descriptor.MessageTypes[97];
        internal__static_mm_command_ExtDeviceLoginConfirmGetResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmGetResponse, global::mm.command.ExtDeviceLoginConfirmGetResponse.Builder>(internal__static_mm_command_ExtDeviceLoginConfirmGetResponse__Descriptor,
                new string[] { "BaseResponse", "Okret", "ErrorRet", "ExpiredRet", "DeviceNameStr", "LoginClientVersion", "FuncCtrl", });
        internal__static_mm_command_ExtDeviceLoginConfirmOKRequest__Descriptor = Descriptor.MessageTypes[98];
        internal__static_mm_command_ExtDeviceLoginConfirmOKRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmOKRequest, global::mm.command.ExtDeviceLoginConfirmOKRequest.Builder>(internal__static_mm_command_ExtDeviceLoginConfirmOKRequest__Descriptor,
                new string[] { "LoginUrl", "SessionList", "UnReadChatContactList", "SyncMsg", });
        internal__static_mm_command_ExtDeviceLoginConfirmOKResponse__Descriptor = Descriptor.MessageTypes[99];
        internal__static_mm_command_ExtDeviceLoginConfirmOKResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.ExtDeviceLoginConfirmOKResponse, global::mm.command.ExtDeviceLoginConfirmOKResponse.Builder>(internal__static_mm_command_ExtDeviceLoginConfirmOKResponse__Descriptor,
                new string[] { "BaseResponse", "MsgContextPubKey", });
        internal__static_mm_command_LogOutWebWxRequest__Descriptor = Descriptor.MessageTypes[100];
        internal__static_mm_command_LogOutWebWxRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.LogOutWebWxRequest, global::mm.command.LogOutWebWxRequest.Builder>(internal__static_mm_command_LogOutWebWxRequest__Descriptor,
                new string[] { "Base", "OpCode", });
        internal__static_mm_command_LogOutWebWxResponse__Descriptor = Descriptor.MessageTypes[101];
        internal__static_mm_command_LogOutWebWxResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.LogOutWebWxResponse, global::mm.command.LogOutWebWxResponse.Builder>(internal__static_mm_command_LogOutWebWxResponse__Descriptor,
                new string[] { "BaseResponse", "OpCode", });
        internal__static_mm_command_GetBioConfigRequest__Descriptor = Descriptor.MessageTypes[102];
        internal__static_mm_command_GetBioConfigRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetBioConfigRequest, global::mm.command.GetBioConfigRequest.Builder>(internal__static_mm_command_GetBioConfigRequest__Descriptor,
                new string[] { "Base", "Type", "Scene", "UserTicket", "RandomEncryKey", });
        internal__static_mm_command_GetBioConfigResponse__Descriptor = Descriptor.MessageTypes[103];
        internal__static_mm_command_GetBioConfigResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetBioConfigResponse, global::mm.command.GetBioConfigResponse.Builder>(internal__static_mm_command_GetBioConfigResponse__Descriptor,
                new string[] { "Base", "BioID", "CfgBuffer", "Server", "CdnInfo", });
        internal__static_mm_command_RegisterFaceRequest__Descriptor = Descriptor.MessageTypes[104];
        internal__static_mm_command_RegisterFaceRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.RegisterFaceRequest, global::mm.command.RegisterFaceRequest.Builder>(internal__static_mm_command_RegisterFaceRequest__Descriptor,
                new string[] { "Base", "BioID", "CDNFileID", "CDNKey", "UserTicket", "RandomEncryKey", "Scene", });
        internal__static_mm_command_RegisterFaceResponse__Descriptor = Descriptor.MessageTypes[105];
        internal__static_mm_command_RegisterFaceResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.RegisterFaceResponse, global::mm.command.RegisterFaceResponse.Builder>(internal__static_mm_command_RegisterFaceResponse__Descriptor,
                new string[] { "Base", "PassTicket", "Server", "DetailRet", });
        internal__static_mm_command_GetSafetyInfoRequest__Descriptor = Descriptor.MessageTypes[106];
        internal__static_mm_command_GetSafetyInfoRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetSafetyInfoRequest, global::mm.command.GetSafetyInfoRequest.Builder>(internal__static_mm_command_GetSafetyInfoRequest__Descriptor,
                new string[] { "Base", });
        internal__static_mm_command_GetSafetyInfoRespsonse__Descriptor = Descriptor.MessageTypes[107];
        internal__static_mm_command_GetSafetyInfoRespsonse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.GetSafetyInfoRespsonse, global::mm.command.GetSafetyInfoRespsonse.Builder>(internal__static_mm_command_GetSafetyInfoRespsonse__Descriptor,
                new string[] { "Base", "Info", });
        internal__static_mm_command_MmsnsuserpageRequest__Descriptor = Descriptor.MessageTypes[108];
        internal__static_mm_command_MmsnsuserpageRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.MmsnsuserpageRequest, global::mm.command.MmsnsuserpageRequest.Builder>(internal__static_mm_command_MmsnsuserpageRequest__Descriptor,
                new string[] { "Base", "FirstPageMd5", "Username", "MaxId", "Source", "MinFilterId", "LastRequestTime", });
        internal__static_mm_command_MmsnsuserpageResponse__Descriptor = Descriptor.MessageTypes[109];
        internal__static_mm_command_MmsnsuserpageResponse__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::mm.command.MmsnsuserpageResponse, global::mm.command.MmsnsuserpageResponse.Builder>(internal__static_mm_command_MmsnsuserpageResponse__Descriptor,
                new string[] { "Base", "FirstPageMd5", "ObjectCount", "ObjectList", "ObjectTotalCount", "SnsUserInfo", "NewRequestTime", "ObjectCountForSameMd5", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::mm.command.MMCommon.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GHMenu : pb::GeneratedMessage<GHMenu, GHMenu.Builder> {
    private GHMenu() { }
    private static readonly GHMenu defaultInstance = new GHMenu().MakeReadOnly();
    private static readonly string[] _gHMenuFieldNames = new string[] { "base", "cmd", "ghid", "opcod" };
    private static readonly uint[] _gHMenuFieldTags = new uint[] { 10, 26, 34, 16 };
    public static GHMenu DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GHMenu DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GHMenu ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GHMenu__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GHMenu, GHMenu.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GHMenu__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int OpcodFieldNumber = 2;
    private bool hasOpcod;
    private int opcod_;
    public bool HasOpcod {
      get { return hasOpcod; }
    }
    public int Opcod {
      get { return opcod_; }
    }
    
    public const int CmdFieldNumber = 3;
    private bool hasCmd;
    private string cmd_ = "";
    public bool HasCmd {
      get { return hasCmd; }
    }
    public string Cmd {
      get { return cmd_; }
    }
    
    public const int GhidFieldNumber = 4;
    private bool hasGhid;
    private string ghid_ = "";
    public bool HasGhid {
      get { return hasGhid; }
    }
    public string Ghid {
      get { return ghid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gHMenuFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      if (hasOpcod) {
        output.WriteInt32(2, field_names[3], Opcod);
      }
      if (hasCmd) {
        output.WriteString(3, field_names[1], Cmd);
      }
      if (hasGhid) {
        output.WriteString(4, field_names[2], Ghid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasOpcod) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Opcod);
        }
        if (hasCmd) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Cmd);
        }
        if (hasGhid) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Ghid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GHMenu ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GHMenu ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GHMenu ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GHMenu ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GHMenu ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GHMenu ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GHMenu ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GHMenu ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GHMenu ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GHMenu ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GHMenu MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GHMenu prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GHMenu, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GHMenu cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GHMenu result;
      
      private GHMenu PrepareBuilder() {
        if (resultIsReadOnly) {
          GHMenu original = result;
          result = new GHMenu();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GHMenu MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GHMenu.Descriptor; }
      }
      
      public override GHMenu DefaultInstanceForType {
        get { return global::mm.command.GHMenu.DefaultInstance; }
      }
      
      public override GHMenu BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GHMenu) {
          return MergeFrom((GHMenu) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GHMenu other) {
        if (other == global::mm.command.GHMenu.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasOpcod) {
          Opcod = other.Opcod;
        }
        if (other.HasCmd) {
          Cmd = other.Cmd;
        }
        if (other.HasGhid) {
          Ghid = other.Ghid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gHMenuFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gHMenuFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOpcod = input.ReadInt32(ref result.opcod_);
              break;
            }
            case 26: {
              result.hasCmd = input.ReadString(ref result.cmd_);
              break;
            }
            case 34: {
              result.hasGhid = input.ReadString(ref result.ghid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasOpcod {
        get { return result.hasOpcod; }
      }
      public int Opcod {
        get { return result.Opcod; }
        set { SetOpcod(value); }
      }
      public Builder SetOpcod(int value) {
        PrepareBuilder();
        result.hasOpcod = true;
        result.opcod_ = value;
        return this;
      }
      public Builder ClearOpcod() {
        PrepareBuilder();
        result.hasOpcod = false;
        result.opcod_ = 0;
        return this;
      }
      
      public bool HasCmd {
        get { return result.hasCmd; }
      }
      public string Cmd {
        get { return result.Cmd; }
        set { SetCmd(value); }
      }
      public Builder SetCmd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCmd = true;
        result.cmd_ = value;
        return this;
      }
      public Builder ClearCmd() {
        PrepareBuilder();
        result.hasCmd = false;
        result.cmd_ = "";
        return this;
      }
      
      public bool HasGhid {
        get { return result.hasGhid; }
      }
      public string Ghid {
        get { return result.Ghid; }
        set { SetGhid(value); }
      }
      public Builder SetGhid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGhid = true;
        result.ghid_ = value;
        return this;
      }
      public Builder ClearGhid() {
        PrepareBuilder();
        result.hasGhid = false;
        result.ghid_ = "";
        return this;
      }
    }
    static GHMenu() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AuthRequest : pb::GeneratedMessage<AuthRequest, AuthRequest.Builder> {
    private AuthRequest() { }
    private static readonly AuthRequest defaultInstance = new AuthRequest().MakeReadOnly();
    private static readonly string[] _authRequestFieldNames = new string[] { "AuthTicket", "AutoAuthTicket", "BuiltinIPSeq", "Channel", "DeviceBrand", "DeviceModel", "DeviceType", "IMEI", "IPhoneVer", "ImgCode", "ImgEncryptKey", "ImgSid", "KSid", "Language", "OSType", "Pwd", "Pwd2", "RandomEncryKey", "RealCountry", "Signature", "SoftType", "TimeStamp", "TimeZone", "UserName", "base", "extPwd", "extPwd2" };
    private static readonly uint[] _authRequestFieldTags = new uint[] { 186, 218, 56, 104, 146, 154, 170, 98, 114, 42, 122, 34, 130, 90, 162, 26, 50, 210, 194, 202, 178, 138, 82, 18, 10, 66, 74 };
    public static AuthRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AuthRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AuthRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_AuthRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AuthRequest, AuthRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_AuthRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private global::mm.command.SKBuiltinString_t userName_;
    public bool HasUserName {
      get { return hasUserName; }
    }
    public global::mm.command.SKBuiltinString_t UserName {
      get { return userName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int PwdFieldNumber = 3;
    private bool hasPwd;
    private global::mm.command.SKBuiltinString_t pwd_;
    public bool HasPwd {
      get { return hasPwd; }
    }
    public global::mm.command.SKBuiltinString_t Pwd {
      get { return pwd_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int ImgSidFieldNumber = 4;
    private bool hasImgSid;
    private global::mm.command.SKBuiltinString_t imgSid_;
    public bool HasImgSid {
      get { return hasImgSid; }
    }
    public global::mm.command.SKBuiltinString_t ImgSid {
      get { return imgSid_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int ImgCodeFieldNumber = 5;
    private bool hasImgCode;
    private global::mm.command.SKBuiltinString_t imgCode_;
    public bool HasImgCode {
      get { return hasImgCode; }
    }
    public global::mm.command.SKBuiltinString_t ImgCode {
      get { return imgCode_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int Pwd2FieldNumber = 6;
    private bool hasPwd2;
    private string pwd2_ = "";
    public bool HasPwd2 {
      get { return hasPwd2; }
    }
    public string Pwd2 {
      get { return pwd2_; }
    }
    
    public const int BuiltinIPSeqFieldNumber = 7;
    private bool hasBuiltinIPSeq;
    private int builtinIPSeq_;
    public bool HasBuiltinIPSeq {
      get { return hasBuiltinIPSeq; }
    }
    public int BuiltinIPSeq {
      get { return builtinIPSeq_; }
    }
    
    public const int ExtPwdFieldNumber = 8;
    private bool hasExtPwd;
    private string extPwd_ = "";
    public bool HasExtPwd {
      get { return hasExtPwd; }
    }
    public string ExtPwd {
      get { return extPwd_; }
    }
    
    public const int ExtPwd2FieldNumber = 9;
    private bool hasExtPwd2;
    private string extPwd2_ = "";
    public bool HasExtPwd2 {
      get { return hasExtPwd2; }
    }
    public string ExtPwd2 {
      get { return extPwd2_; }
    }
    
    public const int TimeZoneFieldNumber = 10;
    private bool hasTimeZone;
    private string timeZone_ = "";
    public bool HasTimeZone {
      get { return hasTimeZone; }
    }
    public string TimeZone {
      get { return timeZone_; }
    }
    
    public const int LanguageFieldNumber = 11;
    private bool hasLanguage;
    private string language_ = "";
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public string Language {
      get { return language_; }
    }
    
    public const int IMEIFieldNumber = 12;
    private bool hasIMEI;
    private string iMEI_ = "";
    public bool HasIMEI {
      get { return hasIMEI; }
    }
    public string IMEI {
      get { return iMEI_; }
    }
    
    public const int ChannelFieldNumber = 13;
    private bool hasChannel;
    private int channel_;
    public bool HasChannel {
      get { return hasChannel; }
    }
    public int Channel {
      get { return channel_; }
    }
    
    public const int IPhoneVerFieldNumber = 14;
    private bool hasIPhoneVer;
    private string iPhoneVer_ = "";
    public bool HasIPhoneVer {
      get { return hasIPhoneVer; }
    }
    public string IPhoneVer {
      get { return iPhoneVer_; }
    }
    
    public const int ImgEncryptKeyFieldNumber = 15;
    private bool hasImgEncryptKey;
    private global::mm.command.SKBuiltinString_t imgEncryptKey_;
    public bool HasImgEncryptKey {
      get { return hasImgEncryptKey; }
    }
    public global::mm.command.SKBuiltinString_t ImgEncryptKey {
      get { return imgEncryptKey_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int KSidFieldNumber = 16;
    private bool hasKSid;
    private global::mm.command.SKBuiltinBuffer_t kSid_;
    public bool HasKSid {
      get { return hasKSid; }
    }
    public global::mm.command.SKBuiltinBuffer_t KSid {
      get { return kSid_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int TimeStampFieldNumber = 17;
    private bool hasTimeStamp;
    private string timeStamp_ = "";
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    public string TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int DeviceBrandFieldNumber = 18;
    private bool hasDeviceBrand;
    private string deviceBrand_ = "";
    public bool HasDeviceBrand {
      get { return hasDeviceBrand; }
    }
    public string DeviceBrand {
      get { return deviceBrand_; }
    }
    
    public const int DeviceModelFieldNumber = 19;
    private bool hasDeviceModel;
    private string deviceModel_ = "";
    public bool HasDeviceModel {
      get { return hasDeviceModel; }
    }
    public string DeviceModel {
      get { return deviceModel_; }
    }
    
    public const int OSTypeFieldNumber = 20;
    private bool hasOSType;
    private string oSType_ = "";
    public bool HasOSType {
      get { return hasOSType; }
    }
    public string OSType {
      get { return oSType_; }
    }
    
    public const int DeviceTypeFieldNumber = 21;
    private bool hasDeviceType;
    private string deviceType_ = "";
    public bool HasDeviceType {
      get { return hasDeviceType; }
    }
    public string DeviceType {
      get { return deviceType_; }
    }
    
    public const int SoftTypeFieldNumber = 22;
    private bool hasSoftType;
    private string softType_ = "";
    public bool HasSoftType {
      get { return hasSoftType; }
    }
    public string SoftType {
      get { return softType_; }
    }
    
    public const int AuthTicketFieldNumber = 23;
    private bool hasAuthTicket;
    private string authTicket_ = "";
    public bool HasAuthTicket {
      get { return hasAuthTicket; }
    }
    public string AuthTicket {
      get { return authTicket_; }
    }
    
    public const int RealCountryFieldNumber = 24;
    private bool hasRealCountry;
    private string realCountry_ = "";
    public bool HasRealCountry {
      get { return hasRealCountry; }
    }
    public string RealCountry {
      get { return realCountry_; }
    }
    
    public const int SignatureFieldNumber = 25;
    private bool hasSignature;
    private string signature_ = "";
    public bool HasSignature {
      get { return hasSignature; }
    }
    public string Signature {
      get { return signature_; }
    }
    
    public const int RandomEncryKeyFieldNumber = 26;
    private bool hasRandomEncryKey;
    private global::mm.command.SKBuiltinBuffer_t randomEncryKey_;
    public bool HasRandomEncryKey {
      get { return hasRandomEncryKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
      get { return randomEncryKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int AutoAuthTicketFieldNumber = 27;
    private bool hasAutoAuthTicket;
    private string autoAuthTicket_ = "";
    public bool HasAutoAuthTicket {
      get { return hasAutoAuthTicket; }
    }
    public string AutoAuthTicket {
      get { return autoAuthTicket_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasUserName) return false;
        if (!hasPwd) return false;
        if (!hasImgSid) return false;
        if (!hasImgCode) return false;
        if (!hasRandomEncryKey) return false;
        if (!Base.IsInitialized) return false;
        if (HasKSid) {
          if (!KSid.IsInitialized) return false;
        }
        if (!RandomEncryKey.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _authRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[24], Base);
      }
      if (hasUserName) {
        output.WriteMessage(2, field_names[23], UserName);
      }
      if (hasPwd) {
        output.WriteMessage(3, field_names[15], Pwd);
      }
      if (hasImgSid) {
        output.WriteMessage(4, field_names[11], ImgSid);
      }
      if (hasImgCode) {
        output.WriteMessage(5, field_names[9], ImgCode);
      }
      if (hasPwd2) {
        output.WriteString(6, field_names[16], Pwd2);
      }
      if (hasBuiltinIPSeq) {
        output.WriteInt32(7, field_names[2], BuiltinIPSeq);
      }
      if (hasExtPwd) {
        output.WriteString(8, field_names[25], ExtPwd);
      }
      if (hasExtPwd2) {
        output.WriteString(9, field_names[26], ExtPwd2);
      }
      if (hasTimeZone) {
        output.WriteString(10, field_names[22], TimeZone);
      }
      if (hasLanguage) {
        output.WriteString(11, field_names[13], Language);
      }
      if (hasIMEI) {
        output.WriteString(12, field_names[7], IMEI);
      }
      if (hasChannel) {
        output.WriteInt32(13, field_names[3], Channel);
      }
      if (hasIPhoneVer) {
        output.WriteString(14, field_names[8], IPhoneVer);
      }
      if (hasImgEncryptKey) {
        output.WriteMessage(15, field_names[10], ImgEncryptKey);
      }
      if (hasKSid) {
        output.WriteMessage(16, field_names[12], KSid);
      }
      if (hasTimeStamp) {
        output.WriteString(17, field_names[21], TimeStamp);
      }
      if (hasDeviceBrand) {
        output.WriteString(18, field_names[4], DeviceBrand);
      }
      if (hasDeviceModel) {
        output.WriteString(19, field_names[5], DeviceModel);
      }
      if (hasOSType) {
        output.WriteString(20, field_names[14], OSType);
      }
      if (hasDeviceType) {
        output.WriteString(21, field_names[6], DeviceType);
      }
      if (hasSoftType) {
        output.WriteString(22, field_names[20], SoftType);
      }
      if (hasAuthTicket) {
        output.WriteString(23, field_names[0], AuthTicket);
      }
      if (hasRealCountry) {
        output.WriteString(24, field_names[18], RealCountry);
      }
      if (hasSignature) {
        output.WriteString(25, field_names[19], Signature);
      }
      if (hasRandomEncryKey) {
        output.WriteMessage(26, field_names[17], RandomEncryKey);
      }
      if (hasAutoAuthTicket) {
        output.WriteString(27, field_names[1], AutoAuthTicket);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, UserName);
        }
        if (hasPwd) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Pwd);
        }
        if (hasImgSid) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, ImgSid);
        }
        if (hasImgCode) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ImgCode);
        }
        if (hasPwd2) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Pwd2);
        }
        if (hasBuiltinIPSeq) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, BuiltinIPSeq);
        }
        if (hasExtPwd) {
          size += pb::CodedOutputStream.ComputeStringSize(8, ExtPwd);
        }
        if (hasExtPwd2) {
          size += pb::CodedOutputStream.ComputeStringSize(9, ExtPwd2);
        }
        if (hasTimeZone) {
          size += pb::CodedOutputStream.ComputeStringSize(10, TimeZone);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeStringSize(11, Language);
        }
        if (hasIMEI) {
          size += pb::CodedOutputStream.ComputeStringSize(12, IMEI);
        }
        if (hasChannel) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, Channel);
        }
        if (hasIPhoneVer) {
          size += pb::CodedOutputStream.ComputeStringSize(14, IPhoneVer);
        }
        if (hasImgEncryptKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, ImgEncryptKey);
        }
        if (hasKSid) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, KSid);
        }
        if (hasTimeStamp) {
          size += pb::CodedOutputStream.ComputeStringSize(17, TimeStamp);
        }
        if (hasDeviceBrand) {
          size += pb::CodedOutputStream.ComputeStringSize(18, DeviceBrand);
        }
        if (hasDeviceModel) {
          size += pb::CodedOutputStream.ComputeStringSize(19, DeviceModel);
        }
        if (hasOSType) {
          size += pb::CodedOutputStream.ComputeStringSize(20, OSType);
        }
        if (hasDeviceType) {
          size += pb::CodedOutputStream.ComputeStringSize(21, DeviceType);
        }
        if (hasSoftType) {
          size += pb::CodedOutputStream.ComputeStringSize(22, SoftType);
        }
        if (hasAuthTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(23, AuthTicket);
        }
        if (hasRealCountry) {
          size += pb::CodedOutputStream.ComputeStringSize(24, RealCountry);
        }
        if (hasSignature) {
          size += pb::CodedOutputStream.ComputeStringSize(25, Signature);
        }
        if (hasRandomEncryKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(26, RandomEncryKey);
        }
        if (hasAutoAuthTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(27, AutoAuthTicket);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AuthRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AuthRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AuthRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AuthRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AuthRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AuthRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AuthRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AuthRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AuthRequest result;
      
      private AuthRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          AuthRequest original = result;
          result = new AuthRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AuthRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.AuthRequest.Descriptor; }
      }
      
      public override AuthRequest DefaultInstanceForType {
        get { return global::mm.command.AuthRequest.DefaultInstance; }
      }
      
      public override AuthRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AuthRequest) {
          return MergeFrom((AuthRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AuthRequest other) {
        if (other == global::mm.command.AuthRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          MergeUserName(other.UserName);
        }
        if (other.HasPwd) {
          MergePwd(other.Pwd);
        }
        if (other.HasImgSid) {
          MergeImgSid(other.ImgSid);
        }
        if (other.HasImgCode) {
          MergeImgCode(other.ImgCode);
        }
        if (other.HasPwd2) {
          Pwd2 = other.Pwd2;
        }
        if (other.HasBuiltinIPSeq) {
          BuiltinIPSeq = other.BuiltinIPSeq;
        }
        if (other.HasExtPwd) {
          ExtPwd = other.ExtPwd;
        }
        if (other.HasExtPwd2) {
          ExtPwd2 = other.ExtPwd2;
        }
        if (other.HasTimeZone) {
          TimeZone = other.TimeZone;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasIMEI) {
          IMEI = other.IMEI;
        }
        if (other.HasChannel) {
          Channel = other.Channel;
        }
        if (other.HasIPhoneVer) {
          IPhoneVer = other.IPhoneVer;
        }
        if (other.HasImgEncryptKey) {
          MergeImgEncryptKey(other.ImgEncryptKey);
        }
        if (other.HasKSid) {
          MergeKSid(other.KSid);
        }
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasDeviceBrand) {
          DeviceBrand = other.DeviceBrand;
        }
        if (other.HasDeviceModel) {
          DeviceModel = other.DeviceModel;
        }
        if (other.HasOSType) {
          OSType = other.OSType;
        }
        if (other.HasDeviceType) {
          DeviceType = other.DeviceType;
        }
        if (other.HasSoftType) {
          SoftType = other.SoftType;
        }
        if (other.HasAuthTicket) {
          AuthTicket = other.AuthTicket;
        }
        if (other.HasRealCountry) {
          RealCountry = other.RealCountry;
        }
        if (other.HasSignature) {
          Signature = other.Signature;
        }
        if (other.HasRandomEncryKey) {
          MergeRandomEncryKey(other.RandomEncryKey);
        }
        if (other.HasAutoAuthTicket) {
          AutoAuthTicket = other.AutoAuthTicket;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_authRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _authRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasUserName) {
                subBuilder.MergeFrom(UserName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserName = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasPwd) {
                subBuilder.MergeFrom(Pwd);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pwd = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgSid) {
                subBuilder.MergeFrom(ImgSid);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgSid = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgCode) {
                subBuilder.MergeFrom(ImgCode);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgCode = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              result.hasPwd2 = input.ReadString(ref result.pwd2_);
              break;
            }
            case 56: {
              result.hasBuiltinIPSeq = input.ReadInt32(ref result.builtinIPSeq_);
              break;
            }
            case 66: {
              result.hasExtPwd = input.ReadString(ref result.extPwd_);
              break;
            }
            case 74: {
              result.hasExtPwd2 = input.ReadString(ref result.extPwd2_);
              break;
            }
            case 82: {
              result.hasTimeZone = input.ReadString(ref result.timeZone_);
              break;
            }
            case 90: {
              result.hasLanguage = input.ReadString(ref result.language_);
              break;
            }
            case 98: {
              result.hasIMEI = input.ReadString(ref result.iMEI_);
              break;
            }
            case 104: {
              result.hasChannel = input.ReadInt32(ref result.channel_);
              break;
            }
            case 114: {
              result.hasIPhoneVer = input.ReadString(ref result.iPhoneVer_);
              break;
            }
            case 122: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgEncryptKey) {
                subBuilder.MergeFrom(ImgEncryptKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgEncryptKey = subBuilder.BuildPartial();
              break;
            }
            case 130: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasKSid) {
                subBuilder.MergeFrom(KSid);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KSid = subBuilder.BuildPartial();
              break;
            }
            case 138: {
              result.hasTimeStamp = input.ReadString(ref result.timeStamp_);
              break;
            }
            case 146: {
              result.hasDeviceBrand = input.ReadString(ref result.deviceBrand_);
              break;
            }
            case 154: {
              result.hasDeviceModel = input.ReadString(ref result.deviceModel_);
              break;
            }
            case 162: {
              result.hasOSType = input.ReadString(ref result.oSType_);
              break;
            }
            case 170: {
              result.hasDeviceType = input.ReadString(ref result.deviceType_);
              break;
            }
            case 178: {
              result.hasSoftType = input.ReadString(ref result.softType_);
              break;
            }
            case 186: {
              result.hasAuthTicket = input.ReadString(ref result.authTicket_);
              break;
            }
            case 194: {
              result.hasRealCountry = input.ReadString(ref result.realCountry_);
              break;
            }
            case 202: {
              result.hasSignature = input.ReadString(ref result.signature_);
              break;
            }
            case 210: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasRandomEncryKey) {
                subBuilder.MergeFrom(RandomEncryKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RandomEncryKey = subBuilder.BuildPartial();
              break;
            }
            case 218: {
              result.hasAutoAuthTicket = input.ReadString(ref result.autoAuthTicket_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
       get { return result.hasUserName; }
      }
      public global::mm.command.SKBuiltinString_t UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder SetUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserName &&
            result.userName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.userName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.userName_).MergeFrom(value).BuildPartial();
        } else {
          result.userName_ = value;
        }
        result.hasUserName = true;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = null;
        return this;
      }
      
      public bool HasPwd {
       get { return result.hasPwd; }
      }
      public global::mm.command.SKBuiltinString_t Pwd {
        get { return result.Pwd; }
        set { SetPwd(value); }
      }
      public Builder SetPwd(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPwd = true;
        result.pwd_ = value;
        return this;
      }
      public Builder SetPwd(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPwd = true;
        result.pwd_ = builderForValue.Build();
        return this;
      }
      public Builder MergePwd(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPwd &&
            result.pwd_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.pwd_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.pwd_).MergeFrom(value).BuildPartial();
        } else {
          result.pwd_ = value;
        }
        result.hasPwd = true;
        return this;
      }
      public Builder ClearPwd() {
        PrepareBuilder();
        result.hasPwd = false;
        result.pwd_ = null;
        return this;
      }
      
      public bool HasImgSid {
       get { return result.hasImgSid; }
      }
      public global::mm.command.SKBuiltinString_t ImgSid {
        get { return result.ImgSid; }
        set { SetImgSid(value); }
      }
      public Builder SetImgSid(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgSid = true;
        result.imgSid_ = value;
        return this;
      }
      public Builder SetImgSid(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgSid = true;
        result.imgSid_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgSid(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgSid &&
            result.imgSid_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgSid_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgSid_).MergeFrom(value).BuildPartial();
        } else {
          result.imgSid_ = value;
        }
        result.hasImgSid = true;
        return this;
      }
      public Builder ClearImgSid() {
        PrepareBuilder();
        result.hasImgSid = false;
        result.imgSid_ = null;
        return this;
      }
      
      public bool HasImgCode {
       get { return result.hasImgCode; }
      }
      public global::mm.command.SKBuiltinString_t ImgCode {
        get { return result.ImgCode; }
        set { SetImgCode(value); }
      }
      public Builder SetImgCode(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgCode = true;
        result.imgCode_ = value;
        return this;
      }
      public Builder SetImgCode(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgCode = true;
        result.imgCode_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgCode(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgCode &&
            result.imgCode_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgCode_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgCode_).MergeFrom(value).BuildPartial();
        } else {
          result.imgCode_ = value;
        }
        result.hasImgCode = true;
        return this;
      }
      public Builder ClearImgCode() {
        PrepareBuilder();
        result.hasImgCode = false;
        result.imgCode_ = null;
        return this;
      }
      
      public bool HasPwd2 {
        get { return result.hasPwd2; }
      }
      public string Pwd2 {
        get { return result.Pwd2; }
        set { SetPwd2(value); }
      }
      public Builder SetPwd2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPwd2 = true;
        result.pwd2_ = value;
        return this;
      }
      public Builder ClearPwd2() {
        PrepareBuilder();
        result.hasPwd2 = false;
        result.pwd2_ = "";
        return this;
      }
      
      public bool HasBuiltinIPSeq {
        get { return result.hasBuiltinIPSeq; }
      }
      public int BuiltinIPSeq {
        get { return result.BuiltinIPSeq; }
        set { SetBuiltinIPSeq(value); }
      }
      public Builder SetBuiltinIPSeq(int value) {
        PrepareBuilder();
        result.hasBuiltinIPSeq = true;
        result.builtinIPSeq_ = value;
        return this;
      }
      public Builder ClearBuiltinIPSeq() {
        PrepareBuilder();
        result.hasBuiltinIPSeq = false;
        result.builtinIPSeq_ = 0;
        return this;
      }
      
      public bool HasExtPwd {
        get { return result.hasExtPwd; }
      }
      public string ExtPwd {
        get { return result.ExtPwd; }
        set { SetExtPwd(value); }
      }
      public Builder SetExtPwd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtPwd = true;
        result.extPwd_ = value;
        return this;
      }
      public Builder ClearExtPwd() {
        PrepareBuilder();
        result.hasExtPwd = false;
        result.extPwd_ = "";
        return this;
      }
      
      public bool HasExtPwd2 {
        get { return result.hasExtPwd2; }
      }
      public string ExtPwd2 {
        get { return result.ExtPwd2; }
        set { SetExtPwd2(value); }
      }
      public Builder SetExtPwd2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExtPwd2 = true;
        result.extPwd2_ = value;
        return this;
      }
      public Builder ClearExtPwd2() {
        PrepareBuilder();
        result.hasExtPwd2 = false;
        result.extPwd2_ = "";
        return this;
      }
      
      public bool HasTimeZone {
        get { return result.hasTimeZone; }
      }
      public string TimeZone {
        get { return result.TimeZone; }
        set { SetTimeZone(value); }
      }
      public Builder SetTimeZone(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimeZone = true;
        result.timeZone_ = value;
        return this;
      }
      public Builder ClearTimeZone() {
        PrepareBuilder();
        result.hasTimeZone = false;
        result.timeZone_ = "";
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public string Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = "";
        return this;
      }
      
      public bool HasIMEI {
        get { return result.hasIMEI; }
      }
      public string IMEI {
        get { return result.IMEI; }
        set { SetIMEI(value); }
      }
      public Builder SetIMEI(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIMEI = true;
        result.iMEI_ = value;
        return this;
      }
      public Builder ClearIMEI() {
        PrepareBuilder();
        result.hasIMEI = false;
        result.iMEI_ = "";
        return this;
      }
      
      public bool HasChannel {
        get { return result.hasChannel; }
      }
      public int Channel {
        get { return result.Channel; }
        set { SetChannel(value); }
      }
      public Builder SetChannel(int value) {
        PrepareBuilder();
        result.hasChannel = true;
        result.channel_ = value;
        return this;
      }
      public Builder ClearChannel() {
        PrepareBuilder();
        result.hasChannel = false;
        result.channel_ = 0;
        return this;
      }
      
      public bool HasIPhoneVer {
        get { return result.hasIPhoneVer; }
      }
      public string IPhoneVer {
        get { return result.IPhoneVer; }
        set { SetIPhoneVer(value); }
      }
      public Builder SetIPhoneVer(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIPhoneVer = true;
        result.iPhoneVer_ = value;
        return this;
      }
      public Builder ClearIPhoneVer() {
        PrepareBuilder();
        result.hasIPhoneVer = false;
        result.iPhoneVer_ = "";
        return this;
      }
      
      public bool HasImgEncryptKey {
       get { return result.hasImgEncryptKey; }
      }
      public global::mm.command.SKBuiltinString_t ImgEncryptKey {
        get { return result.ImgEncryptKey; }
        set { SetImgEncryptKey(value); }
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = value;
        return this;
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgEncryptKey &&
            result.imgEncryptKey_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgEncryptKey_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgEncryptKey_).MergeFrom(value).BuildPartial();
        } else {
          result.imgEncryptKey_ = value;
        }
        result.hasImgEncryptKey = true;
        return this;
      }
      public Builder ClearImgEncryptKey() {
        PrepareBuilder();
        result.hasImgEncryptKey = false;
        result.imgEncryptKey_ = null;
        return this;
      }
      
      public bool HasKSid {
       get { return result.hasKSid; }
      }
      public global::mm.command.SKBuiltinBuffer_t KSid {
        get { return result.KSid; }
        set { SetKSid(value); }
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = value;
        return this;
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKSid &&
            result.kSid_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.kSid_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.kSid_).MergeFrom(value).BuildPartial();
        } else {
          result.kSid_ = value;
        }
        result.hasKSid = true;
        return this;
      }
      public Builder ClearKSid() {
        PrepareBuilder();
        result.hasKSid = false;
        result.kSid_ = null;
        return this;
      }
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      public string TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      public Builder SetTimeStamp(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = "";
        return this;
      }
      
      public bool HasDeviceBrand {
        get { return result.hasDeviceBrand; }
      }
      public string DeviceBrand {
        get { return result.DeviceBrand; }
        set { SetDeviceBrand(value); }
      }
      public Builder SetDeviceBrand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceBrand = true;
        result.deviceBrand_ = value;
        return this;
      }
      public Builder ClearDeviceBrand() {
        PrepareBuilder();
        result.hasDeviceBrand = false;
        result.deviceBrand_ = "";
        return this;
      }
      
      public bool HasDeviceModel {
        get { return result.hasDeviceModel; }
      }
      public string DeviceModel {
        get { return result.DeviceModel; }
        set { SetDeviceModel(value); }
      }
      public Builder SetDeviceModel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceModel = true;
        result.deviceModel_ = value;
        return this;
      }
      public Builder ClearDeviceModel() {
        PrepareBuilder();
        result.hasDeviceModel = false;
        result.deviceModel_ = "";
        return this;
      }
      
      public bool HasOSType {
        get { return result.hasOSType; }
      }
      public string OSType {
        get { return result.OSType; }
        set { SetOSType(value); }
      }
      public Builder SetOSType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOSType = true;
        result.oSType_ = value;
        return this;
      }
      public Builder ClearOSType() {
        PrepareBuilder();
        result.hasOSType = false;
        result.oSType_ = "";
        return this;
      }
      
      public bool HasDeviceType {
        get { return result.hasDeviceType; }
      }
      public string DeviceType {
        get { return result.DeviceType; }
        set { SetDeviceType(value); }
      }
      public Builder SetDeviceType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceType = true;
        result.deviceType_ = value;
        return this;
      }
      public Builder ClearDeviceType() {
        PrepareBuilder();
        result.hasDeviceType = false;
        result.deviceType_ = "";
        return this;
      }
      
      public bool HasSoftType {
        get { return result.hasSoftType; }
      }
      public string SoftType {
        get { return result.SoftType; }
        set { SetSoftType(value); }
      }
      public Builder SetSoftType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSoftType = true;
        result.softType_ = value;
        return this;
      }
      public Builder ClearSoftType() {
        PrepareBuilder();
        result.hasSoftType = false;
        result.softType_ = "";
        return this;
      }
      
      public bool HasAuthTicket {
        get { return result.hasAuthTicket; }
      }
      public string AuthTicket {
        get { return result.AuthTicket; }
        set { SetAuthTicket(value); }
      }
      public Builder SetAuthTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthTicket = true;
        result.authTicket_ = value;
        return this;
      }
      public Builder ClearAuthTicket() {
        PrepareBuilder();
        result.hasAuthTicket = false;
        result.authTicket_ = "";
        return this;
      }
      
      public bool HasRealCountry {
        get { return result.hasRealCountry; }
      }
      public string RealCountry {
        get { return result.RealCountry; }
        set { SetRealCountry(value); }
      }
      public Builder SetRealCountry(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRealCountry = true;
        result.realCountry_ = value;
        return this;
      }
      public Builder ClearRealCountry() {
        PrepareBuilder();
        result.hasRealCountry = false;
        result.realCountry_ = "";
        return this;
      }
      
      public bool HasSignature {
        get { return result.hasSignature; }
      }
      public string Signature {
        get { return result.Signature; }
        set { SetSignature(value); }
      }
      public Builder SetSignature(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSignature = true;
        result.signature_ = value;
        return this;
      }
      public Builder ClearSignature() {
        PrepareBuilder();
        result.hasSignature = false;
        result.signature_ = "";
        return this;
      }
      
      public bool HasRandomEncryKey {
       get { return result.hasRandomEncryKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
        get { return result.RandomEncryKey; }
        set { SetRandomEncryKey(value); }
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = value;
        return this;
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRandomEncryKey &&
            result.randomEncryKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.randomEncryKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.randomEncryKey_).MergeFrom(value).BuildPartial();
        } else {
          result.randomEncryKey_ = value;
        }
        result.hasRandomEncryKey = true;
        return this;
      }
      public Builder ClearRandomEncryKey() {
        PrepareBuilder();
        result.hasRandomEncryKey = false;
        result.randomEncryKey_ = null;
        return this;
      }
      
      public bool HasAutoAuthTicket {
        get { return result.hasAutoAuthTicket; }
      }
      public string AutoAuthTicket {
        get { return result.AutoAuthTicket; }
        set { SetAutoAuthTicket(value); }
      }
      public Builder SetAutoAuthTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAutoAuthTicket = true;
        result.autoAuthTicket_ = value;
        return this;
      }
      public Builder ClearAutoAuthTicket() {
        PrepareBuilder();
        result.hasAutoAuthTicket = false;
        result.autoAuthTicket_ = "";
        return this;
      }
    }
    static AuthRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AuthResponse : pb::GeneratedMessage<AuthResponse, AuthResponse.Builder> {
    private AuthResponse() { }
    private static readonly AuthResponse defaultInstance = new AuthResponse().MakeReadOnly();
    private static readonly string[] _authResponseFieldNames = new string[] { "A2Key", "Alias", "ApplyBetaUrl", "AuthKey", "AuthTicket", "AutoAuthTicket", "BindEmail", "BindMobile", "BindUin", "BuiltinIPList", "DeviceInfoXml", "DnsInfo", "FSURL", "HintMsg", "ImgBuf", "ImgEncryptKey", "ImgSid", "IsAutoReg", "KSid", "KickResponse", "MainAcctType", "NeedSetEmailPwd", "NetworkControl", "NewHostList", "NewVersion", "NickName", "OfficialNickName", "OfficialUserName", "Password", "PluginFlag", "PluginKeyList", "ProfileFlag", "PushMailSettingTicket", "PushMailStatus", "QQMicroBlogStatus", "QQMicroBlogUserName", "RegType", "SafeDevice", "SendCardBitFlag", "SessionKey", "Sid", "SoftConfigXml", "Status", "Ticket", "TimeStamp", "Uin", "UserName", "base" };
    private static readonly uint[] _authResponseFieldTags = new uint[] { 250, 202, 306, 218, 338, 378, 50, 58, 40, 170, 314, 386, 178, 370, 90, 242, 82, 288, 258, 298, 352, 360, 186, 330, 128, 34, 106, 98, 274, 192, 234, 264, 162, 144, 120, 114, 208, 344, 152, 74, 226, 322, 64, 138, 280, 16, 26, 10 };
    public static AuthResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AuthResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AuthResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_AuthResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AuthResponse, AuthResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_AuthResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int UinFieldNumber = 2;
    private bool hasUin;
    private uint uin_;
    public bool HasUin {
      get { return hasUin; }
    }
    [global::System.CLSCompliant(false)]
    public uint Uin {
      get { return uin_; }
    }
    
    public const int UserNameFieldNumber = 3;
    private bool hasUserName;
    private global::mm.command.SKBuiltinString_t userName_;
    public bool HasUserName {
      get { return hasUserName; }
    }
    public global::mm.command.SKBuiltinString_t UserName {
      get { return userName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int NickNameFieldNumber = 4;
    private bool hasNickName;
    private global::mm.command.SKBuiltinString_t nickName_;
    public bool HasNickName {
      get { return hasNickName; }
    }
    public global::mm.command.SKBuiltinString_t NickName {
      get { return nickName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int BindUinFieldNumber = 5;
    private bool hasBindUin;
    private uint bindUin_;
    public bool HasBindUin {
      get { return hasBindUin; }
    }
    [global::System.CLSCompliant(false)]
    public uint BindUin {
      get { return bindUin_; }
    }
    
    public const int BindEmailFieldNumber = 6;
    private bool hasBindEmail;
    private global::mm.command.SKBuiltinString_t bindEmail_;
    public bool HasBindEmail {
      get { return hasBindEmail; }
    }
    public global::mm.command.SKBuiltinString_t BindEmail {
      get { return bindEmail_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int BindMobileFieldNumber = 7;
    private bool hasBindMobile;
    private global::mm.command.SKBuiltinString_t bindMobile_;
    public bool HasBindMobile {
      get { return hasBindMobile; }
    }
    public global::mm.command.SKBuiltinString_t BindMobile {
      get { return bindMobile_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int StatusFieldNumber = 8;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int SessionKeyFieldNumber = 9;
    private bool hasSessionKey;
    private pb::ByteString sessionKey_ = pb::ByteString.Empty;
    public bool HasSessionKey {
      get { return hasSessionKey; }
    }
    public pb::ByteString SessionKey {
      get { return sessionKey_; }
    }
    
    public const int ImgSidFieldNumber = 10;
    private bool hasImgSid;
    private global::mm.command.SKBuiltinString_t imgSid_;
    public bool HasImgSid {
      get { return hasImgSid; }
    }
    public global::mm.command.SKBuiltinString_t ImgSid {
      get { return imgSid_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int ImgBufFieldNumber = 11;
    private bool hasImgBuf;
    private global::mm.command.SKBuiltinBuffer_t imgBuf_;
    public bool HasImgBuf {
      get { return hasImgBuf; }
    }
    public global::mm.command.SKBuiltinBuffer_t ImgBuf {
      get { return imgBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int OfficialUserNameFieldNumber = 12;
    private bool hasOfficialUserName;
    private global::mm.command.SKBuiltinString_t officialUserName_;
    public bool HasOfficialUserName {
      get { return hasOfficialUserName; }
    }
    public global::mm.command.SKBuiltinString_t OfficialUserName {
      get { return officialUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int OfficialNickNameFieldNumber = 13;
    private bool hasOfficialNickName;
    private global::mm.command.SKBuiltinString_t officialNickName_;
    public bool HasOfficialNickName {
      get { return hasOfficialNickName; }
    }
    public global::mm.command.SKBuiltinString_t OfficialNickName {
      get { return officialNickName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int QQMicroBlogUserNameFieldNumber = 14;
    private bool hasQQMicroBlogUserName;
    private global::mm.command.SKBuiltinString_t qQMicroBlogUserName_;
    public bool HasQQMicroBlogUserName {
      get { return hasQQMicroBlogUserName; }
    }
    public global::mm.command.SKBuiltinString_t QQMicroBlogUserName {
      get { return qQMicroBlogUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int QQMicroBlogStatusFieldNumber = 15;
    private bool hasQQMicroBlogStatus;
    private int qQMicroBlogStatus_;
    public bool HasQQMicroBlogStatus {
      get { return hasQQMicroBlogStatus; }
    }
    public int QQMicroBlogStatus {
      get { return qQMicroBlogStatus_; }
    }
    
    public const int NewVersionFieldNumber = 16;
    private bool hasNewVersion;
    private int newVersion_;
    public bool HasNewVersion {
      get { return hasNewVersion; }
    }
    public int NewVersion {
      get { return newVersion_; }
    }
    
    public const int TicketFieldNumber = 17;
    private bool hasTicket;
    private string ticket_ = "";
    public bool HasTicket {
      get { return hasTicket; }
    }
    public string Ticket {
      get { return ticket_; }
    }
    
    public const int PushMailStatusFieldNumber = 18;
    private bool hasPushMailStatus;
    private int pushMailStatus_;
    public bool HasPushMailStatus {
      get { return hasPushMailStatus; }
    }
    public int PushMailStatus {
      get { return pushMailStatus_; }
    }
    
    public const int SendCardBitFlagFieldNumber = 19;
    private bool hasSendCardBitFlag;
    private int sendCardBitFlag_;
    public bool HasSendCardBitFlag {
      get { return hasSendCardBitFlag; }
    }
    public int SendCardBitFlag {
      get { return sendCardBitFlag_; }
    }
    
    public const int PushMailSettingTicketFieldNumber = 20;
    private bool hasPushMailSettingTicket;
    private string pushMailSettingTicket_ = "";
    public bool HasPushMailSettingTicket {
      get { return hasPushMailSettingTicket; }
    }
    public string PushMailSettingTicket {
      get { return pushMailSettingTicket_; }
    }
    
    public const int BuiltinIPListFieldNumber = 21;
    private bool hasBuiltinIPList;
    private global::mm.command.IPList builtinIPList_;
    public bool HasBuiltinIPList {
      get { return hasBuiltinIPList; }
    }
    public global::mm.command.IPList BuiltinIPList {
      get { return builtinIPList_ ?? global::mm.command.IPList.DefaultInstance; }
    }
    
    public const int FSURLFieldNumber = 22;
    private bool hasFSURL;
    private string fSURL_ = "";
    public bool HasFSURL {
      get { return hasFSURL; }
    }
    public string FSURL {
      get { return fSURL_; }
    }
    
    public const int NetworkControlFieldNumber = 23;
    private bool hasNetworkControl;
    private global::mm.command.NetworkControlType networkControl_;
    public bool HasNetworkControl {
      get { return hasNetworkControl; }
    }
    public global::mm.command.NetworkControlType NetworkControl {
      get { return networkControl_ ?? global::mm.command.NetworkControlType.DefaultInstance; }
    }
    
    public const int PluginFlagFieldNumber = 24;
    private bool hasPluginFlag;
    private int pluginFlag_;
    public bool HasPluginFlag {
      get { return hasPluginFlag; }
    }
    public int PluginFlag {
      get { return pluginFlag_; }
    }
    
    public const int AliasFieldNumber = 25;
    private bool hasAlias;
    private string alias_ = "";
    public bool HasAlias {
      get { return hasAlias; }
    }
    public string Alias {
      get { return alias_; }
    }
    
    public const int RegTypeFieldNumber = 26;
    private bool hasRegType;
    private int regType_;
    public bool HasRegType {
      get { return hasRegType; }
    }
    public int RegType {
      get { return regType_; }
    }
    
    public const int AuthKeyFieldNumber = 27;
    private bool hasAuthKey;
    private string authKey_ = "";
    public bool HasAuthKey {
      get { return hasAuthKey; }
    }
    public string AuthKey {
      get { return authKey_; }
    }
    
    public const int SidFieldNumber = 28;
    private bool hasSid;
    private string sid_ = "";
    public bool HasSid {
      get { return hasSid; }
    }
    public string Sid {
      get { return sid_; }
    }
    
    public const int PluginKeyListFieldNumber = 29;
    private bool hasPluginKeyList;
    private global::mm.command.PluginKeyListType pluginKeyList_;
    public bool HasPluginKeyList {
      get { return hasPluginKeyList; }
    }
    public global::mm.command.PluginKeyListType PluginKeyList {
      get { return pluginKeyList_ ?? global::mm.command.PluginKeyListType.DefaultInstance; }
    }
    
    public const int ImgEncryptKeyFieldNumber = 30;
    private bool hasImgEncryptKey;
    private global::mm.command.SKBuiltinString_t imgEncryptKey_;
    public bool HasImgEncryptKey {
      get { return hasImgEncryptKey; }
    }
    public global::mm.command.SKBuiltinString_t ImgEncryptKey {
      get { return imgEncryptKey_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int A2KeyFieldNumber = 31;
    private bool hasA2Key;
    private global::mm.command.SKBuiltinBuffer_t a2Key_;
    public bool HasA2Key {
      get { return hasA2Key; }
    }
    public global::mm.command.SKBuiltinBuffer_t A2Key {
      get { return a2Key_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int KSidFieldNumber = 32;
    private bool hasKSid;
    private global::mm.command.SKBuiltinBuffer_t kSid_;
    public bool HasKSid {
      get { return hasKSid; }
    }
    public global::mm.command.SKBuiltinBuffer_t KSid {
      get { return kSid_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int ProfileFlagFieldNumber = 33;
    private bool hasProfileFlag;
    private int profileFlag_;
    public bool HasProfileFlag {
      get { return hasProfileFlag; }
    }
    public int ProfileFlag {
      get { return profileFlag_; }
    }
    
    public const int PasswordFieldNumber = 34;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public const int TimeStampFieldNumber = 35;
    private bool hasTimeStamp;
    private int timeStamp_;
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    public int TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int IsAutoRegFieldNumber = 36;
    private bool hasIsAutoReg;
    private int isAutoReg_;
    public bool HasIsAutoReg {
      get { return hasIsAutoReg; }
    }
    public int IsAutoReg {
      get { return isAutoReg_; }
    }
    
    public const int KickResponseFieldNumber = 37;
    private bool hasKickResponse;
    private string kickResponse_ = "";
    public bool HasKickResponse {
      get { return hasKickResponse; }
    }
    public string KickResponse {
      get { return kickResponse_; }
    }
    
    public const int ApplyBetaUrlFieldNumber = 38;
    private bool hasApplyBetaUrl;
    private string applyBetaUrl_ = "";
    public bool HasApplyBetaUrl {
      get { return hasApplyBetaUrl; }
    }
    public string ApplyBetaUrl {
      get { return applyBetaUrl_; }
    }
    
    public const int DeviceInfoXmlFieldNumber = 39;
    private bool hasDeviceInfoXml;
    private string deviceInfoXml_ = "";
    public bool HasDeviceInfoXml {
      get { return hasDeviceInfoXml; }
    }
    public string DeviceInfoXml {
      get { return deviceInfoXml_; }
    }
    
    public const int SoftConfigXmlFieldNumber = 40;
    private bool hasSoftConfigXml;
    private string softConfigXml_ = "";
    public bool HasSoftConfigXml {
      get { return hasSoftConfigXml; }
    }
    public string SoftConfigXml {
      get { return softConfigXml_; }
    }
    
    public const int NewHostListFieldNumber = 41;
    private bool hasNewHostList;
    private global::mm.command.NewHostListType newHostList_;
    public bool HasNewHostList {
      get { return hasNewHostList; }
    }
    public global::mm.command.NewHostListType NewHostList {
      get { return newHostList_ ?? global::mm.command.NewHostListType.DefaultInstance; }
    }
    
    public const int AuthTicketFieldNumber = 42;
    private bool hasAuthTicket;
    private string authTicket_ = "";
    public bool HasAuthTicket {
      get { return hasAuthTicket; }
    }
    public string AuthTicket {
      get { return authTicket_; }
    }
    
    public const int SafeDeviceFieldNumber = 43;
    private bool hasSafeDevice;
    private int safeDevice_;
    public bool HasSafeDevice {
      get { return hasSafeDevice; }
    }
    public int SafeDevice {
      get { return safeDevice_; }
    }
    
    public const int MainAcctTypeFieldNumber = 44;
    private bool hasMainAcctType;
    private int mainAcctType_;
    public bool HasMainAcctType {
      get { return hasMainAcctType; }
    }
    public int MainAcctType {
      get { return mainAcctType_; }
    }
    
    public const int NeedSetEmailPwdFieldNumber = 45;
    private bool hasNeedSetEmailPwd;
    private int needSetEmailPwd_;
    public bool HasNeedSetEmailPwd {
      get { return hasNeedSetEmailPwd; }
    }
    public int NeedSetEmailPwd {
      get { return needSetEmailPwd_; }
    }
    
    public const int HintMsgFieldNumber = 46;
    private bool hasHintMsg;
    private string hintMsg_ = "";
    public bool HasHintMsg {
      get { return hasHintMsg; }
    }
    public string HintMsg {
      get { return hintMsg_; }
    }
    
    public const int AutoAuthTicketFieldNumber = 47;
    private bool hasAutoAuthTicket;
    private string autoAuthTicket_ = "";
    public bool HasAutoAuthTicket {
      get { return hasAutoAuthTicket; }
    }
    public string AutoAuthTicket {
      get { return autoAuthTicket_; }
    }
    
    public const int DnsInfoFieldNumber = 48;
    private bool hasDnsInfo;
    private global::mm.command.DnsInfoType dnsInfo_;
    public bool HasDnsInfo {
      get { return hasDnsInfo; }
    }
    public global::mm.command.DnsInfoType DnsInfo {
      get { return dnsInfo_ ?? global::mm.command.DnsInfoType.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasUin) return false;
        if (!hasUserName) return false;
        if (!hasNickName) return false;
        if (!hasBindUin) return false;
        if (!hasBindEmail) return false;
        if (!hasBindMobile) return false;
        if (!hasStatus) return false;
        if (!hasSessionKey) return false;
        if (!hasImgSid) return false;
        if (!hasImgBuf) return false;
        if (!hasOfficialUserName) return false;
        if (!hasOfficialNickName) return false;
        if (!Base.IsInitialized) return false;
        if (!ImgBuf.IsInitialized) return false;
        if (HasBuiltinIPList) {
          if (!BuiltinIPList.IsInitialized) return false;
        }
        if (HasPluginKeyList) {
          if (!PluginKeyList.IsInitialized) return false;
        }
        if (HasA2Key) {
          if (!A2Key.IsInitialized) return false;
        }
        if (HasKSid) {
          if (!KSid.IsInitialized) return false;
        }
        if (HasNewHostList) {
          if (!NewHostList.IsInitialized) return false;
        }
        if (HasDnsInfo) {
          if (!DnsInfo.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _authResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[47], Base);
      }
      if (hasUin) {
        output.WriteUInt32(2, field_names[45], Uin);
      }
      if (hasUserName) {
        output.WriteMessage(3, field_names[46], UserName);
      }
      if (hasNickName) {
        output.WriteMessage(4, field_names[25], NickName);
      }
      if (hasBindUin) {
        output.WriteUInt32(5, field_names[8], BindUin);
      }
      if (hasBindEmail) {
        output.WriteMessage(6, field_names[6], BindEmail);
      }
      if (hasBindMobile) {
        output.WriteMessage(7, field_names[7], BindMobile);
      }
      if (hasStatus) {
        output.WriteInt32(8, field_names[42], Status);
      }
      if (hasSessionKey) {
        output.WriteBytes(9, field_names[39], SessionKey);
      }
      if (hasImgSid) {
        output.WriteMessage(10, field_names[16], ImgSid);
      }
      if (hasImgBuf) {
        output.WriteMessage(11, field_names[14], ImgBuf);
      }
      if (hasOfficialUserName) {
        output.WriteMessage(12, field_names[27], OfficialUserName);
      }
      if (hasOfficialNickName) {
        output.WriteMessage(13, field_names[26], OfficialNickName);
      }
      if (hasQQMicroBlogUserName) {
        output.WriteMessage(14, field_names[35], QQMicroBlogUserName);
      }
      if (hasQQMicroBlogStatus) {
        output.WriteInt32(15, field_names[34], QQMicroBlogStatus);
      }
      if (hasNewVersion) {
        output.WriteInt32(16, field_names[24], NewVersion);
      }
      if (hasTicket) {
        output.WriteString(17, field_names[43], Ticket);
      }
      if (hasPushMailStatus) {
        output.WriteInt32(18, field_names[33], PushMailStatus);
      }
      if (hasSendCardBitFlag) {
        output.WriteInt32(19, field_names[38], SendCardBitFlag);
      }
      if (hasPushMailSettingTicket) {
        output.WriteString(20, field_names[32], PushMailSettingTicket);
      }
      if (hasBuiltinIPList) {
        output.WriteMessage(21, field_names[9], BuiltinIPList);
      }
      if (hasFSURL) {
        output.WriteString(22, field_names[12], FSURL);
      }
      if (hasNetworkControl) {
        output.WriteMessage(23, field_names[22], NetworkControl);
      }
      if (hasPluginFlag) {
        output.WriteInt32(24, field_names[29], PluginFlag);
      }
      if (hasAlias) {
        output.WriteString(25, field_names[1], Alias);
      }
      if (hasRegType) {
        output.WriteInt32(26, field_names[36], RegType);
      }
      if (hasAuthKey) {
        output.WriteString(27, field_names[3], AuthKey);
      }
      if (hasSid) {
        output.WriteString(28, field_names[40], Sid);
      }
      if (hasPluginKeyList) {
        output.WriteMessage(29, field_names[30], PluginKeyList);
      }
      if (hasImgEncryptKey) {
        output.WriteMessage(30, field_names[15], ImgEncryptKey);
      }
      if (hasA2Key) {
        output.WriteMessage(31, field_names[0], A2Key);
      }
      if (hasKSid) {
        output.WriteMessage(32, field_names[18], KSid);
      }
      if (hasProfileFlag) {
        output.WriteInt32(33, field_names[31], ProfileFlag);
      }
      if (hasPassword) {
        output.WriteString(34, field_names[28], Password);
      }
      if (hasTimeStamp) {
        output.WriteInt32(35, field_names[44], TimeStamp);
      }
      if (hasIsAutoReg) {
        output.WriteInt32(36, field_names[17], IsAutoReg);
      }
      if (hasKickResponse) {
        output.WriteString(37, field_names[19], KickResponse);
      }
      if (hasApplyBetaUrl) {
        output.WriteString(38, field_names[2], ApplyBetaUrl);
      }
      if (hasDeviceInfoXml) {
        output.WriteString(39, field_names[10], DeviceInfoXml);
      }
      if (hasSoftConfigXml) {
        output.WriteString(40, field_names[41], SoftConfigXml);
      }
      if (hasNewHostList) {
        output.WriteMessage(41, field_names[23], NewHostList);
      }
      if (hasAuthTicket) {
        output.WriteString(42, field_names[4], AuthTicket);
      }
      if (hasSafeDevice) {
        output.WriteInt32(43, field_names[37], SafeDevice);
      }
      if (hasMainAcctType) {
        output.WriteInt32(44, field_names[20], MainAcctType);
      }
      if (hasNeedSetEmailPwd) {
        output.WriteInt32(45, field_names[21], NeedSetEmailPwd);
      }
      if (hasHintMsg) {
        output.WriteString(46, field_names[13], HintMsg);
      }
      if (hasAutoAuthTicket) {
        output.WriteString(47, field_names[5], AutoAuthTicket);
      }
      if (hasDnsInfo) {
        output.WriteMessage(48, field_names[11], DnsInfo);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUin) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Uin);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, UserName);
        }
        if (hasNickName) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, NickName);
        }
        if (hasBindUin) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, BindUin);
        }
        if (hasBindEmail) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, BindEmail);
        }
        if (hasBindMobile) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, BindMobile);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Status);
        }
        if (hasSessionKey) {
          size += pb::CodedOutputStream.ComputeBytesSize(9, SessionKey);
        }
        if (hasImgSid) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, ImgSid);
        }
        if (hasImgBuf) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, ImgBuf);
        }
        if (hasOfficialUserName) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, OfficialUserName);
        }
        if (hasOfficialNickName) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, OfficialNickName);
        }
        if (hasQQMicroBlogUserName) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, QQMicroBlogUserName);
        }
        if (hasQQMicroBlogStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, QQMicroBlogStatus);
        }
        if (hasNewVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, NewVersion);
        }
        if (hasTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(17, Ticket);
        }
        if (hasPushMailStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, PushMailStatus);
        }
        if (hasSendCardBitFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(19, SendCardBitFlag);
        }
        if (hasPushMailSettingTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(20, PushMailSettingTicket);
        }
        if (hasBuiltinIPList) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, BuiltinIPList);
        }
        if (hasFSURL) {
          size += pb::CodedOutputStream.ComputeStringSize(22, FSURL);
        }
        if (hasNetworkControl) {
          size += pb::CodedOutputStream.ComputeMessageSize(23, NetworkControl);
        }
        if (hasPluginFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(24, PluginFlag);
        }
        if (hasAlias) {
          size += pb::CodedOutputStream.ComputeStringSize(25, Alias);
        }
        if (hasRegType) {
          size += pb::CodedOutputStream.ComputeInt32Size(26, RegType);
        }
        if (hasAuthKey) {
          size += pb::CodedOutputStream.ComputeStringSize(27, AuthKey);
        }
        if (hasSid) {
          size += pb::CodedOutputStream.ComputeStringSize(28, Sid);
        }
        if (hasPluginKeyList) {
          size += pb::CodedOutputStream.ComputeMessageSize(29, PluginKeyList);
        }
        if (hasImgEncryptKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(30, ImgEncryptKey);
        }
        if (hasA2Key) {
          size += pb::CodedOutputStream.ComputeMessageSize(31, A2Key);
        }
        if (hasKSid) {
          size += pb::CodedOutputStream.ComputeMessageSize(32, KSid);
        }
        if (hasProfileFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(33, ProfileFlag);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(34, Password);
        }
        if (hasTimeStamp) {
          size += pb::CodedOutputStream.ComputeInt32Size(35, TimeStamp);
        }
        if (hasIsAutoReg) {
          size += pb::CodedOutputStream.ComputeInt32Size(36, IsAutoReg);
        }
        if (hasKickResponse) {
          size += pb::CodedOutputStream.ComputeStringSize(37, KickResponse);
        }
        if (hasApplyBetaUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(38, ApplyBetaUrl);
        }
        if (hasDeviceInfoXml) {
          size += pb::CodedOutputStream.ComputeStringSize(39, DeviceInfoXml);
        }
        if (hasSoftConfigXml) {
          size += pb::CodedOutputStream.ComputeStringSize(40, SoftConfigXml);
        }
        if (hasNewHostList) {
          size += pb::CodedOutputStream.ComputeMessageSize(41, NewHostList);
        }
        if (hasAuthTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(42, AuthTicket);
        }
        if (hasSafeDevice) {
          size += pb::CodedOutputStream.ComputeInt32Size(43, SafeDevice);
        }
        if (hasMainAcctType) {
          size += pb::CodedOutputStream.ComputeInt32Size(44, MainAcctType);
        }
        if (hasNeedSetEmailPwd) {
          size += pb::CodedOutputStream.ComputeInt32Size(45, NeedSetEmailPwd);
        }
        if (hasHintMsg) {
          size += pb::CodedOutputStream.ComputeStringSize(46, HintMsg);
        }
        if (hasAutoAuthTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(47, AutoAuthTicket);
        }
        if (hasDnsInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(48, DnsInfo);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AuthResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AuthResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AuthResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AuthResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AuthResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AuthResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AuthResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AuthResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AuthResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AuthResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AuthResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AuthResponse result;
      
      private AuthResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          AuthResponse original = result;
          result = new AuthResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AuthResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.AuthResponse.Descriptor; }
      }
      
      public override AuthResponse DefaultInstanceForType {
        get { return global::mm.command.AuthResponse.DefaultInstance; }
      }
      
      public override AuthResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AuthResponse) {
          return MergeFrom((AuthResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AuthResponse other) {
        if (other == global::mm.command.AuthResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUin) {
          Uin = other.Uin;
        }
        if (other.HasUserName) {
          MergeUserName(other.UserName);
        }
        if (other.HasNickName) {
          MergeNickName(other.NickName);
        }
        if (other.HasBindUin) {
          BindUin = other.BindUin;
        }
        if (other.HasBindEmail) {
          MergeBindEmail(other.BindEmail);
        }
        if (other.HasBindMobile) {
          MergeBindMobile(other.BindMobile);
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasSessionKey) {
          SessionKey = other.SessionKey;
        }
        if (other.HasImgSid) {
          MergeImgSid(other.ImgSid);
        }
        if (other.HasImgBuf) {
          MergeImgBuf(other.ImgBuf);
        }
        if (other.HasOfficialUserName) {
          MergeOfficialUserName(other.OfficialUserName);
        }
        if (other.HasOfficialNickName) {
          MergeOfficialNickName(other.OfficialNickName);
        }
        if (other.HasQQMicroBlogUserName) {
          MergeQQMicroBlogUserName(other.QQMicroBlogUserName);
        }
        if (other.HasQQMicroBlogStatus) {
          QQMicroBlogStatus = other.QQMicroBlogStatus;
        }
        if (other.HasNewVersion) {
          NewVersion = other.NewVersion;
        }
        if (other.HasTicket) {
          Ticket = other.Ticket;
        }
        if (other.HasPushMailStatus) {
          PushMailStatus = other.PushMailStatus;
        }
        if (other.HasSendCardBitFlag) {
          SendCardBitFlag = other.SendCardBitFlag;
        }
        if (other.HasPushMailSettingTicket) {
          PushMailSettingTicket = other.PushMailSettingTicket;
        }
        if (other.HasBuiltinIPList) {
          MergeBuiltinIPList(other.BuiltinIPList);
        }
        if (other.HasFSURL) {
          FSURL = other.FSURL;
        }
        if (other.HasNetworkControl) {
          MergeNetworkControl(other.NetworkControl);
        }
        if (other.HasPluginFlag) {
          PluginFlag = other.PluginFlag;
        }
        if (other.HasAlias) {
          Alias = other.Alias;
        }
        if (other.HasRegType) {
          RegType = other.RegType;
        }
        if (other.HasAuthKey) {
          AuthKey = other.AuthKey;
        }
        if (other.HasSid) {
          Sid = other.Sid;
        }
        if (other.HasPluginKeyList) {
          MergePluginKeyList(other.PluginKeyList);
        }
        if (other.HasImgEncryptKey) {
          MergeImgEncryptKey(other.ImgEncryptKey);
        }
        if (other.HasA2Key) {
          MergeA2Key(other.A2Key);
        }
        if (other.HasKSid) {
          MergeKSid(other.KSid);
        }
        if (other.HasProfileFlag) {
          ProfileFlag = other.ProfileFlag;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasIsAutoReg) {
          IsAutoReg = other.IsAutoReg;
        }
        if (other.HasKickResponse) {
          KickResponse = other.KickResponse;
        }
        if (other.HasApplyBetaUrl) {
          ApplyBetaUrl = other.ApplyBetaUrl;
        }
        if (other.HasDeviceInfoXml) {
          DeviceInfoXml = other.DeviceInfoXml;
        }
        if (other.HasSoftConfigXml) {
          SoftConfigXml = other.SoftConfigXml;
        }
        if (other.HasNewHostList) {
          MergeNewHostList(other.NewHostList);
        }
        if (other.HasAuthTicket) {
          AuthTicket = other.AuthTicket;
        }
        if (other.HasSafeDevice) {
          SafeDevice = other.SafeDevice;
        }
        if (other.HasMainAcctType) {
          MainAcctType = other.MainAcctType;
        }
        if (other.HasNeedSetEmailPwd) {
          NeedSetEmailPwd = other.NeedSetEmailPwd;
        }
        if (other.HasHintMsg) {
          HintMsg = other.HintMsg;
        }
        if (other.HasAutoAuthTicket) {
          AutoAuthTicket = other.AutoAuthTicket;
        }
        if (other.HasDnsInfo) {
          MergeDnsInfo(other.DnsInfo);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_authResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _authResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasUin = input.ReadUInt32(ref result.uin_);
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasUserName) {
                subBuilder.MergeFrom(UserName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserName = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasNickName) {
                subBuilder.MergeFrom(NickName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NickName = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasBindUin = input.ReadUInt32(ref result.bindUin_);
              break;
            }
            case 50: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasBindEmail) {
                subBuilder.MergeFrom(BindEmail);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BindEmail = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasBindMobile) {
                subBuilder.MergeFrom(BindMobile);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BindMobile = subBuilder.BuildPartial();
              break;
            }
            case 64: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 74: {
              result.hasSessionKey = input.ReadBytes(ref result.sessionKey_);
              break;
            }
            case 82: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgSid) {
                subBuilder.MergeFrom(ImgSid);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgSid = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasImgBuf) {
                subBuilder.MergeFrom(ImgBuf);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgBuf = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasOfficialUserName) {
                subBuilder.MergeFrom(OfficialUserName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OfficialUserName = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasOfficialNickName) {
                subBuilder.MergeFrom(OfficialNickName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              OfficialNickName = subBuilder.BuildPartial();
              break;
            }
            case 114: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasQQMicroBlogUserName) {
                subBuilder.MergeFrom(QQMicroBlogUserName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              QQMicroBlogUserName = subBuilder.BuildPartial();
              break;
            }
            case 120: {
              result.hasQQMicroBlogStatus = input.ReadInt32(ref result.qQMicroBlogStatus_);
              break;
            }
            case 128: {
              result.hasNewVersion = input.ReadInt32(ref result.newVersion_);
              break;
            }
            case 138: {
              result.hasTicket = input.ReadString(ref result.ticket_);
              break;
            }
            case 144: {
              result.hasPushMailStatus = input.ReadInt32(ref result.pushMailStatus_);
              break;
            }
            case 152: {
              result.hasSendCardBitFlag = input.ReadInt32(ref result.sendCardBitFlag_);
              break;
            }
            case 162: {
              result.hasPushMailSettingTicket = input.ReadString(ref result.pushMailSettingTicket_);
              break;
            }
            case 170: {
              global::mm.command.IPList.Builder subBuilder = global::mm.command.IPList.CreateBuilder();
              if (result.hasBuiltinIPList) {
                subBuilder.MergeFrom(BuiltinIPList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BuiltinIPList = subBuilder.BuildPartial();
              break;
            }
            case 178: {
              result.hasFSURL = input.ReadString(ref result.fSURL_);
              break;
            }
            case 186: {
              global::mm.command.NetworkControlType.Builder subBuilder = global::mm.command.NetworkControlType.CreateBuilder();
              if (result.hasNetworkControl) {
                subBuilder.MergeFrom(NetworkControl);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NetworkControl = subBuilder.BuildPartial();
              break;
            }
            case 192: {
              result.hasPluginFlag = input.ReadInt32(ref result.pluginFlag_);
              break;
            }
            case 202: {
              result.hasAlias = input.ReadString(ref result.alias_);
              break;
            }
            case 208: {
              result.hasRegType = input.ReadInt32(ref result.regType_);
              break;
            }
            case 218: {
              result.hasAuthKey = input.ReadString(ref result.authKey_);
              break;
            }
            case 226: {
              result.hasSid = input.ReadString(ref result.sid_);
              break;
            }
            case 234: {
              global::mm.command.PluginKeyListType.Builder subBuilder = global::mm.command.PluginKeyListType.CreateBuilder();
              if (result.hasPluginKeyList) {
                subBuilder.MergeFrom(PluginKeyList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PluginKeyList = subBuilder.BuildPartial();
              break;
            }
            case 242: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgEncryptKey) {
                subBuilder.MergeFrom(ImgEncryptKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgEncryptKey = subBuilder.BuildPartial();
              break;
            }
            case 250: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasA2Key) {
                subBuilder.MergeFrom(A2Key);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              A2Key = subBuilder.BuildPartial();
              break;
            }
            case 258: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasKSid) {
                subBuilder.MergeFrom(KSid);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KSid = subBuilder.BuildPartial();
              break;
            }
            case 264: {
              result.hasProfileFlag = input.ReadInt32(ref result.profileFlag_);
              break;
            }
            case 274: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
            case 280: {
              result.hasTimeStamp = input.ReadInt32(ref result.timeStamp_);
              break;
            }
            case 288: {
              result.hasIsAutoReg = input.ReadInt32(ref result.isAutoReg_);
              break;
            }
            case 298: {
              result.hasKickResponse = input.ReadString(ref result.kickResponse_);
              break;
            }
            case 306: {
              result.hasApplyBetaUrl = input.ReadString(ref result.applyBetaUrl_);
              break;
            }
            case 314: {
              result.hasDeviceInfoXml = input.ReadString(ref result.deviceInfoXml_);
              break;
            }
            case 322: {
              result.hasSoftConfigXml = input.ReadString(ref result.softConfigXml_);
              break;
            }
            case 330: {
              global::mm.command.NewHostListType.Builder subBuilder = global::mm.command.NewHostListType.CreateBuilder();
              if (result.hasNewHostList) {
                subBuilder.MergeFrom(NewHostList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewHostList = subBuilder.BuildPartial();
              break;
            }
            case 338: {
              result.hasAuthTicket = input.ReadString(ref result.authTicket_);
              break;
            }
            case 344: {
              result.hasSafeDevice = input.ReadInt32(ref result.safeDevice_);
              break;
            }
            case 352: {
              result.hasMainAcctType = input.ReadInt32(ref result.mainAcctType_);
              break;
            }
            case 360: {
              result.hasNeedSetEmailPwd = input.ReadInt32(ref result.needSetEmailPwd_);
              break;
            }
            case 370: {
              result.hasHintMsg = input.ReadString(ref result.hintMsg_);
              break;
            }
            case 378: {
              result.hasAutoAuthTicket = input.ReadString(ref result.autoAuthTicket_);
              break;
            }
            case 386: {
              global::mm.command.DnsInfoType.Builder subBuilder = global::mm.command.DnsInfoType.CreateBuilder();
              if (result.hasDnsInfo) {
                subBuilder.MergeFrom(DnsInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DnsInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUin {
        get { return result.hasUin; }
      }
      [global::System.CLSCompliant(false)]
      public uint Uin {
        get { return result.Uin; }
        set { SetUin(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUin(uint value) {
        PrepareBuilder();
        result.hasUin = true;
        result.uin_ = value;
        return this;
      }
      public Builder ClearUin() {
        PrepareBuilder();
        result.hasUin = false;
        result.uin_ = 0;
        return this;
      }
      
      public bool HasUserName {
       get { return result.hasUserName; }
      }
      public global::mm.command.SKBuiltinString_t UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder SetUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserName &&
            result.userName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.userName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.userName_).MergeFrom(value).BuildPartial();
        } else {
          result.userName_ = value;
        }
        result.hasUserName = true;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = null;
        return this;
      }
      
      public bool HasNickName {
       get { return result.hasNickName; }
      }
      public global::mm.command.SKBuiltinString_t NickName {
        get { return result.NickName; }
        set { SetNickName(value); }
      }
      public Builder SetNickName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = value;
        return this;
      }
      public Builder SetNickName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNickName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNickName &&
            result.nickName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.nickName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.nickName_).MergeFrom(value).BuildPartial();
        } else {
          result.nickName_ = value;
        }
        result.hasNickName = true;
        return this;
      }
      public Builder ClearNickName() {
        PrepareBuilder();
        result.hasNickName = false;
        result.nickName_ = null;
        return this;
      }
      
      public bool HasBindUin {
        get { return result.hasBindUin; }
      }
      [global::System.CLSCompliant(false)]
      public uint BindUin {
        get { return result.BindUin; }
        set { SetBindUin(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBindUin(uint value) {
        PrepareBuilder();
        result.hasBindUin = true;
        result.bindUin_ = value;
        return this;
      }
      public Builder ClearBindUin() {
        PrepareBuilder();
        result.hasBindUin = false;
        result.bindUin_ = 0;
        return this;
      }
      
      public bool HasBindEmail {
       get { return result.hasBindEmail; }
      }
      public global::mm.command.SKBuiltinString_t BindEmail {
        get { return result.BindEmail; }
        set { SetBindEmail(value); }
      }
      public Builder SetBindEmail(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBindEmail = true;
        result.bindEmail_ = value;
        return this;
      }
      public Builder SetBindEmail(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBindEmail = true;
        result.bindEmail_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBindEmail(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBindEmail &&
            result.bindEmail_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.bindEmail_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.bindEmail_).MergeFrom(value).BuildPartial();
        } else {
          result.bindEmail_ = value;
        }
        result.hasBindEmail = true;
        return this;
      }
      public Builder ClearBindEmail() {
        PrepareBuilder();
        result.hasBindEmail = false;
        result.bindEmail_ = null;
        return this;
      }
      
      public bool HasBindMobile {
       get { return result.hasBindMobile; }
      }
      public global::mm.command.SKBuiltinString_t BindMobile {
        get { return result.BindMobile; }
        set { SetBindMobile(value); }
      }
      public Builder SetBindMobile(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBindMobile = true;
        result.bindMobile_ = value;
        return this;
      }
      public Builder SetBindMobile(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBindMobile = true;
        result.bindMobile_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBindMobile(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBindMobile &&
            result.bindMobile_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.bindMobile_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.bindMobile_).MergeFrom(value).BuildPartial();
        } else {
          result.bindMobile_ = value;
        }
        result.hasBindMobile = true;
        return this;
      }
      public Builder ClearBindMobile() {
        PrepareBuilder();
        result.hasBindMobile = false;
        result.bindMobile_ = null;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasSessionKey {
        get { return result.hasSessionKey; }
      }
      public pb::ByteString SessionKey {
        get { return result.SessionKey; }
        set { SetSessionKey(value); }
      }
      public Builder SetSessionKey(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionKey = true;
        result.sessionKey_ = value;
        return this;
      }
      public Builder ClearSessionKey() {
        PrepareBuilder();
        result.hasSessionKey = false;
        result.sessionKey_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasImgSid {
       get { return result.hasImgSid; }
      }
      public global::mm.command.SKBuiltinString_t ImgSid {
        get { return result.ImgSid; }
        set { SetImgSid(value); }
      }
      public Builder SetImgSid(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgSid = true;
        result.imgSid_ = value;
        return this;
      }
      public Builder SetImgSid(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgSid = true;
        result.imgSid_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgSid(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgSid &&
            result.imgSid_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgSid_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgSid_).MergeFrom(value).BuildPartial();
        } else {
          result.imgSid_ = value;
        }
        result.hasImgSid = true;
        return this;
      }
      public Builder ClearImgSid() {
        PrepareBuilder();
        result.hasImgSid = false;
        result.imgSid_ = null;
        return this;
      }
      
      public bool HasImgBuf {
       get { return result.hasImgBuf; }
      }
      public global::mm.command.SKBuiltinBuffer_t ImgBuf {
        get { return result.ImgBuf; }
        set { SetImgBuf(value); }
      }
      public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgBuf = true;
        result.imgBuf_ = value;
        return this;
      }
      public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgBuf = true;
        result.imgBuf_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgBuf &&
            result.imgBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.imgBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.imgBuf_).MergeFrom(value).BuildPartial();
        } else {
          result.imgBuf_ = value;
        }
        result.hasImgBuf = true;
        return this;
      }
      public Builder ClearImgBuf() {
        PrepareBuilder();
        result.hasImgBuf = false;
        result.imgBuf_ = null;
        return this;
      }
      
      public bool HasOfficialUserName {
       get { return result.hasOfficialUserName; }
      }
      public global::mm.command.SKBuiltinString_t OfficialUserName {
        get { return result.OfficialUserName; }
        set { SetOfficialUserName(value); }
      }
      public Builder SetOfficialUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOfficialUserName = true;
        result.officialUserName_ = value;
        return this;
      }
      public Builder SetOfficialUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOfficialUserName = true;
        result.officialUserName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOfficialUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOfficialUserName &&
            result.officialUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.officialUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.officialUserName_).MergeFrom(value).BuildPartial();
        } else {
          result.officialUserName_ = value;
        }
        result.hasOfficialUserName = true;
        return this;
      }
      public Builder ClearOfficialUserName() {
        PrepareBuilder();
        result.hasOfficialUserName = false;
        result.officialUserName_ = null;
        return this;
      }
      
      public bool HasOfficialNickName {
       get { return result.hasOfficialNickName; }
      }
      public global::mm.command.SKBuiltinString_t OfficialNickName {
        get { return result.OfficialNickName; }
        set { SetOfficialNickName(value); }
      }
      public Builder SetOfficialNickName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOfficialNickName = true;
        result.officialNickName_ = value;
        return this;
      }
      public Builder SetOfficialNickName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOfficialNickName = true;
        result.officialNickName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOfficialNickName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOfficialNickName &&
            result.officialNickName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.officialNickName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.officialNickName_).MergeFrom(value).BuildPartial();
        } else {
          result.officialNickName_ = value;
        }
        result.hasOfficialNickName = true;
        return this;
      }
      public Builder ClearOfficialNickName() {
        PrepareBuilder();
        result.hasOfficialNickName = false;
        result.officialNickName_ = null;
        return this;
      }
      
      public bool HasQQMicroBlogUserName {
       get { return result.hasQQMicroBlogUserName; }
      }
      public global::mm.command.SKBuiltinString_t QQMicroBlogUserName {
        get { return result.QQMicroBlogUserName; }
        set { SetQQMicroBlogUserName(value); }
      }
      public Builder SetQQMicroBlogUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQQMicroBlogUserName = true;
        result.qQMicroBlogUserName_ = value;
        return this;
      }
      public Builder SetQQMicroBlogUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasQQMicroBlogUserName = true;
        result.qQMicroBlogUserName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQQMicroBlogUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasQQMicroBlogUserName &&
            result.qQMicroBlogUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.qQMicroBlogUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.qQMicroBlogUserName_).MergeFrom(value).BuildPartial();
        } else {
          result.qQMicroBlogUserName_ = value;
        }
        result.hasQQMicroBlogUserName = true;
        return this;
      }
      public Builder ClearQQMicroBlogUserName() {
        PrepareBuilder();
        result.hasQQMicroBlogUserName = false;
        result.qQMicroBlogUserName_ = null;
        return this;
      }
      
      public bool HasQQMicroBlogStatus {
        get { return result.hasQQMicroBlogStatus; }
      }
      public int QQMicroBlogStatus {
        get { return result.QQMicroBlogStatus; }
        set { SetQQMicroBlogStatus(value); }
      }
      public Builder SetQQMicroBlogStatus(int value) {
        PrepareBuilder();
        result.hasQQMicroBlogStatus = true;
        result.qQMicroBlogStatus_ = value;
        return this;
      }
      public Builder ClearQQMicroBlogStatus() {
        PrepareBuilder();
        result.hasQQMicroBlogStatus = false;
        result.qQMicroBlogStatus_ = 0;
        return this;
      }
      
      public bool HasNewVersion {
        get { return result.hasNewVersion; }
      }
      public int NewVersion {
        get { return result.NewVersion; }
        set { SetNewVersion(value); }
      }
      public Builder SetNewVersion(int value) {
        PrepareBuilder();
        result.hasNewVersion = true;
        result.newVersion_ = value;
        return this;
      }
      public Builder ClearNewVersion() {
        PrepareBuilder();
        result.hasNewVersion = false;
        result.newVersion_ = 0;
        return this;
      }
      
      public bool HasTicket {
        get { return result.hasTicket; }
      }
      public string Ticket {
        get { return result.Ticket; }
        set { SetTicket(value); }
      }
      public Builder SetTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTicket = true;
        result.ticket_ = value;
        return this;
      }
      public Builder ClearTicket() {
        PrepareBuilder();
        result.hasTicket = false;
        result.ticket_ = "";
        return this;
      }
      
      public bool HasPushMailStatus {
        get { return result.hasPushMailStatus; }
      }
      public int PushMailStatus {
        get { return result.PushMailStatus; }
        set { SetPushMailStatus(value); }
      }
      public Builder SetPushMailStatus(int value) {
        PrepareBuilder();
        result.hasPushMailStatus = true;
        result.pushMailStatus_ = value;
        return this;
      }
      public Builder ClearPushMailStatus() {
        PrepareBuilder();
        result.hasPushMailStatus = false;
        result.pushMailStatus_ = 0;
        return this;
      }
      
      public bool HasSendCardBitFlag {
        get { return result.hasSendCardBitFlag; }
      }
      public int SendCardBitFlag {
        get { return result.SendCardBitFlag; }
        set { SetSendCardBitFlag(value); }
      }
      public Builder SetSendCardBitFlag(int value) {
        PrepareBuilder();
        result.hasSendCardBitFlag = true;
        result.sendCardBitFlag_ = value;
        return this;
      }
      public Builder ClearSendCardBitFlag() {
        PrepareBuilder();
        result.hasSendCardBitFlag = false;
        result.sendCardBitFlag_ = 0;
        return this;
      }
      
      public bool HasPushMailSettingTicket {
        get { return result.hasPushMailSettingTicket; }
      }
      public string PushMailSettingTicket {
        get { return result.PushMailSettingTicket; }
        set { SetPushMailSettingTicket(value); }
      }
      public Builder SetPushMailSettingTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPushMailSettingTicket = true;
        result.pushMailSettingTicket_ = value;
        return this;
      }
      public Builder ClearPushMailSettingTicket() {
        PrepareBuilder();
        result.hasPushMailSettingTicket = false;
        result.pushMailSettingTicket_ = "";
        return this;
      }
      
      public bool HasBuiltinIPList {
       get { return result.hasBuiltinIPList; }
      }
      public global::mm.command.IPList BuiltinIPList {
        get { return result.BuiltinIPList; }
        set { SetBuiltinIPList(value); }
      }
      public Builder SetBuiltinIPList(global::mm.command.IPList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBuiltinIPList = true;
        result.builtinIPList_ = value;
        return this;
      }
      public Builder SetBuiltinIPList(global::mm.command.IPList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBuiltinIPList = true;
        result.builtinIPList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBuiltinIPList(global::mm.command.IPList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBuiltinIPList &&
            result.builtinIPList_ != global::mm.command.IPList.DefaultInstance) {
            result.builtinIPList_ = global::mm.command.IPList.CreateBuilder(result.builtinIPList_).MergeFrom(value).BuildPartial();
        } else {
          result.builtinIPList_ = value;
        }
        result.hasBuiltinIPList = true;
        return this;
      }
      public Builder ClearBuiltinIPList() {
        PrepareBuilder();
        result.hasBuiltinIPList = false;
        result.builtinIPList_ = null;
        return this;
      }
      
      public bool HasFSURL {
        get { return result.hasFSURL; }
      }
      public string FSURL {
        get { return result.FSURL; }
        set { SetFSURL(value); }
      }
      public Builder SetFSURL(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFSURL = true;
        result.fSURL_ = value;
        return this;
      }
      public Builder ClearFSURL() {
        PrepareBuilder();
        result.hasFSURL = false;
        result.fSURL_ = "";
        return this;
      }
      
      public bool HasNetworkControl {
       get { return result.hasNetworkControl; }
      }
      public global::mm.command.NetworkControlType NetworkControl {
        get { return result.NetworkControl; }
        set { SetNetworkControl(value); }
      }
      public Builder SetNetworkControl(global::mm.command.NetworkControlType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNetworkControl = true;
        result.networkControl_ = value;
        return this;
      }
      public Builder SetNetworkControl(global::mm.command.NetworkControlType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNetworkControl = true;
        result.networkControl_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNetworkControl(global::mm.command.NetworkControlType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNetworkControl &&
            result.networkControl_ != global::mm.command.NetworkControlType.DefaultInstance) {
            result.networkControl_ = global::mm.command.NetworkControlType.CreateBuilder(result.networkControl_).MergeFrom(value).BuildPartial();
        } else {
          result.networkControl_ = value;
        }
        result.hasNetworkControl = true;
        return this;
      }
      public Builder ClearNetworkControl() {
        PrepareBuilder();
        result.hasNetworkControl = false;
        result.networkControl_ = null;
        return this;
      }
      
      public bool HasPluginFlag {
        get { return result.hasPluginFlag; }
      }
      public int PluginFlag {
        get { return result.PluginFlag; }
        set { SetPluginFlag(value); }
      }
      public Builder SetPluginFlag(int value) {
        PrepareBuilder();
        result.hasPluginFlag = true;
        result.pluginFlag_ = value;
        return this;
      }
      public Builder ClearPluginFlag() {
        PrepareBuilder();
        result.hasPluginFlag = false;
        result.pluginFlag_ = 0;
        return this;
      }
      
      public bool HasAlias {
        get { return result.hasAlias; }
      }
      public string Alias {
        get { return result.Alias; }
        set { SetAlias(value); }
      }
      public Builder SetAlias(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAlias = true;
        result.alias_ = value;
        return this;
      }
      public Builder ClearAlias() {
        PrepareBuilder();
        result.hasAlias = false;
        result.alias_ = "";
        return this;
      }
      
      public bool HasRegType {
        get { return result.hasRegType; }
      }
      public int RegType {
        get { return result.RegType; }
        set { SetRegType(value); }
      }
      public Builder SetRegType(int value) {
        PrepareBuilder();
        result.hasRegType = true;
        result.regType_ = value;
        return this;
      }
      public Builder ClearRegType() {
        PrepareBuilder();
        result.hasRegType = false;
        result.regType_ = 0;
        return this;
      }
      
      public bool HasAuthKey {
        get { return result.hasAuthKey; }
      }
      public string AuthKey {
        get { return result.AuthKey; }
        set { SetAuthKey(value); }
      }
      public Builder SetAuthKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthKey = true;
        result.authKey_ = value;
        return this;
      }
      public Builder ClearAuthKey() {
        PrepareBuilder();
        result.hasAuthKey = false;
        result.authKey_ = "";
        return this;
      }
      
      public bool HasSid {
        get { return result.hasSid; }
      }
      public string Sid {
        get { return result.Sid; }
        set { SetSid(value); }
      }
      public Builder SetSid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSid = true;
        result.sid_ = value;
        return this;
      }
      public Builder ClearSid() {
        PrepareBuilder();
        result.hasSid = false;
        result.sid_ = "";
        return this;
      }
      
      public bool HasPluginKeyList {
       get { return result.hasPluginKeyList; }
      }
      public global::mm.command.PluginKeyListType PluginKeyList {
        get { return result.PluginKeyList; }
        set { SetPluginKeyList(value); }
      }
      public Builder SetPluginKeyList(global::mm.command.PluginKeyListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPluginKeyList = true;
        result.pluginKeyList_ = value;
        return this;
      }
      public Builder SetPluginKeyList(global::mm.command.PluginKeyListType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPluginKeyList = true;
        result.pluginKeyList_ = builderForValue.Build();
        return this;
      }
      public Builder MergePluginKeyList(global::mm.command.PluginKeyListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPluginKeyList &&
            result.pluginKeyList_ != global::mm.command.PluginKeyListType.DefaultInstance) {
            result.pluginKeyList_ = global::mm.command.PluginKeyListType.CreateBuilder(result.pluginKeyList_).MergeFrom(value).BuildPartial();
        } else {
          result.pluginKeyList_ = value;
        }
        result.hasPluginKeyList = true;
        return this;
      }
      public Builder ClearPluginKeyList() {
        PrepareBuilder();
        result.hasPluginKeyList = false;
        result.pluginKeyList_ = null;
        return this;
      }
      
      public bool HasImgEncryptKey {
       get { return result.hasImgEncryptKey; }
      }
      public global::mm.command.SKBuiltinString_t ImgEncryptKey {
        get { return result.ImgEncryptKey; }
        set { SetImgEncryptKey(value); }
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = value;
        return this;
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgEncryptKey &&
            result.imgEncryptKey_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgEncryptKey_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgEncryptKey_).MergeFrom(value).BuildPartial();
        } else {
          result.imgEncryptKey_ = value;
        }
        result.hasImgEncryptKey = true;
        return this;
      }
      public Builder ClearImgEncryptKey() {
        PrepareBuilder();
        result.hasImgEncryptKey = false;
        result.imgEncryptKey_ = null;
        return this;
      }
      
      public bool HasA2Key {
       get { return result.hasA2Key; }
      }
      public global::mm.command.SKBuiltinBuffer_t A2Key {
        get { return result.A2Key; }
        set { SetA2Key(value); }
      }
      public Builder SetA2Key(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasA2Key = true;
        result.a2Key_ = value;
        return this;
      }
      public Builder SetA2Key(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasA2Key = true;
        result.a2Key_ = builderForValue.Build();
        return this;
      }
      public Builder MergeA2Key(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasA2Key &&
            result.a2Key_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.a2Key_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.a2Key_).MergeFrom(value).BuildPartial();
        } else {
          result.a2Key_ = value;
        }
        result.hasA2Key = true;
        return this;
      }
      public Builder ClearA2Key() {
        PrepareBuilder();
        result.hasA2Key = false;
        result.a2Key_ = null;
        return this;
      }
      
      public bool HasKSid {
       get { return result.hasKSid; }
      }
      public global::mm.command.SKBuiltinBuffer_t KSid {
        get { return result.KSid; }
        set { SetKSid(value); }
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = value;
        return this;
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKSid &&
            result.kSid_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.kSid_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.kSid_).MergeFrom(value).BuildPartial();
        } else {
          result.kSid_ = value;
        }
        result.hasKSid = true;
        return this;
      }
      public Builder ClearKSid() {
        PrepareBuilder();
        result.hasKSid = false;
        result.kSid_ = null;
        return this;
      }
      
      public bool HasProfileFlag {
        get { return result.hasProfileFlag; }
      }
      public int ProfileFlag {
        get { return result.ProfileFlag; }
        set { SetProfileFlag(value); }
      }
      public Builder SetProfileFlag(int value) {
        PrepareBuilder();
        result.hasProfileFlag = true;
        result.profileFlag_ = value;
        return this;
      }
      public Builder ClearProfileFlag() {
        PrepareBuilder();
        result.hasProfileFlag = false;
        result.profileFlag_ = 0;
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      public int TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      public Builder SetTimeStamp(int value) {
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = 0;
        return this;
      }
      
      public bool HasIsAutoReg {
        get { return result.hasIsAutoReg; }
      }
      public int IsAutoReg {
        get { return result.IsAutoReg; }
        set { SetIsAutoReg(value); }
      }
      public Builder SetIsAutoReg(int value) {
        PrepareBuilder();
        result.hasIsAutoReg = true;
        result.isAutoReg_ = value;
        return this;
      }
      public Builder ClearIsAutoReg() {
        PrepareBuilder();
        result.hasIsAutoReg = false;
        result.isAutoReg_ = 0;
        return this;
      }
      
      public bool HasKickResponse {
        get { return result.hasKickResponse; }
      }
      public string KickResponse {
        get { return result.KickResponse; }
        set { SetKickResponse(value); }
      }
      public Builder SetKickResponse(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKickResponse = true;
        result.kickResponse_ = value;
        return this;
      }
      public Builder ClearKickResponse() {
        PrepareBuilder();
        result.hasKickResponse = false;
        result.kickResponse_ = "";
        return this;
      }
      
      public bool HasApplyBetaUrl {
        get { return result.hasApplyBetaUrl; }
      }
      public string ApplyBetaUrl {
        get { return result.ApplyBetaUrl; }
        set { SetApplyBetaUrl(value); }
      }
      public Builder SetApplyBetaUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasApplyBetaUrl = true;
        result.applyBetaUrl_ = value;
        return this;
      }
      public Builder ClearApplyBetaUrl() {
        PrepareBuilder();
        result.hasApplyBetaUrl = false;
        result.applyBetaUrl_ = "";
        return this;
      }
      
      public bool HasDeviceInfoXml {
        get { return result.hasDeviceInfoXml; }
      }
      public string DeviceInfoXml {
        get { return result.DeviceInfoXml; }
        set { SetDeviceInfoXml(value); }
      }
      public Builder SetDeviceInfoXml(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceInfoXml = true;
        result.deviceInfoXml_ = value;
        return this;
      }
      public Builder ClearDeviceInfoXml() {
        PrepareBuilder();
        result.hasDeviceInfoXml = false;
        result.deviceInfoXml_ = "";
        return this;
      }
      
      public bool HasSoftConfigXml {
        get { return result.hasSoftConfigXml; }
      }
      public string SoftConfigXml {
        get { return result.SoftConfigXml; }
        set { SetSoftConfigXml(value); }
      }
      public Builder SetSoftConfigXml(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSoftConfigXml = true;
        result.softConfigXml_ = value;
        return this;
      }
      public Builder ClearSoftConfigXml() {
        PrepareBuilder();
        result.hasSoftConfigXml = false;
        result.softConfigXml_ = "";
        return this;
      }
      
      public bool HasNewHostList {
       get { return result.hasNewHostList; }
      }
      public global::mm.command.NewHostListType NewHostList {
        get { return result.NewHostList; }
        set { SetNewHostList(value); }
      }
      public Builder SetNewHostList(global::mm.command.NewHostListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewHostList = true;
        result.newHostList_ = value;
        return this;
      }
      public Builder SetNewHostList(global::mm.command.NewHostListType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNewHostList = true;
        result.newHostList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewHostList(global::mm.command.NewHostListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNewHostList &&
            result.newHostList_ != global::mm.command.NewHostListType.DefaultInstance) {
            result.newHostList_ = global::mm.command.NewHostListType.CreateBuilder(result.newHostList_).MergeFrom(value).BuildPartial();
        } else {
          result.newHostList_ = value;
        }
        result.hasNewHostList = true;
        return this;
      }
      public Builder ClearNewHostList() {
        PrepareBuilder();
        result.hasNewHostList = false;
        result.newHostList_ = null;
        return this;
      }
      
      public bool HasAuthTicket {
        get { return result.hasAuthTicket; }
      }
      public string AuthTicket {
        get { return result.AuthTicket; }
        set { SetAuthTicket(value); }
      }
      public Builder SetAuthTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthTicket = true;
        result.authTicket_ = value;
        return this;
      }
      public Builder ClearAuthTicket() {
        PrepareBuilder();
        result.hasAuthTicket = false;
        result.authTicket_ = "";
        return this;
      }
      
      public bool HasSafeDevice {
        get { return result.hasSafeDevice; }
      }
      public int SafeDevice {
        get { return result.SafeDevice; }
        set { SetSafeDevice(value); }
      }
      public Builder SetSafeDevice(int value) {
        PrepareBuilder();
        result.hasSafeDevice = true;
        result.safeDevice_ = value;
        return this;
      }
      public Builder ClearSafeDevice() {
        PrepareBuilder();
        result.hasSafeDevice = false;
        result.safeDevice_ = 0;
        return this;
      }
      
      public bool HasMainAcctType {
        get { return result.hasMainAcctType; }
      }
      public int MainAcctType {
        get { return result.MainAcctType; }
        set { SetMainAcctType(value); }
      }
      public Builder SetMainAcctType(int value) {
        PrepareBuilder();
        result.hasMainAcctType = true;
        result.mainAcctType_ = value;
        return this;
      }
      public Builder ClearMainAcctType() {
        PrepareBuilder();
        result.hasMainAcctType = false;
        result.mainAcctType_ = 0;
        return this;
      }
      
      public bool HasNeedSetEmailPwd {
        get { return result.hasNeedSetEmailPwd; }
      }
      public int NeedSetEmailPwd {
        get { return result.NeedSetEmailPwd; }
        set { SetNeedSetEmailPwd(value); }
      }
      public Builder SetNeedSetEmailPwd(int value) {
        PrepareBuilder();
        result.hasNeedSetEmailPwd = true;
        result.needSetEmailPwd_ = value;
        return this;
      }
      public Builder ClearNeedSetEmailPwd() {
        PrepareBuilder();
        result.hasNeedSetEmailPwd = false;
        result.needSetEmailPwd_ = 0;
        return this;
      }
      
      public bool HasHintMsg {
        get { return result.hasHintMsg; }
      }
      public string HintMsg {
        get { return result.HintMsg; }
        set { SetHintMsg(value); }
      }
      public Builder SetHintMsg(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasHintMsg = true;
        result.hintMsg_ = value;
        return this;
      }
      public Builder ClearHintMsg() {
        PrepareBuilder();
        result.hasHintMsg = false;
        result.hintMsg_ = "";
        return this;
      }
      
      public bool HasAutoAuthTicket {
        get { return result.hasAutoAuthTicket; }
      }
      public string AutoAuthTicket {
        get { return result.AutoAuthTicket; }
        set { SetAutoAuthTicket(value); }
      }
      public Builder SetAutoAuthTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAutoAuthTicket = true;
        result.autoAuthTicket_ = value;
        return this;
      }
      public Builder ClearAutoAuthTicket() {
        PrepareBuilder();
        result.hasAutoAuthTicket = false;
        result.autoAuthTicket_ = "";
        return this;
      }
      
      public bool HasDnsInfo {
       get { return result.hasDnsInfo; }
      }
      public global::mm.command.DnsInfoType DnsInfo {
        get { return result.DnsInfo; }
        set { SetDnsInfo(value); }
      }
      public Builder SetDnsInfo(global::mm.command.DnsInfoType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDnsInfo = true;
        result.dnsInfo_ = value;
        return this;
      }
      public Builder SetDnsInfo(global::mm.command.DnsInfoType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDnsInfo = true;
        result.dnsInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDnsInfo(global::mm.command.DnsInfoType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDnsInfo &&
            result.dnsInfo_ != global::mm.command.DnsInfoType.DefaultInstance) {
            result.dnsInfo_ = global::mm.command.DnsInfoType.CreateBuilder(result.dnsInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.dnsInfo_ = value;
        }
        result.hasDnsInfo = true;
        return this;
      }
      public Builder ClearDnsInfo() {
        PrepareBuilder();
        result.hasDnsInfo = false;
        result.dnsInfo_ = null;
        return this;
      }
    }
    static AuthResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewSendMsgRequest : pb::GeneratedMessage<NewSendMsgRequest, NewSendMsgRequest.Builder> {
    private NewSendMsgRequest() { }
    private static readonly NewSendMsgRequest defaultInstance = new NewSendMsgRequest().MakeReadOnly();
    private static readonly string[] _newSendMsgRequestFieldNames = new string[] { "Count", "List" };
    private static readonly uint[] _newSendMsgRequestFieldTags = new uint[] { 8, 18 };
    public static NewSendMsgRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewSendMsgRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewSendMsgRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSendMsgRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewSendMsgRequest, NewSendMsgRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSendMsgRequest__FieldAccessorTable; }
    }
    
    public const int CountFieldNumber = 1;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public const int ListFieldNumber = 2;
    private pbc::PopsicleList<global::mm.command.NewMsgRequestBody> list_ = new pbc::PopsicleList<global::mm.command.NewMsgRequestBody>();
    public scg::IList<global::mm.command.NewMsgRequestBody> ListList {
      get { return list_; }
    }
    public int ListCount {
      get { return list_.Count; }
    }
    public global::mm.command.NewMsgRequestBody GetList(int index) {
      return list_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCount) return false;
        foreach (global::mm.command.NewMsgRequestBody element in ListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newSendMsgRequestFieldNames;
      if (hasCount) {
        output.WriteInt32(1, field_names[0], Count);
      }
      if (list_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], list_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
        }
        foreach (global::mm.command.NewMsgRequestBody element in ListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewSendMsgRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSendMsgRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSendMsgRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSendMsgRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSendMsgRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSendMsgRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewSendMsgRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewSendMsgRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewSendMsgRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSendMsgRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewSendMsgRequest MakeReadOnly() {
      list_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewSendMsgRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewSendMsgRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewSendMsgRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewSendMsgRequest result;
      
      private NewSendMsgRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NewSendMsgRequest original = result;
          result = new NewSendMsgRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewSendMsgRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewSendMsgRequest.Descriptor; }
      }
      
      public override NewSendMsgRequest DefaultInstanceForType {
        get { return global::mm.command.NewSendMsgRequest.DefaultInstance; }
      }
      
      public override NewSendMsgRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewSendMsgRequest) {
          return MergeFrom((NewSendMsgRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewSendMsgRequest other) {
        if (other == global::mm.command.NewSendMsgRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.list_.Count != 0) {
          result.list_.Add(other.list_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newSendMsgRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newSendMsgRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.NewMsgRequestBody.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.NewMsgRequestBody> ListList {
        get { return PrepareBuilder().list_; }
      }
      public int ListCount {
        get { return result.ListCount; }
      }
      public global::mm.command.NewMsgRequestBody GetList(int index) {
        return result.GetList(index);
      }
      public Builder SetList(int index, global::mm.command.NewMsgRequestBody value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_[index] = value;
        return this;
      }
      public Builder SetList(int index, global::mm.command.NewMsgRequestBody.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddList(global::mm.command.NewMsgRequestBody value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_.Add(value);
        return this;
      }
      public Builder AddList(global::mm.command.NewMsgRequestBody.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeList(scg::IEnumerable<global::mm.command.NewMsgRequestBody> values) {
        PrepareBuilder();
        result.list_.Add(values);
        return this;
      }
      public Builder ClearList() {
        PrepareBuilder();
        result.list_.Clear();
        return this;
      }
    }
    static NewSendMsgRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewSendMsgResponse : pb::GeneratedMessage<NewSendMsgResponse, NewSendMsgResponse.Builder> {
    private NewSendMsgResponse() { }
    private static readonly NewSendMsgResponse defaultInstance = new NewSendMsgResponse().MakeReadOnly();
    private static readonly string[] _newSendMsgResponseFieldNames = new string[] { "Count", "List", "base" };
    private static readonly uint[] _newSendMsgResponseFieldTags = new uint[] { 16, 26, 10 };
    public static NewSendMsgResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewSendMsgResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewSendMsgResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSendMsgResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewSendMsgResponse, NewSendMsgResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSendMsgResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int CountFieldNumber = 2;
    private bool hasCount;
    private uint count_;
    public bool HasCount {
      get { return hasCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint Count {
      get { return count_; }
    }
    
    public const int ListFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.NewMsgResponseBody> list_ = new pbc::PopsicleList<global::mm.command.NewMsgResponseBody>();
    public scg::IList<global::mm.command.NewMsgResponseBody> ListList {
      get { return list_; }
    }
    public int ListCount {
      get { return list_.Count; }
    }
    public global::mm.command.NewMsgResponseBody GetList(int index) {
      return list_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.NewMsgResponseBody element in ListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newSendMsgResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasCount) {
        output.WriteUInt32(2, field_names[0], Count);
      }
      if (list_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], list_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Count);
        }
        foreach (global::mm.command.NewMsgResponseBody element in ListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewSendMsgResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSendMsgResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSendMsgResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSendMsgResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSendMsgResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSendMsgResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewSendMsgResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewSendMsgResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewSendMsgResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSendMsgResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewSendMsgResponse MakeReadOnly() {
      list_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewSendMsgResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewSendMsgResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewSendMsgResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewSendMsgResponse result;
      
      private NewSendMsgResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NewSendMsgResponse original = result;
          result = new NewSendMsgResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewSendMsgResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewSendMsgResponse.Descriptor; }
      }
      
      public override NewSendMsgResponse DefaultInstanceForType {
        get { return global::mm.command.NewSendMsgResponse.DefaultInstance; }
      }
      
      public override NewSendMsgResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewSendMsgResponse) {
          return MergeFrom((NewSendMsgResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewSendMsgResponse other) {
        if (other == global::mm.command.NewSendMsgResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.list_.Count != 0) {
          result.list_.Add(other.list_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newSendMsgResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newSendMsgResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCount = input.ReadUInt32(ref result.count_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.NewMsgResponseBody.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCount(uint value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.NewMsgResponseBody> ListList {
        get { return PrepareBuilder().list_; }
      }
      public int ListCount {
        get { return result.ListCount; }
      }
      public global::mm.command.NewMsgResponseBody GetList(int index) {
        return result.GetList(index);
      }
      public Builder SetList(int index, global::mm.command.NewMsgResponseBody value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_[index] = value;
        return this;
      }
      public Builder SetList(int index, global::mm.command.NewMsgResponseBody.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddList(global::mm.command.NewMsgResponseBody value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_.Add(value);
        return this;
      }
      public Builder AddList(global::mm.command.NewMsgResponseBody.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeList(scg::IEnumerable<global::mm.command.NewMsgResponseBody> values) {
        PrepareBuilder();
        result.list_.Add(values);
        return this;
      }
      public Builder ClearList() {
        PrepareBuilder();
        result.list_.Clear();
        return this;
      }
    }
    static NewSendMsgResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendMsgRequest : pb::GeneratedMessage<SendMsgRequest, SendMsgRequest.Builder> {
    private SendMsgRequest() { }
    private static readonly SendMsgRequest defaultInstance = new SendMsgRequest().MakeReadOnly();
    private static readonly string[] _sendMsgRequestFieldNames = new string[] { "Count", "List", "base" };
    private static readonly uint[] _sendMsgRequestFieldTags = new uint[] { 16, 26, 10 };
    public static SendMsgRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendMsgRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendMsgRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SendMsgRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendMsgRequest, SendMsgRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SendMsgRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int CountFieldNumber = 2;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public const int ListFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.MsgRequestBody> list_ = new pbc::PopsicleList<global::mm.command.MsgRequestBody>();
    public scg::IList<global::mm.command.MsgRequestBody> ListList {
      get { return list_; }
    }
    public int ListCount {
      get { return list_.Count; }
    }
    public global::mm.command.MsgRequestBody GetList(int index) {
      return list_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.MsgRequestBody element in ListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sendMsgRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasCount) {
        output.WriteInt32(2, field_names[0], Count);
      }
      if (list_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], list_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
        }
        foreach (global::mm.command.MsgRequestBody element in ListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SendMsgRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendMsgRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendMsgRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendMsgRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendMsgRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendMsgRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendMsgRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendMsgRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendMsgRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendMsgRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendMsgRequest MakeReadOnly() {
      list_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendMsgRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SendMsgRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendMsgRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendMsgRequest result;
      
      private SendMsgRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SendMsgRequest original = result;
          result = new SendMsgRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendMsgRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.SendMsgRequest.Descriptor; }
      }
      
      public override SendMsgRequest DefaultInstanceForType {
        get { return global::mm.command.SendMsgRequest.DefaultInstance; }
      }
      
      public override SendMsgRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SendMsgRequest) {
          return MergeFrom((SendMsgRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SendMsgRequest other) {
        if (other == global::mm.command.SendMsgRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.list_.Count != 0) {
          result.list_.Add(other.list_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sendMsgRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sendMsgRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.MsgRequestBody.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.MsgRequestBody> ListList {
        get { return PrepareBuilder().list_; }
      }
      public int ListCount {
        get { return result.ListCount; }
      }
      public global::mm.command.MsgRequestBody GetList(int index) {
        return result.GetList(index);
      }
      public Builder SetList(int index, global::mm.command.MsgRequestBody value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_[index] = value;
        return this;
      }
      public Builder SetList(int index, global::mm.command.MsgRequestBody.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddList(global::mm.command.MsgRequestBody value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_.Add(value);
        return this;
      }
      public Builder AddList(global::mm.command.MsgRequestBody.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeList(scg::IEnumerable<global::mm.command.MsgRequestBody> values) {
        PrepareBuilder();
        result.list_.Add(values);
        return this;
      }
      public Builder ClearList() {
        PrepareBuilder();
        result.list_.Clear();
        return this;
      }
    }
    static SendMsgRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendMsgResponse : pb::GeneratedMessage<SendMsgResponse, SendMsgResponse.Builder> {
    private SendMsgResponse() { }
    private static readonly SendMsgResponse defaultInstance = new SendMsgResponse().MakeReadOnly();
    private static readonly string[] _sendMsgResponseFieldNames = new string[] { "Count", "List", "base" };
    private static readonly uint[] _sendMsgResponseFieldTags = new uint[] { 16, 26, 10 };
    public static SendMsgResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendMsgResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendMsgResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SendMsgResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendMsgResponse, SendMsgResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SendMsgResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int CountFieldNumber = 2;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public const int ListFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.MsgResponseBody> list_ = new pbc::PopsicleList<global::mm.command.MsgResponseBody>();
    public scg::IList<global::mm.command.MsgResponseBody> ListList {
      get { return list_; }
    }
    public int ListCount {
      get { return list_.Count; }
    }
    public global::mm.command.MsgResponseBody GetList(int index) {
      return list_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.MsgResponseBody element in ListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sendMsgResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasCount) {
        output.WriteInt32(2, field_names[0], Count);
      }
      if (list_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], list_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
        }
        foreach (global::mm.command.MsgResponseBody element in ListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SendMsgResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendMsgResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendMsgResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendMsgResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendMsgResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendMsgResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendMsgResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendMsgResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendMsgResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendMsgResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendMsgResponse MakeReadOnly() {
      list_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendMsgResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SendMsgResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendMsgResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendMsgResponse result;
      
      private SendMsgResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          SendMsgResponse original = result;
          result = new SendMsgResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendMsgResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.SendMsgResponse.Descriptor; }
      }
      
      public override SendMsgResponse DefaultInstanceForType {
        get { return global::mm.command.SendMsgResponse.DefaultInstance; }
      }
      
      public override SendMsgResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SendMsgResponse) {
          return MergeFrom((SendMsgResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SendMsgResponse other) {
        if (other == global::mm.command.SendMsgResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.list_.Count != 0) {
          result.list_.Add(other.list_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sendMsgResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sendMsgResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.MsgResponseBody.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.MsgResponseBody> ListList {
        get { return PrepareBuilder().list_; }
      }
      public int ListCount {
        get { return result.ListCount; }
      }
      public global::mm.command.MsgResponseBody GetList(int index) {
        return result.GetList(index);
      }
      public Builder SetList(int index, global::mm.command.MsgResponseBody value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_[index] = value;
        return this;
      }
      public Builder SetList(int index, global::mm.command.MsgResponseBody.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddList(global::mm.command.MsgResponseBody value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_.Add(value);
        return this;
      }
      public Builder AddList(global::mm.command.MsgResponseBody.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeList(scg::IEnumerable<global::mm.command.MsgResponseBody> values) {
        PrepareBuilder();
        result.list_.Add(values);
        return this;
      }
      public Builder ClearList() {
        PrepareBuilder();
        result.list_.Clear();
        return this;
      }
    }
    static SendMsgResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OplogRequest : pb::GeneratedMessage<OplogRequest, OplogRequest.Builder> {
    private OplogRequest() { }
    private static readonly OplogRequest defaultInstance = new OplogRequest().MakeReadOnly();
    private static readonly string[] _oplogRequestFieldNames = new string[] { "Oplog" };
    private static readonly uint[] _oplogRequestFieldTags = new uint[] { 10 };
    public static OplogRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OplogRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OplogRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_OplogRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OplogRequest, OplogRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_OplogRequest__FieldAccessorTable; }
    }
    
    public const int OplogFieldNumber = 1;
    private bool hasOplog;
    private global::mm.command.CmdList oplog_;
    public bool HasOplog {
      get { return hasOplog; }
    }
    public global::mm.command.CmdList Oplog {
      get { return oplog_ ?? global::mm.command.CmdList.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOplog) return false;
        if (!Oplog.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _oplogRequestFieldNames;
      if (hasOplog) {
        output.WriteMessage(1, field_names[0], Oplog);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOplog) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Oplog);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OplogRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OplogRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OplogRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OplogRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OplogRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OplogRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OplogRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OplogRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OplogRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OplogRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OplogRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OplogRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<OplogRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OplogRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OplogRequest result;
      
      private OplogRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          OplogRequest original = result;
          result = new OplogRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OplogRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.OplogRequest.Descriptor; }
      }
      
      public override OplogRequest DefaultInstanceForType {
        get { return global::mm.command.OplogRequest.DefaultInstance; }
      }
      
      public override OplogRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OplogRequest) {
          return MergeFrom((OplogRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OplogRequest other) {
        if (other == global::mm.command.OplogRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOplog) {
          MergeOplog(other.Oplog);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_oplogRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _oplogRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.CmdList.Builder subBuilder = global::mm.command.CmdList.CreateBuilder();
              if (result.hasOplog) {
                subBuilder.MergeFrom(Oplog);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Oplog = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOplog {
       get { return result.hasOplog; }
      }
      public global::mm.command.CmdList Oplog {
        get { return result.Oplog; }
        set { SetOplog(value); }
      }
      public Builder SetOplog(global::mm.command.CmdList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOplog = true;
        result.oplog_ = value;
        return this;
      }
      public Builder SetOplog(global::mm.command.CmdList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOplog = true;
        result.oplog_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOplog(global::mm.command.CmdList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOplog &&
            result.oplog_ != global::mm.command.CmdList.DefaultInstance) {
            result.oplog_ = global::mm.command.CmdList.CreateBuilder(result.oplog_).MergeFrom(value).BuildPartial();
        } else {
          result.oplog_ = value;
        }
        result.hasOplog = true;
        return this;
      }
      public Builder ClearOplog() {
        PrepareBuilder();
        result.hasOplog = false;
        result.oplog_ = null;
        return this;
      }
    }
    static OplogRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OplogResponse : pb::GeneratedMessage<OplogResponse, OplogResponse.Builder> {
    private OplogResponse() { }
    private static readonly OplogResponse defaultInstance = new OplogResponse().MakeReadOnly();
    private static readonly string[] _oplogResponseFieldNames = new string[] { "ret" };
    private static readonly uint[] _oplogResponseFieldTags = new uint[] { 8 };
    public static OplogResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OplogResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OplogResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_OplogResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OplogResponse, OplogResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_OplogResponse__FieldAccessorTable; }
    }
    
    public const int RetFieldNumber = 1;
    private bool hasRet;
    private int ret_;
    public bool HasRet {
      get { return hasRet; }
    }
    public int Ret {
      get { return ret_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRet) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _oplogResponseFieldNames;
      if (hasRet) {
        output.WriteInt32(1, field_names[0], Ret);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRet) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Ret);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OplogResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OplogResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OplogResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OplogResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OplogResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OplogResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OplogResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OplogResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OplogResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OplogResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OplogResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OplogResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<OplogResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OplogResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OplogResponse result;
      
      private OplogResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          OplogResponse original = result;
          result = new OplogResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OplogResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.OplogResponse.Descriptor; }
      }
      
      public override OplogResponse DefaultInstanceForType {
        get { return global::mm.command.OplogResponse.DefaultInstance; }
      }
      
      public override OplogResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OplogResponse) {
          return MergeFrom((OplogResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OplogResponse other) {
        if (other == global::mm.command.OplogResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRet) {
          Ret = other.Ret;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_oplogResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _oplogResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRet = input.ReadInt32(ref result.ret_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRet {
        get { return result.hasRet; }
      }
      public int Ret {
        get { return result.Ret; }
        set { SetRet(value); }
      }
      public Builder SetRet(int value) {
        PrepareBuilder();
        result.hasRet = true;
        result.ret_ = value;
        return this;
      }
      public Builder ClearRet() {
        PrepareBuilder();
        result.hasRet = false;
        result.ret_ = 0;
        return this;
      }
    }
    static OplogResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewSyncRequest : pb::GeneratedMessage<NewSyncRequest, NewSyncRequest.Builder> {
    private NewSyncRequest() { }
    private static readonly NewSyncRequest defaultInstance = new NewSyncRequest().MakeReadOnly();
    private static readonly string[] _newSyncRequestFieldNames = new string[] { "DeviceType", "KeyBuf", "Oplog", "Scene", "Selector", "syncMsgDigest" };
    private static readonly uint[] _newSyncRequestFieldTags = new uint[] { 42, 26, 10, 32, 16, 48 };
    public static NewSyncRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewSyncRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewSyncRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSyncRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewSyncRequest, NewSyncRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSyncRequest__FieldAccessorTable; }
    }
    
    public const int OplogFieldNumber = 1;
    private bool hasOplog;
    private global::mm.command.CmdList oplog_;
    public bool HasOplog {
      get { return hasOplog; }
    }
    public global::mm.command.CmdList Oplog {
      get { return oplog_ ?? global::mm.command.CmdList.DefaultInstance; }
    }
    
    public const int SelectorFieldNumber = 2;
    private bool hasSelector;
    private int selector_;
    public bool HasSelector {
      get { return hasSelector; }
    }
    public int Selector {
      get { return selector_; }
    }
    
    public const int KeyBufFieldNumber = 3;
    private bool hasKeyBuf;
    private global::mm.command.SKBuiltinBuffer_t keyBuf_;
    public bool HasKeyBuf {
      get { return hasKeyBuf; }
    }
    public global::mm.command.SKBuiltinBuffer_t KeyBuf {
      get { return keyBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int SceneFieldNumber = 4;
    private bool hasScene;
    private int scene_;
    public bool HasScene {
      get { return hasScene; }
    }
    public int Scene {
      get { return scene_; }
    }
    
    public const int DeviceTypeFieldNumber = 5;
    private bool hasDeviceType;
    private string deviceType_ = "";
    public bool HasDeviceType {
      get { return hasDeviceType; }
    }
    public string DeviceType {
      get { return deviceType_; }
    }
    
    public const int SyncMsgDigestFieldNumber = 6;
    private bool hasSyncMsgDigest;
    private uint syncMsgDigest_;
    public bool HasSyncMsgDigest {
      get { return hasSyncMsgDigest; }
    }
    [global::System.CLSCompliant(false)]
    public uint SyncMsgDigest {
      get { return syncMsgDigest_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOplog) return false;
        if (!hasSelector) return false;
        if (!hasKeyBuf) return false;
        if (!Oplog.IsInitialized) return false;
        if (!KeyBuf.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newSyncRequestFieldNames;
      if (hasOplog) {
        output.WriteMessage(1, field_names[2], Oplog);
      }
      if (hasSelector) {
        output.WriteInt32(2, field_names[4], Selector);
      }
      if (hasKeyBuf) {
        output.WriteMessage(3, field_names[1], KeyBuf);
      }
      if (hasScene) {
        output.WriteInt32(4, field_names[3], Scene);
      }
      if (hasDeviceType) {
        output.WriteString(5, field_names[0], DeviceType);
      }
      if (hasSyncMsgDigest) {
        output.WriteUInt32(6, field_names[5], SyncMsgDigest);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasOplog) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Oplog);
        }
        if (hasSelector) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Selector);
        }
        if (hasKeyBuf) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, KeyBuf);
        }
        if (hasScene) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Scene);
        }
        if (hasDeviceType) {
          size += pb::CodedOutputStream.ComputeStringSize(5, DeviceType);
        }
        if (hasSyncMsgDigest) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, SyncMsgDigest);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewSyncRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSyncRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSyncRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSyncRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSyncRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSyncRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewSyncRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewSyncRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewSyncRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSyncRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewSyncRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewSyncRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewSyncRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewSyncRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewSyncRequest result;
      
      private NewSyncRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NewSyncRequest original = result;
          result = new NewSyncRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewSyncRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewSyncRequest.Descriptor; }
      }
      
      public override NewSyncRequest DefaultInstanceForType {
        get { return global::mm.command.NewSyncRequest.DefaultInstance; }
      }
      
      public override NewSyncRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewSyncRequest) {
          return MergeFrom((NewSyncRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewSyncRequest other) {
        if (other == global::mm.command.NewSyncRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasOplog) {
          MergeOplog(other.Oplog);
        }
        if (other.HasSelector) {
          Selector = other.Selector;
        }
        if (other.HasKeyBuf) {
          MergeKeyBuf(other.KeyBuf);
        }
        if (other.HasScene) {
          Scene = other.Scene;
        }
        if (other.HasDeviceType) {
          DeviceType = other.DeviceType;
        }
        if (other.HasSyncMsgDigest) {
          SyncMsgDigest = other.SyncMsgDigest;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newSyncRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newSyncRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.CmdList.Builder subBuilder = global::mm.command.CmdList.CreateBuilder();
              if (result.hasOplog) {
                subBuilder.MergeFrom(Oplog);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Oplog = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasSelector = input.ReadInt32(ref result.selector_);
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasKeyBuf) {
                subBuilder.MergeFrom(KeyBuf);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KeyBuf = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasScene = input.ReadInt32(ref result.scene_);
              break;
            }
            case 42: {
              result.hasDeviceType = input.ReadString(ref result.deviceType_);
              break;
            }
            case 48: {
              result.hasSyncMsgDigest = input.ReadUInt32(ref result.syncMsgDigest_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasOplog {
       get { return result.hasOplog; }
      }
      public global::mm.command.CmdList Oplog {
        get { return result.Oplog; }
        set { SetOplog(value); }
      }
      public Builder SetOplog(global::mm.command.CmdList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOplog = true;
        result.oplog_ = value;
        return this;
      }
      public Builder SetOplog(global::mm.command.CmdList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOplog = true;
        result.oplog_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOplog(global::mm.command.CmdList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOplog &&
            result.oplog_ != global::mm.command.CmdList.DefaultInstance) {
            result.oplog_ = global::mm.command.CmdList.CreateBuilder(result.oplog_).MergeFrom(value).BuildPartial();
        } else {
          result.oplog_ = value;
        }
        result.hasOplog = true;
        return this;
      }
      public Builder ClearOplog() {
        PrepareBuilder();
        result.hasOplog = false;
        result.oplog_ = null;
        return this;
      }
      
      public bool HasSelector {
        get { return result.hasSelector; }
      }
      public int Selector {
        get { return result.Selector; }
        set { SetSelector(value); }
      }
      public Builder SetSelector(int value) {
        PrepareBuilder();
        result.hasSelector = true;
        result.selector_ = value;
        return this;
      }
      public Builder ClearSelector() {
        PrepareBuilder();
        result.hasSelector = false;
        result.selector_ = 0;
        return this;
      }
      
      public bool HasKeyBuf {
       get { return result.hasKeyBuf; }
      }
      public global::mm.command.SKBuiltinBuffer_t KeyBuf {
        get { return result.KeyBuf; }
        set { SetKeyBuf(value); }
      }
      public Builder SetKeyBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKeyBuf = true;
        result.keyBuf_ = value;
        return this;
      }
      public Builder SetKeyBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKeyBuf = true;
        result.keyBuf_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKeyBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKeyBuf &&
            result.keyBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.keyBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.keyBuf_).MergeFrom(value).BuildPartial();
        } else {
          result.keyBuf_ = value;
        }
        result.hasKeyBuf = true;
        return this;
      }
      public Builder ClearKeyBuf() {
        PrepareBuilder();
        result.hasKeyBuf = false;
        result.keyBuf_ = null;
        return this;
      }
      
      public bool HasScene {
        get { return result.hasScene; }
      }
      public int Scene {
        get { return result.Scene; }
        set { SetScene(value); }
      }
      public Builder SetScene(int value) {
        PrepareBuilder();
        result.hasScene = true;
        result.scene_ = value;
        return this;
      }
      public Builder ClearScene() {
        PrepareBuilder();
        result.hasScene = false;
        result.scene_ = 0;
        return this;
      }
      
      public bool HasDeviceType {
        get { return result.hasDeviceType; }
      }
      public string DeviceType {
        get { return result.DeviceType; }
        set { SetDeviceType(value); }
      }
      public Builder SetDeviceType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceType = true;
        result.deviceType_ = value;
        return this;
      }
      public Builder ClearDeviceType() {
        PrepareBuilder();
        result.hasDeviceType = false;
        result.deviceType_ = "";
        return this;
      }
      
      public bool HasSyncMsgDigest {
        get { return result.hasSyncMsgDigest; }
      }
      [global::System.CLSCompliant(false)]
      public uint SyncMsgDigest {
        get { return result.SyncMsgDigest; }
        set { SetSyncMsgDigest(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSyncMsgDigest(uint value) {
        PrepareBuilder();
        result.hasSyncMsgDigest = true;
        result.syncMsgDigest_ = value;
        return this;
      }
      public Builder ClearSyncMsgDigest() {
        PrepareBuilder();
        result.hasSyncMsgDigest = false;
        result.syncMsgDigest_ = 0;
        return this;
      }
    }
    static NewSyncRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewSyncResponse : pb::GeneratedMessage<NewSyncResponse, NewSyncResponse.Builder> {
    private NewSyncResponse() { }
    private static readonly NewSyncResponse defaultInstance = new NewSyncResponse().MakeReadOnly();
    private static readonly string[] _newSyncResponseFieldNames = new string[] { "CmdList", "ContinueFlag", "KeyBuf", "OnlineVersion", "Ret", "Status", "SvrTime" };
    private static readonly uint[] _newSyncResponseFieldTags = new uint[] { 18, 24, 34, 48, 8, 40, 56 };
    public static NewSyncResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewSyncResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewSyncResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSyncResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewSyncResponse, NewSyncResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSyncResponse__FieldAccessorTable; }
    }
    
    public const int RetFieldNumber = 1;
    private bool hasRet;
    private int ret_;
    public bool HasRet {
      get { return hasRet; }
    }
    public int Ret {
      get { return ret_; }
    }
    
    public const int CmdListFieldNumber = 2;
    private bool hasCmdList;
    private global::mm.command.CmdList cmdList_;
    public bool HasCmdList {
      get { return hasCmdList; }
    }
    public global::mm.command.CmdList CmdList {
      get { return cmdList_ ?? global::mm.command.CmdList.DefaultInstance; }
    }
    
    public const int ContinueFlagFieldNumber = 3;
    private bool hasContinueFlag;
    private uint continueFlag_;
    public bool HasContinueFlag {
      get { return hasContinueFlag; }
    }
    [global::System.CLSCompliant(false)]
    public uint ContinueFlag {
      get { return continueFlag_; }
    }
    
    public const int KeyBufFieldNumber = 4;
    private bool hasKeyBuf;
    private global::mm.command.SKBuiltinBuffer_t keyBuf_;
    public bool HasKeyBuf {
      get { return hasKeyBuf; }
    }
    public global::mm.command.SKBuiltinBuffer_t KeyBuf {
      get { return keyBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int StatusFieldNumber = 5;
    private bool hasStatus;
    private uint status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    [global::System.CLSCompliant(false)]
    public uint Status {
      get { return status_; }
    }
    
    public const int OnlineVersionFieldNumber = 6;
    private bool hasOnlineVersion;
    private uint onlineVersion_;
    public bool HasOnlineVersion {
      get { return hasOnlineVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint OnlineVersion {
      get { return onlineVersion_; }
    }
    
    public const int SvrTimeFieldNumber = 7;
    private bool hasSvrTime;
    private uint svrTime_;
    public bool HasSvrTime {
      get { return hasSvrTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint SvrTime {
      get { return svrTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRet) return false;
        if (!hasCmdList) return false;
        if (!hasContinueFlag) return false;
        if (!hasKeyBuf) return false;
        if (!CmdList.IsInitialized) return false;
        if (!KeyBuf.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newSyncResponseFieldNames;
      if (hasRet) {
        output.WriteInt32(1, field_names[4], Ret);
      }
      if (hasCmdList) {
        output.WriteMessage(2, field_names[0], CmdList);
      }
      if (hasContinueFlag) {
        output.WriteUInt32(3, field_names[1], ContinueFlag);
      }
      if (hasKeyBuf) {
        output.WriteMessage(4, field_names[2], KeyBuf);
      }
      if (hasStatus) {
        output.WriteUInt32(5, field_names[5], Status);
      }
      if (hasOnlineVersion) {
        output.WriteUInt32(6, field_names[3], OnlineVersion);
      }
      if (hasSvrTime) {
        output.WriteUInt32(7, field_names[6], SvrTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRet) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Ret);
        }
        if (hasCmdList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, CmdList);
        }
        if (hasContinueFlag) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, ContinueFlag);
        }
        if (hasKeyBuf) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, KeyBuf);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, Status);
        }
        if (hasOnlineVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, OnlineVersion);
        }
        if (hasSvrTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, SvrTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewSyncResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSyncResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSyncResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSyncResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSyncResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSyncResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewSyncResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewSyncResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewSyncResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSyncResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewSyncResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewSyncResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewSyncResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewSyncResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewSyncResponse result;
      
      private NewSyncResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NewSyncResponse original = result;
          result = new NewSyncResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewSyncResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewSyncResponse.Descriptor; }
      }
      
      public override NewSyncResponse DefaultInstanceForType {
        get { return global::mm.command.NewSyncResponse.DefaultInstance; }
      }
      
      public override NewSyncResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewSyncResponse) {
          return MergeFrom((NewSyncResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewSyncResponse other) {
        if (other == global::mm.command.NewSyncResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRet) {
          Ret = other.Ret;
        }
        if (other.HasCmdList) {
          MergeCmdList(other.CmdList);
        }
        if (other.HasContinueFlag) {
          ContinueFlag = other.ContinueFlag;
        }
        if (other.HasKeyBuf) {
          MergeKeyBuf(other.KeyBuf);
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasOnlineVersion) {
          OnlineVersion = other.OnlineVersion;
        }
        if (other.HasSvrTime) {
          SvrTime = other.SvrTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newSyncResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newSyncResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRet = input.ReadInt32(ref result.ret_);
              break;
            }
            case 18: {
              global::mm.command.CmdList.Builder subBuilder = global::mm.command.CmdList.CreateBuilder();
              if (result.hasCmdList) {
                subBuilder.MergeFrom(CmdList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CmdList = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasContinueFlag = input.ReadUInt32(ref result.continueFlag_);
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasKeyBuf) {
                subBuilder.MergeFrom(KeyBuf);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KeyBuf = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasStatus = input.ReadUInt32(ref result.status_);
              break;
            }
            case 48: {
              result.hasOnlineVersion = input.ReadUInt32(ref result.onlineVersion_);
              break;
            }
            case 56: {
              result.hasSvrTime = input.ReadUInt32(ref result.svrTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRet {
        get { return result.hasRet; }
      }
      public int Ret {
        get { return result.Ret; }
        set { SetRet(value); }
      }
      public Builder SetRet(int value) {
        PrepareBuilder();
        result.hasRet = true;
        result.ret_ = value;
        return this;
      }
      public Builder ClearRet() {
        PrepareBuilder();
        result.hasRet = false;
        result.ret_ = 0;
        return this;
      }
      
      public bool HasCmdList {
       get { return result.hasCmdList; }
      }
      public global::mm.command.CmdList CmdList {
        get { return result.CmdList; }
        set { SetCmdList(value); }
      }
      public Builder SetCmdList(global::mm.command.CmdList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCmdList = true;
        result.cmdList_ = value;
        return this;
      }
      public Builder SetCmdList(global::mm.command.CmdList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCmdList = true;
        result.cmdList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCmdList(global::mm.command.CmdList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCmdList &&
            result.cmdList_ != global::mm.command.CmdList.DefaultInstance) {
            result.cmdList_ = global::mm.command.CmdList.CreateBuilder(result.cmdList_).MergeFrom(value).BuildPartial();
        } else {
          result.cmdList_ = value;
        }
        result.hasCmdList = true;
        return this;
      }
      public Builder ClearCmdList() {
        PrepareBuilder();
        result.hasCmdList = false;
        result.cmdList_ = null;
        return this;
      }
      
      public bool HasContinueFlag {
        get { return result.hasContinueFlag; }
      }
      [global::System.CLSCompliant(false)]
      public uint ContinueFlag {
        get { return result.ContinueFlag; }
        set { SetContinueFlag(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetContinueFlag(uint value) {
        PrepareBuilder();
        result.hasContinueFlag = true;
        result.continueFlag_ = value;
        return this;
      }
      public Builder ClearContinueFlag() {
        PrepareBuilder();
        result.hasContinueFlag = false;
        result.continueFlag_ = 0;
        return this;
      }
      
      public bool HasKeyBuf {
       get { return result.hasKeyBuf; }
      }
      public global::mm.command.SKBuiltinBuffer_t KeyBuf {
        get { return result.KeyBuf; }
        set { SetKeyBuf(value); }
      }
      public Builder SetKeyBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKeyBuf = true;
        result.keyBuf_ = value;
        return this;
      }
      public Builder SetKeyBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKeyBuf = true;
        result.keyBuf_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKeyBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKeyBuf &&
            result.keyBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.keyBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.keyBuf_).MergeFrom(value).BuildPartial();
        } else {
          result.keyBuf_ = value;
        }
        result.hasKeyBuf = true;
        return this;
      }
      public Builder ClearKeyBuf() {
        PrepareBuilder();
        result.hasKeyBuf = false;
        result.keyBuf_ = null;
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      [global::System.CLSCompliant(false)]
      public uint Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStatus(uint value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasOnlineVersion {
        get { return result.hasOnlineVersion; }
      }
      [global::System.CLSCompliant(false)]
      public uint OnlineVersion {
        get { return result.OnlineVersion; }
        set { SetOnlineVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOnlineVersion(uint value) {
        PrepareBuilder();
        result.hasOnlineVersion = true;
        result.onlineVersion_ = value;
        return this;
      }
      public Builder ClearOnlineVersion() {
        PrepareBuilder();
        result.hasOnlineVersion = false;
        result.onlineVersion_ = 0;
        return this;
      }
      
      public bool HasSvrTime {
        get { return result.hasSvrTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint SvrTime {
        get { return result.SvrTime; }
        set { SetSvrTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSvrTime(uint value) {
        PrepareBuilder();
        result.hasSvrTime = true;
        result.svrTime_ = value;
        return this;
      }
      public Builder ClearSvrTime() {
        PrepareBuilder();
        result.hasSvrTime = false;
        result.svrTime_ = 0;
        return this;
      }
    }
    static NewSyncResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MMSnsSyncRequest : pb::GeneratedMessage<MMSnsSyncRequest, MMSnsSyncRequest.Builder> {
    private MMSnsSyncRequest() { }
    private static readonly MMSnsSyncRequest defaultInstance = new MMSnsSyncRequest().MakeReadOnly();
    private static readonly string[] _mMSnsSyncRequestFieldNames = new string[] { "KeyBuf", "Selector", "base" };
    private static readonly uint[] _mMSnsSyncRequestFieldTags = new uint[] { 26, 16, 10 };
    public static MMSnsSyncRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MMSnsSyncRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MMSnsSyncRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MMSnsSyncRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MMSnsSyncRequest, MMSnsSyncRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MMSnsSyncRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int SelectorFieldNumber = 2;
    private bool hasSelector;
    private int selector_;
    public bool HasSelector {
      get { return hasSelector; }
    }
    public int Selector {
      get { return selector_; }
    }
    
    public const int KeyBufFieldNumber = 3;
    private bool hasKeyBuf;
    private global::mm.command.SKBuiltinBuffer_t keyBuf_;
    public bool HasKeyBuf {
      get { return hasKeyBuf; }
    }
    public global::mm.command.SKBuiltinBuffer_t KeyBuf {
      get { return keyBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasSelector) return false;
        if (!hasKeyBuf) return false;
        if (!Base.IsInitialized) return false;
        if (!KeyBuf.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mMSnsSyncRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasSelector) {
        output.WriteInt32(2, field_names[1], Selector);
      }
      if (hasKeyBuf) {
        output.WriteMessage(3, field_names[0], KeyBuf);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasSelector) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Selector);
        }
        if (hasKeyBuf) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, KeyBuf);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MMSnsSyncRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMSnsSyncRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMSnsSyncRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMSnsSyncRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMSnsSyncRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMSnsSyncRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MMSnsSyncRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MMSnsSyncRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MMSnsSyncRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMSnsSyncRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MMSnsSyncRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MMSnsSyncRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MMSnsSyncRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MMSnsSyncRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MMSnsSyncRequest result;
      
      private MMSnsSyncRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          MMSnsSyncRequest original = result;
          result = new MMSnsSyncRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MMSnsSyncRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.MMSnsSyncRequest.Descriptor; }
      }
      
      public override MMSnsSyncRequest DefaultInstanceForType {
        get { return global::mm.command.MMSnsSyncRequest.DefaultInstance; }
      }
      
      public override MMSnsSyncRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MMSnsSyncRequest) {
          return MergeFrom((MMSnsSyncRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MMSnsSyncRequest other) {
        if (other == global::mm.command.MMSnsSyncRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasSelector) {
          Selector = other.Selector;
        }
        if (other.HasKeyBuf) {
          MergeKeyBuf(other.KeyBuf);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mMSnsSyncRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mMSnsSyncRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasSelector = input.ReadInt32(ref result.selector_);
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasKeyBuf) {
                subBuilder.MergeFrom(KeyBuf);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KeyBuf = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasSelector {
        get { return result.hasSelector; }
      }
      public int Selector {
        get { return result.Selector; }
        set { SetSelector(value); }
      }
      public Builder SetSelector(int value) {
        PrepareBuilder();
        result.hasSelector = true;
        result.selector_ = value;
        return this;
      }
      public Builder ClearSelector() {
        PrepareBuilder();
        result.hasSelector = false;
        result.selector_ = 0;
        return this;
      }
      
      public bool HasKeyBuf {
       get { return result.hasKeyBuf; }
      }
      public global::mm.command.SKBuiltinBuffer_t KeyBuf {
        get { return result.KeyBuf; }
        set { SetKeyBuf(value); }
      }
      public Builder SetKeyBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKeyBuf = true;
        result.keyBuf_ = value;
        return this;
      }
      public Builder SetKeyBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKeyBuf = true;
        result.keyBuf_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKeyBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKeyBuf &&
            result.keyBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.keyBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.keyBuf_).MergeFrom(value).BuildPartial();
        } else {
          result.keyBuf_ = value;
        }
        result.hasKeyBuf = true;
        return this;
      }
      public Builder ClearKeyBuf() {
        PrepareBuilder();
        result.hasKeyBuf = false;
        result.keyBuf_ = null;
        return this;
      }
    }
    static MMSnsSyncRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MMSnsSyncResponse : pb::GeneratedMessage<MMSnsSyncResponse, MMSnsSyncResponse.Builder> {
    private MMSnsSyncResponse() { }
    private static readonly MMSnsSyncResponse defaultInstance = new MMSnsSyncResponse().MakeReadOnly();
    private static readonly string[] _mMSnsSyncResponseFieldNames = new string[] { "CmdList", "ContinueFlag", "KeyBuf", "base" };
    private static readonly uint[] _mMSnsSyncResponseFieldTags = new uint[] { 18, 24, 34, 10 };
    public static MMSnsSyncResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MMSnsSyncResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MMSnsSyncResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MMSnsSyncResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MMSnsSyncResponse, MMSnsSyncResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MMSnsSyncResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int CmdListFieldNumber = 2;
    private bool hasCmdList;
    private global::mm.command.CmdList cmdList_;
    public bool HasCmdList {
      get { return hasCmdList; }
    }
    public global::mm.command.CmdList CmdList {
      get { return cmdList_ ?? global::mm.command.CmdList.DefaultInstance; }
    }
    
    public const int ContinueFlagFieldNumber = 3;
    private bool hasContinueFlag;
    private int continueFlag_;
    public bool HasContinueFlag {
      get { return hasContinueFlag; }
    }
    public int ContinueFlag {
      get { return continueFlag_; }
    }
    
    public const int KeyBufFieldNumber = 4;
    private bool hasKeyBuf;
    private global::mm.command.SKBuiltinBuffer_t keyBuf_;
    public bool HasKeyBuf {
      get { return hasKeyBuf; }
    }
    public global::mm.command.SKBuiltinBuffer_t KeyBuf {
      get { return keyBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasCmdList) return false;
        if (!hasContinueFlag) return false;
        if (!hasKeyBuf) return false;
        if (!Base.IsInitialized) return false;
        if (!CmdList.IsInitialized) return false;
        if (!KeyBuf.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mMSnsSyncResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasCmdList) {
        output.WriteMessage(2, field_names[0], CmdList);
      }
      if (hasContinueFlag) {
        output.WriteInt32(3, field_names[1], ContinueFlag);
      }
      if (hasKeyBuf) {
        output.WriteMessage(4, field_names[2], KeyBuf);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasCmdList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, CmdList);
        }
        if (hasContinueFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ContinueFlag);
        }
        if (hasKeyBuf) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, KeyBuf);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MMSnsSyncResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMSnsSyncResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMSnsSyncResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMSnsSyncResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMSnsSyncResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMSnsSyncResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MMSnsSyncResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MMSnsSyncResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MMSnsSyncResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMSnsSyncResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MMSnsSyncResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MMSnsSyncResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MMSnsSyncResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MMSnsSyncResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MMSnsSyncResponse result;
      
      private MMSnsSyncResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          MMSnsSyncResponse original = result;
          result = new MMSnsSyncResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MMSnsSyncResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.MMSnsSyncResponse.Descriptor; }
      }
      
      public override MMSnsSyncResponse DefaultInstanceForType {
        get { return global::mm.command.MMSnsSyncResponse.DefaultInstance; }
      }
      
      public override MMSnsSyncResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MMSnsSyncResponse) {
          return MergeFrom((MMSnsSyncResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MMSnsSyncResponse other) {
        if (other == global::mm.command.MMSnsSyncResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCmdList) {
          MergeCmdList(other.CmdList);
        }
        if (other.HasContinueFlag) {
          ContinueFlag = other.ContinueFlag;
        }
        if (other.HasKeyBuf) {
          MergeKeyBuf(other.KeyBuf);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mMSnsSyncResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mMSnsSyncResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.CmdList.Builder subBuilder = global::mm.command.CmdList.CreateBuilder();
              if (result.hasCmdList) {
                subBuilder.MergeFrom(CmdList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CmdList = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasContinueFlag = input.ReadInt32(ref result.continueFlag_);
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasKeyBuf) {
                subBuilder.MergeFrom(KeyBuf);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KeyBuf = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCmdList {
       get { return result.hasCmdList; }
      }
      public global::mm.command.CmdList CmdList {
        get { return result.CmdList; }
        set { SetCmdList(value); }
      }
      public Builder SetCmdList(global::mm.command.CmdList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCmdList = true;
        result.cmdList_ = value;
        return this;
      }
      public Builder SetCmdList(global::mm.command.CmdList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCmdList = true;
        result.cmdList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCmdList(global::mm.command.CmdList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCmdList &&
            result.cmdList_ != global::mm.command.CmdList.DefaultInstance) {
            result.cmdList_ = global::mm.command.CmdList.CreateBuilder(result.cmdList_).MergeFrom(value).BuildPartial();
        } else {
          result.cmdList_ = value;
        }
        result.hasCmdList = true;
        return this;
      }
      public Builder ClearCmdList() {
        PrepareBuilder();
        result.hasCmdList = false;
        result.cmdList_ = null;
        return this;
      }
      
      public bool HasContinueFlag {
        get { return result.hasContinueFlag; }
      }
      public int ContinueFlag {
        get { return result.ContinueFlag; }
        set { SetContinueFlag(value); }
      }
      public Builder SetContinueFlag(int value) {
        PrepareBuilder();
        result.hasContinueFlag = true;
        result.continueFlag_ = value;
        return this;
      }
      public Builder ClearContinueFlag() {
        PrepareBuilder();
        result.hasContinueFlag = false;
        result.continueFlag_ = 0;
        return this;
      }
      
      public bool HasKeyBuf {
       get { return result.hasKeyBuf; }
      }
      public global::mm.command.SKBuiltinBuffer_t KeyBuf {
        get { return result.KeyBuf; }
        set { SetKeyBuf(value); }
      }
      public Builder SetKeyBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKeyBuf = true;
        result.keyBuf_ = value;
        return this;
      }
      public Builder SetKeyBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKeyBuf = true;
        result.keyBuf_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKeyBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKeyBuf &&
            result.keyBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.keyBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.keyBuf_).MergeFrom(value).BuildPartial();
        } else {
          result.keyBuf_ = value;
        }
        result.hasKeyBuf = true;
        return this;
      }
      public Builder ClearKeyBuf() {
        PrepareBuilder();
        result.hasKeyBuf = false;
        result.keyBuf_ = null;
        return this;
      }
    }
    static MMSnsSyncResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LBSFindRequest : pb::GeneratedMessage<LBSFindRequest, LBSFindRequest.Builder> {
    private LBSFindRequest() { }
    private static readonly LBSFindRequest defaultInstance = new LBSFindRequest().MakeReadOnly();
    private static readonly string[] _lBSFindRequestFieldNames = new string[] { "CellId", "GPSSource", "Latitude", "Longitude", "MacAddr", "OpCode", "Precision", "base" };
    private static readonly uint[] _lBSFindRequestFieldTags = new uint[] { 58, 64, 37, 29, 50, 16, 40, 10 };
    public static LBSFindRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LBSFindRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LBSFindRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LBSFindRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LBSFindRequest, LBSFindRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LBSFindRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int OpCodeFieldNumber = 2;
    private bool hasOpCode;
    private int opCode_;
    public bool HasOpCode {
      get { return hasOpCode; }
    }
    public int OpCode {
      get { return opCode_; }
    }
    
    public const int LongitudeFieldNumber = 3;
    private bool hasLongitude;
    private float longitude_;
    public bool HasLongitude {
      get { return hasLongitude; }
    }
    public float Longitude {
      get { return longitude_; }
    }
    
    public const int LatitudeFieldNumber = 4;
    private bool hasLatitude;
    private float latitude_;
    public bool HasLatitude {
      get { return hasLatitude; }
    }
    public float Latitude {
      get { return latitude_; }
    }
    
    public const int PrecisionFieldNumber = 5;
    private bool hasPrecision;
    private int precision_;
    public bool HasPrecision {
      get { return hasPrecision; }
    }
    public int Precision {
      get { return precision_; }
    }
    
    public const int MacAddrFieldNumber = 6;
    private bool hasMacAddr;
    private string macAddr_ = "";
    public bool HasMacAddr {
      get { return hasMacAddr; }
    }
    public string MacAddr {
      get { return macAddr_; }
    }
    
    public const int CellIdFieldNumber = 7;
    private bool hasCellId;
    private string cellId_ = "";
    public bool HasCellId {
      get { return hasCellId; }
    }
    public string CellId {
      get { return cellId_; }
    }
    
    public const int GPSSourceFieldNumber = 8;
    private bool hasGPSSource;
    private int gPSSource_;
    public bool HasGPSSource {
      get { return hasGPSSource; }
    }
    public int GPSSource {
      get { return gPSSource_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasOpCode) return false;
        if (!hasLongitude) return false;
        if (!hasLatitude) return false;
        if (!hasPrecision) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _lBSFindRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[7], Base);
      }
      if (hasOpCode) {
        output.WriteInt32(2, field_names[5], OpCode);
      }
      if (hasLongitude) {
        output.WriteFloat(3, field_names[3], Longitude);
      }
      if (hasLatitude) {
        output.WriteFloat(4, field_names[2], Latitude);
      }
      if (hasPrecision) {
        output.WriteInt32(5, field_names[6], Precision);
      }
      if (hasMacAddr) {
        output.WriteString(6, field_names[4], MacAddr);
      }
      if (hasCellId) {
        output.WriteString(7, field_names[0], CellId);
      }
      if (hasGPSSource) {
        output.WriteInt32(8, field_names[1], GPSSource);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasOpCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, OpCode);
        }
        if (hasLongitude) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Longitude);
        }
        if (hasLatitude) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Latitude);
        }
        if (hasPrecision) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Precision);
        }
        if (hasMacAddr) {
          size += pb::CodedOutputStream.ComputeStringSize(6, MacAddr);
        }
        if (hasCellId) {
          size += pb::CodedOutputStream.ComputeStringSize(7, CellId);
        }
        if (hasGPSSource) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, GPSSource);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LBSFindRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LBSFindRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LBSFindRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LBSFindRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LBSFindRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LBSFindRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LBSFindRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LBSFindRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LBSFindRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LBSFindRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LBSFindRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LBSFindRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LBSFindRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LBSFindRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LBSFindRequest result;
      
      private LBSFindRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LBSFindRequest original = result;
          result = new LBSFindRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LBSFindRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.LBSFindRequest.Descriptor; }
      }
      
      public override LBSFindRequest DefaultInstanceForType {
        get { return global::mm.command.LBSFindRequest.DefaultInstance; }
      }
      
      public override LBSFindRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LBSFindRequest) {
          return MergeFrom((LBSFindRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LBSFindRequest other) {
        if (other == global::mm.command.LBSFindRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasOpCode) {
          OpCode = other.OpCode;
        }
        if (other.HasLongitude) {
          Longitude = other.Longitude;
        }
        if (other.HasLatitude) {
          Latitude = other.Latitude;
        }
        if (other.HasPrecision) {
          Precision = other.Precision;
        }
        if (other.HasMacAddr) {
          MacAddr = other.MacAddr;
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasGPSSource) {
          GPSSource = other.GPSSource;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_lBSFindRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _lBSFindRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOpCode = input.ReadInt32(ref result.opCode_);
              break;
            }
            case 29: {
              result.hasLongitude = input.ReadFloat(ref result.longitude_);
              break;
            }
            case 37: {
              result.hasLatitude = input.ReadFloat(ref result.latitude_);
              break;
            }
            case 40: {
              result.hasPrecision = input.ReadInt32(ref result.precision_);
              break;
            }
            case 50: {
              result.hasMacAddr = input.ReadString(ref result.macAddr_);
              break;
            }
            case 58: {
              result.hasCellId = input.ReadString(ref result.cellId_);
              break;
            }
            case 64: {
              result.hasGPSSource = input.ReadInt32(ref result.gPSSource_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasOpCode {
        get { return result.hasOpCode; }
      }
      public int OpCode {
        get { return result.OpCode; }
        set { SetOpCode(value); }
      }
      public Builder SetOpCode(int value) {
        PrepareBuilder();
        result.hasOpCode = true;
        result.opCode_ = value;
        return this;
      }
      public Builder ClearOpCode() {
        PrepareBuilder();
        result.hasOpCode = false;
        result.opCode_ = 0;
        return this;
      }
      
      public bool HasLongitude {
        get { return result.hasLongitude; }
      }
      public float Longitude {
        get { return result.Longitude; }
        set { SetLongitude(value); }
      }
      public Builder SetLongitude(float value) {
        PrepareBuilder();
        result.hasLongitude = true;
        result.longitude_ = value;
        return this;
      }
      public Builder ClearLongitude() {
        PrepareBuilder();
        result.hasLongitude = false;
        result.longitude_ = 0F;
        return this;
      }
      
      public bool HasLatitude {
        get { return result.hasLatitude; }
      }
      public float Latitude {
        get { return result.Latitude; }
        set { SetLatitude(value); }
      }
      public Builder SetLatitude(float value) {
        PrepareBuilder();
        result.hasLatitude = true;
        result.latitude_ = value;
        return this;
      }
      public Builder ClearLatitude() {
        PrepareBuilder();
        result.hasLatitude = false;
        result.latitude_ = 0F;
        return this;
      }
      
      public bool HasPrecision {
        get { return result.hasPrecision; }
      }
      public int Precision {
        get { return result.Precision; }
        set { SetPrecision(value); }
      }
      public Builder SetPrecision(int value) {
        PrepareBuilder();
        result.hasPrecision = true;
        result.precision_ = value;
        return this;
      }
      public Builder ClearPrecision() {
        PrepareBuilder();
        result.hasPrecision = false;
        result.precision_ = 0;
        return this;
      }
      
      public bool HasMacAddr {
        get { return result.hasMacAddr; }
      }
      public string MacAddr {
        get { return result.MacAddr; }
        set { SetMacAddr(value); }
      }
      public Builder SetMacAddr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMacAddr = true;
        result.macAddr_ = value;
        return this;
      }
      public Builder ClearMacAddr() {
        PrepareBuilder();
        result.hasMacAddr = false;
        result.macAddr_ = "";
        return this;
      }
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public string CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = "";
        return this;
      }
      
      public bool HasGPSSource {
        get { return result.hasGPSSource; }
      }
      public int GPSSource {
        get { return result.GPSSource; }
        set { SetGPSSource(value); }
      }
      public Builder SetGPSSource(int value) {
        PrepareBuilder();
        result.hasGPSSource = true;
        result.gPSSource_ = value;
        return this;
      }
      public Builder ClearGPSSource() {
        PrepareBuilder();
        result.hasGPSSource = false;
        result.gPSSource_ = 0;
        return this;
      }
    }
    static LBSFindRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LBSFindResponse : pb::GeneratedMessage<LBSFindResponse, LBSFindResponse.Builder> {
    private LBSFindResponse() { }
    private static readonly LBSFindResponse defaultInstance = new LBSFindResponse().MakeReadOnly();
    private static readonly string[] _lBSFindResponseFieldNames = new string[] { "ContactCount", "ContactList", "FlushTime", "IsShowRoom", "RoomMemberCount", "State", "base" };
    private static readonly uint[] _lBSFindResponseFieldTags = new uint[] { 16, 26, 40, 48, 56, 32, 10 };
    public static LBSFindResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LBSFindResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LBSFindResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LBSFindResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LBSFindResponse, LBSFindResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LBSFindResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int ContactCountFieldNumber = 2;
    private bool hasContactCount;
    private int contactCount_;
    public bool HasContactCount {
      get { return hasContactCount; }
    }
    public int ContactCount {
      get { return contactCount_; }
    }
    
    public const int ContactListFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.ContactObject> contactList_ = new pbc::PopsicleList<global::mm.command.ContactObject>();
    public scg::IList<global::mm.command.ContactObject> ContactListList {
      get { return contactList_; }
    }
    public int ContactListCount {
      get { return contactList_.Count; }
    }
    public global::mm.command.ContactObject GetContactList(int index) {
      return contactList_[index];
    }
    
    public const int StateFieldNumber = 4;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int FlushTimeFieldNumber = 5;
    private bool hasFlushTime;
    private int flushTime_;
    public bool HasFlushTime {
      get { return hasFlushTime; }
    }
    public int FlushTime {
      get { return flushTime_; }
    }
    
    public const int IsShowRoomFieldNumber = 6;
    private bool hasIsShowRoom;
    private int isShowRoom_;
    public bool HasIsShowRoom {
      get { return hasIsShowRoom; }
    }
    public int IsShowRoom {
      get { return isShowRoom_; }
    }
    
    public const int RoomMemberCountFieldNumber = 7;
    private bool hasRoomMemberCount;
    private int roomMemberCount_;
    public bool HasRoomMemberCount {
      get { return hasRoomMemberCount; }
    }
    public int RoomMemberCount {
      get { return roomMemberCount_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasContactCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.ContactObject element in ContactListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _lBSFindResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[6], Base);
      }
      if (hasContactCount) {
        output.WriteInt32(2, field_names[0], ContactCount);
      }
      if (contactList_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], contactList_);
      }
      if (hasState) {
        output.WriteInt32(4, field_names[5], State);
      }
      if (hasFlushTime) {
        output.WriteInt32(5, field_names[2], FlushTime);
      }
      if (hasIsShowRoom) {
        output.WriteInt32(6, field_names[3], IsShowRoom);
      }
      if (hasRoomMemberCount) {
        output.WriteInt32(7, field_names[4], RoomMemberCount);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasContactCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ContactCount);
        }
        foreach (global::mm.command.ContactObject element in ContactListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, State);
        }
        if (hasFlushTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, FlushTime);
        }
        if (hasIsShowRoom) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, IsShowRoom);
        }
        if (hasRoomMemberCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, RoomMemberCount);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LBSFindResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LBSFindResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LBSFindResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LBSFindResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LBSFindResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LBSFindResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LBSFindResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LBSFindResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LBSFindResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LBSFindResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LBSFindResponse MakeReadOnly() {
      contactList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LBSFindResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LBSFindResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LBSFindResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LBSFindResponse result;
      
      private LBSFindResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LBSFindResponse original = result;
          result = new LBSFindResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LBSFindResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.LBSFindResponse.Descriptor; }
      }
      
      public override LBSFindResponse DefaultInstanceForType {
        get { return global::mm.command.LBSFindResponse.DefaultInstance; }
      }
      
      public override LBSFindResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LBSFindResponse) {
          return MergeFrom((LBSFindResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LBSFindResponse other) {
        if (other == global::mm.command.LBSFindResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasContactCount) {
          ContactCount = other.ContactCount;
        }
        if (other.contactList_.Count != 0) {
          result.contactList_.Add(other.contactList_);
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasFlushTime) {
          FlushTime = other.FlushTime;
        }
        if (other.HasIsShowRoom) {
          IsShowRoom = other.IsShowRoom;
        }
        if (other.HasRoomMemberCount) {
          RoomMemberCount = other.RoomMemberCount;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_lBSFindResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _lBSFindResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasContactCount = input.ReadInt32(ref result.contactCount_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.contactList_, global::mm.command.ContactObject.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 40: {
              result.hasFlushTime = input.ReadInt32(ref result.flushTime_);
              break;
            }
            case 48: {
              result.hasIsShowRoom = input.ReadInt32(ref result.isShowRoom_);
              break;
            }
            case 56: {
              result.hasRoomMemberCount = input.ReadInt32(ref result.roomMemberCount_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasContactCount {
        get { return result.hasContactCount; }
      }
      public int ContactCount {
        get { return result.ContactCount; }
        set { SetContactCount(value); }
      }
      public Builder SetContactCount(int value) {
        PrepareBuilder();
        result.hasContactCount = true;
        result.contactCount_ = value;
        return this;
      }
      public Builder ClearContactCount() {
        PrepareBuilder();
        result.hasContactCount = false;
        result.contactCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.ContactObject> ContactListList {
        get { return PrepareBuilder().contactList_; }
      }
      public int ContactListCount {
        get { return result.ContactListCount; }
      }
      public global::mm.command.ContactObject GetContactList(int index) {
        return result.GetContactList(index);
      }
      public Builder SetContactList(int index, global::mm.command.ContactObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contactList_[index] = value;
        return this;
      }
      public Builder SetContactList(int index, global::mm.command.ContactObject.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contactList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContactList(global::mm.command.ContactObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contactList_.Add(value);
        return this;
      }
      public Builder AddContactList(global::mm.command.ContactObject.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contactList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContactList(scg::IEnumerable<global::mm.command.ContactObject> values) {
        PrepareBuilder();
        result.contactList_.Add(values);
        return this;
      }
      public Builder ClearContactList() {
        PrepareBuilder();
        result.contactList_.Clear();
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasFlushTime {
        get { return result.hasFlushTime; }
      }
      public int FlushTime {
        get { return result.FlushTime; }
        set { SetFlushTime(value); }
      }
      public Builder SetFlushTime(int value) {
        PrepareBuilder();
        result.hasFlushTime = true;
        result.flushTime_ = value;
        return this;
      }
      public Builder ClearFlushTime() {
        PrepareBuilder();
        result.hasFlushTime = false;
        result.flushTime_ = 0;
        return this;
      }
      
      public bool HasIsShowRoom {
        get { return result.hasIsShowRoom; }
      }
      public int IsShowRoom {
        get { return result.IsShowRoom; }
        set { SetIsShowRoom(value); }
      }
      public Builder SetIsShowRoom(int value) {
        PrepareBuilder();
        result.hasIsShowRoom = true;
        result.isShowRoom_ = value;
        return this;
      }
      public Builder ClearIsShowRoom() {
        PrepareBuilder();
        result.hasIsShowRoom = false;
        result.isShowRoom_ = 0;
        return this;
      }
      
      public bool HasRoomMemberCount {
        get { return result.hasRoomMemberCount; }
      }
      public int RoomMemberCount {
        get { return result.RoomMemberCount; }
        set { SetRoomMemberCount(value); }
      }
      public Builder SetRoomMemberCount(int value) {
        PrepareBuilder();
        result.hasRoomMemberCount = true;
        result.roomMemberCount_ = value;
        return this;
      }
      public Builder ClearRoomMemberCount() {
        PrepareBuilder();
        result.hasRoomMemberCount = false;
        result.roomMemberCount_ = 0;
        return this;
      }
    }
    static LBSFindResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetBrandListRequest : pb::GeneratedMessage<GetBrandListRequest, GetBrandListRequest.Builder> {
    private GetBrandListRequest() { }
    private static readonly GetBrandListRequest defaultInstance = new GetBrandListRequest().MakeReadOnly();
    private static readonly string[] _getBrandListRequestFieldNames = new string[] { "RequestBuffer", "UserName", "base" };
    private static readonly uint[] _getBrandListRequestFieldTags = new uint[] { 26, 18, 10 };
    public static GetBrandListRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetBrandListRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetBrandListRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetBrandListRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetBrandListRequest, GetBrandListRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetBrandListRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public const int RequestBufferFieldNumber = 3;
    private bool hasRequestBuffer;
    private global::mm.command.SKBuiltinBuffer_t requestBuffer_;
    public bool HasRequestBuffer {
      get { return hasRequestBuffer; }
    }
    public global::mm.command.SKBuiltinBuffer_t RequestBuffer {
      get { return requestBuffer_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasRequestBuffer) return false;
        if (!Base.IsInitialized) return false;
        if (!RequestBuffer.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getBrandListRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasUserName) {
        output.WriteString(2, field_names[1], UserName);
      }
      if (hasRequestBuffer) {
        output.WriteMessage(3, field_names[0], RequestBuffer);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserName);
        }
        if (hasRequestBuffer) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, RequestBuffer);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetBrandListRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetBrandListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetBrandListRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetBrandListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetBrandListRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetBrandListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetBrandListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetBrandListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetBrandListRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetBrandListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetBrandListRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetBrandListRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetBrandListRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetBrandListRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetBrandListRequest result;
      
      private GetBrandListRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetBrandListRequest original = result;
          result = new GetBrandListRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetBrandListRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetBrandListRequest.Descriptor; }
      }
      
      public override GetBrandListRequest DefaultInstanceForType {
        get { return global::mm.command.GetBrandListRequest.DefaultInstance; }
      }
      
      public override GetBrandListRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetBrandListRequest) {
          return MergeFrom((GetBrandListRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetBrandListRequest other) {
        if (other == global::mm.command.GetBrandListRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasRequestBuffer) {
          MergeRequestBuffer(other.RequestBuffer);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getBrandListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getBrandListRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasRequestBuffer) {
                subBuilder.MergeFrom(RequestBuffer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RequestBuffer = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasRequestBuffer {
       get { return result.hasRequestBuffer; }
      }
      public global::mm.command.SKBuiltinBuffer_t RequestBuffer {
        get { return result.RequestBuffer; }
        set { SetRequestBuffer(value); }
      }
      public Builder SetRequestBuffer(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestBuffer = true;
        result.requestBuffer_ = value;
        return this;
      }
      public Builder SetRequestBuffer(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequestBuffer = true;
        result.requestBuffer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequestBuffer(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequestBuffer &&
            result.requestBuffer_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.requestBuffer_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.requestBuffer_).MergeFrom(value).BuildPartial();
        } else {
          result.requestBuffer_ = value;
        }
        result.hasRequestBuffer = true;
        return this;
      }
      public Builder ClearRequestBuffer() {
        PrepareBuilder();
        result.hasRequestBuffer = false;
        result.requestBuffer_ = null;
        return this;
      }
    }
    static GetBrandListRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetBrandListResponse : pb::GeneratedMessage<GetBrandListResponse, GetBrandListResponse.Builder> {
    private GetBrandListResponse() { }
    private static readonly GetBrandListResponse defaultInstance = new GetBrandListResponse().MakeReadOnly();
    private static readonly string[] _getBrandListResponseFieldNames = new string[] { "BrandList", "RequestBuffer", "base" };
    private static readonly uint[] _getBrandListResponseFieldTags = new uint[] { 18, 26, 10 };
    public static GetBrandListResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetBrandListResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetBrandListResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetBrandListResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetBrandListResponse, GetBrandListResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetBrandListResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int BrandListFieldNumber = 2;
    private bool hasBrandList;
    private string brandList_ = "";
    public bool HasBrandList {
      get { return hasBrandList; }
    }
    public string BrandList {
      get { return brandList_; }
    }
    
    public const int RequestBufferFieldNumber = 3;
    private bool hasRequestBuffer;
    private global::mm.command.SKBuiltinBuffer_t requestBuffer_;
    public bool HasRequestBuffer {
      get { return hasRequestBuffer; }
    }
    public global::mm.command.SKBuiltinBuffer_t RequestBuffer {
      get { return requestBuffer_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasRequestBuffer) return false;
        if (!Base.IsInitialized) return false;
        if (!RequestBuffer.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getBrandListResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasBrandList) {
        output.WriteString(2, field_names[0], BrandList);
      }
      if (hasRequestBuffer) {
        output.WriteMessage(3, field_names[1], RequestBuffer);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasBrandList) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BrandList);
        }
        if (hasRequestBuffer) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, RequestBuffer);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetBrandListResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetBrandListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetBrandListResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetBrandListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetBrandListResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetBrandListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetBrandListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetBrandListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetBrandListResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetBrandListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetBrandListResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetBrandListResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetBrandListResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetBrandListResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetBrandListResponse result;
      
      private GetBrandListResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetBrandListResponse original = result;
          result = new GetBrandListResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetBrandListResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetBrandListResponse.Descriptor; }
      }
      
      public override GetBrandListResponse DefaultInstanceForType {
        get { return global::mm.command.GetBrandListResponse.DefaultInstance; }
      }
      
      public override GetBrandListResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetBrandListResponse) {
          return MergeFrom((GetBrandListResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetBrandListResponse other) {
        if (other == global::mm.command.GetBrandListResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasBrandList) {
          BrandList = other.BrandList;
        }
        if (other.HasRequestBuffer) {
          MergeRequestBuffer(other.RequestBuffer);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getBrandListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getBrandListResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasBrandList = input.ReadString(ref result.brandList_);
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasRequestBuffer) {
                subBuilder.MergeFrom(RequestBuffer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RequestBuffer = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasBrandList {
        get { return result.hasBrandList; }
      }
      public string BrandList {
        get { return result.BrandList; }
        set { SetBrandList(value); }
      }
      public Builder SetBrandList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrandList = true;
        result.brandList_ = value;
        return this;
      }
      public Builder ClearBrandList() {
        PrepareBuilder();
        result.hasBrandList = false;
        result.brandList_ = "";
        return this;
      }
      
      public bool HasRequestBuffer {
       get { return result.hasRequestBuffer; }
      }
      public global::mm.command.SKBuiltinBuffer_t RequestBuffer {
        get { return result.RequestBuffer; }
        set { SetRequestBuffer(value); }
      }
      public Builder SetRequestBuffer(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRequestBuffer = true;
        result.requestBuffer_ = value;
        return this;
      }
      public Builder SetRequestBuffer(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRequestBuffer = true;
        result.requestBuffer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRequestBuffer(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRequestBuffer &&
            result.requestBuffer_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.requestBuffer_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.requestBuffer_).MergeFrom(value).BuildPartial();
        } else {
          result.requestBuffer_ = value;
        }
        result.hasRequestBuffer = true;
        return this;
      }
      public Builder ClearRequestBuffer() {
        PrepareBuilder();
        result.hasRequestBuffer = false;
        result.requestBuffer_ = null;
        return this;
      }
    }
    static GetBrandListResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UploadhdheadimgRequest : pb::GeneratedMessage<UploadhdheadimgRequest, UploadhdheadimgRequest.Builder> {
    private UploadhdheadimgRequest() { }
    private static readonly UploadhdheadimgRequest defaultInstance = new UploadhdheadimgRequest().MakeReadOnly();
    private static readonly string[] _uploadhdheadimgRequestFieldNames = new string[] { "Data", "HeadImgType", "ImgHash", "StartPos", "TotalLen", "UserName", "base" };
    private static readonly uint[] _uploadhdheadimgRequestFieldTags = new uint[] { 42, 32, 50, 24, 16, 58, 10 };
    public static UploadhdheadimgRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UploadhdheadimgRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UploadhdheadimgRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadhdheadimgRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UploadhdheadimgRequest, UploadhdheadimgRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadhdheadimgRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int TotalLenFieldNumber = 2;
    private bool hasTotalLen;
    private int totalLen_;
    public bool HasTotalLen {
      get { return hasTotalLen; }
    }
    public int TotalLen {
      get { return totalLen_; }
    }
    
    public const int StartPosFieldNumber = 3;
    private bool hasStartPos;
    private int startPos_;
    public bool HasStartPos {
      get { return hasStartPos; }
    }
    public int StartPos {
      get { return startPos_; }
    }
    
    public const int HeadImgTypeFieldNumber = 4;
    private bool hasHeadImgType;
    private int headImgType_;
    public bool HasHeadImgType {
      get { return hasHeadImgType; }
    }
    public int HeadImgType {
      get { return headImgType_; }
    }
    
    public const int DataFieldNumber = 5;
    private bool hasData;
    private global::mm.command.SKBuiltinBuffer_t data_;
    public bool HasData {
      get { return hasData; }
    }
    public global::mm.command.SKBuiltinBuffer_t Data {
      get { return data_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int ImgHashFieldNumber = 6;
    private bool hasImgHash;
    private string imgHash_ = "";
    public bool HasImgHash {
      get { return hasImgHash; }
    }
    public string ImgHash {
      get { return imgHash_; }
    }
    
    public const int UserNameFieldNumber = 7;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasTotalLen) return false;
        if (!hasStartPos) return false;
        if (!hasHeadImgType) return false;
        if (!hasData) return false;
        if (!Base.IsInitialized) return false;
        if (!Data.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _uploadhdheadimgRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[6], Base);
      }
      if (hasTotalLen) {
        output.WriteInt32(2, field_names[4], TotalLen);
      }
      if (hasStartPos) {
        output.WriteInt32(3, field_names[3], StartPos);
      }
      if (hasHeadImgType) {
        output.WriteInt32(4, field_names[1], HeadImgType);
      }
      if (hasData) {
        output.WriteMessage(5, field_names[0], Data);
      }
      if (hasImgHash) {
        output.WriteString(6, field_names[2], ImgHash);
      }
      if (hasUserName) {
        output.WriteString(7, field_names[5], UserName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasTotalLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, TotalLen);
        }
        if (hasStartPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, StartPos);
        }
        if (hasHeadImgType) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, HeadImgType);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Data);
        }
        if (hasImgHash) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ImgHash);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(7, UserName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UploadhdheadimgRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadhdheadimgRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadhdheadimgRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadhdheadimgRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadhdheadimgRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadhdheadimgRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UploadhdheadimgRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UploadhdheadimgRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UploadhdheadimgRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadhdheadimgRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UploadhdheadimgRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UploadhdheadimgRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UploadhdheadimgRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UploadhdheadimgRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UploadhdheadimgRequest result;
      
      private UploadhdheadimgRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          UploadhdheadimgRequest original = result;
          result = new UploadhdheadimgRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UploadhdheadimgRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.UploadhdheadimgRequest.Descriptor; }
      }
      
      public override UploadhdheadimgRequest DefaultInstanceForType {
        get { return global::mm.command.UploadhdheadimgRequest.DefaultInstance; }
      }
      
      public override UploadhdheadimgRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UploadhdheadimgRequest) {
          return MergeFrom((UploadhdheadimgRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UploadhdheadimgRequest other) {
        if (other == global::mm.command.UploadhdheadimgRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasTotalLen) {
          TotalLen = other.TotalLen;
        }
        if (other.HasStartPos) {
          StartPos = other.StartPos;
        }
        if (other.HasHeadImgType) {
          HeadImgType = other.HeadImgType;
        }
        if (other.HasData) {
          MergeData(other.Data);
        }
        if (other.HasImgHash) {
          ImgHash = other.ImgHash;
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_uploadhdheadimgRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _uploadhdheadimgRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasTotalLen = input.ReadInt32(ref result.totalLen_);
              break;
            }
            case 24: {
              result.hasStartPos = input.ReadInt32(ref result.startPos_);
              break;
            }
            case 32: {
              result.hasHeadImgType = input.ReadInt32(ref result.headImgType_);
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasData) {
                subBuilder.MergeFrom(Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Data = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              result.hasImgHash = input.ReadString(ref result.imgHash_);
              break;
            }
            case 58: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasTotalLen {
        get { return result.hasTotalLen; }
      }
      public int TotalLen {
        get { return result.TotalLen; }
        set { SetTotalLen(value); }
      }
      public Builder SetTotalLen(int value) {
        PrepareBuilder();
        result.hasTotalLen = true;
        result.totalLen_ = value;
        return this;
      }
      public Builder ClearTotalLen() {
        PrepareBuilder();
        result.hasTotalLen = false;
        result.totalLen_ = 0;
        return this;
      }
      
      public bool HasStartPos {
        get { return result.hasStartPos; }
      }
      public int StartPos {
        get { return result.StartPos; }
        set { SetStartPos(value); }
      }
      public Builder SetStartPos(int value) {
        PrepareBuilder();
        result.hasStartPos = true;
        result.startPos_ = value;
        return this;
      }
      public Builder ClearStartPos() {
        PrepareBuilder();
        result.hasStartPos = false;
        result.startPos_ = 0;
        return this;
      }
      
      public bool HasHeadImgType {
        get { return result.hasHeadImgType; }
      }
      public int HeadImgType {
        get { return result.HeadImgType; }
        set { SetHeadImgType(value); }
      }
      public Builder SetHeadImgType(int value) {
        PrepareBuilder();
        result.hasHeadImgType = true;
        result.headImgType_ = value;
        return this;
      }
      public Builder ClearHeadImgType() {
        PrepareBuilder();
        result.hasHeadImgType = false;
        result.headImgType_ = 0;
        return this;
      }
      
      public bool HasData {
       get { return result.hasData; }
      }
      public global::mm.command.SKBuiltinBuffer_t Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder SetData(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasData &&
            result.data_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.data_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
        } else {
          result.data_ = value;
        }
        result.hasData = true;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = null;
        return this;
      }
      
      public bool HasImgHash {
        get { return result.hasImgHash; }
      }
      public string ImgHash {
        get { return result.ImgHash; }
        set { SetImgHash(value); }
      }
      public Builder SetImgHash(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgHash = true;
        result.imgHash_ = value;
        return this;
      }
      public Builder ClearImgHash() {
        PrepareBuilder();
        result.hasImgHash = false;
        result.imgHash_ = "";
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
    }
    static UploadhdheadimgRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UploadhdheadimgResponse : pb::GeneratedMessage<UploadhdheadimgResponse, UploadhdheadimgResponse.Builder> {
    private UploadhdheadimgResponse() { }
    private static readonly UploadhdheadimgResponse defaultInstance = new UploadhdheadimgResponse().MakeReadOnly();
    private static readonly string[] _uploadhdheadimgResponseFieldNames = new string[] { "FinalImgMd5sum", "StartPos", "TotalLen", "base" };
    private static readonly uint[] _uploadhdheadimgResponseFieldTags = new uint[] { 34, 24, 16, 10 };
    public static UploadhdheadimgResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UploadhdheadimgResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UploadhdheadimgResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadhdheadimgResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UploadhdheadimgResponse, UploadhdheadimgResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadhdheadimgResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int TotalLenFieldNumber = 2;
    private bool hasTotalLen;
    private int totalLen_;
    public bool HasTotalLen {
      get { return hasTotalLen; }
    }
    public int TotalLen {
      get { return totalLen_; }
    }
    
    public const int StartPosFieldNumber = 3;
    private bool hasStartPos;
    private int startPos_;
    public bool HasStartPos {
      get { return hasStartPos; }
    }
    public int StartPos {
      get { return startPos_; }
    }
    
    public const int FinalImgMd5SumFieldNumber = 4;
    private bool hasFinalImgMd5Sum;
    private string finalImgMd5Sum_ = "";
    public bool HasFinalImgMd5Sum {
      get { return hasFinalImgMd5Sum; }
    }
    public string FinalImgMd5Sum {
      get { return finalImgMd5Sum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasTotalLen) return false;
        if (!hasStartPos) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _uploadhdheadimgResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasTotalLen) {
        output.WriteInt32(2, field_names[2], TotalLen);
      }
      if (hasStartPos) {
        output.WriteInt32(3, field_names[1], StartPos);
      }
      if (hasFinalImgMd5Sum) {
        output.WriteString(4, field_names[0], FinalImgMd5Sum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasTotalLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, TotalLen);
        }
        if (hasStartPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, StartPos);
        }
        if (hasFinalImgMd5Sum) {
          size += pb::CodedOutputStream.ComputeStringSize(4, FinalImgMd5Sum);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UploadhdheadimgResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadhdheadimgResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadhdheadimgResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadhdheadimgResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadhdheadimgResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadhdheadimgResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UploadhdheadimgResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UploadhdheadimgResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UploadhdheadimgResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadhdheadimgResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UploadhdheadimgResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UploadhdheadimgResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UploadhdheadimgResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UploadhdheadimgResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UploadhdheadimgResponse result;
      
      private UploadhdheadimgResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          UploadhdheadimgResponse original = result;
          result = new UploadhdheadimgResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UploadhdheadimgResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.UploadhdheadimgResponse.Descriptor; }
      }
      
      public override UploadhdheadimgResponse DefaultInstanceForType {
        get { return global::mm.command.UploadhdheadimgResponse.DefaultInstance; }
      }
      
      public override UploadhdheadimgResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UploadhdheadimgResponse) {
          return MergeFrom((UploadhdheadimgResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UploadhdheadimgResponse other) {
        if (other == global::mm.command.UploadhdheadimgResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasTotalLen) {
          TotalLen = other.TotalLen;
        }
        if (other.HasStartPos) {
          StartPos = other.StartPos;
        }
        if (other.HasFinalImgMd5Sum) {
          FinalImgMd5Sum = other.FinalImgMd5Sum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_uploadhdheadimgResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _uploadhdheadimgResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasTotalLen = input.ReadInt32(ref result.totalLen_);
              break;
            }
            case 24: {
              result.hasStartPos = input.ReadInt32(ref result.startPos_);
              break;
            }
            case 34: {
              result.hasFinalImgMd5Sum = input.ReadString(ref result.finalImgMd5Sum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasTotalLen {
        get { return result.hasTotalLen; }
      }
      public int TotalLen {
        get { return result.TotalLen; }
        set { SetTotalLen(value); }
      }
      public Builder SetTotalLen(int value) {
        PrepareBuilder();
        result.hasTotalLen = true;
        result.totalLen_ = value;
        return this;
      }
      public Builder ClearTotalLen() {
        PrepareBuilder();
        result.hasTotalLen = false;
        result.totalLen_ = 0;
        return this;
      }
      
      public bool HasStartPos {
        get { return result.hasStartPos; }
      }
      public int StartPos {
        get { return result.StartPos; }
        set { SetStartPos(value); }
      }
      public Builder SetStartPos(int value) {
        PrepareBuilder();
        result.hasStartPos = true;
        result.startPos_ = value;
        return this;
      }
      public Builder ClearStartPos() {
        PrepareBuilder();
        result.hasStartPos = false;
        result.startPos_ = 0;
        return this;
      }
      
      public bool HasFinalImgMd5Sum {
        get { return result.hasFinalImgMd5Sum; }
      }
      public string FinalImgMd5Sum {
        get { return result.FinalImgMd5Sum; }
        set { SetFinalImgMd5Sum(value); }
      }
      public Builder SetFinalImgMd5Sum(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFinalImgMd5Sum = true;
        result.finalImgMd5Sum_ = value;
        return this;
      }
      public Builder ClearFinalImgMd5Sum() {
        PrepareBuilder();
        result.hasFinalImgMd5Sum = false;
        result.finalImgMd5Sum_ = "";
        return this;
      }
    }
    static UploadhdheadimgResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewInitRequest : pb::GeneratedMessage<NewInitRequest, NewInitRequest.Builder> {
    private NewInitRequest() { }
    private static readonly NewInitRequest defaultInstance = new NewInitRequest().MakeReadOnly();
    private static readonly string[] _newInitRequestFieldNames = new string[] { "CurrentSynckey", "Language", "MaxSynckey", "UserName", "base" };
    private static readonly uint[] _newInitRequestFieldTags = new uint[] { 26, 42, 34, 18, 10 };
    public static NewInitRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewInitRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewInitRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewInitRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewInitRequest, NewInitRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewInitRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public const int CurrentSynckeyFieldNumber = 3;
    private bool hasCurrentSynckey;
    private global::mm.command.SKBuiltinBuffer_t currentSynckey_;
    public bool HasCurrentSynckey {
      get { return hasCurrentSynckey; }
    }
    public global::mm.command.SKBuiltinBuffer_t CurrentSynckey {
      get { return currentSynckey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int MaxSynckeyFieldNumber = 4;
    private bool hasMaxSynckey;
    private global::mm.command.SKBuiltinBuffer_t maxSynckey_;
    public bool HasMaxSynckey {
      get { return hasMaxSynckey; }
    }
    public global::mm.command.SKBuiltinBuffer_t MaxSynckey {
      get { return maxSynckey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int LanguageFieldNumber = 5;
    private bool hasLanguage;
    private string language_ = "";
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public string Language {
      get { return language_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasCurrentSynckey) return false;
        if (!hasMaxSynckey) return false;
        if (!Base.IsInitialized) return false;
        if (!CurrentSynckey.IsInitialized) return false;
        if (!MaxSynckey.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newInitRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[4], Base);
      }
      if (hasUserName) {
        output.WriteString(2, field_names[3], UserName);
      }
      if (hasCurrentSynckey) {
        output.WriteMessage(3, field_names[0], CurrentSynckey);
      }
      if (hasMaxSynckey) {
        output.WriteMessage(4, field_names[2], MaxSynckey);
      }
      if (hasLanguage) {
        output.WriteString(5, field_names[1], Language);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserName);
        }
        if (hasCurrentSynckey) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, CurrentSynckey);
        }
        if (hasMaxSynckey) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, MaxSynckey);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Language);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewInitRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewInitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewInitRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewInitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewInitRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewInitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewInitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewInitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewInitRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewInitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewInitRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewInitRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewInitRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewInitRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewInitRequest result;
      
      private NewInitRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NewInitRequest original = result;
          result = new NewInitRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewInitRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewInitRequest.Descriptor; }
      }
      
      public override NewInitRequest DefaultInstanceForType {
        get { return global::mm.command.NewInitRequest.DefaultInstance; }
      }
      
      public override NewInitRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewInitRequest) {
          return MergeFrom((NewInitRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewInitRequest other) {
        if (other == global::mm.command.NewInitRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasCurrentSynckey) {
          MergeCurrentSynckey(other.CurrentSynckey);
        }
        if (other.HasMaxSynckey) {
          MergeMaxSynckey(other.MaxSynckey);
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newInitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newInitRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasCurrentSynckey) {
                subBuilder.MergeFrom(CurrentSynckey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CurrentSynckey = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasMaxSynckey) {
                subBuilder.MergeFrom(MaxSynckey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MaxSynckey = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              result.hasLanguage = input.ReadString(ref result.language_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasCurrentSynckey {
       get { return result.hasCurrentSynckey; }
      }
      public global::mm.command.SKBuiltinBuffer_t CurrentSynckey {
        get { return result.CurrentSynckey; }
        set { SetCurrentSynckey(value); }
      }
      public Builder SetCurrentSynckey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrentSynckey = true;
        result.currentSynckey_ = value;
        return this;
      }
      public Builder SetCurrentSynckey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCurrentSynckey = true;
        result.currentSynckey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCurrentSynckey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCurrentSynckey &&
            result.currentSynckey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.currentSynckey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.currentSynckey_).MergeFrom(value).BuildPartial();
        } else {
          result.currentSynckey_ = value;
        }
        result.hasCurrentSynckey = true;
        return this;
      }
      public Builder ClearCurrentSynckey() {
        PrepareBuilder();
        result.hasCurrentSynckey = false;
        result.currentSynckey_ = null;
        return this;
      }
      
      public bool HasMaxSynckey {
       get { return result.hasMaxSynckey; }
      }
      public global::mm.command.SKBuiltinBuffer_t MaxSynckey {
        get { return result.MaxSynckey; }
        set { SetMaxSynckey(value); }
      }
      public Builder SetMaxSynckey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMaxSynckey = true;
        result.maxSynckey_ = value;
        return this;
      }
      public Builder SetMaxSynckey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMaxSynckey = true;
        result.maxSynckey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMaxSynckey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMaxSynckey &&
            result.maxSynckey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.maxSynckey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.maxSynckey_).MergeFrom(value).BuildPartial();
        } else {
          result.maxSynckey_ = value;
        }
        result.hasMaxSynckey = true;
        return this;
      }
      public Builder ClearMaxSynckey() {
        PrepareBuilder();
        result.hasMaxSynckey = false;
        result.maxSynckey_ = null;
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public string Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = "";
        return this;
      }
    }
    static NewInitRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewInitResponse : pb::GeneratedMessage<NewInitResponse, NewInitResponse.Builder> {
    private NewInitResponse() { }
    private static readonly NewInitResponse defaultInstance = new NewInitResponse().MakeReadOnly();
    private static readonly string[] _newInitResponseFieldNames = new string[] { "CmdCount", "CmdList", "ContinueFlag", "CurrentSynckey", "MaxSynckey", "Ratio", "SelectBitmap", "base" };
    private static readonly uint[] _newInitResponseFieldTags = new uint[] { 48, 58, 32, 18, 26, 64, 40, 10 };
    public static NewInitResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewInitResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewInitResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewInitResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewInitResponse, NewInitResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewInitResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int CurrentSynckeyFieldNumber = 2;
    private bool hasCurrentSynckey;
    private global::mm.command.SKBuiltinBuffer_t currentSynckey_;
    public bool HasCurrentSynckey {
      get { return hasCurrentSynckey; }
    }
    public global::mm.command.SKBuiltinBuffer_t CurrentSynckey {
      get { return currentSynckey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int MaxSynckeyFieldNumber = 3;
    private bool hasMaxSynckey;
    private global::mm.command.SKBuiltinBuffer_t maxSynckey_;
    public bool HasMaxSynckey {
      get { return hasMaxSynckey; }
    }
    public global::mm.command.SKBuiltinBuffer_t MaxSynckey {
      get { return maxSynckey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int ContinueFlagFieldNumber = 4;
    private bool hasContinueFlag;
    private int continueFlag_;
    public bool HasContinueFlag {
      get { return hasContinueFlag; }
    }
    public int ContinueFlag {
      get { return continueFlag_; }
    }
    
    public const int SelectBitmapFieldNumber = 5;
    private bool hasSelectBitmap;
    private int selectBitmap_;
    public bool HasSelectBitmap {
      get { return hasSelectBitmap; }
    }
    public int SelectBitmap {
      get { return selectBitmap_; }
    }
    
    public const int CmdCountFieldNumber = 6;
    private bool hasCmdCount;
    private int cmdCount_;
    public bool HasCmdCount {
      get { return hasCmdCount; }
    }
    public int CmdCount {
      get { return cmdCount_; }
    }
    
    public const int CmdListFieldNumber = 7;
    private pbc::PopsicleList<global::mm.command.CmdItem> cmdList_ = new pbc::PopsicleList<global::mm.command.CmdItem>();
    public scg::IList<global::mm.command.CmdItem> CmdListList {
      get { return cmdList_; }
    }
    public int CmdListCount {
      get { return cmdList_.Count; }
    }
    public global::mm.command.CmdItem GetCmdList(int index) {
      return cmdList_[index];
    }
    
    public const int RatioFieldNumber = 8;
    private bool hasRatio;
    private int ratio_;
    public bool HasRatio {
      get { return hasRatio; }
    }
    public int Ratio {
      get { return ratio_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasCurrentSynckey) return false;
        if (!hasMaxSynckey) return false;
        if (!hasContinueFlag) return false;
        if (!hasSelectBitmap) return false;
        if (!hasCmdCount) return false;
        if (!hasRatio) return false;
        if (!Base.IsInitialized) return false;
        if (!CurrentSynckey.IsInitialized) return false;
        if (!MaxSynckey.IsInitialized) return false;
        foreach (global::mm.command.CmdItem element in CmdListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newInitResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[7], Base);
      }
      if (hasCurrentSynckey) {
        output.WriteMessage(2, field_names[3], CurrentSynckey);
      }
      if (hasMaxSynckey) {
        output.WriteMessage(3, field_names[4], MaxSynckey);
      }
      if (hasContinueFlag) {
        output.WriteInt32(4, field_names[2], ContinueFlag);
      }
      if (hasSelectBitmap) {
        output.WriteInt32(5, field_names[6], SelectBitmap);
      }
      if (hasCmdCount) {
        output.WriteInt32(6, field_names[0], CmdCount);
      }
      if (cmdList_.Count > 0) {
        output.WriteMessageArray(7, field_names[1], cmdList_);
      }
      if (hasRatio) {
        output.WriteInt32(8, field_names[5], Ratio);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasCurrentSynckey) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, CurrentSynckey);
        }
        if (hasMaxSynckey) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, MaxSynckey);
        }
        if (hasContinueFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ContinueFlag);
        }
        if (hasSelectBitmap) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, SelectBitmap);
        }
        if (hasCmdCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, CmdCount);
        }
        foreach (global::mm.command.CmdItem element in CmdListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        if (hasRatio) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Ratio);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewInitResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewInitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewInitResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewInitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewInitResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewInitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewInitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewInitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewInitResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewInitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewInitResponse MakeReadOnly() {
      cmdList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewInitResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewInitResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewInitResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewInitResponse result;
      
      private NewInitResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NewInitResponse original = result;
          result = new NewInitResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewInitResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewInitResponse.Descriptor; }
      }
      
      public override NewInitResponse DefaultInstanceForType {
        get { return global::mm.command.NewInitResponse.DefaultInstance; }
      }
      
      public override NewInitResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewInitResponse) {
          return MergeFrom((NewInitResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewInitResponse other) {
        if (other == global::mm.command.NewInitResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCurrentSynckey) {
          MergeCurrentSynckey(other.CurrentSynckey);
        }
        if (other.HasMaxSynckey) {
          MergeMaxSynckey(other.MaxSynckey);
        }
        if (other.HasContinueFlag) {
          ContinueFlag = other.ContinueFlag;
        }
        if (other.HasSelectBitmap) {
          SelectBitmap = other.SelectBitmap;
        }
        if (other.HasCmdCount) {
          CmdCount = other.CmdCount;
        }
        if (other.cmdList_.Count != 0) {
          result.cmdList_.Add(other.cmdList_);
        }
        if (other.HasRatio) {
          Ratio = other.Ratio;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newInitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newInitResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasCurrentSynckey) {
                subBuilder.MergeFrom(CurrentSynckey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CurrentSynckey = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasMaxSynckey) {
                subBuilder.MergeFrom(MaxSynckey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              MaxSynckey = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasContinueFlag = input.ReadInt32(ref result.continueFlag_);
              break;
            }
            case 40: {
              result.hasSelectBitmap = input.ReadInt32(ref result.selectBitmap_);
              break;
            }
            case 48: {
              result.hasCmdCount = input.ReadInt32(ref result.cmdCount_);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.cmdList_, global::mm.command.CmdItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 64: {
              result.hasRatio = input.ReadInt32(ref result.ratio_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCurrentSynckey {
       get { return result.hasCurrentSynckey; }
      }
      public global::mm.command.SKBuiltinBuffer_t CurrentSynckey {
        get { return result.CurrentSynckey; }
        set { SetCurrentSynckey(value); }
      }
      public Builder SetCurrentSynckey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrentSynckey = true;
        result.currentSynckey_ = value;
        return this;
      }
      public Builder SetCurrentSynckey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCurrentSynckey = true;
        result.currentSynckey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCurrentSynckey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCurrentSynckey &&
            result.currentSynckey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.currentSynckey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.currentSynckey_).MergeFrom(value).BuildPartial();
        } else {
          result.currentSynckey_ = value;
        }
        result.hasCurrentSynckey = true;
        return this;
      }
      public Builder ClearCurrentSynckey() {
        PrepareBuilder();
        result.hasCurrentSynckey = false;
        result.currentSynckey_ = null;
        return this;
      }
      
      public bool HasMaxSynckey {
       get { return result.hasMaxSynckey; }
      }
      public global::mm.command.SKBuiltinBuffer_t MaxSynckey {
        get { return result.MaxSynckey; }
        set { SetMaxSynckey(value); }
      }
      public Builder SetMaxSynckey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMaxSynckey = true;
        result.maxSynckey_ = value;
        return this;
      }
      public Builder SetMaxSynckey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMaxSynckey = true;
        result.maxSynckey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMaxSynckey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMaxSynckey &&
            result.maxSynckey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.maxSynckey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.maxSynckey_).MergeFrom(value).BuildPartial();
        } else {
          result.maxSynckey_ = value;
        }
        result.hasMaxSynckey = true;
        return this;
      }
      public Builder ClearMaxSynckey() {
        PrepareBuilder();
        result.hasMaxSynckey = false;
        result.maxSynckey_ = null;
        return this;
      }
      
      public bool HasContinueFlag {
        get { return result.hasContinueFlag; }
      }
      public int ContinueFlag {
        get { return result.ContinueFlag; }
        set { SetContinueFlag(value); }
      }
      public Builder SetContinueFlag(int value) {
        PrepareBuilder();
        result.hasContinueFlag = true;
        result.continueFlag_ = value;
        return this;
      }
      public Builder ClearContinueFlag() {
        PrepareBuilder();
        result.hasContinueFlag = false;
        result.continueFlag_ = 0;
        return this;
      }
      
      public bool HasSelectBitmap {
        get { return result.hasSelectBitmap; }
      }
      public int SelectBitmap {
        get { return result.SelectBitmap; }
        set { SetSelectBitmap(value); }
      }
      public Builder SetSelectBitmap(int value) {
        PrepareBuilder();
        result.hasSelectBitmap = true;
        result.selectBitmap_ = value;
        return this;
      }
      public Builder ClearSelectBitmap() {
        PrepareBuilder();
        result.hasSelectBitmap = false;
        result.selectBitmap_ = 0;
        return this;
      }
      
      public bool HasCmdCount {
        get { return result.hasCmdCount; }
      }
      public int CmdCount {
        get { return result.CmdCount; }
        set { SetCmdCount(value); }
      }
      public Builder SetCmdCount(int value) {
        PrepareBuilder();
        result.hasCmdCount = true;
        result.cmdCount_ = value;
        return this;
      }
      public Builder ClearCmdCount() {
        PrepareBuilder();
        result.hasCmdCount = false;
        result.cmdCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.CmdItem> CmdListList {
        get { return PrepareBuilder().cmdList_; }
      }
      public int CmdListCount {
        get { return result.CmdListCount; }
      }
      public global::mm.command.CmdItem GetCmdList(int index) {
        return result.GetCmdList(index);
      }
      public Builder SetCmdList(int index, global::mm.command.CmdItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cmdList_[index] = value;
        return this;
      }
      public Builder SetCmdList(int index, global::mm.command.CmdItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cmdList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddCmdList(global::mm.command.CmdItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.cmdList_.Add(value);
        return this;
      }
      public Builder AddCmdList(global::mm.command.CmdItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.cmdList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeCmdList(scg::IEnumerable<global::mm.command.CmdItem> values) {
        PrepareBuilder();
        result.cmdList_.Add(values);
        return this;
      }
      public Builder ClearCmdList() {
        PrepareBuilder();
        result.cmdList_.Clear();
        return this;
      }
      
      public bool HasRatio {
        get { return result.hasRatio; }
      }
      public int Ratio {
        get { return result.Ratio; }
        set { SetRatio(value); }
      }
      public Builder SetRatio(int value) {
        PrepareBuilder();
        result.hasRatio = true;
        result.ratio_ = value;
        return this;
      }
      public Builder ClearRatio() {
        PrepareBuilder();
        result.hasRatio = false;
        result.ratio_ = 0;
        return this;
      }
    }
    static NewInitResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewRegRequest : pb::GeneratedMessage<NewRegRequest, NewRegRequest.Builder> {
    private NewRegRequest() { }
    private static readonly NewRegRequest defaultInstance = new NewRegRequest().MakeReadOnly();
    private static readonly string[] _newRegRequestFieldNames = new string[] { "BindEmail", "BindMobile", "BindUin", "BuiltinIPSeq", "DLSrc", "ForceReg", "Language", "NickName", "Pwd", "RandomEncryKey", "RealCountry", "RegMode", "Ticket", "TimeZone", "UserName", "adSource", "alias", "androidId", "androidInstallRef", "base", "bioSigCheckType", "bioSigTicket", "bundleId", "cliPubEcdhkey", "clientCheckData", "clientFingerprint", "clientSeqId", "googleAid", "hasHeadImg", "macAddr", "mobileCheckType", "regSessionId", "suggestRet", "verifyContent", "verifySignature" };
    private static readonly uint[] _newRegRequestFieldTags = new uint[] { 50, 58, 40, 96, 104, 136, 130, 34, 26, 154, 146, 112, 66, 122, 18, 258, 162, 266, 282, 10, 336, 330, 314, 298, 346, 290, 250, 306, 184, 274, 352, 362, 192, 178, 170 };
    public static NewRegRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewRegRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewRegRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewRegRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewRegRequest, NewRegRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewRegRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public const int PwdFieldNumber = 3;
    private bool hasPwd;
    private string pwd_ = "";
    public bool HasPwd {
      get { return hasPwd; }
    }
    public string Pwd {
      get { return pwd_; }
    }
    
    public const int NickNameFieldNumber = 4;
    private bool hasNickName;
    private string nickName_ = "";
    public bool HasNickName {
      get { return hasNickName; }
    }
    public string NickName {
      get { return nickName_; }
    }
    
    public const int BindUinFieldNumber = 5;
    private bool hasBindUin;
    private uint bindUin_;
    public bool HasBindUin {
      get { return hasBindUin; }
    }
    [global::System.CLSCompliant(false)]
    public uint BindUin {
      get { return bindUin_; }
    }
    
    public const int BindEmailFieldNumber = 6;
    private bool hasBindEmail;
    private string bindEmail_ = "";
    public bool HasBindEmail {
      get { return hasBindEmail; }
    }
    public string BindEmail {
      get { return bindEmail_; }
    }
    
    public const int BindMobileFieldNumber = 7;
    private bool hasBindMobile;
    private string bindMobile_ = "";
    public bool HasBindMobile {
      get { return hasBindMobile; }
    }
    public string BindMobile {
      get { return bindMobile_; }
    }
    
    public const int TicketFieldNumber = 8;
    private bool hasTicket;
    private string ticket_ = "";
    public bool HasTicket {
      get { return hasTicket; }
    }
    public string Ticket {
      get { return ticket_; }
    }
    
    public const int BuiltinIPSeqFieldNumber = 12;
    private bool hasBuiltinIPSeq;
    private int builtinIPSeq_;
    public bool HasBuiltinIPSeq {
      get { return hasBuiltinIPSeq; }
    }
    public int BuiltinIPSeq {
      get { return builtinIPSeq_; }
    }
    
    public const int DLSrcFieldNumber = 13;
    private bool hasDLSrc;
    private int dLSrc_;
    public bool HasDLSrc {
      get { return hasDLSrc; }
    }
    public int DLSrc {
      get { return dLSrc_; }
    }
    
    public const int RegModeFieldNumber = 14;
    private bool hasRegMode;
    private int regMode_;
    public bool HasRegMode {
      get { return hasRegMode; }
    }
    public int RegMode {
      get { return regMode_; }
    }
    
    public const int TimeZoneFieldNumber = 15;
    private bool hasTimeZone;
    private string timeZone_ = "";
    public bool HasTimeZone {
      get { return hasTimeZone; }
    }
    public string TimeZone {
      get { return timeZone_; }
    }
    
    public const int LanguageFieldNumber = 16;
    private bool hasLanguage;
    private string language_ = "";
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public string Language {
      get { return language_; }
    }
    
    public const int ForceRegFieldNumber = 17;
    private bool hasForceReg;
    private int forceReg_;
    public bool HasForceReg {
      get { return hasForceReg; }
    }
    public int ForceReg {
      get { return forceReg_; }
    }
    
    public const int RealCountryFieldNumber = 18;
    private bool hasRealCountry;
    private string realCountry_ = "";
    public bool HasRealCountry {
      get { return hasRealCountry; }
    }
    public string RealCountry {
      get { return realCountry_; }
    }
    
    public const int RandomEncryKeyFieldNumber = 19;
    private bool hasRandomEncryKey;
    private global::mm.command.SKBuiltinBuffer_t randomEncryKey_;
    public bool HasRandomEncryKey {
      get { return hasRandomEncryKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
      get { return randomEncryKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int AliasFieldNumber = 20;
    private bool hasAlias;
    private string alias_ = "";
    public bool HasAlias {
      get { return hasAlias; }
    }
    public string Alias {
      get { return alias_; }
    }
    
    public const int VerifySignatureFieldNumber = 21;
    private bool hasVerifySignature;
    private string verifySignature_ = "";
    public bool HasVerifySignature {
      get { return hasVerifySignature; }
    }
    public string VerifySignature {
      get { return verifySignature_; }
    }
    
    public const int VerifyContentFieldNumber = 22;
    private bool hasVerifyContent;
    private string verifyContent_ = "";
    public bool HasVerifyContent {
      get { return hasVerifyContent; }
    }
    public string VerifyContent {
      get { return verifyContent_; }
    }
    
    public const int HasHeadImgFieldNumber = 23;
    private bool hasHasHeadImg;
    private uint hasHeadImg_;
    public bool HasHasHeadImg {
      get { return hasHasHeadImg; }
    }
    [global::System.CLSCompliant(false)]
    public uint HasHeadImg {
      get { return hasHeadImg_; }
    }
    
    public const int SuggestRetFieldNumber = 24;
    private bool hasSuggestRet;
    private uint suggestRet_;
    public bool HasSuggestRet {
      get { return hasSuggestRet; }
    }
    [global::System.CLSCompliant(false)]
    public uint SuggestRet {
      get { return suggestRet_; }
    }
    
    public const int ClientSeqIdFieldNumber = 31;
    private bool hasClientSeqId;
    private string clientSeqId_ = "";
    public bool HasClientSeqId {
      get { return hasClientSeqId; }
    }
    public string ClientSeqId {
      get { return clientSeqId_; }
    }
    
    public const int AdSourceFieldNumber = 32;
    private bool hasAdSource;
    private string adSource_ = "";
    public bool HasAdSource {
      get { return hasAdSource; }
    }
    public string AdSource {
      get { return adSource_; }
    }
    
    public const int AndroidIdFieldNumber = 33;
    private bool hasAndroidId;
    private string androidId_ = "";
    public bool HasAndroidId {
      get { return hasAndroidId; }
    }
    public string AndroidId {
      get { return androidId_; }
    }
    
    public const int MacAddrFieldNumber = 34;
    private bool hasMacAddr;
    private string macAddr_ = "";
    public bool HasMacAddr {
      get { return hasMacAddr; }
    }
    public string MacAddr {
      get { return macAddr_; }
    }
    
    public const int AndroidInstallRefFieldNumber = 35;
    private bool hasAndroidInstallRef;
    private string androidInstallRef_ = "";
    public bool HasAndroidInstallRef {
      get { return hasAndroidInstallRef; }
    }
    public string AndroidInstallRef {
      get { return androidInstallRef_; }
    }
    
    public const int ClientFingerprintFieldNumber = 36;
    private bool hasClientFingerprint;
    private string clientFingerprint_ = "";
    public bool HasClientFingerprint {
      get { return hasClientFingerprint; }
    }
    public string ClientFingerprint {
      get { return clientFingerprint_; }
    }
    
    public const int CliPubEcdhkeyFieldNumber = 37;
    private bool hasCliPubEcdhkey;
    private global::mm.command.ECDHKey cliPubEcdhkey_;
    public bool HasCliPubEcdhkey {
      get { return hasCliPubEcdhkey; }
    }
    public global::mm.command.ECDHKey CliPubEcdhkey {
      get { return cliPubEcdhkey_ ?? global::mm.command.ECDHKey.DefaultInstance; }
    }
    
    public const int GoogleAidFieldNumber = 38;
    private bool hasGoogleAid;
    private string googleAid_ = "";
    public bool HasGoogleAid {
      get { return hasGoogleAid; }
    }
    public string GoogleAid {
      get { return googleAid_; }
    }
    
    public const int BundleIdFieldNumber = 39;
    private bool hasBundleId;
    private string bundleId_ = "";
    public bool HasBundleId {
      get { return hasBundleId; }
    }
    public string BundleId {
      get { return bundleId_; }
    }
    
    public const int BioSigTicketFieldNumber = 41;
    private bool hasBioSigTicket;
    private string bioSigTicket_ = "";
    public bool HasBioSigTicket {
      get { return hasBioSigTicket; }
    }
    public string BioSigTicket {
      get { return bioSigTicket_; }
    }
    
    public const int BioSigCheckTypeFieldNumber = 42;
    private bool hasBioSigCheckType;
    private uint bioSigCheckType_;
    public bool HasBioSigCheckType {
      get { return hasBioSigCheckType; }
    }
    [global::System.CLSCompliant(false)]
    public uint BioSigCheckType {
      get { return bioSigCheckType_; }
    }
    
    public const int ClientCheckDataFieldNumber = 43;
    private bool hasClientCheckData;
    private global::mm.command.SKBuiltinBuffer_t clientCheckData_;
    public bool HasClientCheckData {
      get { return hasClientCheckData; }
    }
    public global::mm.command.SKBuiltinBuffer_t ClientCheckData {
      get { return clientCheckData_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int MobileCheckTypeFieldNumber = 44;
    private bool hasMobileCheckType;
    private uint mobileCheckType_;
    public bool HasMobileCheckType {
      get { return hasMobileCheckType; }
    }
    [global::System.CLSCompliant(false)]
    public uint MobileCheckType {
      get { return mobileCheckType_; }
    }
    
    public const int RegSessionIdFieldNumber = 45;
    private bool hasRegSessionId;
    private string regSessionId_ = "";
    public bool HasRegSessionId {
      get { return hasRegSessionId; }
    }
    public string RegSessionId {
      get { return regSessionId_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasBindUin) return false;
        if (!hasBindEmail) return false;
        if (!hasRandomEncryKey) return false;
        if (!Base.IsInitialized) return false;
        if (!RandomEncryKey.IsInitialized) return false;
        if (HasCliPubEcdhkey) {
          if (!CliPubEcdhkey.IsInitialized) return false;
        }
        if (HasClientCheckData) {
          if (!ClientCheckData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newRegRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[19], Base);
      }
      if (hasUserName) {
        output.WriteString(2, field_names[14], UserName);
      }
      if (hasPwd) {
        output.WriteString(3, field_names[8], Pwd);
      }
      if (hasNickName) {
        output.WriteString(4, field_names[7], NickName);
      }
      if (hasBindUin) {
        output.WriteUInt32(5, field_names[2], BindUin);
      }
      if (hasBindEmail) {
        output.WriteString(6, field_names[0], BindEmail);
      }
      if (hasBindMobile) {
        output.WriteString(7, field_names[1], BindMobile);
      }
      if (hasTicket) {
        output.WriteString(8, field_names[12], Ticket);
      }
      if (hasBuiltinIPSeq) {
        output.WriteInt32(12, field_names[3], BuiltinIPSeq);
      }
      if (hasDLSrc) {
        output.WriteInt32(13, field_names[4], DLSrc);
      }
      if (hasRegMode) {
        output.WriteInt32(14, field_names[11], RegMode);
      }
      if (hasTimeZone) {
        output.WriteString(15, field_names[13], TimeZone);
      }
      if (hasLanguage) {
        output.WriteString(16, field_names[6], Language);
      }
      if (hasForceReg) {
        output.WriteInt32(17, field_names[5], ForceReg);
      }
      if (hasRealCountry) {
        output.WriteString(18, field_names[10], RealCountry);
      }
      if (hasRandomEncryKey) {
        output.WriteMessage(19, field_names[9], RandomEncryKey);
      }
      if (hasAlias) {
        output.WriteString(20, field_names[16], Alias);
      }
      if (hasVerifySignature) {
        output.WriteString(21, field_names[34], VerifySignature);
      }
      if (hasVerifyContent) {
        output.WriteString(22, field_names[33], VerifyContent);
      }
      if (hasHasHeadImg) {
        output.WriteUInt32(23, field_names[28], HasHeadImg);
      }
      if (hasSuggestRet) {
        output.WriteUInt32(24, field_names[32], SuggestRet);
      }
      if (hasClientSeqId) {
        output.WriteString(31, field_names[26], ClientSeqId);
      }
      if (hasAdSource) {
        output.WriteString(32, field_names[15], AdSource);
      }
      if (hasAndroidId) {
        output.WriteString(33, field_names[17], AndroidId);
      }
      if (hasMacAddr) {
        output.WriteString(34, field_names[29], MacAddr);
      }
      if (hasAndroidInstallRef) {
        output.WriteString(35, field_names[18], AndroidInstallRef);
      }
      if (hasClientFingerprint) {
        output.WriteString(36, field_names[25], ClientFingerprint);
      }
      if (hasCliPubEcdhkey) {
        output.WriteMessage(37, field_names[23], CliPubEcdhkey);
      }
      if (hasGoogleAid) {
        output.WriteString(38, field_names[27], GoogleAid);
      }
      if (hasBundleId) {
        output.WriteString(39, field_names[22], BundleId);
      }
      if (hasBioSigTicket) {
        output.WriteString(41, field_names[21], BioSigTicket);
      }
      if (hasBioSigCheckType) {
        output.WriteUInt32(42, field_names[20], BioSigCheckType);
      }
      if (hasClientCheckData) {
        output.WriteMessage(43, field_names[24], ClientCheckData);
      }
      if (hasMobileCheckType) {
        output.WriteUInt32(44, field_names[30], MobileCheckType);
      }
      if (hasRegSessionId) {
        output.WriteString(45, field_names[31], RegSessionId);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserName);
        }
        if (hasPwd) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Pwd);
        }
        if (hasNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, NickName);
        }
        if (hasBindUin) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, BindUin);
        }
        if (hasBindEmail) {
          size += pb::CodedOutputStream.ComputeStringSize(6, BindEmail);
        }
        if (hasBindMobile) {
          size += pb::CodedOutputStream.ComputeStringSize(7, BindMobile);
        }
        if (hasTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Ticket);
        }
        if (hasBuiltinIPSeq) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, BuiltinIPSeq);
        }
        if (hasDLSrc) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, DLSrc);
        }
        if (hasRegMode) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, RegMode);
        }
        if (hasTimeZone) {
          size += pb::CodedOutputStream.ComputeStringSize(15, TimeZone);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeStringSize(16, Language);
        }
        if (hasForceReg) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, ForceReg);
        }
        if (hasRealCountry) {
          size += pb::CodedOutputStream.ComputeStringSize(18, RealCountry);
        }
        if (hasRandomEncryKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(19, RandomEncryKey);
        }
        if (hasAlias) {
          size += pb::CodedOutputStream.ComputeStringSize(20, Alias);
        }
        if (hasVerifySignature) {
          size += pb::CodedOutputStream.ComputeStringSize(21, VerifySignature);
        }
        if (hasVerifyContent) {
          size += pb::CodedOutputStream.ComputeStringSize(22, VerifyContent);
        }
        if (hasHasHeadImg) {
          size += pb::CodedOutputStream.ComputeUInt32Size(23, HasHeadImg);
        }
        if (hasSuggestRet) {
          size += pb::CodedOutputStream.ComputeUInt32Size(24, SuggestRet);
        }
        if (hasClientSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(31, ClientSeqId);
        }
        if (hasAdSource) {
          size += pb::CodedOutputStream.ComputeStringSize(32, AdSource);
        }
        if (hasAndroidId) {
          size += pb::CodedOutputStream.ComputeStringSize(33, AndroidId);
        }
        if (hasMacAddr) {
          size += pb::CodedOutputStream.ComputeStringSize(34, MacAddr);
        }
        if (hasAndroidInstallRef) {
          size += pb::CodedOutputStream.ComputeStringSize(35, AndroidInstallRef);
        }
        if (hasClientFingerprint) {
          size += pb::CodedOutputStream.ComputeStringSize(36, ClientFingerprint);
        }
        if (hasCliPubEcdhkey) {
          size += pb::CodedOutputStream.ComputeMessageSize(37, CliPubEcdhkey);
        }
        if (hasGoogleAid) {
          size += pb::CodedOutputStream.ComputeStringSize(38, GoogleAid);
        }
        if (hasBundleId) {
          size += pb::CodedOutputStream.ComputeStringSize(39, BundleId);
        }
        if (hasBioSigTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(41, BioSigTicket);
        }
        if (hasBioSigCheckType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(42, BioSigCheckType);
        }
        if (hasClientCheckData) {
          size += pb::CodedOutputStream.ComputeMessageSize(43, ClientCheckData);
        }
        if (hasMobileCheckType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(44, MobileCheckType);
        }
        if (hasRegSessionId) {
          size += pb::CodedOutputStream.ComputeStringSize(45, RegSessionId);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewRegRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewRegRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewRegRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewRegRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewRegRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewRegRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewRegRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewRegRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewRegRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewRegRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewRegRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewRegRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewRegRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewRegRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewRegRequest result;
      
      private NewRegRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NewRegRequest original = result;
          result = new NewRegRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewRegRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewRegRequest.Descriptor; }
      }
      
      public override NewRegRequest DefaultInstanceForType {
        get { return global::mm.command.NewRegRequest.DefaultInstance; }
      }
      
      public override NewRegRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewRegRequest) {
          return MergeFrom((NewRegRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewRegRequest other) {
        if (other == global::mm.command.NewRegRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasPwd) {
          Pwd = other.Pwd;
        }
        if (other.HasNickName) {
          NickName = other.NickName;
        }
        if (other.HasBindUin) {
          BindUin = other.BindUin;
        }
        if (other.HasBindEmail) {
          BindEmail = other.BindEmail;
        }
        if (other.HasBindMobile) {
          BindMobile = other.BindMobile;
        }
        if (other.HasTicket) {
          Ticket = other.Ticket;
        }
        if (other.HasBuiltinIPSeq) {
          BuiltinIPSeq = other.BuiltinIPSeq;
        }
        if (other.HasDLSrc) {
          DLSrc = other.DLSrc;
        }
        if (other.HasRegMode) {
          RegMode = other.RegMode;
        }
        if (other.HasTimeZone) {
          TimeZone = other.TimeZone;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasForceReg) {
          ForceReg = other.ForceReg;
        }
        if (other.HasRealCountry) {
          RealCountry = other.RealCountry;
        }
        if (other.HasRandomEncryKey) {
          MergeRandomEncryKey(other.RandomEncryKey);
        }
        if (other.HasAlias) {
          Alias = other.Alias;
        }
        if (other.HasVerifySignature) {
          VerifySignature = other.VerifySignature;
        }
        if (other.HasVerifyContent) {
          VerifyContent = other.VerifyContent;
        }
        if (other.HasHasHeadImg) {
          HasHeadImg = other.HasHeadImg;
        }
        if (other.HasSuggestRet) {
          SuggestRet = other.SuggestRet;
        }
        if (other.HasClientSeqId) {
          ClientSeqId = other.ClientSeqId;
        }
        if (other.HasAdSource) {
          AdSource = other.AdSource;
        }
        if (other.HasAndroidId) {
          AndroidId = other.AndroidId;
        }
        if (other.HasMacAddr) {
          MacAddr = other.MacAddr;
        }
        if (other.HasAndroidInstallRef) {
          AndroidInstallRef = other.AndroidInstallRef;
        }
        if (other.HasClientFingerprint) {
          ClientFingerprint = other.ClientFingerprint;
        }
        if (other.HasCliPubEcdhkey) {
          MergeCliPubEcdhkey(other.CliPubEcdhkey);
        }
        if (other.HasGoogleAid) {
          GoogleAid = other.GoogleAid;
        }
        if (other.HasBundleId) {
          BundleId = other.BundleId;
        }
        if (other.HasBioSigTicket) {
          BioSigTicket = other.BioSigTicket;
        }
        if (other.HasBioSigCheckType) {
          BioSigCheckType = other.BioSigCheckType;
        }
        if (other.HasClientCheckData) {
          MergeClientCheckData(other.ClientCheckData);
        }
        if (other.HasMobileCheckType) {
          MobileCheckType = other.MobileCheckType;
        }
        if (other.HasRegSessionId) {
          RegSessionId = other.RegSessionId;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newRegRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newRegRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 26: {
              result.hasPwd = input.ReadString(ref result.pwd_);
              break;
            }
            case 34: {
              result.hasNickName = input.ReadString(ref result.nickName_);
              break;
            }
            case 40: {
              result.hasBindUin = input.ReadUInt32(ref result.bindUin_);
              break;
            }
            case 50: {
              result.hasBindEmail = input.ReadString(ref result.bindEmail_);
              break;
            }
            case 58: {
              result.hasBindMobile = input.ReadString(ref result.bindMobile_);
              break;
            }
            case 66: {
              result.hasTicket = input.ReadString(ref result.ticket_);
              break;
            }
            case 96: {
              result.hasBuiltinIPSeq = input.ReadInt32(ref result.builtinIPSeq_);
              break;
            }
            case 104: {
              result.hasDLSrc = input.ReadInt32(ref result.dLSrc_);
              break;
            }
            case 112: {
              result.hasRegMode = input.ReadInt32(ref result.regMode_);
              break;
            }
            case 122: {
              result.hasTimeZone = input.ReadString(ref result.timeZone_);
              break;
            }
            case 130: {
              result.hasLanguage = input.ReadString(ref result.language_);
              break;
            }
            case 136: {
              result.hasForceReg = input.ReadInt32(ref result.forceReg_);
              break;
            }
            case 146: {
              result.hasRealCountry = input.ReadString(ref result.realCountry_);
              break;
            }
            case 154: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasRandomEncryKey) {
                subBuilder.MergeFrom(RandomEncryKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RandomEncryKey = subBuilder.BuildPartial();
              break;
            }
            case 162: {
              result.hasAlias = input.ReadString(ref result.alias_);
              break;
            }
            case 170: {
              result.hasVerifySignature = input.ReadString(ref result.verifySignature_);
              break;
            }
            case 178: {
              result.hasVerifyContent = input.ReadString(ref result.verifyContent_);
              break;
            }
            case 184: {
              result.hasHasHeadImg = input.ReadUInt32(ref result.hasHeadImg_);
              break;
            }
            case 192: {
              result.hasSuggestRet = input.ReadUInt32(ref result.suggestRet_);
              break;
            }
            case 250: {
              result.hasClientSeqId = input.ReadString(ref result.clientSeqId_);
              break;
            }
            case 258: {
              result.hasAdSource = input.ReadString(ref result.adSource_);
              break;
            }
            case 266: {
              result.hasAndroidId = input.ReadString(ref result.androidId_);
              break;
            }
            case 274: {
              result.hasMacAddr = input.ReadString(ref result.macAddr_);
              break;
            }
            case 282: {
              result.hasAndroidInstallRef = input.ReadString(ref result.androidInstallRef_);
              break;
            }
            case 290: {
              result.hasClientFingerprint = input.ReadString(ref result.clientFingerprint_);
              break;
            }
            case 298: {
              global::mm.command.ECDHKey.Builder subBuilder = global::mm.command.ECDHKey.CreateBuilder();
              if (result.hasCliPubEcdhkey) {
                subBuilder.MergeFrom(CliPubEcdhkey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CliPubEcdhkey = subBuilder.BuildPartial();
              break;
            }
            case 306: {
              result.hasGoogleAid = input.ReadString(ref result.googleAid_);
              break;
            }
            case 314: {
              result.hasBundleId = input.ReadString(ref result.bundleId_);
              break;
            }
            case 330: {
              result.hasBioSigTicket = input.ReadString(ref result.bioSigTicket_);
              break;
            }
            case 336: {
              result.hasBioSigCheckType = input.ReadUInt32(ref result.bioSigCheckType_);
              break;
            }
            case 346: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasClientCheckData) {
                subBuilder.MergeFrom(ClientCheckData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientCheckData = subBuilder.BuildPartial();
              break;
            }
            case 352: {
              result.hasMobileCheckType = input.ReadUInt32(ref result.mobileCheckType_);
              break;
            }
            case 362: {
              result.hasRegSessionId = input.ReadString(ref result.regSessionId_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasPwd {
        get { return result.hasPwd; }
      }
      public string Pwd {
        get { return result.Pwd; }
        set { SetPwd(value); }
      }
      public Builder SetPwd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPwd = true;
        result.pwd_ = value;
        return this;
      }
      public Builder ClearPwd() {
        PrepareBuilder();
        result.hasPwd = false;
        result.pwd_ = "";
        return this;
      }
      
      public bool HasNickName {
        get { return result.hasNickName; }
      }
      public string NickName {
        get { return result.NickName; }
        set { SetNickName(value); }
      }
      public Builder SetNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = value;
        return this;
      }
      public Builder ClearNickName() {
        PrepareBuilder();
        result.hasNickName = false;
        result.nickName_ = "";
        return this;
      }
      
      public bool HasBindUin {
        get { return result.hasBindUin; }
      }
      [global::System.CLSCompliant(false)]
      public uint BindUin {
        get { return result.BindUin; }
        set { SetBindUin(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBindUin(uint value) {
        PrepareBuilder();
        result.hasBindUin = true;
        result.bindUin_ = value;
        return this;
      }
      public Builder ClearBindUin() {
        PrepareBuilder();
        result.hasBindUin = false;
        result.bindUin_ = 0;
        return this;
      }
      
      public bool HasBindEmail {
        get { return result.hasBindEmail; }
      }
      public string BindEmail {
        get { return result.BindEmail; }
        set { SetBindEmail(value); }
      }
      public Builder SetBindEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBindEmail = true;
        result.bindEmail_ = value;
        return this;
      }
      public Builder ClearBindEmail() {
        PrepareBuilder();
        result.hasBindEmail = false;
        result.bindEmail_ = "";
        return this;
      }
      
      public bool HasBindMobile {
        get { return result.hasBindMobile; }
      }
      public string BindMobile {
        get { return result.BindMobile; }
        set { SetBindMobile(value); }
      }
      public Builder SetBindMobile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBindMobile = true;
        result.bindMobile_ = value;
        return this;
      }
      public Builder ClearBindMobile() {
        PrepareBuilder();
        result.hasBindMobile = false;
        result.bindMobile_ = "";
        return this;
      }
      
      public bool HasTicket {
        get { return result.hasTicket; }
      }
      public string Ticket {
        get { return result.Ticket; }
        set { SetTicket(value); }
      }
      public Builder SetTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTicket = true;
        result.ticket_ = value;
        return this;
      }
      public Builder ClearTicket() {
        PrepareBuilder();
        result.hasTicket = false;
        result.ticket_ = "";
        return this;
      }
      
      public bool HasBuiltinIPSeq {
        get { return result.hasBuiltinIPSeq; }
      }
      public int BuiltinIPSeq {
        get { return result.BuiltinIPSeq; }
        set { SetBuiltinIPSeq(value); }
      }
      public Builder SetBuiltinIPSeq(int value) {
        PrepareBuilder();
        result.hasBuiltinIPSeq = true;
        result.builtinIPSeq_ = value;
        return this;
      }
      public Builder ClearBuiltinIPSeq() {
        PrepareBuilder();
        result.hasBuiltinIPSeq = false;
        result.builtinIPSeq_ = 0;
        return this;
      }
      
      public bool HasDLSrc {
        get { return result.hasDLSrc; }
      }
      public int DLSrc {
        get { return result.DLSrc; }
        set { SetDLSrc(value); }
      }
      public Builder SetDLSrc(int value) {
        PrepareBuilder();
        result.hasDLSrc = true;
        result.dLSrc_ = value;
        return this;
      }
      public Builder ClearDLSrc() {
        PrepareBuilder();
        result.hasDLSrc = false;
        result.dLSrc_ = 0;
        return this;
      }
      
      public bool HasRegMode {
        get { return result.hasRegMode; }
      }
      public int RegMode {
        get { return result.RegMode; }
        set { SetRegMode(value); }
      }
      public Builder SetRegMode(int value) {
        PrepareBuilder();
        result.hasRegMode = true;
        result.regMode_ = value;
        return this;
      }
      public Builder ClearRegMode() {
        PrepareBuilder();
        result.hasRegMode = false;
        result.regMode_ = 0;
        return this;
      }
      
      public bool HasTimeZone {
        get { return result.hasTimeZone; }
      }
      public string TimeZone {
        get { return result.TimeZone; }
        set { SetTimeZone(value); }
      }
      public Builder SetTimeZone(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimeZone = true;
        result.timeZone_ = value;
        return this;
      }
      public Builder ClearTimeZone() {
        PrepareBuilder();
        result.hasTimeZone = false;
        result.timeZone_ = "";
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public string Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = "";
        return this;
      }
      
      public bool HasForceReg {
        get { return result.hasForceReg; }
      }
      public int ForceReg {
        get { return result.ForceReg; }
        set { SetForceReg(value); }
      }
      public Builder SetForceReg(int value) {
        PrepareBuilder();
        result.hasForceReg = true;
        result.forceReg_ = value;
        return this;
      }
      public Builder ClearForceReg() {
        PrepareBuilder();
        result.hasForceReg = false;
        result.forceReg_ = 0;
        return this;
      }
      
      public bool HasRealCountry {
        get { return result.hasRealCountry; }
      }
      public string RealCountry {
        get { return result.RealCountry; }
        set { SetRealCountry(value); }
      }
      public Builder SetRealCountry(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRealCountry = true;
        result.realCountry_ = value;
        return this;
      }
      public Builder ClearRealCountry() {
        PrepareBuilder();
        result.hasRealCountry = false;
        result.realCountry_ = "";
        return this;
      }
      
      public bool HasRandomEncryKey {
       get { return result.hasRandomEncryKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
        get { return result.RandomEncryKey; }
        set { SetRandomEncryKey(value); }
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = value;
        return this;
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRandomEncryKey &&
            result.randomEncryKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.randomEncryKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.randomEncryKey_).MergeFrom(value).BuildPartial();
        } else {
          result.randomEncryKey_ = value;
        }
        result.hasRandomEncryKey = true;
        return this;
      }
      public Builder ClearRandomEncryKey() {
        PrepareBuilder();
        result.hasRandomEncryKey = false;
        result.randomEncryKey_ = null;
        return this;
      }
      
      public bool HasAlias {
        get { return result.hasAlias; }
      }
      public string Alias {
        get { return result.Alias; }
        set { SetAlias(value); }
      }
      public Builder SetAlias(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAlias = true;
        result.alias_ = value;
        return this;
      }
      public Builder ClearAlias() {
        PrepareBuilder();
        result.hasAlias = false;
        result.alias_ = "";
        return this;
      }
      
      public bool HasVerifySignature {
        get { return result.hasVerifySignature; }
      }
      public string VerifySignature {
        get { return result.VerifySignature; }
        set { SetVerifySignature(value); }
      }
      public Builder SetVerifySignature(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVerifySignature = true;
        result.verifySignature_ = value;
        return this;
      }
      public Builder ClearVerifySignature() {
        PrepareBuilder();
        result.hasVerifySignature = false;
        result.verifySignature_ = "";
        return this;
      }
      
      public bool HasVerifyContent {
        get { return result.hasVerifyContent; }
      }
      public string VerifyContent {
        get { return result.VerifyContent; }
        set { SetVerifyContent(value); }
      }
      public Builder SetVerifyContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVerifyContent = true;
        result.verifyContent_ = value;
        return this;
      }
      public Builder ClearVerifyContent() {
        PrepareBuilder();
        result.hasVerifyContent = false;
        result.verifyContent_ = "";
        return this;
      }
      
      public bool HasHasHeadImg {
        get { return result.hasHasHeadImg; }
      }
      [global::System.CLSCompliant(false)]
      public uint HasHeadImg {
        get { return result.HasHeadImg; }
        set { SetHasHeadImg(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHasHeadImg(uint value) {
        PrepareBuilder();
        result.hasHasHeadImg = true;
        result.hasHeadImg_ = value;
        return this;
      }
      public Builder ClearHasHeadImg() {
        PrepareBuilder();
        result.hasHasHeadImg = false;
        result.hasHeadImg_ = 0;
        return this;
      }
      
      public bool HasSuggestRet {
        get { return result.hasSuggestRet; }
      }
      [global::System.CLSCompliant(false)]
      public uint SuggestRet {
        get { return result.SuggestRet; }
        set { SetSuggestRet(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSuggestRet(uint value) {
        PrepareBuilder();
        result.hasSuggestRet = true;
        result.suggestRet_ = value;
        return this;
      }
      public Builder ClearSuggestRet() {
        PrepareBuilder();
        result.hasSuggestRet = false;
        result.suggestRet_ = 0;
        return this;
      }
      
      public bool HasClientSeqId {
        get { return result.hasClientSeqId; }
      }
      public string ClientSeqId {
        get { return result.ClientSeqId; }
        set { SetClientSeqId(value); }
      }
      public Builder SetClientSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientSeqId = true;
        result.clientSeqId_ = value;
        return this;
      }
      public Builder ClearClientSeqId() {
        PrepareBuilder();
        result.hasClientSeqId = false;
        result.clientSeqId_ = "";
        return this;
      }
      
      public bool HasAdSource {
        get { return result.hasAdSource; }
      }
      public string AdSource {
        get { return result.AdSource; }
        set { SetAdSource(value); }
      }
      public Builder SetAdSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAdSource = true;
        result.adSource_ = value;
        return this;
      }
      public Builder ClearAdSource() {
        PrepareBuilder();
        result.hasAdSource = false;
        result.adSource_ = "";
        return this;
      }
      
      public bool HasAndroidId {
        get { return result.hasAndroidId; }
      }
      public string AndroidId {
        get { return result.AndroidId; }
        set { SetAndroidId(value); }
      }
      public Builder SetAndroidId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAndroidId = true;
        result.androidId_ = value;
        return this;
      }
      public Builder ClearAndroidId() {
        PrepareBuilder();
        result.hasAndroidId = false;
        result.androidId_ = "";
        return this;
      }
      
      public bool HasMacAddr {
        get { return result.hasMacAddr; }
      }
      public string MacAddr {
        get { return result.MacAddr; }
        set { SetMacAddr(value); }
      }
      public Builder SetMacAddr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMacAddr = true;
        result.macAddr_ = value;
        return this;
      }
      public Builder ClearMacAddr() {
        PrepareBuilder();
        result.hasMacAddr = false;
        result.macAddr_ = "";
        return this;
      }
      
      public bool HasAndroidInstallRef {
        get { return result.hasAndroidInstallRef; }
      }
      public string AndroidInstallRef {
        get { return result.AndroidInstallRef; }
        set { SetAndroidInstallRef(value); }
      }
      public Builder SetAndroidInstallRef(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAndroidInstallRef = true;
        result.androidInstallRef_ = value;
        return this;
      }
      public Builder ClearAndroidInstallRef() {
        PrepareBuilder();
        result.hasAndroidInstallRef = false;
        result.androidInstallRef_ = "";
        return this;
      }
      
      public bool HasClientFingerprint {
        get { return result.hasClientFingerprint; }
      }
      public string ClientFingerprint {
        get { return result.ClientFingerprint; }
        set { SetClientFingerprint(value); }
      }
      public Builder SetClientFingerprint(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientFingerprint = true;
        result.clientFingerprint_ = value;
        return this;
      }
      public Builder ClearClientFingerprint() {
        PrepareBuilder();
        result.hasClientFingerprint = false;
        result.clientFingerprint_ = "";
        return this;
      }
      
      public bool HasCliPubEcdhkey {
       get { return result.hasCliPubEcdhkey; }
      }
      public global::mm.command.ECDHKey CliPubEcdhkey {
        get { return result.CliPubEcdhkey; }
        set { SetCliPubEcdhkey(value); }
      }
      public Builder SetCliPubEcdhkey(global::mm.command.ECDHKey value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCliPubEcdhkey = true;
        result.cliPubEcdhkey_ = value;
        return this;
      }
      public Builder SetCliPubEcdhkey(global::mm.command.ECDHKey.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCliPubEcdhkey = true;
        result.cliPubEcdhkey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCliPubEcdhkey(global::mm.command.ECDHKey value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCliPubEcdhkey &&
            result.cliPubEcdhkey_ != global::mm.command.ECDHKey.DefaultInstance) {
            result.cliPubEcdhkey_ = global::mm.command.ECDHKey.CreateBuilder(result.cliPubEcdhkey_).MergeFrom(value).BuildPartial();
        } else {
          result.cliPubEcdhkey_ = value;
        }
        result.hasCliPubEcdhkey = true;
        return this;
      }
      public Builder ClearCliPubEcdhkey() {
        PrepareBuilder();
        result.hasCliPubEcdhkey = false;
        result.cliPubEcdhkey_ = null;
        return this;
      }
      
      public bool HasGoogleAid {
        get { return result.hasGoogleAid; }
      }
      public string GoogleAid {
        get { return result.GoogleAid; }
        set { SetGoogleAid(value); }
      }
      public Builder SetGoogleAid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGoogleAid = true;
        result.googleAid_ = value;
        return this;
      }
      public Builder ClearGoogleAid() {
        PrepareBuilder();
        result.hasGoogleAid = false;
        result.googleAid_ = "";
        return this;
      }
      
      public bool HasBundleId {
        get { return result.hasBundleId; }
      }
      public string BundleId {
        get { return result.BundleId; }
        set { SetBundleId(value); }
      }
      public Builder SetBundleId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBundleId = true;
        result.bundleId_ = value;
        return this;
      }
      public Builder ClearBundleId() {
        PrepareBuilder();
        result.hasBundleId = false;
        result.bundleId_ = "";
        return this;
      }
      
      public bool HasBioSigTicket {
        get { return result.hasBioSigTicket; }
      }
      public string BioSigTicket {
        get { return result.BioSigTicket; }
        set { SetBioSigTicket(value); }
      }
      public Builder SetBioSigTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBioSigTicket = true;
        result.bioSigTicket_ = value;
        return this;
      }
      public Builder ClearBioSigTicket() {
        PrepareBuilder();
        result.hasBioSigTicket = false;
        result.bioSigTicket_ = "";
        return this;
      }
      
      public bool HasBioSigCheckType {
        get { return result.hasBioSigCheckType; }
      }
      [global::System.CLSCompliant(false)]
      public uint BioSigCheckType {
        get { return result.BioSigCheckType; }
        set { SetBioSigCheckType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBioSigCheckType(uint value) {
        PrepareBuilder();
        result.hasBioSigCheckType = true;
        result.bioSigCheckType_ = value;
        return this;
      }
      public Builder ClearBioSigCheckType() {
        PrepareBuilder();
        result.hasBioSigCheckType = false;
        result.bioSigCheckType_ = 0;
        return this;
      }
      
      public bool HasClientCheckData {
       get { return result.hasClientCheckData; }
      }
      public global::mm.command.SKBuiltinBuffer_t ClientCheckData {
        get { return result.ClientCheckData; }
        set { SetClientCheckData(value); }
      }
      public Builder SetClientCheckData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientCheckData = true;
        result.clientCheckData_ = value;
        return this;
      }
      public Builder SetClientCheckData(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClientCheckData = true;
        result.clientCheckData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientCheckData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClientCheckData &&
            result.clientCheckData_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.clientCheckData_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.clientCheckData_).MergeFrom(value).BuildPartial();
        } else {
          result.clientCheckData_ = value;
        }
        result.hasClientCheckData = true;
        return this;
      }
      public Builder ClearClientCheckData() {
        PrepareBuilder();
        result.hasClientCheckData = false;
        result.clientCheckData_ = null;
        return this;
      }
      
      public bool HasMobileCheckType {
        get { return result.hasMobileCheckType; }
      }
      [global::System.CLSCompliant(false)]
      public uint MobileCheckType {
        get { return result.MobileCheckType; }
        set { SetMobileCheckType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMobileCheckType(uint value) {
        PrepareBuilder();
        result.hasMobileCheckType = true;
        result.mobileCheckType_ = value;
        return this;
      }
      public Builder ClearMobileCheckType() {
        PrepareBuilder();
        result.hasMobileCheckType = false;
        result.mobileCheckType_ = 0;
        return this;
      }
      
      public bool HasRegSessionId {
        get { return result.hasRegSessionId; }
      }
      public string RegSessionId {
        get { return result.RegSessionId; }
        set { SetRegSessionId(value); }
      }
      public Builder SetRegSessionId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRegSessionId = true;
        result.regSessionId_ = value;
        return this;
      }
      public Builder ClearRegSessionId() {
        PrepareBuilder();
        result.hasRegSessionId = false;
        result.regSessionId_ = "";
        return this;
      }
    }
    static NewRegRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewRegResponse : pb::GeneratedMessage<NewRegResponse, NewRegResponse.Builder> {
    private NewRegResponse() { }
    private static readonly NewRegResponse defaultInstance = new NewRegResponse().MakeReadOnly();
    private static readonly string[] _newRegResponseFieldNames = new string[] { "AuthKey", "AutoAuthTicket", "BindEmail", "BuiltinIPList", "DnsInfo", "FSURL", "NetworkControl", "NewHostList", "OfficialNickName", "OfficialUserName", "Password", "PluginKeyList", "ProfileFlag", "PushMailSettingTicket", "PushMailStatus", "QQMicroBlogUserName", "RegType", "ReturnFlag", "SendCardBitFlag", "SessionKey", "Status", "Uin", "UserName", "appDnsInfo", "base", "secAuthRegKeySect", "showStyle", "snsDnsInfo", "stepTicket", "verifyBuff", "verifySignature" };
    private static readonly uint[] _newRegResponseFieldTags = new uint[] { 170, 210, 58, 114, 218, 122, 146, 202, 42, 34, 186, 178, 192, 82, 64, 50, 160, 152, 72, 26, 136, 16, 130, 266, 10, 274, 250, 258, 226, 242, 234 };
    public static NewRegResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewRegResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewRegResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewRegResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewRegResponse, NewRegResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewRegResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int UinFieldNumber = 2;
    private bool hasUin;
    private uint uin_;
    public bool HasUin {
      get { return hasUin; }
    }
    [global::System.CLSCompliant(false)]
    public uint Uin {
      get { return uin_; }
    }
    
    public const int SessionKeyFieldNumber = 3;
    private bool hasSessionKey;
    private string sessionKey_ = "";
    public bool HasSessionKey {
      get { return hasSessionKey; }
    }
    public string SessionKey {
      get { return sessionKey_; }
    }
    
    public const int OfficialUserNameFieldNumber = 4;
    private bool hasOfficialUserName;
    private string officialUserName_ = "";
    public bool HasOfficialUserName {
      get { return hasOfficialUserName; }
    }
    public string OfficialUserName {
      get { return officialUserName_; }
    }
    
    public const int OfficialNickNameFieldNumber = 5;
    private bool hasOfficialNickName;
    private string officialNickName_ = "";
    public bool HasOfficialNickName {
      get { return hasOfficialNickName; }
    }
    public string OfficialNickName {
      get { return officialNickName_; }
    }
    
    public const int QQMicroBlogUserNameFieldNumber = 6;
    private bool hasQQMicroBlogUserName;
    private string qQMicroBlogUserName_ = "";
    public bool HasQQMicroBlogUserName {
      get { return hasQQMicroBlogUserName; }
    }
    public string QQMicroBlogUserName {
      get { return qQMicroBlogUserName_; }
    }
    
    public const int BindEmailFieldNumber = 7;
    private bool hasBindEmail;
    private string bindEmail_ = "";
    public bool HasBindEmail {
      get { return hasBindEmail; }
    }
    public string BindEmail {
      get { return bindEmail_; }
    }
    
    public const int PushMailStatusFieldNumber = 8;
    private bool hasPushMailStatus;
    private int pushMailStatus_;
    public bool HasPushMailStatus {
      get { return hasPushMailStatus; }
    }
    public int PushMailStatus {
      get { return pushMailStatus_; }
    }
    
    public const int SendCardBitFlagFieldNumber = 9;
    private bool hasSendCardBitFlag;
    private int sendCardBitFlag_;
    public bool HasSendCardBitFlag {
      get { return hasSendCardBitFlag; }
    }
    public int SendCardBitFlag {
      get { return sendCardBitFlag_; }
    }
    
    public const int PushMailSettingTicketFieldNumber = 10;
    private bool hasPushMailSettingTicket;
    private string pushMailSettingTicket_ = "";
    public bool HasPushMailSettingTicket {
      get { return hasPushMailSettingTicket; }
    }
    public string PushMailSettingTicket {
      get { return pushMailSettingTicket_; }
    }
    
    public const int BuiltinIPListFieldNumber = 14;
    private bool hasBuiltinIPList;
    private global::mm.command.IPList builtinIPList_;
    public bool HasBuiltinIPList {
      get { return hasBuiltinIPList; }
    }
    public global::mm.command.IPList BuiltinIPList {
      get { return builtinIPList_ ?? global::mm.command.IPList.DefaultInstance; }
    }
    
    public const int FSURLFieldNumber = 15;
    private bool hasFSURL;
    private string fSURL_ = "";
    public bool HasFSURL {
      get { return hasFSURL; }
    }
    public string FSURL {
      get { return fSURL_; }
    }
    
    public const int UserNameFieldNumber = 16;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public const int StatusFieldNumber = 17;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int NetworkControlFieldNumber = 18;
    private bool hasNetworkControl;
    private global::mm.command.NetworkControlType networkControl_;
    public bool HasNetworkControl {
      get { return hasNetworkControl; }
    }
    public global::mm.command.NetworkControlType NetworkControl {
      get { return networkControl_ ?? global::mm.command.NetworkControlType.DefaultInstance; }
    }
    
    public const int ReturnFlagFieldNumber = 19;
    private bool hasReturnFlag;
    private int returnFlag_;
    public bool HasReturnFlag {
      get { return hasReturnFlag; }
    }
    public int ReturnFlag {
      get { return returnFlag_; }
    }
    
    public const int RegTypeFieldNumber = 20;
    private bool hasRegType;
    private int regType_;
    public bool HasRegType {
      get { return hasRegType; }
    }
    public int RegType {
      get { return regType_; }
    }
    
    public const int AuthKeyFieldNumber = 21;
    private bool hasAuthKey;
    private string authKey_ = "";
    public bool HasAuthKey {
      get { return hasAuthKey; }
    }
    public string AuthKey {
      get { return authKey_; }
    }
    
    public const int PluginKeyListFieldNumber = 22;
    private bool hasPluginKeyList;
    private global::mm.command.PluginKeyListType pluginKeyList_;
    public bool HasPluginKeyList {
      get { return hasPluginKeyList; }
    }
    public global::mm.command.PluginKeyListType PluginKeyList {
      get { return pluginKeyList_ ?? global::mm.command.PluginKeyListType.DefaultInstance; }
    }
    
    public const int PasswordFieldNumber = 23;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public const int ProfileFlagFieldNumber = 24;
    private bool hasProfileFlag;
    private int profileFlag_;
    public bool HasProfileFlag {
      get { return hasProfileFlag; }
    }
    public int ProfileFlag {
      get { return profileFlag_; }
    }
    
    public const int NewHostListFieldNumber = 25;
    private bool hasNewHostList;
    private global::mm.command.NewHostListType newHostList_;
    public bool HasNewHostList {
      get { return hasNewHostList; }
    }
    public global::mm.command.NewHostListType NewHostList {
      get { return newHostList_ ?? global::mm.command.NewHostListType.DefaultInstance; }
    }
    
    public const int AutoAuthTicketFieldNumber = 26;
    private bool hasAutoAuthTicket;
    private string autoAuthTicket_ = "";
    public bool HasAutoAuthTicket {
      get { return hasAutoAuthTicket; }
    }
    public string AutoAuthTicket {
      get { return autoAuthTicket_; }
    }
    
    public const int DnsInfoFieldNumber = 27;
    private bool hasDnsInfo;
    private global::mm.command.DnsInfoType dnsInfo_;
    public bool HasDnsInfo {
      get { return hasDnsInfo; }
    }
    public global::mm.command.DnsInfoType DnsInfo {
      get { return dnsInfo_ ?? global::mm.command.DnsInfoType.DefaultInstance; }
    }
    
    public const int StepTicketFieldNumber = 28;
    private bool hasStepTicket;
    private string stepTicket_ = "";
    public bool HasStepTicket {
      get { return hasStepTicket; }
    }
    public string StepTicket {
      get { return stepTicket_; }
    }
    
    public const int VerifySignatureFieldNumber = 29;
    private bool hasVerifySignature;
    private string verifySignature_ = "";
    public bool HasVerifySignature {
      get { return hasVerifySignature; }
    }
    public string VerifySignature {
      get { return verifySignature_; }
    }
    
    public const int VerifyBuffFieldNumber = 30;
    private bool hasVerifyBuff;
    private global::mm.command.SKBuiltinBuffer_t verifyBuff_;
    public bool HasVerifyBuff {
      get { return hasVerifyBuff; }
    }
    public global::mm.command.SKBuiltinBuffer_t VerifyBuff {
      get { return verifyBuff_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int ShowStyleFieldNumber = 31;
    private bool hasShowStyle;
    private global::mm.command.ShowStyleKey showStyle_;
    public bool HasShowStyle {
      get { return hasShowStyle; }
    }
    public global::mm.command.ShowStyleKey ShowStyle {
      get { return showStyle_ ?? global::mm.command.ShowStyleKey.DefaultInstance; }
    }
    
    public const int SnsDnsInfoFieldNumber = 32;
    private bool hasSnsDnsInfo;
    private global::mm.command.DnsInfoType snsDnsInfo_;
    public bool HasSnsDnsInfo {
      get { return hasSnsDnsInfo; }
    }
    public global::mm.command.DnsInfoType SnsDnsInfo {
      get { return snsDnsInfo_ ?? global::mm.command.DnsInfoType.DefaultInstance; }
    }
    
    public const int AppDnsInfoFieldNumber = 33;
    private bool hasAppDnsInfo;
    private global::mm.command.DnsInfoType appDnsInfo_;
    public bool HasAppDnsInfo {
      get { return hasAppDnsInfo; }
    }
    public global::mm.command.DnsInfoType AppDnsInfo {
      get { return appDnsInfo_ ?? global::mm.command.DnsInfoType.DefaultInstance; }
    }
    
    public const int SecAuthRegKeySectFieldNumber = 34;
    private bool hasSecAuthRegKeySect;
    private global::mm.command.SecAuthRegKeySect secAuthRegKeySect_;
    public bool HasSecAuthRegKeySect {
      get { return hasSecAuthRegKeySect; }
    }
    public global::mm.command.SecAuthRegKeySect SecAuthRegKeySect {
      get { return secAuthRegKeySect_ ?? global::mm.command.SecAuthRegKeySect.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasUin) return false;
        if (!hasPushMailStatus) return false;
        if (!Base.IsInitialized) return false;
        if (HasBuiltinIPList) {
          if (!BuiltinIPList.IsInitialized) return false;
        }
        if (HasPluginKeyList) {
          if (!PluginKeyList.IsInitialized) return false;
        }
        if (HasNewHostList) {
          if (!NewHostList.IsInitialized) return false;
        }
        if (HasDnsInfo) {
          if (!DnsInfo.IsInitialized) return false;
        }
        if (HasVerifyBuff) {
          if (!VerifyBuff.IsInitialized) return false;
        }
        if (HasShowStyle) {
          if (!ShowStyle.IsInitialized) return false;
        }
        if (HasSnsDnsInfo) {
          if (!SnsDnsInfo.IsInitialized) return false;
        }
        if (HasAppDnsInfo) {
          if (!AppDnsInfo.IsInitialized) return false;
        }
        if (HasSecAuthRegKeySect) {
          if (!SecAuthRegKeySect.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newRegResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[24], Base);
      }
      if (hasUin) {
        output.WriteUInt32(2, field_names[21], Uin);
      }
      if (hasSessionKey) {
        output.WriteString(3, field_names[19], SessionKey);
      }
      if (hasOfficialUserName) {
        output.WriteString(4, field_names[9], OfficialUserName);
      }
      if (hasOfficialNickName) {
        output.WriteString(5, field_names[8], OfficialNickName);
      }
      if (hasQQMicroBlogUserName) {
        output.WriteString(6, field_names[15], QQMicroBlogUserName);
      }
      if (hasBindEmail) {
        output.WriteString(7, field_names[2], BindEmail);
      }
      if (hasPushMailStatus) {
        output.WriteInt32(8, field_names[14], PushMailStatus);
      }
      if (hasSendCardBitFlag) {
        output.WriteInt32(9, field_names[18], SendCardBitFlag);
      }
      if (hasPushMailSettingTicket) {
        output.WriteString(10, field_names[13], PushMailSettingTicket);
      }
      if (hasBuiltinIPList) {
        output.WriteMessage(14, field_names[3], BuiltinIPList);
      }
      if (hasFSURL) {
        output.WriteString(15, field_names[5], FSURL);
      }
      if (hasUserName) {
        output.WriteString(16, field_names[22], UserName);
      }
      if (hasStatus) {
        output.WriteInt32(17, field_names[20], Status);
      }
      if (hasNetworkControl) {
        output.WriteMessage(18, field_names[6], NetworkControl);
      }
      if (hasReturnFlag) {
        output.WriteInt32(19, field_names[17], ReturnFlag);
      }
      if (hasRegType) {
        output.WriteInt32(20, field_names[16], RegType);
      }
      if (hasAuthKey) {
        output.WriteString(21, field_names[0], AuthKey);
      }
      if (hasPluginKeyList) {
        output.WriteMessage(22, field_names[11], PluginKeyList);
      }
      if (hasPassword) {
        output.WriteString(23, field_names[10], Password);
      }
      if (hasProfileFlag) {
        output.WriteInt32(24, field_names[12], ProfileFlag);
      }
      if (hasNewHostList) {
        output.WriteMessage(25, field_names[7], NewHostList);
      }
      if (hasAutoAuthTicket) {
        output.WriteString(26, field_names[1], AutoAuthTicket);
      }
      if (hasDnsInfo) {
        output.WriteMessage(27, field_names[4], DnsInfo);
      }
      if (hasStepTicket) {
        output.WriteString(28, field_names[28], StepTicket);
      }
      if (hasVerifySignature) {
        output.WriteString(29, field_names[30], VerifySignature);
      }
      if (hasVerifyBuff) {
        output.WriteMessage(30, field_names[29], VerifyBuff);
      }
      if (hasShowStyle) {
        output.WriteMessage(31, field_names[26], ShowStyle);
      }
      if (hasSnsDnsInfo) {
        output.WriteMessage(32, field_names[27], SnsDnsInfo);
      }
      if (hasAppDnsInfo) {
        output.WriteMessage(33, field_names[23], AppDnsInfo);
      }
      if (hasSecAuthRegKeySect) {
        output.WriteMessage(34, field_names[25], SecAuthRegKeySect);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUin) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Uin);
        }
        if (hasSessionKey) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SessionKey);
        }
        if (hasOfficialUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, OfficialUserName);
        }
        if (hasOfficialNickName) {
          size += pb::CodedOutputStream.ComputeStringSize(5, OfficialNickName);
        }
        if (hasQQMicroBlogUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, QQMicroBlogUserName);
        }
        if (hasBindEmail) {
          size += pb::CodedOutputStream.ComputeStringSize(7, BindEmail);
        }
        if (hasPushMailStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, PushMailStatus);
        }
        if (hasSendCardBitFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, SendCardBitFlag);
        }
        if (hasPushMailSettingTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(10, PushMailSettingTicket);
        }
        if (hasBuiltinIPList) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, BuiltinIPList);
        }
        if (hasFSURL) {
          size += pb::CodedOutputStream.ComputeStringSize(15, FSURL);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(16, UserName);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, Status);
        }
        if (hasNetworkControl) {
          size += pb::CodedOutputStream.ComputeMessageSize(18, NetworkControl);
        }
        if (hasReturnFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(19, ReturnFlag);
        }
        if (hasRegType) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, RegType);
        }
        if (hasAuthKey) {
          size += pb::CodedOutputStream.ComputeStringSize(21, AuthKey);
        }
        if (hasPluginKeyList) {
          size += pb::CodedOutputStream.ComputeMessageSize(22, PluginKeyList);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(23, Password);
        }
        if (hasProfileFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(24, ProfileFlag);
        }
        if (hasNewHostList) {
          size += pb::CodedOutputStream.ComputeMessageSize(25, NewHostList);
        }
        if (hasAutoAuthTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(26, AutoAuthTicket);
        }
        if (hasDnsInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(27, DnsInfo);
        }
        if (hasStepTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(28, StepTicket);
        }
        if (hasVerifySignature) {
          size += pb::CodedOutputStream.ComputeStringSize(29, VerifySignature);
        }
        if (hasVerifyBuff) {
          size += pb::CodedOutputStream.ComputeMessageSize(30, VerifyBuff);
        }
        if (hasShowStyle) {
          size += pb::CodedOutputStream.ComputeMessageSize(31, ShowStyle);
        }
        if (hasSnsDnsInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(32, SnsDnsInfo);
        }
        if (hasAppDnsInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(33, AppDnsInfo);
        }
        if (hasSecAuthRegKeySect) {
          size += pb::CodedOutputStream.ComputeMessageSize(34, SecAuthRegKeySect);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewRegResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewRegResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewRegResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewRegResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewRegResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewRegResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewRegResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewRegResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewRegResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewRegResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewRegResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewRegResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewRegResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewRegResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewRegResponse result;
      
      private NewRegResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NewRegResponse original = result;
          result = new NewRegResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewRegResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewRegResponse.Descriptor; }
      }
      
      public override NewRegResponse DefaultInstanceForType {
        get { return global::mm.command.NewRegResponse.DefaultInstance; }
      }
      
      public override NewRegResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewRegResponse) {
          return MergeFrom((NewRegResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewRegResponse other) {
        if (other == global::mm.command.NewRegResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUin) {
          Uin = other.Uin;
        }
        if (other.HasSessionKey) {
          SessionKey = other.SessionKey;
        }
        if (other.HasOfficialUserName) {
          OfficialUserName = other.OfficialUserName;
        }
        if (other.HasOfficialNickName) {
          OfficialNickName = other.OfficialNickName;
        }
        if (other.HasQQMicroBlogUserName) {
          QQMicroBlogUserName = other.QQMicroBlogUserName;
        }
        if (other.HasBindEmail) {
          BindEmail = other.BindEmail;
        }
        if (other.HasPushMailStatus) {
          PushMailStatus = other.PushMailStatus;
        }
        if (other.HasSendCardBitFlag) {
          SendCardBitFlag = other.SendCardBitFlag;
        }
        if (other.HasPushMailSettingTicket) {
          PushMailSettingTicket = other.PushMailSettingTicket;
        }
        if (other.HasBuiltinIPList) {
          MergeBuiltinIPList(other.BuiltinIPList);
        }
        if (other.HasFSURL) {
          FSURL = other.FSURL;
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasNetworkControl) {
          MergeNetworkControl(other.NetworkControl);
        }
        if (other.HasReturnFlag) {
          ReturnFlag = other.ReturnFlag;
        }
        if (other.HasRegType) {
          RegType = other.RegType;
        }
        if (other.HasAuthKey) {
          AuthKey = other.AuthKey;
        }
        if (other.HasPluginKeyList) {
          MergePluginKeyList(other.PluginKeyList);
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasProfileFlag) {
          ProfileFlag = other.ProfileFlag;
        }
        if (other.HasNewHostList) {
          MergeNewHostList(other.NewHostList);
        }
        if (other.HasAutoAuthTicket) {
          AutoAuthTicket = other.AutoAuthTicket;
        }
        if (other.HasDnsInfo) {
          MergeDnsInfo(other.DnsInfo);
        }
        if (other.HasStepTicket) {
          StepTicket = other.StepTicket;
        }
        if (other.HasVerifySignature) {
          VerifySignature = other.VerifySignature;
        }
        if (other.HasVerifyBuff) {
          MergeVerifyBuff(other.VerifyBuff);
        }
        if (other.HasShowStyle) {
          MergeShowStyle(other.ShowStyle);
        }
        if (other.HasSnsDnsInfo) {
          MergeSnsDnsInfo(other.SnsDnsInfo);
        }
        if (other.HasAppDnsInfo) {
          MergeAppDnsInfo(other.AppDnsInfo);
        }
        if (other.HasSecAuthRegKeySect) {
          MergeSecAuthRegKeySect(other.SecAuthRegKeySect);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newRegResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newRegResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasUin = input.ReadUInt32(ref result.uin_);
              break;
            }
            case 26: {
              result.hasSessionKey = input.ReadString(ref result.sessionKey_);
              break;
            }
            case 34: {
              result.hasOfficialUserName = input.ReadString(ref result.officialUserName_);
              break;
            }
            case 42: {
              result.hasOfficialNickName = input.ReadString(ref result.officialNickName_);
              break;
            }
            case 50: {
              result.hasQQMicroBlogUserName = input.ReadString(ref result.qQMicroBlogUserName_);
              break;
            }
            case 58: {
              result.hasBindEmail = input.ReadString(ref result.bindEmail_);
              break;
            }
            case 64: {
              result.hasPushMailStatus = input.ReadInt32(ref result.pushMailStatus_);
              break;
            }
            case 72: {
              result.hasSendCardBitFlag = input.ReadInt32(ref result.sendCardBitFlag_);
              break;
            }
            case 82: {
              result.hasPushMailSettingTicket = input.ReadString(ref result.pushMailSettingTicket_);
              break;
            }
            case 114: {
              global::mm.command.IPList.Builder subBuilder = global::mm.command.IPList.CreateBuilder();
              if (result.hasBuiltinIPList) {
                subBuilder.MergeFrom(BuiltinIPList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BuiltinIPList = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              result.hasFSURL = input.ReadString(ref result.fSURL_);
              break;
            }
            case 130: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 136: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 146: {
              global::mm.command.NetworkControlType.Builder subBuilder = global::mm.command.NetworkControlType.CreateBuilder();
              if (result.hasNetworkControl) {
                subBuilder.MergeFrom(NetworkControl);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NetworkControl = subBuilder.BuildPartial();
              break;
            }
            case 152: {
              result.hasReturnFlag = input.ReadInt32(ref result.returnFlag_);
              break;
            }
            case 160: {
              result.hasRegType = input.ReadInt32(ref result.regType_);
              break;
            }
            case 170: {
              result.hasAuthKey = input.ReadString(ref result.authKey_);
              break;
            }
            case 178: {
              global::mm.command.PluginKeyListType.Builder subBuilder = global::mm.command.PluginKeyListType.CreateBuilder();
              if (result.hasPluginKeyList) {
                subBuilder.MergeFrom(PluginKeyList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PluginKeyList = subBuilder.BuildPartial();
              break;
            }
            case 186: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
            case 192: {
              result.hasProfileFlag = input.ReadInt32(ref result.profileFlag_);
              break;
            }
            case 202: {
              global::mm.command.NewHostListType.Builder subBuilder = global::mm.command.NewHostListType.CreateBuilder();
              if (result.hasNewHostList) {
                subBuilder.MergeFrom(NewHostList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewHostList = subBuilder.BuildPartial();
              break;
            }
            case 210: {
              result.hasAutoAuthTicket = input.ReadString(ref result.autoAuthTicket_);
              break;
            }
            case 218: {
              global::mm.command.DnsInfoType.Builder subBuilder = global::mm.command.DnsInfoType.CreateBuilder();
              if (result.hasDnsInfo) {
                subBuilder.MergeFrom(DnsInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DnsInfo = subBuilder.BuildPartial();
              break;
            }
            case 226: {
              result.hasStepTicket = input.ReadString(ref result.stepTicket_);
              break;
            }
            case 234: {
              result.hasVerifySignature = input.ReadString(ref result.verifySignature_);
              break;
            }
            case 242: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasVerifyBuff) {
                subBuilder.MergeFrom(VerifyBuff);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              VerifyBuff = subBuilder.BuildPartial();
              break;
            }
            case 250: {
              global::mm.command.ShowStyleKey.Builder subBuilder = global::mm.command.ShowStyleKey.CreateBuilder();
              if (result.hasShowStyle) {
                subBuilder.MergeFrom(ShowStyle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ShowStyle = subBuilder.BuildPartial();
              break;
            }
            case 258: {
              global::mm.command.DnsInfoType.Builder subBuilder = global::mm.command.DnsInfoType.CreateBuilder();
              if (result.hasSnsDnsInfo) {
                subBuilder.MergeFrom(SnsDnsInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SnsDnsInfo = subBuilder.BuildPartial();
              break;
            }
            case 266: {
              global::mm.command.DnsInfoType.Builder subBuilder = global::mm.command.DnsInfoType.CreateBuilder();
              if (result.hasAppDnsInfo) {
                subBuilder.MergeFrom(AppDnsInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AppDnsInfo = subBuilder.BuildPartial();
              break;
            }
            case 274: {
              global::mm.command.SecAuthRegKeySect.Builder subBuilder = global::mm.command.SecAuthRegKeySect.CreateBuilder();
              if (result.hasSecAuthRegKeySect) {
                subBuilder.MergeFrom(SecAuthRegKeySect);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SecAuthRegKeySect = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUin {
        get { return result.hasUin; }
      }
      [global::System.CLSCompliant(false)]
      public uint Uin {
        get { return result.Uin; }
        set { SetUin(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetUin(uint value) {
        PrepareBuilder();
        result.hasUin = true;
        result.uin_ = value;
        return this;
      }
      public Builder ClearUin() {
        PrepareBuilder();
        result.hasUin = false;
        result.uin_ = 0;
        return this;
      }
      
      public bool HasSessionKey {
        get { return result.hasSessionKey; }
      }
      public string SessionKey {
        get { return result.SessionKey; }
        set { SetSessionKey(value); }
      }
      public Builder SetSessionKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionKey = true;
        result.sessionKey_ = value;
        return this;
      }
      public Builder ClearSessionKey() {
        PrepareBuilder();
        result.hasSessionKey = false;
        result.sessionKey_ = "";
        return this;
      }
      
      public bool HasOfficialUserName {
        get { return result.hasOfficialUserName; }
      }
      public string OfficialUserName {
        get { return result.OfficialUserName; }
        set { SetOfficialUserName(value); }
      }
      public Builder SetOfficialUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOfficialUserName = true;
        result.officialUserName_ = value;
        return this;
      }
      public Builder ClearOfficialUserName() {
        PrepareBuilder();
        result.hasOfficialUserName = false;
        result.officialUserName_ = "";
        return this;
      }
      
      public bool HasOfficialNickName {
        get { return result.hasOfficialNickName; }
      }
      public string OfficialNickName {
        get { return result.OfficialNickName; }
        set { SetOfficialNickName(value); }
      }
      public Builder SetOfficialNickName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOfficialNickName = true;
        result.officialNickName_ = value;
        return this;
      }
      public Builder ClearOfficialNickName() {
        PrepareBuilder();
        result.hasOfficialNickName = false;
        result.officialNickName_ = "";
        return this;
      }
      
      public bool HasQQMicroBlogUserName {
        get { return result.hasQQMicroBlogUserName; }
      }
      public string QQMicroBlogUserName {
        get { return result.QQMicroBlogUserName; }
        set { SetQQMicroBlogUserName(value); }
      }
      public Builder SetQQMicroBlogUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQQMicroBlogUserName = true;
        result.qQMicroBlogUserName_ = value;
        return this;
      }
      public Builder ClearQQMicroBlogUserName() {
        PrepareBuilder();
        result.hasQQMicroBlogUserName = false;
        result.qQMicroBlogUserName_ = "";
        return this;
      }
      
      public bool HasBindEmail {
        get { return result.hasBindEmail; }
      }
      public string BindEmail {
        get { return result.BindEmail; }
        set { SetBindEmail(value); }
      }
      public Builder SetBindEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBindEmail = true;
        result.bindEmail_ = value;
        return this;
      }
      public Builder ClearBindEmail() {
        PrepareBuilder();
        result.hasBindEmail = false;
        result.bindEmail_ = "";
        return this;
      }
      
      public bool HasPushMailStatus {
        get { return result.hasPushMailStatus; }
      }
      public int PushMailStatus {
        get { return result.PushMailStatus; }
        set { SetPushMailStatus(value); }
      }
      public Builder SetPushMailStatus(int value) {
        PrepareBuilder();
        result.hasPushMailStatus = true;
        result.pushMailStatus_ = value;
        return this;
      }
      public Builder ClearPushMailStatus() {
        PrepareBuilder();
        result.hasPushMailStatus = false;
        result.pushMailStatus_ = 0;
        return this;
      }
      
      public bool HasSendCardBitFlag {
        get { return result.hasSendCardBitFlag; }
      }
      public int SendCardBitFlag {
        get { return result.SendCardBitFlag; }
        set { SetSendCardBitFlag(value); }
      }
      public Builder SetSendCardBitFlag(int value) {
        PrepareBuilder();
        result.hasSendCardBitFlag = true;
        result.sendCardBitFlag_ = value;
        return this;
      }
      public Builder ClearSendCardBitFlag() {
        PrepareBuilder();
        result.hasSendCardBitFlag = false;
        result.sendCardBitFlag_ = 0;
        return this;
      }
      
      public bool HasPushMailSettingTicket {
        get { return result.hasPushMailSettingTicket; }
      }
      public string PushMailSettingTicket {
        get { return result.PushMailSettingTicket; }
        set { SetPushMailSettingTicket(value); }
      }
      public Builder SetPushMailSettingTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPushMailSettingTicket = true;
        result.pushMailSettingTicket_ = value;
        return this;
      }
      public Builder ClearPushMailSettingTicket() {
        PrepareBuilder();
        result.hasPushMailSettingTicket = false;
        result.pushMailSettingTicket_ = "";
        return this;
      }
      
      public bool HasBuiltinIPList {
       get { return result.hasBuiltinIPList; }
      }
      public global::mm.command.IPList BuiltinIPList {
        get { return result.BuiltinIPList; }
        set { SetBuiltinIPList(value); }
      }
      public Builder SetBuiltinIPList(global::mm.command.IPList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBuiltinIPList = true;
        result.builtinIPList_ = value;
        return this;
      }
      public Builder SetBuiltinIPList(global::mm.command.IPList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBuiltinIPList = true;
        result.builtinIPList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBuiltinIPList(global::mm.command.IPList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBuiltinIPList &&
            result.builtinIPList_ != global::mm.command.IPList.DefaultInstance) {
            result.builtinIPList_ = global::mm.command.IPList.CreateBuilder(result.builtinIPList_).MergeFrom(value).BuildPartial();
        } else {
          result.builtinIPList_ = value;
        }
        result.hasBuiltinIPList = true;
        return this;
      }
      public Builder ClearBuiltinIPList() {
        PrepareBuilder();
        result.hasBuiltinIPList = false;
        result.builtinIPList_ = null;
        return this;
      }
      
      public bool HasFSURL {
        get { return result.hasFSURL; }
      }
      public string FSURL {
        get { return result.FSURL; }
        set { SetFSURL(value); }
      }
      public Builder SetFSURL(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFSURL = true;
        result.fSURL_ = value;
        return this;
      }
      public Builder ClearFSURL() {
        PrepareBuilder();
        result.hasFSURL = false;
        result.fSURL_ = "";
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasNetworkControl {
       get { return result.hasNetworkControl; }
      }
      public global::mm.command.NetworkControlType NetworkControl {
        get { return result.NetworkControl; }
        set { SetNetworkControl(value); }
      }
      public Builder SetNetworkControl(global::mm.command.NetworkControlType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNetworkControl = true;
        result.networkControl_ = value;
        return this;
      }
      public Builder SetNetworkControl(global::mm.command.NetworkControlType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNetworkControl = true;
        result.networkControl_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNetworkControl(global::mm.command.NetworkControlType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNetworkControl &&
            result.networkControl_ != global::mm.command.NetworkControlType.DefaultInstance) {
            result.networkControl_ = global::mm.command.NetworkControlType.CreateBuilder(result.networkControl_).MergeFrom(value).BuildPartial();
        } else {
          result.networkControl_ = value;
        }
        result.hasNetworkControl = true;
        return this;
      }
      public Builder ClearNetworkControl() {
        PrepareBuilder();
        result.hasNetworkControl = false;
        result.networkControl_ = null;
        return this;
      }
      
      public bool HasReturnFlag {
        get { return result.hasReturnFlag; }
      }
      public int ReturnFlag {
        get { return result.ReturnFlag; }
        set { SetReturnFlag(value); }
      }
      public Builder SetReturnFlag(int value) {
        PrepareBuilder();
        result.hasReturnFlag = true;
        result.returnFlag_ = value;
        return this;
      }
      public Builder ClearReturnFlag() {
        PrepareBuilder();
        result.hasReturnFlag = false;
        result.returnFlag_ = 0;
        return this;
      }
      
      public bool HasRegType {
        get { return result.hasRegType; }
      }
      public int RegType {
        get { return result.RegType; }
        set { SetRegType(value); }
      }
      public Builder SetRegType(int value) {
        PrepareBuilder();
        result.hasRegType = true;
        result.regType_ = value;
        return this;
      }
      public Builder ClearRegType() {
        PrepareBuilder();
        result.hasRegType = false;
        result.regType_ = 0;
        return this;
      }
      
      public bool HasAuthKey {
        get { return result.hasAuthKey; }
      }
      public string AuthKey {
        get { return result.AuthKey; }
        set { SetAuthKey(value); }
      }
      public Builder SetAuthKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthKey = true;
        result.authKey_ = value;
        return this;
      }
      public Builder ClearAuthKey() {
        PrepareBuilder();
        result.hasAuthKey = false;
        result.authKey_ = "";
        return this;
      }
      
      public bool HasPluginKeyList {
       get { return result.hasPluginKeyList; }
      }
      public global::mm.command.PluginKeyListType PluginKeyList {
        get { return result.PluginKeyList; }
        set { SetPluginKeyList(value); }
      }
      public Builder SetPluginKeyList(global::mm.command.PluginKeyListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPluginKeyList = true;
        result.pluginKeyList_ = value;
        return this;
      }
      public Builder SetPluginKeyList(global::mm.command.PluginKeyListType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPluginKeyList = true;
        result.pluginKeyList_ = builderForValue.Build();
        return this;
      }
      public Builder MergePluginKeyList(global::mm.command.PluginKeyListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPluginKeyList &&
            result.pluginKeyList_ != global::mm.command.PluginKeyListType.DefaultInstance) {
            result.pluginKeyList_ = global::mm.command.PluginKeyListType.CreateBuilder(result.pluginKeyList_).MergeFrom(value).BuildPartial();
        } else {
          result.pluginKeyList_ = value;
        }
        result.hasPluginKeyList = true;
        return this;
      }
      public Builder ClearPluginKeyList() {
        PrepareBuilder();
        result.hasPluginKeyList = false;
        result.pluginKeyList_ = null;
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
      
      public bool HasProfileFlag {
        get { return result.hasProfileFlag; }
      }
      public int ProfileFlag {
        get { return result.ProfileFlag; }
        set { SetProfileFlag(value); }
      }
      public Builder SetProfileFlag(int value) {
        PrepareBuilder();
        result.hasProfileFlag = true;
        result.profileFlag_ = value;
        return this;
      }
      public Builder ClearProfileFlag() {
        PrepareBuilder();
        result.hasProfileFlag = false;
        result.profileFlag_ = 0;
        return this;
      }
      
      public bool HasNewHostList {
       get { return result.hasNewHostList; }
      }
      public global::mm.command.NewHostListType NewHostList {
        get { return result.NewHostList; }
        set { SetNewHostList(value); }
      }
      public Builder SetNewHostList(global::mm.command.NewHostListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewHostList = true;
        result.newHostList_ = value;
        return this;
      }
      public Builder SetNewHostList(global::mm.command.NewHostListType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNewHostList = true;
        result.newHostList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewHostList(global::mm.command.NewHostListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNewHostList &&
            result.newHostList_ != global::mm.command.NewHostListType.DefaultInstance) {
            result.newHostList_ = global::mm.command.NewHostListType.CreateBuilder(result.newHostList_).MergeFrom(value).BuildPartial();
        } else {
          result.newHostList_ = value;
        }
        result.hasNewHostList = true;
        return this;
      }
      public Builder ClearNewHostList() {
        PrepareBuilder();
        result.hasNewHostList = false;
        result.newHostList_ = null;
        return this;
      }
      
      public bool HasAutoAuthTicket {
        get { return result.hasAutoAuthTicket; }
      }
      public string AutoAuthTicket {
        get { return result.AutoAuthTicket; }
        set { SetAutoAuthTicket(value); }
      }
      public Builder SetAutoAuthTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAutoAuthTicket = true;
        result.autoAuthTicket_ = value;
        return this;
      }
      public Builder ClearAutoAuthTicket() {
        PrepareBuilder();
        result.hasAutoAuthTicket = false;
        result.autoAuthTicket_ = "";
        return this;
      }
      
      public bool HasDnsInfo {
       get { return result.hasDnsInfo; }
      }
      public global::mm.command.DnsInfoType DnsInfo {
        get { return result.DnsInfo; }
        set { SetDnsInfo(value); }
      }
      public Builder SetDnsInfo(global::mm.command.DnsInfoType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDnsInfo = true;
        result.dnsInfo_ = value;
        return this;
      }
      public Builder SetDnsInfo(global::mm.command.DnsInfoType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDnsInfo = true;
        result.dnsInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDnsInfo(global::mm.command.DnsInfoType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDnsInfo &&
            result.dnsInfo_ != global::mm.command.DnsInfoType.DefaultInstance) {
            result.dnsInfo_ = global::mm.command.DnsInfoType.CreateBuilder(result.dnsInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.dnsInfo_ = value;
        }
        result.hasDnsInfo = true;
        return this;
      }
      public Builder ClearDnsInfo() {
        PrepareBuilder();
        result.hasDnsInfo = false;
        result.dnsInfo_ = null;
        return this;
      }
      
      public bool HasStepTicket {
        get { return result.hasStepTicket; }
      }
      public string StepTicket {
        get { return result.StepTicket; }
        set { SetStepTicket(value); }
      }
      public Builder SetStepTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStepTicket = true;
        result.stepTicket_ = value;
        return this;
      }
      public Builder ClearStepTicket() {
        PrepareBuilder();
        result.hasStepTicket = false;
        result.stepTicket_ = "";
        return this;
      }
      
      public bool HasVerifySignature {
        get { return result.hasVerifySignature; }
      }
      public string VerifySignature {
        get { return result.VerifySignature; }
        set { SetVerifySignature(value); }
      }
      public Builder SetVerifySignature(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVerifySignature = true;
        result.verifySignature_ = value;
        return this;
      }
      public Builder ClearVerifySignature() {
        PrepareBuilder();
        result.hasVerifySignature = false;
        result.verifySignature_ = "";
        return this;
      }
      
      public bool HasVerifyBuff {
       get { return result.hasVerifyBuff; }
      }
      public global::mm.command.SKBuiltinBuffer_t VerifyBuff {
        get { return result.VerifyBuff; }
        set { SetVerifyBuff(value); }
      }
      public Builder SetVerifyBuff(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVerifyBuff = true;
        result.verifyBuff_ = value;
        return this;
      }
      public Builder SetVerifyBuff(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasVerifyBuff = true;
        result.verifyBuff_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVerifyBuff(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasVerifyBuff &&
            result.verifyBuff_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.verifyBuff_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.verifyBuff_).MergeFrom(value).BuildPartial();
        } else {
          result.verifyBuff_ = value;
        }
        result.hasVerifyBuff = true;
        return this;
      }
      public Builder ClearVerifyBuff() {
        PrepareBuilder();
        result.hasVerifyBuff = false;
        result.verifyBuff_ = null;
        return this;
      }
      
      public bool HasShowStyle {
       get { return result.hasShowStyle; }
      }
      public global::mm.command.ShowStyleKey ShowStyle {
        get { return result.ShowStyle; }
        set { SetShowStyle(value); }
      }
      public Builder SetShowStyle(global::mm.command.ShowStyleKey value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasShowStyle = true;
        result.showStyle_ = value;
        return this;
      }
      public Builder SetShowStyle(global::mm.command.ShowStyleKey.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasShowStyle = true;
        result.showStyle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeShowStyle(global::mm.command.ShowStyleKey value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasShowStyle &&
            result.showStyle_ != global::mm.command.ShowStyleKey.DefaultInstance) {
            result.showStyle_ = global::mm.command.ShowStyleKey.CreateBuilder(result.showStyle_).MergeFrom(value).BuildPartial();
        } else {
          result.showStyle_ = value;
        }
        result.hasShowStyle = true;
        return this;
      }
      public Builder ClearShowStyle() {
        PrepareBuilder();
        result.hasShowStyle = false;
        result.showStyle_ = null;
        return this;
      }
      
      public bool HasSnsDnsInfo {
       get { return result.hasSnsDnsInfo; }
      }
      public global::mm.command.DnsInfoType SnsDnsInfo {
        get { return result.SnsDnsInfo; }
        set { SetSnsDnsInfo(value); }
      }
      public Builder SetSnsDnsInfo(global::mm.command.DnsInfoType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnsDnsInfo = true;
        result.snsDnsInfo_ = value;
        return this;
      }
      public Builder SetSnsDnsInfo(global::mm.command.DnsInfoType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnsDnsInfo = true;
        result.snsDnsInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnsDnsInfo(global::mm.command.DnsInfoType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnsDnsInfo &&
            result.snsDnsInfo_ != global::mm.command.DnsInfoType.DefaultInstance) {
            result.snsDnsInfo_ = global::mm.command.DnsInfoType.CreateBuilder(result.snsDnsInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.snsDnsInfo_ = value;
        }
        result.hasSnsDnsInfo = true;
        return this;
      }
      public Builder ClearSnsDnsInfo() {
        PrepareBuilder();
        result.hasSnsDnsInfo = false;
        result.snsDnsInfo_ = null;
        return this;
      }
      
      public bool HasAppDnsInfo {
       get { return result.hasAppDnsInfo; }
      }
      public global::mm.command.DnsInfoType AppDnsInfo {
        get { return result.AppDnsInfo; }
        set { SetAppDnsInfo(value); }
      }
      public Builder SetAppDnsInfo(global::mm.command.DnsInfoType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppDnsInfo = true;
        result.appDnsInfo_ = value;
        return this;
      }
      public Builder SetAppDnsInfo(global::mm.command.DnsInfoType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAppDnsInfo = true;
        result.appDnsInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAppDnsInfo(global::mm.command.DnsInfoType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAppDnsInfo &&
            result.appDnsInfo_ != global::mm.command.DnsInfoType.DefaultInstance) {
            result.appDnsInfo_ = global::mm.command.DnsInfoType.CreateBuilder(result.appDnsInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.appDnsInfo_ = value;
        }
        result.hasAppDnsInfo = true;
        return this;
      }
      public Builder ClearAppDnsInfo() {
        PrepareBuilder();
        result.hasAppDnsInfo = false;
        result.appDnsInfo_ = null;
        return this;
      }
      
      public bool HasSecAuthRegKeySect {
       get { return result.hasSecAuthRegKeySect; }
      }
      public global::mm.command.SecAuthRegKeySect SecAuthRegKeySect {
        get { return result.SecAuthRegKeySect; }
        set { SetSecAuthRegKeySect(value); }
      }
      public Builder SetSecAuthRegKeySect(global::mm.command.SecAuthRegKeySect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSecAuthRegKeySect = true;
        result.secAuthRegKeySect_ = value;
        return this;
      }
      public Builder SetSecAuthRegKeySect(global::mm.command.SecAuthRegKeySect.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSecAuthRegKeySect = true;
        result.secAuthRegKeySect_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSecAuthRegKeySect(global::mm.command.SecAuthRegKeySect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSecAuthRegKeySect &&
            result.secAuthRegKeySect_ != global::mm.command.SecAuthRegKeySect.DefaultInstance) {
            result.secAuthRegKeySect_ = global::mm.command.SecAuthRegKeySect.CreateBuilder(result.secAuthRegKeySect_).MergeFrom(value).BuildPartial();
        } else {
          result.secAuthRegKeySect_ = value;
        }
        result.hasSecAuthRegKeySect = true;
        return this;
      }
      public Builder ClearSecAuthRegKeySect() {
        PrepareBuilder();
        result.hasSecAuthRegKeySect = false;
        result.secAuthRegKeySect_ = null;
        return this;
      }
    }
    static NewRegResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LogoutRequest : pb::GeneratedMessage<LogoutRequest, LogoutRequest.Builder> {
    private LogoutRequest() { }
    private static readonly LogoutRequest defaultInstance = new LogoutRequest().MakeReadOnly();
    private static readonly string[] _logoutRequestFieldNames = new string[] { "Scene", "base" };
    private static readonly uint[] _logoutRequestFieldTags = new uint[] { 16, 10 };
    public static LogoutRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LogoutRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LogoutRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LogoutRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LogoutRequest, LogoutRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LogoutRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int SceneFieldNumber = 2;
    private bool hasScene;
    private int scene_;
    public bool HasScene {
      get { return hasScene; }
    }
    public int Scene {
      get { return scene_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasScene) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _logoutRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[1], Base);
      }
      if (hasScene) {
        output.WriteInt32(2, field_names[0], Scene);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasScene) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Scene);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LogoutRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogoutRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogoutRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogoutRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogoutRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogoutRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LogoutRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LogoutRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LogoutRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogoutRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LogoutRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LogoutRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LogoutRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LogoutRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LogoutRequest result;
      
      private LogoutRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LogoutRequest original = result;
          result = new LogoutRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LogoutRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.LogoutRequest.Descriptor; }
      }
      
      public override LogoutRequest DefaultInstanceForType {
        get { return global::mm.command.LogoutRequest.DefaultInstance; }
      }
      
      public override LogoutRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LogoutRequest) {
          return MergeFrom((LogoutRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LogoutRequest other) {
        if (other == global::mm.command.LogoutRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasScene) {
          Scene = other.Scene;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_logoutRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _logoutRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasScene = input.ReadInt32(ref result.scene_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasScene {
        get { return result.hasScene; }
      }
      public int Scene {
        get { return result.Scene; }
        set { SetScene(value); }
      }
      public Builder SetScene(int value) {
        PrepareBuilder();
        result.hasScene = true;
        result.scene_ = value;
        return this;
      }
      public Builder ClearScene() {
        PrepareBuilder();
        result.hasScene = false;
        result.scene_ = 0;
        return this;
      }
    }
    static LogoutRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LogoutResponse : pb::GeneratedMessage<LogoutResponse, LogoutResponse.Builder> {
    private LogoutResponse() { }
    private static readonly LogoutResponse defaultInstance = new LogoutResponse().MakeReadOnly();
    private static readonly string[] _logoutResponseFieldNames = new string[] { "base" };
    private static readonly uint[] _logoutResponseFieldTags = new uint[] { 10 };
    public static LogoutResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LogoutResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LogoutResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LogoutResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LogoutResponse, LogoutResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LogoutResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _logoutResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LogoutResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogoutResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogoutResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogoutResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogoutResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogoutResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LogoutResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LogoutResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LogoutResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogoutResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LogoutResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LogoutResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LogoutResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LogoutResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LogoutResponse result;
      
      private LogoutResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LogoutResponse original = result;
          result = new LogoutResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LogoutResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.LogoutResponse.Descriptor; }
      }
      
      public override LogoutResponse DefaultInstanceForType {
        get { return global::mm.command.LogoutResponse.DefaultInstance; }
      }
      
      public override LogoutResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LogoutResponse) {
          return MergeFrom((LogoutResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LogoutResponse other) {
        if (other == global::mm.command.LogoutResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_logoutResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _logoutResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
    }
    static LogoutResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VerifyUserRequest : pb::GeneratedMessage<VerifyUserRequest, VerifyUserRequest.Builder> {
    private VerifyUserRequest() { }
    private static readonly VerifyUserRequest defaultInstance = new VerifyUserRequest().MakeReadOnly();
    private static readonly string[] _verifyUserRequestFieldNames = new string[] { "ClientCheckData", "Opcode", "SceneList", "SceneListNumb", "VerifyContent", "VerifyInfoList", "VerifyInfoListNumb", "VerifyUserList", "VerifyUserListSize", "base" };
    private static readonly uint[] _verifyUserRequestFieldTags = new uint[] { 82, 16, 58, 48, 42, 74, 64, 34, 24, 10 };
    public static VerifyUserRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VerifyUserRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VerifyUserRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_VerifyUserRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VerifyUserRequest, VerifyUserRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_VerifyUserRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int OpcodeFieldNumber = 2;
    private bool hasOpcode;
    private int opcode_;
    public bool HasOpcode {
      get { return hasOpcode; }
    }
    public int Opcode {
      get { return opcode_; }
    }
    
    public const int VerifyUserListSizeFieldNumber = 3;
    private bool hasVerifyUserListSize;
    private int verifyUserListSize_;
    public bool HasVerifyUserListSize {
      get { return hasVerifyUserListSize; }
    }
    public int VerifyUserListSize {
      get { return verifyUserListSize_; }
    }
    
    public const int VerifyUserListFieldNumber = 4;
    private pbc::PopsicleList<global::mm.command.VerifyUserObj> verifyUserList_ = new pbc::PopsicleList<global::mm.command.VerifyUserObj>();
    public scg::IList<global::mm.command.VerifyUserObj> VerifyUserListList {
      get { return verifyUserList_; }
    }
    public int VerifyUserListCount {
      get { return verifyUserList_.Count; }
    }
    public global::mm.command.VerifyUserObj GetVerifyUserList(int index) {
      return verifyUserList_[index];
    }
    
    public const int VerifyContentFieldNumber = 5;
    private bool hasVerifyContent;
    private string verifyContent_ = "";
    public bool HasVerifyContent {
      get { return hasVerifyContent; }
    }
    public string VerifyContent {
      get { return verifyContent_; }
    }
    
    public const int SceneListNumbFieldNumber = 6;
    private bool hasSceneListNumb;
    private int sceneListNumb_;
    public bool HasSceneListNumb {
      get { return hasSceneListNumb; }
    }
    public int SceneListNumb {
      get { return sceneListNumb_; }
    }
    
    public const int SceneListFieldNumber = 7;
    private pbc::PopsicleList<string> sceneList_ = new pbc::PopsicleList<string>();
    public scg::IList<string> SceneListList {
      get { return pbc::Lists.AsReadOnly(sceneList_); }
    }
    public int SceneListCount {
      get { return sceneList_.Count; }
    }
    public string GetSceneList(int index) {
      return sceneList_[index];
    }
    
    public const int VerifyInfoListNumbFieldNumber = 8;
    private bool hasVerifyInfoListNumb;
    private uint verifyInfoListNumb_;
    public bool HasVerifyInfoListNumb {
      get { return hasVerifyInfoListNumb; }
    }
    [global::System.CLSCompliant(false)]
    public uint VerifyInfoListNumb {
      get { return verifyInfoListNumb_; }
    }
    
    public const int VerifyInfoListFieldNumber = 9;
    private pbc::PopsicleList<string> verifyInfoList_ = new pbc::PopsicleList<string>();
    public scg::IList<string> VerifyInfoListList {
      get { return pbc::Lists.AsReadOnly(verifyInfoList_); }
    }
    public int VerifyInfoListCount {
      get { return verifyInfoList_.Count; }
    }
    public string GetVerifyInfoList(int index) {
      return verifyInfoList_[index];
    }
    
    public const int ClientCheckDataFieldNumber = 10;
    private bool hasClientCheckData;
    private global::mm.command.SKBuiltinBuffer_t clientCheckData_;
    public bool HasClientCheckData {
      get { return hasClientCheckData; }
    }
    public global::mm.command.SKBuiltinBuffer_t ClientCheckData {
      get { return clientCheckData_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasOpcode) return false;
        if (!hasVerifyUserListSize) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.VerifyUserObj element in VerifyUserListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasClientCheckData) {
          if (!ClientCheckData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _verifyUserRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[9], Base);
      }
      if (hasOpcode) {
        output.WriteInt32(2, field_names[1], Opcode);
      }
      if (hasVerifyUserListSize) {
        output.WriteInt32(3, field_names[8], VerifyUserListSize);
      }
      if (verifyUserList_.Count > 0) {
        output.WriteMessageArray(4, field_names[7], verifyUserList_);
      }
      if (hasVerifyContent) {
        output.WriteString(5, field_names[4], VerifyContent);
      }
      if (hasSceneListNumb) {
        output.WriteInt32(6, field_names[3], SceneListNumb);
      }
      if (sceneList_.Count > 0) {
        output.WriteStringArray(7, field_names[2], sceneList_);
      }
      if (hasVerifyInfoListNumb) {
        output.WriteUInt32(8, field_names[6], VerifyInfoListNumb);
      }
      if (verifyInfoList_.Count > 0) {
        output.WriteStringArray(9, field_names[5], verifyInfoList_);
      }
      if (hasClientCheckData) {
        output.WriteMessage(10, field_names[0], ClientCheckData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasOpcode) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Opcode);
        }
        if (hasVerifyUserListSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, VerifyUserListSize);
        }
        foreach (global::mm.command.VerifyUserObj element in VerifyUserListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (hasVerifyContent) {
          size += pb::CodedOutputStream.ComputeStringSize(5, VerifyContent);
        }
        if (hasSceneListNumb) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, SceneListNumb);
        }
        {
          int dataSize = 0;
          foreach (string element in SceneListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * sceneList_.Count;
        }
        if (hasVerifyInfoListNumb) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, VerifyInfoListNumb);
        }
        {
          int dataSize = 0;
          foreach (string element in VerifyInfoListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * verifyInfoList_.Count;
        }
        if (hasClientCheckData) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, ClientCheckData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VerifyUserRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VerifyUserRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VerifyUserRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VerifyUserRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VerifyUserRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VerifyUserRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VerifyUserRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VerifyUserRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VerifyUserRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VerifyUserRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VerifyUserRequest MakeReadOnly() {
      verifyUserList_.MakeReadOnly();
      sceneList_.MakeReadOnly();
      verifyInfoList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VerifyUserRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<VerifyUserRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VerifyUserRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VerifyUserRequest result;
      
      private VerifyUserRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          VerifyUserRequest original = result;
          result = new VerifyUserRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VerifyUserRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.VerifyUserRequest.Descriptor; }
      }
      
      public override VerifyUserRequest DefaultInstanceForType {
        get { return global::mm.command.VerifyUserRequest.DefaultInstance; }
      }
      
      public override VerifyUserRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VerifyUserRequest) {
          return MergeFrom((VerifyUserRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VerifyUserRequest other) {
        if (other == global::mm.command.VerifyUserRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasOpcode) {
          Opcode = other.Opcode;
        }
        if (other.HasVerifyUserListSize) {
          VerifyUserListSize = other.VerifyUserListSize;
        }
        if (other.verifyUserList_.Count != 0) {
          result.verifyUserList_.Add(other.verifyUserList_);
        }
        if (other.HasVerifyContent) {
          VerifyContent = other.VerifyContent;
        }
        if (other.HasSceneListNumb) {
          SceneListNumb = other.SceneListNumb;
        }
        if (other.sceneList_.Count != 0) {
          result.sceneList_.Add(other.sceneList_);
        }
        if (other.HasVerifyInfoListNumb) {
          VerifyInfoListNumb = other.VerifyInfoListNumb;
        }
        if (other.verifyInfoList_.Count != 0) {
          result.verifyInfoList_.Add(other.verifyInfoList_);
        }
        if (other.HasClientCheckData) {
          MergeClientCheckData(other.ClientCheckData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_verifyUserRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _verifyUserRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOpcode = input.ReadInt32(ref result.opcode_);
              break;
            }
            case 24: {
              result.hasVerifyUserListSize = input.ReadInt32(ref result.verifyUserListSize_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.verifyUserList_, global::mm.command.VerifyUserObj.DefaultInstance, extensionRegistry);
              break;
            }
            case 42: {
              result.hasVerifyContent = input.ReadString(ref result.verifyContent_);
              break;
            }
            case 48: {
              result.hasSceneListNumb = input.ReadInt32(ref result.sceneListNumb_);
              break;
            }
            case 58: {
              input.ReadStringArray(tag, field_name, result.sceneList_);
              break;
            }
            case 64: {
              result.hasVerifyInfoListNumb = input.ReadUInt32(ref result.verifyInfoListNumb_);
              break;
            }
            case 74: {
              input.ReadStringArray(tag, field_name, result.verifyInfoList_);
              break;
            }
            case 82: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasClientCheckData) {
                subBuilder.MergeFrom(ClientCheckData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientCheckData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasOpcode {
        get { return result.hasOpcode; }
      }
      public int Opcode {
        get { return result.Opcode; }
        set { SetOpcode(value); }
      }
      public Builder SetOpcode(int value) {
        PrepareBuilder();
        result.hasOpcode = true;
        result.opcode_ = value;
        return this;
      }
      public Builder ClearOpcode() {
        PrepareBuilder();
        result.hasOpcode = false;
        result.opcode_ = 0;
        return this;
      }
      
      public bool HasVerifyUserListSize {
        get { return result.hasVerifyUserListSize; }
      }
      public int VerifyUserListSize {
        get { return result.VerifyUserListSize; }
        set { SetVerifyUserListSize(value); }
      }
      public Builder SetVerifyUserListSize(int value) {
        PrepareBuilder();
        result.hasVerifyUserListSize = true;
        result.verifyUserListSize_ = value;
        return this;
      }
      public Builder ClearVerifyUserListSize() {
        PrepareBuilder();
        result.hasVerifyUserListSize = false;
        result.verifyUserListSize_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.VerifyUserObj> VerifyUserListList {
        get { return PrepareBuilder().verifyUserList_; }
      }
      public int VerifyUserListCount {
        get { return result.VerifyUserListCount; }
      }
      public global::mm.command.VerifyUserObj GetVerifyUserList(int index) {
        return result.GetVerifyUserList(index);
      }
      public Builder SetVerifyUserList(int index, global::mm.command.VerifyUserObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.verifyUserList_[index] = value;
        return this;
      }
      public Builder SetVerifyUserList(int index, global::mm.command.VerifyUserObj.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.verifyUserList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddVerifyUserList(global::mm.command.VerifyUserObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.verifyUserList_.Add(value);
        return this;
      }
      public Builder AddVerifyUserList(global::mm.command.VerifyUserObj.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.verifyUserList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeVerifyUserList(scg::IEnumerable<global::mm.command.VerifyUserObj> values) {
        PrepareBuilder();
        result.verifyUserList_.Add(values);
        return this;
      }
      public Builder ClearVerifyUserList() {
        PrepareBuilder();
        result.verifyUserList_.Clear();
        return this;
      }
      
      public bool HasVerifyContent {
        get { return result.hasVerifyContent; }
      }
      public string VerifyContent {
        get { return result.VerifyContent; }
        set { SetVerifyContent(value); }
      }
      public Builder SetVerifyContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVerifyContent = true;
        result.verifyContent_ = value;
        return this;
      }
      public Builder ClearVerifyContent() {
        PrepareBuilder();
        result.hasVerifyContent = false;
        result.verifyContent_ = "";
        return this;
      }
      
      public bool HasSceneListNumb {
        get { return result.hasSceneListNumb; }
      }
      public int SceneListNumb {
        get { return result.SceneListNumb; }
        set { SetSceneListNumb(value); }
      }
      public Builder SetSceneListNumb(int value) {
        PrepareBuilder();
        result.hasSceneListNumb = true;
        result.sceneListNumb_ = value;
        return this;
      }
      public Builder ClearSceneListNumb() {
        PrepareBuilder();
        result.hasSceneListNumb = false;
        result.sceneListNumb_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> SceneListList {
        get { return PrepareBuilder().sceneList_; }
      }
      public int SceneListCount {
        get { return result.SceneListCount; }
      }
      public string GetSceneList(int index) {
        return result.GetSceneList(index);
      }
      public Builder SetSceneList(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sceneList_[index] = value;
        return this;
      }
      public Builder AddSceneList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.sceneList_.Add(value);
        return this;
      }
      public Builder AddRangeSceneList(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.sceneList_.Add(values);
        return this;
      }
      public Builder ClearSceneList() {
        PrepareBuilder();
        result.sceneList_.Clear();
        return this;
      }
      
      public bool HasVerifyInfoListNumb {
        get { return result.hasVerifyInfoListNumb; }
      }
      [global::System.CLSCompliant(false)]
      public uint VerifyInfoListNumb {
        get { return result.VerifyInfoListNumb; }
        set { SetVerifyInfoListNumb(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetVerifyInfoListNumb(uint value) {
        PrepareBuilder();
        result.hasVerifyInfoListNumb = true;
        result.verifyInfoListNumb_ = value;
        return this;
      }
      public Builder ClearVerifyInfoListNumb() {
        PrepareBuilder();
        result.hasVerifyInfoListNumb = false;
        result.verifyInfoListNumb_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> VerifyInfoListList {
        get { return PrepareBuilder().verifyInfoList_; }
      }
      public int VerifyInfoListCount {
        get { return result.VerifyInfoListCount; }
      }
      public string GetVerifyInfoList(int index) {
        return result.GetVerifyInfoList(index);
      }
      public Builder SetVerifyInfoList(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.verifyInfoList_[index] = value;
        return this;
      }
      public Builder AddVerifyInfoList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.verifyInfoList_.Add(value);
        return this;
      }
      public Builder AddRangeVerifyInfoList(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.verifyInfoList_.Add(values);
        return this;
      }
      public Builder ClearVerifyInfoList() {
        PrepareBuilder();
        result.verifyInfoList_.Clear();
        return this;
      }
      
      public bool HasClientCheckData {
       get { return result.hasClientCheckData; }
      }
      public global::mm.command.SKBuiltinBuffer_t ClientCheckData {
        get { return result.ClientCheckData; }
        set { SetClientCheckData(value); }
      }
      public Builder SetClientCheckData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientCheckData = true;
        result.clientCheckData_ = value;
        return this;
      }
      public Builder SetClientCheckData(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClientCheckData = true;
        result.clientCheckData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientCheckData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClientCheckData &&
            result.clientCheckData_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.clientCheckData_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.clientCheckData_).MergeFrom(value).BuildPartial();
        } else {
          result.clientCheckData_ = value;
        }
        result.hasClientCheckData = true;
        return this;
      }
      public Builder ClearClientCheckData() {
        PrepareBuilder();
        result.hasClientCheckData = false;
        result.clientCheckData_ = null;
        return this;
      }
    }
    static VerifyUserRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class VerifyUserResponse : pb::GeneratedMessage<VerifyUserResponse, VerifyUserResponse.Builder> {
    private VerifyUserResponse() { }
    private static readonly VerifyUserResponse defaultInstance = new VerifyUserResponse().MakeReadOnly();
    private static readonly string[] _verifyUserResponseFieldNames = new string[] { "UserName", "base" };
    private static readonly uint[] _verifyUserResponseFieldTags = new uint[] { 18, 10 };
    public static VerifyUserResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override VerifyUserResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override VerifyUserResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_VerifyUserResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<VerifyUserResponse, VerifyUserResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_VerifyUserResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _verifyUserResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[1], Base);
      }
      if (hasUserName) {
        output.WriteString(2, field_names[0], UserName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static VerifyUserResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VerifyUserResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VerifyUserResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static VerifyUserResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static VerifyUserResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VerifyUserResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static VerifyUserResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static VerifyUserResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static VerifyUserResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static VerifyUserResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private VerifyUserResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(VerifyUserResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<VerifyUserResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(VerifyUserResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private VerifyUserResponse result;
      
      private VerifyUserResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          VerifyUserResponse original = result;
          result = new VerifyUserResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override VerifyUserResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.VerifyUserResponse.Descriptor; }
      }
      
      public override VerifyUserResponse DefaultInstanceForType {
        get { return global::mm.command.VerifyUserResponse.DefaultInstance; }
      }
      
      public override VerifyUserResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is VerifyUserResponse) {
          return MergeFrom((VerifyUserResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(VerifyUserResponse other) {
        if (other == global::mm.command.VerifyUserResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_verifyUserResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _verifyUserResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
    }
    static VerifyUserResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SearchContactRequest : pb::GeneratedMessage<SearchContactRequest, SearchContactRequest.Builder> {
    private SearchContactRequest() { }
    private static readonly SearchContactRequest defaultInstance = new SearchContactRequest().MakeReadOnly();
    private static readonly string[] _searchContactRequestFieldNames = new string[] { "UserName", "base", "opCode" };
    private static readonly uint[] _searchContactRequestFieldTags = new uint[] { 18, 10, 24 };
    public static SearchContactRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SearchContactRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SearchContactRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SearchContactRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SearchContactRequest, SearchContactRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SearchContactRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private global::mm.command.SKBuiltinString_t userName_;
    public bool HasUserName {
      get { return hasUserName; }
    }
    public global::mm.command.SKBuiltinString_t UserName {
      get { return userName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int OpCodeFieldNumber = 3;
    private bool hasOpCode;
    private int opCode_;
    public bool HasOpCode {
      get { return hasOpCode; }
    }
    public int OpCode {
      get { return opCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasUserName) return false;
        if (!hasOpCode) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _searchContactRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[1], Base);
      }
      if (hasUserName) {
        output.WriteMessage(2, field_names[0], UserName);
      }
      if (hasOpCode) {
        output.WriteInt32(3, field_names[2], OpCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, UserName);
        }
        if (hasOpCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, OpCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SearchContactRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchContactRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchContactRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchContactRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchContactRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchContactRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SearchContactRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SearchContactRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SearchContactRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchContactRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SearchContactRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SearchContactRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SearchContactRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SearchContactRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SearchContactRequest result;
      
      private SearchContactRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SearchContactRequest original = result;
          result = new SearchContactRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SearchContactRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.SearchContactRequest.Descriptor; }
      }
      
      public override SearchContactRequest DefaultInstanceForType {
        get { return global::mm.command.SearchContactRequest.DefaultInstance; }
      }
      
      public override SearchContactRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SearchContactRequest) {
          return MergeFrom((SearchContactRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SearchContactRequest other) {
        if (other == global::mm.command.SearchContactRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          MergeUserName(other.UserName);
        }
        if (other.HasOpCode) {
          OpCode = other.OpCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_searchContactRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _searchContactRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasUserName) {
                subBuilder.MergeFrom(UserName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserName = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasOpCode = input.ReadInt32(ref result.opCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
       get { return result.hasUserName; }
      }
      public global::mm.command.SKBuiltinString_t UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder SetUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserName &&
            result.userName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.userName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.userName_).MergeFrom(value).BuildPartial();
        } else {
          result.userName_ = value;
        }
        result.hasUserName = true;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = null;
        return this;
      }
      
      public bool HasOpCode {
        get { return result.hasOpCode; }
      }
      public int OpCode {
        get { return result.OpCode; }
        set { SetOpCode(value); }
      }
      public Builder SetOpCode(int value) {
        PrepareBuilder();
        result.hasOpCode = true;
        result.opCode_ = value;
        return this;
      }
      public Builder ClearOpCode() {
        PrepareBuilder();
        result.hasOpCode = false;
        result.opCode_ = 0;
        return this;
      }
    }
    static SearchContactRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SearchContactResponse : pb::GeneratedMessage<SearchContactResponse, SearchContactResponse.Builder> {
    private SearchContactResponse() { }
    private static readonly SearchContactResponse defaultInstance = new SearchContactResponse().MakeReadOnly();
    private static readonly string[] _searchContactResponseFieldNames = new string[] { "AlbumBGImgID", "AlbumFlag", "AlbumStyle", "Alias", "BigHeadImgUrl", "City", "ContactCount", "ContactList", "Country", "CustomizedInfo", "ImgBuf", "MyBrandList", "NickName", "PYInitial", "PersonalCard", "Province", "QuanPin", "ResBuf", "Sex", "Signature", "SmallHeadImgUrl", "SnsUserInfo", "UserName", "VerifyFlag", "VerifyInfo", "Weibo", "WeiboFlag", "WeiboNickname", "antispamTicket", "base", "kfworkerId", "matchType" };
    private static readonly uint[] _searchContactResponseFieldTags = new uint[] { 162, 152, 144, 122, 218, 74, 200, 210, 178, 194, 58, 186, 26, 34, 88, 66, 42, 234, 48, 82, 226, 170, 18, 96, 106, 114, 136, 130, 242, 10, 250, 256 };
    public static SearchContactResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SearchContactResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SearchContactResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SearchContactResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SearchContactResponse, SearchContactResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SearchContactResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private global::mm.command.SKBuiltinString_t userName_;
    public bool HasUserName {
      get { return hasUserName; }
    }
    public global::mm.command.SKBuiltinString_t UserName {
      get { return userName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int NickNameFieldNumber = 3;
    private bool hasNickName;
    private global::mm.command.SKBuiltinString_t nickName_;
    public bool HasNickName {
      get { return hasNickName; }
    }
    public global::mm.command.SKBuiltinString_t NickName {
      get { return nickName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int PYInitialFieldNumber = 4;
    private bool hasPYInitial;
    private global::mm.command.SKBuiltinString_t pYInitial_;
    public bool HasPYInitial {
      get { return hasPYInitial; }
    }
    public global::mm.command.SKBuiltinString_t PYInitial {
      get { return pYInitial_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int QuanPinFieldNumber = 5;
    private bool hasQuanPin;
    private global::mm.command.SKBuiltinString_t quanPin_;
    public bool HasQuanPin {
      get { return hasQuanPin; }
    }
    public global::mm.command.SKBuiltinString_t QuanPin {
      get { return quanPin_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int SexFieldNumber = 6;
    private bool hasSex;
    private int sex_;
    public bool HasSex {
      get { return hasSex; }
    }
    public int Sex {
      get { return sex_; }
    }
    
    public const int ImgBufFieldNumber = 7;
    private bool hasImgBuf;
    private global::mm.command.SKBuiltinBuffer_t imgBuf_;
    public bool HasImgBuf {
      get { return hasImgBuf; }
    }
    public global::mm.command.SKBuiltinBuffer_t ImgBuf {
      get { return imgBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int ProvinceFieldNumber = 8;
    private bool hasProvince;
    private string province_ = "";
    public bool HasProvince {
      get { return hasProvince; }
    }
    public string Province {
      get { return province_; }
    }
    
    public const int CityFieldNumber = 9;
    private bool hasCity;
    private string city_ = "";
    public bool HasCity {
      get { return hasCity; }
    }
    public string City {
      get { return city_; }
    }
    
    public const int SignatureFieldNumber = 10;
    private bool hasSignature;
    private string signature_ = "";
    public bool HasSignature {
      get { return hasSignature; }
    }
    public string Signature {
      get { return signature_; }
    }
    
    public const int PersonalCardFieldNumber = 11;
    private bool hasPersonalCard;
    private int personalCard_;
    public bool HasPersonalCard {
      get { return hasPersonalCard; }
    }
    public int PersonalCard {
      get { return personalCard_; }
    }
    
    public const int VerifyFlagFieldNumber = 12;
    private bool hasVerifyFlag;
    private int verifyFlag_;
    public bool HasVerifyFlag {
      get { return hasVerifyFlag; }
    }
    public int VerifyFlag {
      get { return verifyFlag_; }
    }
    
    public const int VerifyInfoFieldNumber = 13;
    private bool hasVerifyInfo;
    private string verifyInfo_ = "";
    public bool HasVerifyInfo {
      get { return hasVerifyInfo; }
    }
    public string VerifyInfo {
      get { return verifyInfo_; }
    }
    
    public const int WeiboFieldNumber = 14;
    private bool hasWeibo;
    private string weibo_ = "";
    public bool HasWeibo {
      get { return hasWeibo; }
    }
    public string Weibo {
      get { return weibo_; }
    }
    
    public const int AliasFieldNumber = 15;
    private bool hasAlias;
    private string alias_ = "";
    public bool HasAlias {
      get { return hasAlias; }
    }
    public string Alias {
      get { return alias_; }
    }
    
    public const int WeiboNicknameFieldNumber = 16;
    private bool hasWeiboNickname;
    private string weiboNickname_ = "";
    public bool HasWeiboNickname {
      get { return hasWeiboNickname; }
    }
    public string WeiboNickname {
      get { return weiboNickname_; }
    }
    
    public const int WeiboFlagFieldNumber = 17;
    private bool hasWeiboFlag;
    private int weiboFlag_;
    public bool HasWeiboFlag {
      get { return hasWeiboFlag; }
    }
    public int WeiboFlag {
      get { return weiboFlag_; }
    }
    
    public const int AlbumStyleFieldNumber = 18;
    private bool hasAlbumStyle;
    private int albumStyle_;
    public bool HasAlbumStyle {
      get { return hasAlbumStyle; }
    }
    public int AlbumStyle {
      get { return albumStyle_; }
    }
    
    public const int AlbumFlagFieldNumber = 19;
    private bool hasAlbumFlag;
    private int albumFlag_;
    public bool HasAlbumFlag {
      get { return hasAlbumFlag; }
    }
    public int AlbumFlag {
      get { return albumFlag_; }
    }
    
    public const int AlbumBGImgIDFieldNumber = 20;
    private bool hasAlbumBGImgID;
    private string albumBGImgID_ = "";
    public bool HasAlbumBGImgID {
      get { return hasAlbumBGImgID; }
    }
    public string AlbumBGImgID {
      get { return albumBGImgID_; }
    }
    
    public const int SnsUserInfoFieldNumber = 21;
    private bool hasSnsUserInfo;
    private global::mm.command.SnsUser snsUserInfo_;
    public bool HasSnsUserInfo {
      get { return hasSnsUserInfo; }
    }
    public global::mm.command.SnsUser SnsUserInfo {
      get { return snsUserInfo_ ?? global::mm.command.SnsUser.DefaultInstance; }
    }
    
    public const int CountryFieldNumber = 22;
    private bool hasCountry;
    private string country_ = "";
    public bool HasCountry {
      get { return hasCountry; }
    }
    public string Country {
      get { return country_; }
    }
    
    public const int MyBrandListFieldNumber = 23;
    private bool hasMyBrandList;
    private string myBrandList_ = "";
    public bool HasMyBrandList {
      get { return hasMyBrandList; }
    }
    public string MyBrandList {
      get { return myBrandList_; }
    }
    
    public const int CustomizedInfoFieldNumber = 24;
    private bool hasCustomizedInfo;
    private global::mm.command.CustomizedInfoObj customizedInfo_;
    public bool HasCustomizedInfo {
      get { return hasCustomizedInfo; }
    }
    public global::mm.command.CustomizedInfoObj CustomizedInfo {
      get { return customizedInfo_ ?? global::mm.command.CustomizedInfoObj.DefaultInstance; }
    }
    
    public const int ContactCountFieldNumber = 25;
    private bool hasContactCount;
    private int contactCount_;
    public bool HasContactCount {
      get { return hasContactCount; }
    }
    public int ContactCount {
      get { return contactCount_; }
    }
    
    public const int ContactListFieldNumber = 26;
    private pbc::PopsicleList<global::mm.command.SearchContact> contactList_ = new pbc::PopsicleList<global::mm.command.SearchContact>();
    public scg::IList<global::mm.command.SearchContact> ContactListList {
      get { return contactList_; }
    }
    public int ContactListCount {
      get { return contactList_.Count; }
    }
    public global::mm.command.SearchContact GetContactList(int index) {
      return contactList_[index];
    }
    
    public const int BigHeadImgUrlFieldNumber = 27;
    private bool hasBigHeadImgUrl;
    private string bigHeadImgUrl_ = "";
    public bool HasBigHeadImgUrl {
      get { return hasBigHeadImgUrl; }
    }
    public string BigHeadImgUrl {
      get { return bigHeadImgUrl_; }
    }
    
    public const int SmallHeadImgUrlFieldNumber = 28;
    private bool hasSmallHeadImgUrl;
    private string smallHeadImgUrl_ = "";
    public bool HasSmallHeadImgUrl {
      get { return hasSmallHeadImgUrl; }
    }
    public string SmallHeadImgUrl {
      get { return smallHeadImgUrl_; }
    }
    
    public const int ResBufFieldNumber = 29;
    private bool hasResBuf;
    private global::mm.command.SKBuiltinBuffer_t resBuf_;
    public bool HasResBuf {
      get { return hasResBuf; }
    }
    public global::mm.command.SKBuiltinBuffer_t ResBuf {
      get { return resBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int AntispamTicketFieldNumber = 30;
    private bool hasAntispamTicket;
    private string antispamTicket_ = "";
    public bool HasAntispamTicket {
      get { return hasAntispamTicket; }
    }
    public string AntispamTicket {
      get { return antispamTicket_; }
    }
    
    public const int KfworkerIdFieldNumber = 31;
    private bool hasKfworkerId;
    private string kfworkerId_ = "";
    public bool HasKfworkerId {
      get { return hasKfworkerId; }
    }
    public string KfworkerId {
      get { return kfworkerId_; }
    }
    
    public const int MatchTypeFieldNumber = 32;
    private bool hasMatchType;
    private uint matchType_;
    public bool HasMatchType {
      get { return hasMatchType; }
    }
    [global::System.CLSCompliant(false)]
    public uint MatchType {
      get { return matchType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasUserName) return false;
        if (!hasNickName) return false;
        if (!hasPYInitial) return false;
        if (!hasQuanPin) return false;
        if (!hasSex) return false;
        if (!hasImgBuf) return false;
        if (!Base.IsInitialized) return false;
        if (!ImgBuf.IsInitialized) return false;
        if (HasSnsUserInfo) {
          if (!SnsUserInfo.IsInitialized) return false;
        }
        if (HasCustomizedInfo) {
          if (!CustomizedInfo.IsInitialized) return false;
        }
        foreach (global::mm.command.SearchContact element in ContactListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasResBuf) {
          if (!ResBuf.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _searchContactResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[29], Base);
      }
      if (hasUserName) {
        output.WriteMessage(2, field_names[22], UserName);
      }
      if (hasNickName) {
        output.WriteMessage(3, field_names[12], NickName);
      }
      if (hasPYInitial) {
        output.WriteMessage(4, field_names[13], PYInitial);
      }
      if (hasQuanPin) {
        output.WriteMessage(5, field_names[16], QuanPin);
      }
      if (hasSex) {
        output.WriteInt32(6, field_names[18], Sex);
      }
      if (hasImgBuf) {
        output.WriteMessage(7, field_names[10], ImgBuf);
      }
      if (hasProvince) {
        output.WriteString(8, field_names[15], Province);
      }
      if (hasCity) {
        output.WriteString(9, field_names[5], City);
      }
      if (hasSignature) {
        output.WriteString(10, field_names[19], Signature);
      }
      if (hasPersonalCard) {
        output.WriteInt32(11, field_names[14], PersonalCard);
      }
      if (hasVerifyFlag) {
        output.WriteInt32(12, field_names[23], VerifyFlag);
      }
      if (hasVerifyInfo) {
        output.WriteString(13, field_names[24], VerifyInfo);
      }
      if (hasWeibo) {
        output.WriteString(14, field_names[25], Weibo);
      }
      if (hasAlias) {
        output.WriteString(15, field_names[3], Alias);
      }
      if (hasWeiboNickname) {
        output.WriteString(16, field_names[27], WeiboNickname);
      }
      if (hasWeiboFlag) {
        output.WriteInt32(17, field_names[26], WeiboFlag);
      }
      if (hasAlbumStyle) {
        output.WriteInt32(18, field_names[2], AlbumStyle);
      }
      if (hasAlbumFlag) {
        output.WriteInt32(19, field_names[1], AlbumFlag);
      }
      if (hasAlbumBGImgID) {
        output.WriteString(20, field_names[0], AlbumBGImgID);
      }
      if (hasSnsUserInfo) {
        output.WriteMessage(21, field_names[21], SnsUserInfo);
      }
      if (hasCountry) {
        output.WriteString(22, field_names[8], Country);
      }
      if (hasMyBrandList) {
        output.WriteString(23, field_names[11], MyBrandList);
      }
      if (hasCustomizedInfo) {
        output.WriteMessage(24, field_names[9], CustomizedInfo);
      }
      if (hasContactCount) {
        output.WriteInt32(25, field_names[6], ContactCount);
      }
      if (contactList_.Count > 0) {
        output.WriteMessageArray(26, field_names[7], contactList_);
      }
      if (hasBigHeadImgUrl) {
        output.WriteString(27, field_names[4], BigHeadImgUrl);
      }
      if (hasSmallHeadImgUrl) {
        output.WriteString(28, field_names[20], SmallHeadImgUrl);
      }
      if (hasResBuf) {
        output.WriteMessage(29, field_names[17], ResBuf);
      }
      if (hasAntispamTicket) {
        output.WriteString(30, field_names[28], AntispamTicket);
      }
      if (hasKfworkerId) {
        output.WriteString(31, field_names[30], KfworkerId);
      }
      if (hasMatchType) {
        output.WriteUInt32(32, field_names[31], MatchType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, UserName);
        }
        if (hasNickName) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, NickName);
        }
        if (hasPYInitial) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, PYInitial);
        }
        if (hasQuanPin) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, QuanPin);
        }
        if (hasSex) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Sex);
        }
        if (hasImgBuf) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, ImgBuf);
        }
        if (hasProvince) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Province);
        }
        if (hasCity) {
          size += pb::CodedOutputStream.ComputeStringSize(9, City);
        }
        if (hasSignature) {
          size += pb::CodedOutputStream.ComputeStringSize(10, Signature);
        }
        if (hasPersonalCard) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, PersonalCard);
        }
        if (hasVerifyFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, VerifyFlag);
        }
        if (hasVerifyInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(13, VerifyInfo);
        }
        if (hasWeibo) {
          size += pb::CodedOutputStream.ComputeStringSize(14, Weibo);
        }
        if (hasAlias) {
          size += pb::CodedOutputStream.ComputeStringSize(15, Alias);
        }
        if (hasWeiboNickname) {
          size += pb::CodedOutputStream.ComputeStringSize(16, WeiboNickname);
        }
        if (hasWeiboFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, WeiboFlag);
        }
        if (hasAlbumStyle) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, AlbumStyle);
        }
        if (hasAlbumFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(19, AlbumFlag);
        }
        if (hasAlbumBGImgID) {
          size += pb::CodedOutputStream.ComputeStringSize(20, AlbumBGImgID);
        }
        if (hasSnsUserInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, SnsUserInfo);
        }
        if (hasCountry) {
          size += pb::CodedOutputStream.ComputeStringSize(22, Country);
        }
        if (hasMyBrandList) {
          size += pb::CodedOutputStream.ComputeStringSize(23, MyBrandList);
        }
        if (hasCustomizedInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(24, CustomizedInfo);
        }
        if (hasContactCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(25, ContactCount);
        }
        foreach (global::mm.command.SearchContact element in ContactListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(26, element);
        }
        if (hasBigHeadImgUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(27, BigHeadImgUrl);
        }
        if (hasSmallHeadImgUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(28, SmallHeadImgUrl);
        }
        if (hasResBuf) {
          size += pb::CodedOutputStream.ComputeMessageSize(29, ResBuf);
        }
        if (hasAntispamTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(30, AntispamTicket);
        }
        if (hasKfworkerId) {
          size += pb::CodedOutputStream.ComputeStringSize(31, KfworkerId);
        }
        if (hasMatchType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(32, MatchType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SearchContactResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchContactResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchContactResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SearchContactResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SearchContactResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchContactResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SearchContactResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SearchContactResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SearchContactResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SearchContactResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SearchContactResponse MakeReadOnly() {
      contactList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SearchContactResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SearchContactResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SearchContactResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SearchContactResponse result;
      
      private SearchContactResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          SearchContactResponse original = result;
          result = new SearchContactResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SearchContactResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.SearchContactResponse.Descriptor; }
      }
      
      public override SearchContactResponse DefaultInstanceForType {
        get { return global::mm.command.SearchContactResponse.DefaultInstance; }
      }
      
      public override SearchContactResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SearchContactResponse) {
          return MergeFrom((SearchContactResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SearchContactResponse other) {
        if (other == global::mm.command.SearchContactResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          MergeUserName(other.UserName);
        }
        if (other.HasNickName) {
          MergeNickName(other.NickName);
        }
        if (other.HasPYInitial) {
          MergePYInitial(other.PYInitial);
        }
        if (other.HasQuanPin) {
          MergeQuanPin(other.QuanPin);
        }
        if (other.HasSex) {
          Sex = other.Sex;
        }
        if (other.HasImgBuf) {
          MergeImgBuf(other.ImgBuf);
        }
        if (other.HasProvince) {
          Province = other.Province;
        }
        if (other.HasCity) {
          City = other.City;
        }
        if (other.HasSignature) {
          Signature = other.Signature;
        }
        if (other.HasPersonalCard) {
          PersonalCard = other.PersonalCard;
        }
        if (other.HasVerifyFlag) {
          VerifyFlag = other.VerifyFlag;
        }
        if (other.HasVerifyInfo) {
          VerifyInfo = other.VerifyInfo;
        }
        if (other.HasWeibo) {
          Weibo = other.Weibo;
        }
        if (other.HasAlias) {
          Alias = other.Alias;
        }
        if (other.HasWeiboNickname) {
          WeiboNickname = other.WeiboNickname;
        }
        if (other.HasWeiboFlag) {
          WeiboFlag = other.WeiboFlag;
        }
        if (other.HasAlbumStyle) {
          AlbumStyle = other.AlbumStyle;
        }
        if (other.HasAlbumFlag) {
          AlbumFlag = other.AlbumFlag;
        }
        if (other.HasAlbumBGImgID) {
          AlbumBGImgID = other.AlbumBGImgID;
        }
        if (other.HasSnsUserInfo) {
          MergeSnsUserInfo(other.SnsUserInfo);
        }
        if (other.HasCountry) {
          Country = other.Country;
        }
        if (other.HasMyBrandList) {
          MyBrandList = other.MyBrandList;
        }
        if (other.HasCustomizedInfo) {
          MergeCustomizedInfo(other.CustomizedInfo);
        }
        if (other.HasContactCount) {
          ContactCount = other.ContactCount;
        }
        if (other.contactList_.Count != 0) {
          result.contactList_.Add(other.contactList_);
        }
        if (other.HasBigHeadImgUrl) {
          BigHeadImgUrl = other.BigHeadImgUrl;
        }
        if (other.HasSmallHeadImgUrl) {
          SmallHeadImgUrl = other.SmallHeadImgUrl;
        }
        if (other.HasResBuf) {
          MergeResBuf(other.ResBuf);
        }
        if (other.HasAntispamTicket) {
          AntispamTicket = other.AntispamTicket;
        }
        if (other.HasKfworkerId) {
          KfworkerId = other.KfworkerId;
        }
        if (other.HasMatchType) {
          MatchType = other.MatchType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_searchContactResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _searchContactResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasUserName) {
                subBuilder.MergeFrom(UserName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserName = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasNickName) {
                subBuilder.MergeFrom(NickName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NickName = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasPYInitial) {
                subBuilder.MergeFrom(PYInitial);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PYInitial = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasQuanPin) {
                subBuilder.MergeFrom(QuanPin);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              QuanPin = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasSex = input.ReadInt32(ref result.sex_);
              break;
            }
            case 58: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasImgBuf) {
                subBuilder.MergeFrom(ImgBuf);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgBuf = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              result.hasProvince = input.ReadString(ref result.province_);
              break;
            }
            case 74: {
              result.hasCity = input.ReadString(ref result.city_);
              break;
            }
            case 82: {
              result.hasSignature = input.ReadString(ref result.signature_);
              break;
            }
            case 88: {
              result.hasPersonalCard = input.ReadInt32(ref result.personalCard_);
              break;
            }
            case 96: {
              result.hasVerifyFlag = input.ReadInt32(ref result.verifyFlag_);
              break;
            }
            case 106: {
              result.hasVerifyInfo = input.ReadString(ref result.verifyInfo_);
              break;
            }
            case 114: {
              result.hasWeibo = input.ReadString(ref result.weibo_);
              break;
            }
            case 122: {
              result.hasAlias = input.ReadString(ref result.alias_);
              break;
            }
            case 130: {
              result.hasWeiboNickname = input.ReadString(ref result.weiboNickname_);
              break;
            }
            case 136: {
              result.hasWeiboFlag = input.ReadInt32(ref result.weiboFlag_);
              break;
            }
            case 144: {
              result.hasAlbumStyle = input.ReadInt32(ref result.albumStyle_);
              break;
            }
            case 152: {
              result.hasAlbumFlag = input.ReadInt32(ref result.albumFlag_);
              break;
            }
            case 162: {
              result.hasAlbumBGImgID = input.ReadString(ref result.albumBGImgID_);
              break;
            }
            case 170: {
              global::mm.command.SnsUser.Builder subBuilder = global::mm.command.SnsUser.CreateBuilder();
              if (result.hasSnsUserInfo) {
                subBuilder.MergeFrom(SnsUserInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SnsUserInfo = subBuilder.BuildPartial();
              break;
            }
            case 178: {
              result.hasCountry = input.ReadString(ref result.country_);
              break;
            }
            case 186: {
              result.hasMyBrandList = input.ReadString(ref result.myBrandList_);
              break;
            }
            case 194: {
              global::mm.command.CustomizedInfoObj.Builder subBuilder = global::mm.command.CustomizedInfoObj.CreateBuilder();
              if (result.hasCustomizedInfo) {
                subBuilder.MergeFrom(CustomizedInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CustomizedInfo = subBuilder.BuildPartial();
              break;
            }
            case 200: {
              result.hasContactCount = input.ReadInt32(ref result.contactCount_);
              break;
            }
            case 210: {
              input.ReadMessageArray(tag, field_name, result.contactList_, global::mm.command.SearchContact.DefaultInstance, extensionRegistry);
              break;
            }
            case 218: {
              result.hasBigHeadImgUrl = input.ReadString(ref result.bigHeadImgUrl_);
              break;
            }
            case 226: {
              result.hasSmallHeadImgUrl = input.ReadString(ref result.smallHeadImgUrl_);
              break;
            }
            case 234: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasResBuf) {
                subBuilder.MergeFrom(ResBuf);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ResBuf = subBuilder.BuildPartial();
              break;
            }
            case 242: {
              result.hasAntispamTicket = input.ReadString(ref result.antispamTicket_);
              break;
            }
            case 250: {
              result.hasKfworkerId = input.ReadString(ref result.kfworkerId_);
              break;
            }
            case 256: {
              result.hasMatchType = input.ReadUInt32(ref result.matchType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
       get { return result.hasUserName; }
      }
      public global::mm.command.SKBuiltinString_t UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder SetUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserName &&
            result.userName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.userName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.userName_).MergeFrom(value).BuildPartial();
        } else {
          result.userName_ = value;
        }
        result.hasUserName = true;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = null;
        return this;
      }
      
      public bool HasNickName {
       get { return result.hasNickName; }
      }
      public global::mm.command.SKBuiltinString_t NickName {
        get { return result.NickName; }
        set { SetNickName(value); }
      }
      public Builder SetNickName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = value;
        return this;
      }
      public Builder SetNickName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNickName = true;
        result.nickName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNickName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNickName &&
            result.nickName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.nickName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.nickName_).MergeFrom(value).BuildPartial();
        } else {
          result.nickName_ = value;
        }
        result.hasNickName = true;
        return this;
      }
      public Builder ClearNickName() {
        PrepareBuilder();
        result.hasNickName = false;
        result.nickName_ = null;
        return this;
      }
      
      public bool HasPYInitial {
       get { return result.hasPYInitial; }
      }
      public global::mm.command.SKBuiltinString_t PYInitial {
        get { return result.PYInitial; }
        set { SetPYInitial(value); }
      }
      public Builder SetPYInitial(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPYInitial = true;
        result.pYInitial_ = value;
        return this;
      }
      public Builder SetPYInitial(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPYInitial = true;
        result.pYInitial_ = builderForValue.Build();
        return this;
      }
      public Builder MergePYInitial(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPYInitial &&
            result.pYInitial_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.pYInitial_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.pYInitial_).MergeFrom(value).BuildPartial();
        } else {
          result.pYInitial_ = value;
        }
        result.hasPYInitial = true;
        return this;
      }
      public Builder ClearPYInitial() {
        PrepareBuilder();
        result.hasPYInitial = false;
        result.pYInitial_ = null;
        return this;
      }
      
      public bool HasQuanPin {
       get { return result.hasQuanPin; }
      }
      public global::mm.command.SKBuiltinString_t QuanPin {
        get { return result.QuanPin; }
        set { SetQuanPin(value); }
      }
      public Builder SetQuanPin(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQuanPin = true;
        result.quanPin_ = value;
        return this;
      }
      public Builder SetQuanPin(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasQuanPin = true;
        result.quanPin_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQuanPin(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasQuanPin &&
            result.quanPin_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.quanPin_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.quanPin_).MergeFrom(value).BuildPartial();
        } else {
          result.quanPin_ = value;
        }
        result.hasQuanPin = true;
        return this;
      }
      public Builder ClearQuanPin() {
        PrepareBuilder();
        result.hasQuanPin = false;
        result.quanPin_ = null;
        return this;
      }
      
      public bool HasSex {
        get { return result.hasSex; }
      }
      public int Sex {
        get { return result.Sex; }
        set { SetSex(value); }
      }
      public Builder SetSex(int value) {
        PrepareBuilder();
        result.hasSex = true;
        result.sex_ = value;
        return this;
      }
      public Builder ClearSex() {
        PrepareBuilder();
        result.hasSex = false;
        result.sex_ = 0;
        return this;
      }
      
      public bool HasImgBuf {
       get { return result.hasImgBuf; }
      }
      public global::mm.command.SKBuiltinBuffer_t ImgBuf {
        get { return result.ImgBuf; }
        set { SetImgBuf(value); }
      }
      public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgBuf = true;
        result.imgBuf_ = value;
        return this;
      }
      public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgBuf = true;
        result.imgBuf_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgBuf &&
            result.imgBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.imgBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.imgBuf_).MergeFrom(value).BuildPartial();
        } else {
          result.imgBuf_ = value;
        }
        result.hasImgBuf = true;
        return this;
      }
      public Builder ClearImgBuf() {
        PrepareBuilder();
        result.hasImgBuf = false;
        result.imgBuf_ = null;
        return this;
      }
      
      public bool HasProvince {
        get { return result.hasProvince; }
      }
      public string Province {
        get { return result.Province; }
        set { SetProvince(value); }
      }
      public Builder SetProvince(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasProvince = true;
        result.province_ = value;
        return this;
      }
      public Builder ClearProvince() {
        PrepareBuilder();
        result.hasProvince = false;
        result.province_ = "";
        return this;
      }
      
      public bool HasCity {
        get { return result.hasCity; }
      }
      public string City {
        get { return result.City; }
        set { SetCity(value); }
      }
      public Builder SetCity(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCity = true;
        result.city_ = value;
        return this;
      }
      public Builder ClearCity() {
        PrepareBuilder();
        result.hasCity = false;
        result.city_ = "";
        return this;
      }
      
      public bool HasSignature {
        get { return result.hasSignature; }
      }
      public string Signature {
        get { return result.Signature; }
        set { SetSignature(value); }
      }
      public Builder SetSignature(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSignature = true;
        result.signature_ = value;
        return this;
      }
      public Builder ClearSignature() {
        PrepareBuilder();
        result.hasSignature = false;
        result.signature_ = "";
        return this;
      }
      
      public bool HasPersonalCard {
        get { return result.hasPersonalCard; }
      }
      public int PersonalCard {
        get { return result.PersonalCard; }
        set { SetPersonalCard(value); }
      }
      public Builder SetPersonalCard(int value) {
        PrepareBuilder();
        result.hasPersonalCard = true;
        result.personalCard_ = value;
        return this;
      }
      public Builder ClearPersonalCard() {
        PrepareBuilder();
        result.hasPersonalCard = false;
        result.personalCard_ = 0;
        return this;
      }
      
      public bool HasVerifyFlag {
        get { return result.hasVerifyFlag; }
      }
      public int VerifyFlag {
        get { return result.VerifyFlag; }
        set { SetVerifyFlag(value); }
      }
      public Builder SetVerifyFlag(int value) {
        PrepareBuilder();
        result.hasVerifyFlag = true;
        result.verifyFlag_ = value;
        return this;
      }
      public Builder ClearVerifyFlag() {
        PrepareBuilder();
        result.hasVerifyFlag = false;
        result.verifyFlag_ = 0;
        return this;
      }
      
      public bool HasVerifyInfo {
        get { return result.hasVerifyInfo; }
      }
      public string VerifyInfo {
        get { return result.VerifyInfo; }
        set { SetVerifyInfo(value); }
      }
      public Builder SetVerifyInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVerifyInfo = true;
        result.verifyInfo_ = value;
        return this;
      }
      public Builder ClearVerifyInfo() {
        PrepareBuilder();
        result.hasVerifyInfo = false;
        result.verifyInfo_ = "";
        return this;
      }
      
      public bool HasWeibo {
        get { return result.hasWeibo; }
      }
      public string Weibo {
        get { return result.Weibo; }
        set { SetWeibo(value); }
      }
      public Builder SetWeibo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWeibo = true;
        result.weibo_ = value;
        return this;
      }
      public Builder ClearWeibo() {
        PrepareBuilder();
        result.hasWeibo = false;
        result.weibo_ = "";
        return this;
      }
      
      public bool HasAlias {
        get { return result.hasAlias; }
      }
      public string Alias {
        get { return result.Alias; }
        set { SetAlias(value); }
      }
      public Builder SetAlias(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAlias = true;
        result.alias_ = value;
        return this;
      }
      public Builder ClearAlias() {
        PrepareBuilder();
        result.hasAlias = false;
        result.alias_ = "";
        return this;
      }
      
      public bool HasWeiboNickname {
        get { return result.hasWeiboNickname; }
      }
      public string WeiboNickname {
        get { return result.WeiboNickname; }
        set { SetWeiboNickname(value); }
      }
      public Builder SetWeiboNickname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasWeiboNickname = true;
        result.weiboNickname_ = value;
        return this;
      }
      public Builder ClearWeiboNickname() {
        PrepareBuilder();
        result.hasWeiboNickname = false;
        result.weiboNickname_ = "";
        return this;
      }
      
      public bool HasWeiboFlag {
        get { return result.hasWeiboFlag; }
      }
      public int WeiboFlag {
        get { return result.WeiboFlag; }
        set { SetWeiboFlag(value); }
      }
      public Builder SetWeiboFlag(int value) {
        PrepareBuilder();
        result.hasWeiboFlag = true;
        result.weiboFlag_ = value;
        return this;
      }
      public Builder ClearWeiboFlag() {
        PrepareBuilder();
        result.hasWeiboFlag = false;
        result.weiboFlag_ = 0;
        return this;
      }
      
      public bool HasAlbumStyle {
        get { return result.hasAlbumStyle; }
      }
      public int AlbumStyle {
        get { return result.AlbumStyle; }
        set { SetAlbumStyle(value); }
      }
      public Builder SetAlbumStyle(int value) {
        PrepareBuilder();
        result.hasAlbumStyle = true;
        result.albumStyle_ = value;
        return this;
      }
      public Builder ClearAlbumStyle() {
        PrepareBuilder();
        result.hasAlbumStyle = false;
        result.albumStyle_ = 0;
        return this;
      }
      
      public bool HasAlbumFlag {
        get { return result.hasAlbumFlag; }
      }
      public int AlbumFlag {
        get { return result.AlbumFlag; }
        set { SetAlbumFlag(value); }
      }
      public Builder SetAlbumFlag(int value) {
        PrepareBuilder();
        result.hasAlbumFlag = true;
        result.albumFlag_ = value;
        return this;
      }
      public Builder ClearAlbumFlag() {
        PrepareBuilder();
        result.hasAlbumFlag = false;
        result.albumFlag_ = 0;
        return this;
      }
      
      public bool HasAlbumBGImgID {
        get { return result.hasAlbumBGImgID; }
      }
      public string AlbumBGImgID {
        get { return result.AlbumBGImgID; }
        set { SetAlbumBGImgID(value); }
      }
      public Builder SetAlbumBGImgID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAlbumBGImgID = true;
        result.albumBGImgID_ = value;
        return this;
      }
      public Builder ClearAlbumBGImgID() {
        PrepareBuilder();
        result.hasAlbumBGImgID = false;
        result.albumBGImgID_ = "";
        return this;
      }
      
      public bool HasSnsUserInfo {
       get { return result.hasSnsUserInfo; }
      }
      public global::mm.command.SnsUser SnsUserInfo {
        get { return result.SnsUserInfo; }
        set { SetSnsUserInfo(value); }
      }
      public Builder SetSnsUserInfo(global::mm.command.SnsUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnsUserInfo = true;
        result.snsUserInfo_ = value;
        return this;
      }
      public Builder SetSnsUserInfo(global::mm.command.SnsUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnsUserInfo = true;
        result.snsUserInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnsUserInfo(global::mm.command.SnsUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnsUserInfo &&
            result.snsUserInfo_ != global::mm.command.SnsUser.DefaultInstance) {
            result.snsUserInfo_ = global::mm.command.SnsUser.CreateBuilder(result.snsUserInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.snsUserInfo_ = value;
        }
        result.hasSnsUserInfo = true;
        return this;
      }
      public Builder ClearSnsUserInfo() {
        PrepareBuilder();
        result.hasSnsUserInfo = false;
        result.snsUserInfo_ = null;
        return this;
      }
      
      public bool HasCountry {
        get { return result.hasCountry; }
      }
      public string Country {
        get { return result.Country; }
        set { SetCountry(value); }
      }
      public Builder SetCountry(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCountry = true;
        result.country_ = value;
        return this;
      }
      public Builder ClearCountry() {
        PrepareBuilder();
        result.hasCountry = false;
        result.country_ = "";
        return this;
      }
      
      public bool HasMyBrandList {
        get { return result.hasMyBrandList; }
      }
      public string MyBrandList {
        get { return result.MyBrandList; }
        set { SetMyBrandList(value); }
      }
      public Builder SetMyBrandList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMyBrandList = true;
        result.myBrandList_ = value;
        return this;
      }
      public Builder ClearMyBrandList() {
        PrepareBuilder();
        result.hasMyBrandList = false;
        result.myBrandList_ = "";
        return this;
      }
      
      public bool HasCustomizedInfo {
       get { return result.hasCustomizedInfo; }
      }
      public global::mm.command.CustomizedInfoObj CustomizedInfo {
        get { return result.CustomizedInfo; }
        set { SetCustomizedInfo(value); }
      }
      public Builder SetCustomizedInfo(global::mm.command.CustomizedInfoObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCustomizedInfo = true;
        result.customizedInfo_ = value;
        return this;
      }
      public Builder SetCustomizedInfo(global::mm.command.CustomizedInfoObj.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCustomizedInfo = true;
        result.customizedInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCustomizedInfo(global::mm.command.CustomizedInfoObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCustomizedInfo &&
            result.customizedInfo_ != global::mm.command.CustomizedInfoObj.DefaultInstance) {
            result.customizedInfo_ = global::mm.command.CustomizedInfoObj.CreateBuilder(result.customizedInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.customizedInfo_ = value;
        }
        result.hasCustomizedInfo = true;
        return this;
      }
      public Builder ClearCustomizedInfo() {
        PrepareBuilder();
        result.hasCustomizedInfo = false;
        result.customizedInfo_ = null;
        return this;
      }
      
      public bool HasContactCount {
        get { return result.hasContactCount; }
      }
      public int ContactCount {
        get { return result.ContactCount; }
        set { SetContactCount(value); }
      }
      public Builder SetContactCount(int value) {
        PrepareBuilder();
        result.hasContactCount = true;
        result.contactCount_ = value;
        return this;
      }
      public Builder ClearContactCount() {
        PrepareBuilder();
        result.hasContactCount = false;
        result.contactCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.SearchContact> ContactListList {
        get { return PrepareBuilder().contactList_; }
      }
      public int ContactListCount {
        get { return result.ContactListCount; }
      }
      public global::mm.command.SearchContact GetContactList(int index) {
        return result.GetContactList(index);
      }
      public Builder SetContactList(int index, global::mm.command.SearchContact value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contactList_[index] = value;
        return this;
      }
      public Builder SetContactList(int index, global::mm.command.SearchContact.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contactList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContactList(global::mm.command.SearchContact value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contactList_.Add(value);
        return this;
      }
      public Builder AddContactList(global::mm.command.SearchContact.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contactList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContactList(scg::IEnumerable<global::mm.command.SearchContact> values) {
        PrepareBuilder();
        result.contactList_.Add(values);
        return this;
      }
      public Builder ClearContactList() {
        PrepareBuilder();
        result.contactList_.Clear();
        return this;
      }
      
      public bool HasBigHeadImgUrl {
        get { return result.hasBigHeadImgUrl; }
      }
      public string BigHeadImgUrl {
        get { return result.BigHeadImgUrl; }
        set { SetBigHeadImgUrl(value); }
      }
      public Builder SetBigHeadImgUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBigHeadImgUrl = true;
        result.bigHeadImgUrl_ = value;
        return this;
      }
      public Builder ClearBigHeadImgUrl() {
        PrepareBuilder();
        result.hasBigHeadImgUrl = false;
        result.bigHeadImgUrl_ = "";
        return this;
      }
      
      public bool HasSmallHeadImgUrl {
        get { return result.hasSmallHeadImgUrl; }
      }
      public string SmallHeadImgUrl {
        get { return result.SmallHeadImgUrl; }
        set { SetSmallHeadImgUrl(value); }
      }
      public Builder SetSmallHeadImgUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSmallHeadImgUrl = true;
        result.smallHeadImgUrl_ = value;
        return this;
      }
      public Builder ClearSmallHeadImgUrl() {
        PrepareBuilder();
        result.hasSmallHeadImgUrl = false;
        result.smallHeadImgUrl_ = "";
        return this;
      }
      
      public bool HasResBuf {
       get { return result.hasResBuf; }
      }
      public global::mm.command.SKBuiltinBuffer_t ResBuf {
        get { return result.ResBuf; }
        set { SetResBuf(value); }
      }
      public Builder SetResBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasResBuf = true;
        result.resBuf_ = value;
        return this;
      }
      public Builder SetResBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasResBuf = true;
        result.resBuf_ = builderForValue.Build();
        return this;
      }
      public Builder MergeResBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasResBuf &&
            result.resBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.resBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.resBuf_).MergeFrom(value).BuildPartial();
        } else {
          result.resBuf_ = value;
        }
        result.hasResBuf = true;
        return this;
      }
      public Builder ClearResBuf() {
        PrepareBuilder();
        result.hasResBuf = false;
        result.resBuf_ = null;
        return this;
      }
      
      public bool HasAntispamTicket {
        get { return result.hasAntispamTicket; }
      }
      public string AntispamTicket {
        get { return result.AntispamTicket; }
        set { SetAntispamTicket(value); }
      }
      public Builder SetAntispamTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAntispamTicket = true;
        result.antispamTicket_ = value;
        return this;
      }
      public Builder ClearAntispamTicket() {
        PrepareBuilder();
        result.hasAntispamTicket = false;
        result.antispamTicket_ = "";
        return this;
      }
      
      public bool HasKfworkerId {
        get { return result.hasKfworkerId; }
      }
      public string KfworkerId {
        get { return result.KfworkerId; }
        set { SetKfworkerId(value); }
      }
      public Builder SetKfworkerId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKfworkerId = true;
        result.kfworkerId_ = value;
        return this;
      }
      public Builder ClearKfworkerId() {
        PrepareBuilder();
        result.hasKfworkerId = false;
        result.kfworkerId_ = "";
        return this;
      }
      
      public bool HasMatchType {
        get { return result.hasMatchType; }
      }
      [global::System.CLSCompliant(false)]
      public uint MatchType {
        get { return result.MatchType; }
        set { SetMatchType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMatchType(uint value) {
        PrepareBuilder();
        result.hasMatchType = true;
        result.matchType_ = value;
        return this;
      }
      public Builder ClearMatchType() {
        PrepareBuilder();
        result.hasMatchType = false;
        result.matchType_ = 0;
        return this;
      }
    }
    static SearchContactResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetContactRequest : pb::GeneratedMessage<GetContactRequest, GetContactRequest.Builder> {
    private GetContactRequest() { }
    private static readonly GetContactRequest defaultInstance = new GetContactRequest().MakeReadOnly();
    private static readonly string[] _getContactRequestFieldNames = new string[] { "UserCount", "UserNameList", "antispamTicket", "antispamTicketNumb", "base", "chatRoomAccessVerifyTicket", "fromChatRoom", "fromChatRoomNumb", "getContactScene" };
    private static readonly uint[] _getContactRequestFieldTags = new uint[] { 16, 26, 42, 32, 10, 74, 58, 48, 64 };
    public static GetContactRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetContactRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetContactRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetContactRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetContactRequest, GetContactRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetContactRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int UserCountFieldNumber = 2;
    private bool hasUserCount;
    private int userCount_;
    public bool HasUserCount {
      get { return hasUserCount; }
    }
    public int UserCount {
      get { return userCount_; }
    }
    
    public const int UserNameListFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.SKBuiltinString_t> userNameList_ = new pbc::PopsicleList<global::mm.command.SKBuiltinString_t>();
    public scg::IList<global::mm.command.SKBuiltinString_t> UserNameListList {
      get { return userNameList_; }
    }
    public int UserNameListCount {
      get { return userNameList_.Count; }
    }
    public global::mm.command.SKBuiltinString_t GetUserNameList(int index) {
      return userNameList_[index];
    }
    
    public const int AntispamTicketNumbFieldNumber = 4;
    private bool hasAntispamTicketNumb;
    private uint antispamTicketNumb_;
    public bool HasAntispamTicketNumb {
      get { return hasAntispamTicketNumb; }
    }
    [global::System.CLSCompliant(false)]
    public uint AntispamTicketNumb {
      get { return antispamTicketNumb_; }
    }
    
    public const int AntispamTicketFieldNumber = 5;
    private pbc::PopsicleList<string> antispamTicket_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AntispamTicketList {
      get { return pbc::Lists.AsReadOnly(antispamTicket_); }
    }
    public int AntispamTicketCount {
      get { return antispamTicket_.Count; }
    }
    public string GetAntispamTicket(int index) {
      return antispamTicket_[index];
    }
    
    public const int FromChatRoomNumbFieldNumber = 6;
    private bool hasFromChatRoomNumb;
    private uint fromChatRoomNumb_;
    public bool HasFromChatRoomNumb {
      get { return hasFromChatRoomNumb; }
    }
    [global::System.CLSCompliant(false)]
    public uint FromChatRoomNumb {
      get { return fromChatRoomNumb_; }
    }
    
    public const int FromChatRoomFieldNumber = 7;
    private pbc::PopsicleList<global::mm.command.SKBuiltinString_t> fromChatRoom_ = new pbc::PopsicleList<global::mm.command.SKBuiltinString_t>();
    public scg::IList<global::mm.command.SKBuiltinString_t> FromChatRoomList {
      get { return fromChatRoom_; }
    }
    public int FromChatRoomCount {
      get { return fromChatRoom_.Count; }
    }
    public global::mm.command.SKBuiltinString_t GetFromChatRoom(int index) {
      return fromChatRoom_[index];
    }
    
    public const int GetContactSceneFieldNumber = 8;
    private bool hasGetContactScene;
    private uint getContactScene_;
    public bool HasGetContactScene {
      get { return hasGetContactScene; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetContactScene {
      get { return getContactScene_; }
    }
    
    public const int ChatRoomAccessVerifyTicketFieldNumber = 9;
    private bool hasChatRoomAccessVerifyTicket;
    private global::mm.command.SKBuiltinString_t chatRoomAccessVerifyTicket_;
    public bool HasChatRoomAccessVerifyTicket {
      get { return hasChatRoomAccessVerifyTicket; }
    }
    public global::mm.command.SKBuiltinString_t ChatRoomAccessVerifyTicket {
      get { return chatRoomAccessVerifyTicket_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasUserCount) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getContactRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[4], Base);
      }
      if (hasUserCount) {
        output.WriteInt32(2, field_names[0], UserCount);
      }
      if (userNameList_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], userNameList_);
      }
      if (hasAntispamTicketNumb) {
        output.WriteUInt32(4, field_names[3], AntispamTicketNumb);
      }
      if (antispamTicket_.Count > 0) {
        output.WriteStringArray(5, field_names[2], antispamTicket_);
      }
      if (hasFromChatRoomNumb) {
        output.WriteUInt32(6, field_names[7], FromChatRoomNumb);
      }
      if (fromChatRoom_.Count > 0) {
        output.WriteMessageArray(7, field_names[6], fromChatRoom_);
      }
      if (hasGetContactScene) {
        output.WriteUInt32(8, field_names[8], GetContactScene);
      }
      if (hasChatRoomAccessVerifyTicket) {
        output.WriteMessage(9, field_names[5], ChatRoomAccessVerifyTicket);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, UserCount);
        }
        foreach (global::mm.command.SKBuiltinString_t element in UserNameListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasAntispamTicketNumb) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, AntispamTicketNumb);
        }
        {
          int dataSize = 0;
          foreach (string element in AntispamTicketList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * antispamTicket_.Count;
        }
        if (hasFromChatRoomNumb) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, FromChatRoomNumb);
        }
        foreach (global::mm.command.SKBuiltinString_t element in FromChatRoomList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        if (hasGetContactScene) {
          size += pb::CodedOutputStream.ComputeUInt32Size(8, GetContactScene);
        }
        if (hasChatRoomAccessVerifyTicket) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, ChatRoomAccessVerifyTicket);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetContactRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetContactRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetContactRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetContactRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetContactRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetContactRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetContactRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetContactRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetContactRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetContactRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetContactRequest MakeReadOnly() {
      userNameList_.MakeReadOnly();
      antispamTicket_.MakeReadOnly();
      fromChatRoom_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetContactRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetContactRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetContactRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetContactRequest result;
      
      private GetContactRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetContactRequest original = result;
          result = new GetContactRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetContactRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetContactRequest.Descriptor; }
      }
      
      public override GetContactRequest DefaultInstanceForType {
        get { return global::mm.command.GetContactRequest.DefaultInstance; }
      }
      
      public override GetContactRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetContactRequest) {
          return MergeFrom((GetContactRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetContactRequest other) {
        if (other == global::mm.command.GetContactRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserCount) {
          UserCount = other.UserCount;
        }
        if (other.userNameList_.Count != 0) {
          result.userNameList_.Add(other.userNameList_);
        }
        if (other.HasAntispamTicketNumb) {
          AntispamTicketNumb = other.AntispamTicketNumb;
        }
        if (other.antispamTicket_.Count != 0) {
          result.antispamTicket_.Add(other.antispamTicket_);
        }
        if (other.HasFromChatRoomNumb) {
          FromChatRoomNumb = other.FromChatRoomNumb;
        }
        if (other.fromChatRoom_.Count != 0) {
          result.fromChatRoom_.Add(other.fromChatRoom_);
        }
        if (other.HasGetContactScene) {
          GetContactScene = other.GetContactScene;
        }
        if (other.HasChatRoomAccessVerifyTicket) {
          MergeChatRoomAccessVerifyTicket(other.ChatRoomAccessVerifyTicket);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getContactRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getContactRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasUserCount = input.ReadInt32(ref result.userCount_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.userNameList_, global::mm.command.SKBuiltinString_t.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasAntispamTicketNumb = input.ReadUInt32(ref result.antispamTicketNumb_);
              break;
            }
            case 42: {
              input.ReadStringArray(tag, field_name, result.antispamTicket_);
              break;
            }
            case 48: {
              result.hasFromChatRoomNumb = input.ReadUInt32(ref result.fromChatRoomNumb_);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.fromChatRoom_, global::mm.command.SKBuiltinString_t.DefaultInstance, extensionRegistry);
              break;
            }
            case 64: {
              result.hasGetContactScene = input.ReadUInt32(ref result.getContactScene_);
              break;
            }
            case 74: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasChatRoomAccessVerifyTicket) {
                subBuilder.MergeFrom(ChatRoomAccessVerifyTicket);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChatRoomAccessVerifyTicket = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserCount {
        get { return result.hasUserCount; }
      }
      public int UserCount {
        get { return result.UserCount; }
        set { SetUserCount(value); }
      }
      public Builder SetUserCount(int value) {
        PrepareBuilder();
        result.hasUserCount = true;
        result.userCount_ = value;
        return this;
      }
      public Builder ClearUserCount() {
        PrepareBuilder();
        result.hasUserCount = false;
        result.userCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.SKBuiltinString_t> UserNameListList {
        get { return PrepareBuilder().userNameList_; }
      }
      public int UserNameListCount {
        get { return result.UserNameListCount; }
      }
      public global::mm.command.SKBuiltinString_t GetUserNameList(int index) {
        return result.GetUserNameList(index);
      }
      public Builder SetUserNameList(int index, global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userNameList_[index] = value;
        return this;
      }
      public Builder SetUserNameList(int index, global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userNameList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUserNameList(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userNameList_.Add(value);
        return this;
      }
      public Builder AddUserNameList(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userNameList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUserNameList(scg::IEnumerable<global::mm.command.SKBuiltinString_t> values) {
        PrepareBuilder();
        result.userNameList_.Add(values);
        return this;
      }
      public Builder ClearUserNameList() {
        PrepareBuilder();
        result.userNameList_.Clear();
        return this;
      }
      
      public bool HasAntispamTicketNumb {
        get { return result.hasAntispamTicketNumb; }
      }
      [global::System.CLSCompliant(false)]
      public uint AntispamTicketNumb {
        get { return result.AntispamTicketNumb; }
        set { SetAntispamTicketNumb(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetAntispamTicketNumb(uint value) {
        PrepareBuilder();
        result.hasAntispamTicketNumb = true;
        result.antispamTicketNumb_ = value;
        return this;
      }
      public Builder ClearAntispamTicketNumb() {
        PrepareBuilder();
        result.hasAntispamTicketNumb = false;
        result.antispamTicketNumb_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> AntispamTicketList {
        get { return PrepareBuilder().antispamTicket_; }
      }
      public int AntispamTicketCount {
        get { return result.AntispamTicketCount; }
      }
      public string GetAntispamTicket(int index) {
        return result.GetAntispamTicket(index);
      }
      public Builder SetAntispamTicket(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.antispamTicket_[index] = value;
        return this;
      }
      public Builder AddAntispamTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.antispamTicket_.Add(value);
        return this;
      }
      public Builder AddRangeAntispamTicket(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.antispamTicket_.Add(values);
        return this;
      }
      public Builder ClearAntispamTicket() {
        PrepareBuilder();
        result.antispamTicket_.Clear();
        return this;
      }
      
      public bool HasFromChatRoomNumb {
        get { return result.hasFromChatRoomNumb; }
      }
      [global::System.CLSCompliant(false)]
      public uint FromChatRoomNumb {
        get { return result.FromChatRoomNumb; }
        set { SetFromChatRoomNumb(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFromChatRoomNumb(uint value) {
        PrepareBuilder();
        result.hasFromChatRoomNumb = true;
        result.fromChatRoomNumb_ = value;
        return this;
      }
      public Builder ClearFromChatRoomNumb() {
        PrepareBuilder();
        result.hasFromChatRoomNumb = false;
        result.fromChatRoomNumb_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.SKBuiltinString_t> FromChatRoomList {
        get { return PrepareBuilder().fromChatRoom_; }
      }
      public int FromChatRoomCount {
        get { return result.FromChatRoomCount; }
      }
      public global::mm.command.SKBuiltinString_t GetFromChatRoom(int index) {
        return result.GetFromChatRoom(index);
      }
      public Builder SetFromChatRoom(int index, global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fromChatRoom_[index] = value;
        return this;
      }
      public Builder SetFromChatRoom(int index, global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fromChatRoom_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFromChatRoom(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fromChatRoom_.Add(value);
        return this;
      }
      public Builder AddFromChatRoom(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.fromChatRoom_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFromChatRoom(scg::IEnumerable<global::mm.command.SKBuiltinString_t> values) {
        PrepareBuilder();
        result.fromChatRoom_.Add(values);
        return this;
      }
      public Builder ClearFromChatRoom() {
        PrepareBuilder();
        result.fromChatRoom_.Clear();
        return this;
      }
      
      public bool HasGetContactScene {
        get { return result.hasGetContactScene; }
      }
      [global::System.CLSCompliant(false)]
      public uint GetContactScene {
        get { return result.GetContactScene; }
        set { SetGetContactScene(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetGetContactScene(uint value) {
        PrepareBuilder();
        result.hasGetContactScene = true;
        result.getContactScene_ = value;
        return this;
      }
      public Builder ClearGetContactScene() {
        PrepareBuilder();
        result.hasGetContactScene = false;
        result.getContactScene_ = 0;
        return this;
      }
      
      public bool HasChatRoomAccessVerifyTicket {
       get { return result.hasChatRoomAccessVerifyTicket; }
      }
      public global::mm.command.SKBuiltinString_t ChatRoomAccessVerifyTicket {
        get { return result.ChatRoomAccessVerifyTicket; }
        set { SetChatRoomAccessVerifyTicket(value); }
      }
      public Builder SetChatRoomAccessVerifyTicket(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChatRoomAccessVerifyTicket = true;
        result.chatRoomAccessVerifyTicket_ = value;
        return this;
      }
      public Builder SetChatRoomAccessVerifyTicket(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChatRoomAccessVerifyTicket = true;
        result.chatRoomAccessVerifyTicket_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChatRoomAccessVerifyTicket(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChatRoomAccessVerifyTicket &&
            result.chatRoomAccessVerifyTicket_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.chatRoomAccessVerifyTicket_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.chatRoomAccessVerifyTicket_).MergeFrom(value).BuildPartial();
        } else {
          result.chatRoomAccessVerifyTicket_ = value;
        }
        result.hasChatRoomAccessVerifyTicket = true;
        return this;
      }
      public Builder ClearChatRoomAccessVerifyTicket() {
        PrepareBuilder();
        result.hasChatRoomAccessVerifyTicket = false;
        result.chatRoomAccessVerifyTicket_ = null;
        return this;
      }
    }
    static GetContactRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetContactResponse : pb::GeneratedMessage<GetContactResponse, GetContactResponse.Builder> {
    private GetContactResponse() { }
    private static readonly GetContactResponse defaultInstance = new GetContactResponse().MakeReadOnly();
    private static readonly string[] _getContactResponseFieldNames = new string[] { "ContactCount", "ContactList", "Ret", "base" };
    private static readonly uint[] _getContactResponseFieldTags = new uint[] { 16, 26, 34, 10 };
    public static GetContactResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetContactResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetContactResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetContactResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetContactResponse, GetContactResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetContactResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int ContactCountFieldNumber = 2;
    private bool hasContactCount;
    private int contactCount_;
    public bool HasContactCount {
      get { return hasContactCount; }
    }
    public int ContactCount {
      get { return contactCount_; }
    }
    
    public const int ContactListFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.ContactProfile> contactList_ = new pbc::PopsicleList<global::mm.command.ContactProfile>();
    public scg::IList<global::mm.command.ContactProfile> ContactListList {
      get { return contactList_; }
    }
    public int ContactListCount {
      get { return contactList_.Count; }
    }
    public global::mm.command.ContactProfile GetContactList(int index) {
      return contactList_[index];
    }
    
    public const int RetFieldNumber = 4;
    private pbc::PopsicleList<string> ret_ = new pbc::PopsicleList<string>();
    public scg::IList<string> RetList {
      get { return pbc::Lists.AsReadOnly(ret_); }
    }
    public int RetCount {
      get { return ret_.Count; }
    }
    public string GetRet(int index) {
      return ret_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasContactCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.ContactProfile element in ContactListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getContactResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasContactCount) {
        output.WriteInt32(2, field_names[0], ContactCount);
      }
      if (contactList_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], contactList_);
      }
      if (ret_.Count > 0) {
        output.WriteStringArray(4, field_names[2], ret_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasContactCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ContactCount);
        }
        foreach (global::mm.command.ContactProfile element in ContactListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        {
          int dataSize = 0;
          foreach (string element in RetList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * ret_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetContactResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetContactResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetContactResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetContactResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetContactResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetContactResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetContactResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetContactResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetContactResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetContactResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetContactResponse MakeReadOnly() {
      contactList_.MakeReadOnly();
      ret_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetContactResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetContactResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetContactResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetContactResponse result;
      
      private GetContactResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetContactResponse original = result;
          result = new GetContactResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetContactResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetContactResponse.Descriptor; }
      }
      
      public override GetContactResponse DefaultInstanceForType {
        get { return global::mm.command.GetContactResponse.DefaultInstance; }
      }
      
      public override GetContactResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetContactResponse) {
          return MergeFrom((GetContactResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetContactResponse other) {
        if (other == global::mm.command.GetContactResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasContactCount) {
          ContactCount = other.ContactCount;
        }
        if (other.contactList_.Count != 0) {
          result.contactList_.Add(other.contactList_);
        }
        if (other.ret_.Count != 0) {
          result.ret_.Add(other.ret_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getContactResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getContactResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasContactCount = input.ReadInt32(ref result.contactCount_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.contactList_, global::mm.command.ContactProfile.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.ret_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasContactCount {
        get { return result.hasContactCount; }
      }
      public int ContactCount {
        get { return result.ContactCount; }
        set { SetContactCount(value); }
      }
      public Builder SetContactCount(int value) {
        PrepareBuilder();
        result.hasContactCount = true;
        result.contactCount_ = value;
        return this;
      }
      public Builder ClearContactCount() {
        PrepareBuilder();
        result.hasContactCount = false;
        result.contactCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.ContactProfile> ContactListList {
        get { return PrepareBuilder().contactList_; }
      }
      public int ContactListCount {
        get { return result.ContactListCount; }
      }
      public global::mm.command.ContactProfile GetContactList(int index) {
        return result.GetContactList(index);
      }
      public Builder SetContactList(int index, global::mm.command.ContactProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contactList_[index] = value;
        return this;
      }
      public Builder SetContactList(int index, global::mm.command.ContactProfile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contactList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddContactList(global::mm.command.ContactProfile value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.contactList_.Add(value);
        return this;
      }
      public Builder AddContactList(global::mm.command.ContactProfile.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.contactList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeContactList(scg::IEnumerable<global::mm.command.ContactProfile> values) {
        PrepareBuilder();
        result.contactList_.Add(values);
        return this;
      }
      public Builder ClearContactList() {
        PrepareBuilder();
        result.contactList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> RetList {
        get { return PrepareBuilder().ret_; }
      }
      public int RetCount {
        get { return result.RetCount; }
      }
      public string GetRet(int index) {
        return result.GetRet(index);
      }
      public Builder SetRet(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ret_[index] = value;
        return this;
      }
      public Builder AddRet(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.ret_.Add(value);
        return this;
      }
      public Builder AddRangeRet(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.ret_.Add(values);
        return this;
      }
      public Builder ClearRet() {
        PrepareBuilder();
        result.ret_.Clear();
        return this;
      }
    }
    static GetContactResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetPackageListRequest : pb::GeneratedMessage<GetPackageListRequest, GetPackageListRequest.Builder> {
    private GetPackageListRequest() { }
    private static readonly GetPackageListRequest defaultInstance = new GetPackageListRequest().MakeReadOnly();
    private static readonly string[] _getPackageListRequestFieldNames = new string[] { "Count", "List", "Type", "base" };
    private static readonly uint[] _getPackageListRequestFieldTags = new uint[] { 16, 26, 32, 10 };
    public static GetPackageListRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetPackageListRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetPackageListRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetPackageListRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetPackageListRequest, GetPackageListRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetPackageListRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int CountFieldNumber = 2;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public const int ListFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.PackegeInfo> list_ = new pbc::PopsicleList<global::mm.command.PackegeInfo>();
    public scg::IList<global::mm.command.PackegeInfo> ListList {
      get { return list_; }
    }
    public int ListCount {
      get { return list_.Count; }
    }
    public global::mm.command.PackegeInfo GetList(int index) {
      return list_[index];
    }
    
    public const int TypeFieldNumber = 4;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.PackegeInfo element in ListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getPackageListRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasCount) {
        output.WriteInt32(2, field_names[0], Count);
      }
      if (list_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], list_);
      }
      if (hasType) {
        output.WriteInt32(4, field_names[2], Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
        }
        foreach (global::mm.command.PackegeInfo element in ListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetPackageListRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetPackageListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetPackageListRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetPackageListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetPackageListRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetPackageListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetPackageListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetPackageListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetPackageListRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetPackageListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetPackageListRequest MakeReadOnly() {
      list_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetPackageListRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetPackageListRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetPackageListRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetPackageListRequest result;
      
      private GetPackageListRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetPackageListRequest original = result;
          result = new GetPackageListRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetPackageListRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetPackageListRequest.Descriptor; }
      }
      
      public override GetPackageListRequest DefaultInstanceForType {
        get { return global::mm.command.GetPackageListRequest.DefaultInstance; }
      }
      
      public override GetPackageListRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetPackageListRequest) {
          return MergeFrom((GetPackageListRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetPackageListRequest other) {
        if (other == global::mm.command.GetPackageListRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.list_.Count != 0) {
          result.list_.Add(other.list_);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getPackageListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getPackageListRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.PackegeInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.PackegeInfo> ListList {
        get { return PrepareBuilder().list_; }
      }
      public int ListCount {
        get { return result.ListCount; }
      }
      public global::mm.command.PackegeInfo GetList(int index) {
        return result.GetList(index);
      }
      public Builder SetList(int index, global::mm.command.PackegeInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_[index] = value;
        return this;
      }
      public Builder SetList(int index, global::mm.command.PackegeInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddList(global::mm.command.PackegeInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_.Add(value);
        return this;
      }
      public Builder AddList(global::mm.command.PackegeInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeList(scg::IEnumerable<global::mm.command.PackegeInfo> values) {
        PrepareBuilder();
        result.list_.Add(values);
        return this;
      }
      public Builder ClearList() {
        PrepareBuilder();
        result.list_.Clear();
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static GetPackageListRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetPackageListResponse : pb::GeneratedMessage<GetPackageListResponse, GetPackageListResponse.Builder> {
    private GetPackageListResponse() { }
    private static readonly GetPackageListResponse defaultInstance = new GetPackageListResponse().MakeReadOnly();
    private static readonly string[] _getPackageListResponseFieldNames = new string[] { "ContinueFlag", "Count", "List", "SvrCount", "Type", "base" };
    private static readonly uint[] _getPackageListResponseFieldTags = new uint[] { 32, 16, 26, 40, 48, 10 };
    public static GetPackageListResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetPackageListResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetPackageListResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetPackageListResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetPackageListResponse, GetPackageListResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetPackageListResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int CountFieldNumber = 2;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public const int ListFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.PackegeInfo> list_ = new pbc::PopsicleList<global::mm.command.PackegeInfo>();
    public scg::IList<global::mm.command.PackegeInfo> ListList {
      get { return list_; }
    }
    public int ListCount {
      get { return list_.Count; }
    }
    public global::mm.command.PackegeInfo GetList(int index) {
      return list_[index];
    }
    
    public const int ContinueFlagFieldNumber = 4;
    private bool hasContinueFlag;
    private int continueFlag_;
    public bool HasContinueFlag {
      get { return hasContinueFlag; }
    }
    public int ContinueFlag {
      get { return continueFlag_; }
    }
    
    public const int SvrCountFieldNumber = 5;
    private bool hasSvrCount;
    private int svrCount_;
    public bool HasSvrCount {
      get { return hasSvrCount; }
    }
    public int SvrCount {
      get { return svrCount_; }
    }
    
    public const int TypeFieldNumber = 6;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasCount) return false;
        if (!hasContinueFlag) return false;
        if (!hasSvrCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.PackegeInfo element in ListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getPackageListResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[5], Base);
      }
      if (hasCount) {
        output.WriteInt32(2, field_names[1], Count);
      }
      if (list_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], list_);
      }
      if (hasContinueFlag) {
        output.WriteInt32(4, field_names[0], ContinueFlag);
      }
      if (hasSvrCount) {
        output.WriteInt32(5, field_names[3], SvrCount);
      }
      if (hasType) {
        output.WriteInt32(6, field_names[4], Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
        }
        foreach (global::mm.command.PackegeInfo element in ListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasContinueFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ContinueFlag);
        }
        if (hasSvrCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, SvrCount);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetPackageListResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetPackageListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetPackageListResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetPackageListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetPackageListResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetPackageListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetPackageListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetPackageListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetPackageListResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetPackageListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetPackageListResponse MakeReadOnly() {
      list_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetPackageListResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetPackageListResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetPackageListResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetPackageListResponse result;
      
      private GetPackageListResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetPackageListResponse original = result;
          result = new GetPackageListResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetPackageListResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetPackageListResponse.Descriptor; }
      }
      
      public override GetPackageListResponse DefaultInstanceForType {
        get { return global::mm.command.GetPackageListResponse.DefaultInstance; }
      }
      
      public override GetPackageListResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetPackageListResponse) {
          return MergeFrom((GetPackageListResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetPackageListResponse other) {
        if (other == global::mm.command.GetPackageListResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.list_.Count != 0) {
          result.list_.Add(other.list_);
        }
        if (other.HasContinueFlag) {
          ContinueFlag = other.ContinueFlag;
        }
        if (other.HasSvrCount) {
          SvrCount = other.SvrCount;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getPackageListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getPackageListResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.list_, global::mm.command.PackegeInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasContinueFlag = input.ReadInt32(ref result.continueFlag_);
              break;
            }
            case 40: {
              result.hasSvrCount = input.ReadInt32(ref result.svrCount_);
              break;
            }
            case 48: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.PackegeInfo> ListList {
        get { return PrepareBuilder().list_; }
      }
      public int ListCount {
        get { return result.ListCount; }
      }
      public global::mm.command.PackegeInfo GetList(int index) {
        return result.GetList(index);
      }
      public Builder SetList(int index, global::mm.command.PackegeInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_[index] = value;
        return this;
      }
      public Builder SetList(int index, global::mm.command.PackegeInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddList(global::mm.command.PackegeInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.list_.Add(value);
        return this;
      }
      public Builder AddList(global::mm.command.PackegeInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.list_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeList(scg::IEnumerable<global::mm.command.PackegeInfo> values) {
        PrepareBuilder();
        result.list_.Add(values);
        return this;
      }
      public Builder ClearList() {
        PrepareBuilder();
        result.list_.Clear();
        return this;
      }
      
      public bool HasContinueFlag {
        get { return result.hasContinueFlag; }
      }
      public int ContinueFlag {
        get { return result.ContinueFlag; }
        set { SetContinueFlag(value); }
      }
      public Builder SetContinueFlag(int value) {
        PrepareBuilder();
        result.hasContinueFlag = true;
        result.continueFlag_ = value;
        return this;
      }
      public Builder ClearContinueFlag() {
        PrepareBuilder();
        result.hasContinueFlag = false;
        result.continueFlag_ = 0;
        return this;
      }
      
      public bool HasSvrCount {
        get { return result.hasSvrCount; }
      }
      public int SvrCount {
        get { return result.SvrCount; }
        set { SetSvrCount(value); }
      }
      public Builder SetSvrCount(int value) {
        PrepareBuilder();
        result.hasSvrCount = true;
        result.svrCount_ = value;
        return this;
      }
      public Builder ClearSvrCount() {
        PrepareBuilder();
        result.hasSvrCount = false;
        result.svrCount_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static GetPackageListResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetHDHeadImgRequest : pb::GeneratedMessage<GetHDHeadImgRequest, GetHDHeadImgRequest.Builder> {
    private GetHDHeadImgRequest() { }
    private static readonly GetHDHeadImgRequest defaultInstance = new GetHDHeadImgRequest().MakeReadOnly();
    private static readonly string[] _getHDHeadImgRequestFieldNames = new string[] { "HeadImgType", "ImgFormat", "ImgHeight", "ImgWidth", "StartPos", "TotalLen", "UserName", "base" };
    private static readonly uint[] _getHDHeadImgRequestFieldTags = new uint[] { 64, 42, 32, 24, 56, 48, 18, 10 };
    public static GetHDHeadImgRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetHDHeadImgRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetHDHeadImgRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetHDHeadImgRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetHDHeadImgRequest, GetHDHeadImgRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetHDHeadImgRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public const int ImgWidthFieldNumber = 3;
    private bool hasImgWidth;
    private int imgWidth_;
    public bool HasImgWidth {
      get { return hasImgWidth; }
    }
    public int ImgWidth {
      get { return imgWidth_; }
    }
    
    public const int ImgHeightFieldNumber = 4;
    private bool hasImgHeight;
    private int imgHeight_;
    public bool HasImgHeight {
      get { return hasImgHeight; }
    }
    public int ImgHeight {
      get { return imgHeight_; }
    }
    
    public const int ImgFormatFieldNumber = 5;
    private bool hasImgFormat;
    private string imgFormat_ = "";
    public bool HasImgFormat {
      get { return hasImgFormat; }
    }
    public string ImgFormat {
      get { return imgFormat_; }
    }
    
    public const int TotalLenFieldNumber = 6;
    private bool hasTotalLen;
    private int totalLen_;
    public bool HasTotalLen {
      get { return hasTotalLen; }
    }
    public int TotalLen {
      get { return totalLen_; }
    }
    
    public const int StartPosFieldNumber = 7;
    private bool hasStartPos;
    private int startPos_;
    public bool HasStartPos {
      get { return hasStartPos; }
    }
    public int StartPos {
      get { return startPos_; }
    }
    
    public const int HeadImgTypeFieldNumber = 8;
    private bool hasHeadImgType;
    private int headImgType_;
    public bool HasHeadImgType {
      get { return hasHeadImgType; }
    }
    public int HeadImgType {
      get { return headImgType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasImgWidth) return false;
        if (!hasImgHeight) return false;
        if (!hasTotalLen) return false;
        if (!hasStartPos) return false;
        if (!hasHeadImgType) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getHDHeadImgRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[7], Base);
      }
      if (hasUserName) {
        output.WriteString(2, field_names[6], UserName);
      }
      if (hasImgWidth) {
        output.WriteInt32(3, field_names[3], ImgWidth);
      }
      if (hasImgHeight) {
        output.WriteInt32(4, field_names[2], ImgHeight);
      }
      if (hasImgFormat) {
        output.WriteString(5, field_names[1], ImgFormat);
      }
      if (hasTotalLen) {
        output.WriteInt32(6, field_names[5], TotalLen);
      }
      if (hasStartPos) {
        output.WriteInt32(7, field_names[4], StartPos);
      }
      if (hasHeadImgType) {
        output.WriteInt32(8, field_names[0], HeadImgType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserName);
        }
        if (hasImgWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ImgWidth);
        }
        if (hasImgHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ImgHeight);
        }
        if (hasImgFormat) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ImgFormat);
        }
        if (hasTotalLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, TotalLen);
        }
        if (hasStartPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, StartPos);
        }
        if (hasHeadImgType) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, HeadImgType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetHDHeadImgRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHDHeadImgRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHDHeadImgRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHDHeadImgRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHDHeadImgRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHDHeadImgRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetHDHeadImgRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetHDHeadImgRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetHDHeadImgRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHDHeadImgRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetHDHeadImgRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetHDHeadImgRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetHDHeadImgRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetHDHeadImgRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetHDHeadImgRequest result;
      
      private GetHDHeadImgRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetHDHeadImgRequest original = result;
          result = new GetHDHeadImgRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetHDHeadImgRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetHDHeadImgRequest.Descriptor; }
      }
      
      public override GetHDHeadImgRequest DefaultInstanceForType {
        get { return global::mm.command.GetHDHeadImgRequest.DefaultInstance; }
      }
      
      public override GetHDHeadImgRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetHDHeadImgRequest) {
          return MergeFrom((GetHDHeadImgRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetHDHeadImgRequest other) {
        if (other == global::mm.command.GetHDHeadImgRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasImgWidth) {
          ImgWidth = other.ImgWidth;
        }
        if (other.HasImgHeight) {
          ImgHeight = other.ImgHeight;
        }
        if (other.HasImgFormat) {
          ImgFormat = other.ImgFormat;
        }
        if (other.HasTotalLen) {
          TotalLen = other.TotalLen;
        }
        if (other.HasStartPos) {
          StartPos = other.StartPos;
        }
        if (other.HasHeadImgType) {
          HeadImgType = other.HeadImgType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getHDHeadImgRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getHDHeadImgRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 24: {
              result.hasImgWidth = input.ReadInt32(ref result.imgWidth_);
              break;
            }
            case 32: {
              result.hasImgHeight = input.ReadInt32(ref result.imgHeight_);
              break;
            }
            case 42: {
              result.hasImgFormat = input.ReadString(ref result.imgFormat_);
              break;
            }
            case 48: {
              result.hasTotalLen = input.ReadInt32(ref result.totalLen_);
              break;
            }
            case 56: {
              result.hasStartPos = input.ReadInt32(ref result.startPos_);
              break;
            }
            case 64: {
              result.hasHeadImgType = input.ReadInt32(ref result.headImgType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasImgWidth {
        get { return result.hasImgWidth; }
      }
      public int ImgWidth {
        get { return result.ImgWidth; }
        set { SetImgWidth(value); }
      }
      public Builder SetImgWidth(int value) {
        PrepareBuilder();
        result.hasImgWidth = true;
        result.imgWidth_ = value;
        return this;
      }
      public Builder ClearImgWidth() {
        PrepareBuilder();
        result.hasImgWidth = false;
        result.imgWidth_ = 0;
        return this;
      }
      
      public bool HasImgHeight {
        get { return result.hasImgHeight; }
      }
      public int ImgHeight {
        get { return result.ImgHeight; }
        set { SetImgHeight(value); }
      }
      public Builder SetImgHeight(int value) {
        PrepareBuilder();
        result.hasImgHeight = true;
        result.imgHeight_ = value;
        return this;
      }
      public Builder ClearImgHeight() {
        PrepareBuilder();
        result.hasImgHeight = false;
        result.imgHeight_ = 0;
        return this;
      }
      
      public bool HasImgFormat {
        get { return result.hasImgFormat; }
      }
      public string ImgFormat {
        get { return result.ImgFormat; }
        set { SetImgFormat(value); }
      }
      public Builder SetImgFormat(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgFormat = true;
        result.imgFormat_ = value;
        return this;
      }
      public Builder ClearImgFormat() {
        PrepareBuilder();
        result.hasImgFormat = false;
        result.imgFormat_ = "";
        return this;
      }
      
      public bool HasTotalLen {
        get { return result.hasTotalLen; }
      }
      public int TotalLen {
        get { return result.TotalLen; }
        set { SetTotalLen(value); }
      }
      public Builder SetTotalLen(int value) {
        PrepareBuilder();
        result.hasTotalLen = true;
        result.totalLen_ = value;
        return this;
      }
      public Builder ClearTotalLen() {
        PrepareBuilder();
        result.hasTotalLen = false;
        result.totalLen_ = 0;
        return this;
      }
      
      public bool HasStartPos {
        get { return result.hasStartPos; }
      }
      public int StartPos {
        get { return result.StartPos; }
        set { SetStartPos(value); }
      }
      public Builder SetStartPos(int value) {
        PrepareBuilder();
        result.hasStartPos = true;
        result.startPos_ = value;
        return this;
      }
      public Builder ClearStartPos() {
        PrepareBuilder();
        result.hasStartPos = false;
        result.startPos_ = 0;
        return this;
      }
      
      public bool HasHeadImgType {
        get { return result.hasHeadImgType; }
      }
      public int HeadImgType {
        get { return result.HeadImgType; }
        set { SetHeadImgType(value); }
      }
      public Builder SetHeadImgType(int value) {
        PrepareBuilder();
        result.hasHeadImgType = true;
        result.headImgType_ = value;
        return this;
      }
      public Builder ClearHeadImgType() {
        PrepareBuilder();
        result.hasHeadImgType = false;
        result.headImgType_ = 0;
        return this;
      }
    }
    static GetHDHeadImgRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetHDHeadImgResponse : pb::GeneratedMessage<GetHDHeadImgResponse, GetHDHeadImgResponse.Builder> {
    private GetHDHeadImgResponse() { }
    private static readonly GetHDHeadImgResponse defaultInstance = new GetHDHeadImgResponse().MakeReadOnly();
    private static readonly string[] _getHDHeadImgResponseFieldNames = new string[] { "Data", "StartPos", "TotalLen", "UserName", "base" };
    private static readonly uint[] _getHDHeadImgResponseFieldTags = new uint[] { 42, 32, 24, 18, 10 };
    public static GetHDHeadImgResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetHDHeadImgResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetHDHeadImgResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetHDHeadImgResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetHDHeadImgResponse, GetHDHeadImgResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetHDHeadImgResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public const int TotalLenFieldNumber = 3;
    private bool hasTotalLen;
    private int totalLen_;
    public bool HasTotalLen {
      get { return hasTotalLen; }
    }
    public int TotalLen {
      get { return totalLen_; }
    }
    
    public const int StartPosFieldNumber = 4;
    private bool hasStartPos;
    private int startPos_;
    public bool HasStartPos {
      get { return hasStartPos; }
    }
    public int StartPos {
      get { return startPos_; }
    }
    
    public const int DataFieldNumber = 5;
    private bool hasData;
    private global::mm.command.SKBuiltinBuffer_t data_;
    public bool HasData {
      get { return hasData; }
    }
    public global::mm.command.SKBuiltinBuffer_t Data {
      get { return data_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasTotalLen) return false;
        if (!hasStartPos) return false;
        if (!hasData) return false;
        if (!Base.IsInitialized) return false;
        if (!Data.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getHDHeadImgResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[4], Base);
      }
      if (hasUserName) {
        output.WriteString(2, field_names[3], UserName);
      }
      if (hasTotalLen) {
        output.WriteInt32(3, field_names[2], TotalLen);
      }
      if (hasStartPos) {
        output.WriteInt32(4, field_names[1], StartPos);
      }
      if (hasData) {
        output.WriteMessage(5, field_names[0], Data);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserName);
        }
        if (hasTotalLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, TotalLen);
        }
        if (hasStartPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, StartPos);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Data);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetHDHeadImgResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHDHeadImgResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHDHeadImgResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetHDHeadImgResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetHDHeadImgResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHDHeadImgResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetHDHeadImgResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetHDHeadImgResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetHDHeadImgResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetHDHeadImgResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetHDHeadImgResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetHDHeadImgResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetHDHeadImgResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetHDHeadImgResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetHDHeadImgResponse result;
      
      private GetHDHeadImgResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetHDHeadImgResponse original = result;
          result = new GetHDHeadImgResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetHDHeadImgResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetHDHeadImgResponse.Descriptor; }
      }
      
      public override GetHDHeadImgResponse DefaultInstanceForType {
        get { return global::mm.command.GetHDHeadImgResponse.DefaultInstance; }
      }
      
      public override GetHDHeadImgResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetHDHeadImgResponse) {
          return MergeFrom((GetHDHeadImgResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetHDHeadImgResponse other) {
        if (other == global::mm.command.GetHDHeadImgResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasTotalLen) {
          TotalLen = other.TotalLen;
        }
        if (other.HasStartPos) {
          StartPos = other.StartPos;
        }
        if (other.HasData) {
          MergeData(other.Data);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getHDHeadImgResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getHDHeadImgResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 24: {
              result.hasTotalLen = input.ReadInt32(ref result.totalLen_);
              break;
            }
            case 32: {
              result.hasStartPos = input.ReadInt32(ref result.startPos_);
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasData) {
                subBuilder.MergeFrom(Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Data = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasTotalLen {
        get { return result.hasTotalLen; }
      }
      public int TotalLen {
        get { return result.TotalLen; }
        set { SetTotalLen(value); }
      }
      public Builder SetTotalLen(int value) {
        PrepareBuilder();
        result.hasTotalLen = true;
        result.totalLen_ = value;
        return this;
      }
      public Builder ClearTotalLen() {
        PrepareBuilder();
        result.hasTotalLen = false;
        result.totalLen_ = 0;
        return this;
      }
      
      public bool HasStartPos {
        get { return result.hasStartPos; }
      }
      public int StartPos {
        get { return result.StartPos; }
        set { SetStartPos(value); }
      }
      public Builder SetStartPos(int value) {
        PrepareBuilder();
        result.hasStartPos = true;
        result.startPos_ = value;
        return this;
      }
      public Builder ClearStartPos() {
        PrepareBuilder();
        result.hasStartPos = false;
        result.startPos_ = 0;
        return this;
      }
      
      public bool HasData {
       get { return result.hasData; }
      }
      public global::mm.command.SKBuiltinBuffer_t Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder SetData(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasData &&
            result.data_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.data_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
        } else {
          result.data_ = value;
        }
        result.hasData = true;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = null;
        return this;
      }
    }
    static GetHDHeadImgResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetVUserInfoRequest : pb::GeneratedMessage<GetVUserInfoRequest, GetVUserInfoRequest.Builder> {
    private GetVUserInfoRequest() { }
    private static readonly GetVUserInfoRequest defaultInstance = new GetVUserInfoRequest().MakeReadOnly();
    private static readonly string[] _getVUserInfoRequestFieldNames = new string[] { "Version", "base" };
    private static readonly uint[] _getVUserInfoRequestFieldTags = new uint[] { 16, 10 };
    public static GetVUserInfoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetVUserInfoRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetVUserInfoRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetVUserInfoRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetVUserInfoRequest, GetVUserInfoRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetVUserInfoRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private int version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasVersion) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getVUserInfoRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[1], Base);
      }
      if (hasVersion) {
        output.WriteInt32(2, field_names[0], Version);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetVUserInfoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetVUserInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetVUserInfoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetVUserInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetVUserInfoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetVUserInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetVUserInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetVUserInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetVUserInfoRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetVUserInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetVUserInfoRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetVUserInfoRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetVUserInfoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetVUserInfoRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetVUserInfoRequest result;
      
      private GetVUserInfoRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetVUserInfoRequest original = result;
          result = new GetVUserInfoRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetVUserInfoRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetVUserInfoRequest.Descriptor; }
      }
      
      public override GetVUserInfoRequest DefaultInstanceForType {
        get { return global::mm.command.GetVUserInfoRequest.DefaultInstance; }
      }
      
      public override GetVUserInfoRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetVUserInfoRequest) {
          return MergeFrom((GetVUserInfoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetVUserInfoRequest other) {
        if (other == global::mm.command.GetVUserInfoRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getVUserInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getVUserInfoRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
    }
    static GetVUserInfoRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetVUserInfoResponse : pb::GeneratedMessage<GetVUserInfoResponse, GetVUserInfoResponse.Builder> {
    private GetVUserInfoResponse() { }
    private static readonly GetVUserInfoResponse defaultInstance = new GetVUserInfoResponse().MakeReadOnly();
    private static readonly string[] _getVUserInfoResponseFieldNames = new string[] { "VUserCount", "VUserList", "Version", "base" };
    private static readonly uint[] _getVUserInfoResponseFieldTags = new uint[] { 24, 34, 16, 10 };
    public static GetVUserInfoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetVUserInfoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetVUserInfoResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetVUserInfoResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetVUserInfoResponse, GetVUserInfoResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetVUserInfoResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int VersionFieldNumber = 2;
    private bool hasVersion;
    private int version_;
    public bool HasVersion {
      get { return hasVersion; }
    }
    public int Version {
      get { return version_; }
    }
    
    public const int VUserCountFieldNumber = 3;
    private bool hasVUserCount;
    private int vUserCount_;
    public bool HasVUserCount {
      get { return hasVUserCount; }
    }
    public int VUserCount {
      get { return vUserCount_; }
    }
    
    public const int VUserListFieldNumber = 4;
    private pbc::PopsicleList<global::mm.command.VUserInfo> vUserList_ = new pbc::PopsicleList<global::mm.command.VUserInfo>();
    public scg::IList<global::mm.command.VUserInfo> VUserListList {
      get { return vUserList_; }
    }
    public int VUserListCount {
      get { return vUserList_.Count; }
    }
    public global::mm.command.VUserInfo GetVUserList(int index) {
      return vUserList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasVersion) return false;
        if (!hasVUserCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.VUserInfo element in VUserListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getVUserInfoResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasVersion) {
        output.WriteInt32(2, field_names[2], Version);
      }
      if (hasVUserCount) {
        output.WriteInt32(3, field_names[0], VUserCount);
      }
      if (vUserList_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], vUserList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasVersion) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Version);
        }
        if (hasVUserCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, VUserCount);
        }
        foreach (global::mm.command.VUserInfo element in VUserListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetVUserInfoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetVUserInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetVUserInfoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetVUserInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetVUserInfoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetVUserInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetVUserInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetVUserInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetVUserInfoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetVUserInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetVUserInfoResponse MakeReadOnly() {
      vUserList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetVUserInfoResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetVUserInfoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetVUserInfoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetVUserInfoResponse result;
      
      private GetVUserInfoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetVUserInfoResponse original = result;
          result = new GetVUserInfoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetVUserInfoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetVUserInfoResponse.Descriptor; }
      }
      
      public override GetVUserInfoResponse DefaultInstanceForType {
        get { return global::mm.command.GetVUserInfoResponse.DefaultInstance; }
      }
      
      public override GetVUserInfoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetVUserInfoResponse) {
          return MergeFrom((GetVUserInfoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetVUserInfoResponse other) {
        if (other == global::mm.command.GetVUserInfoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasVersion) {
          Version = other.Version;
        }
        if (other.HasVUserCount) {
          VUserCount = other.VUserCount;
        }
        if (other.vUserList_.Count != 0) {
          result.vUserList_.Add(other.vUserList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getVUserInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getVUserInfoResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasVersion = input.ReadInt32(ref result.version_);
              break;
            }
            case 24: {
              result.hasVUserCount = input.ReadInt32(ref result.vUserCount_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.vUserList_, global::mm.command.VUserInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasVersion {
        get { return result.hasVersion; }
      }
      public int Version {
        get { return result.Version; }
        set { SetVersion(value); }
      }
      public Builder SetVersion(int value) {
        PrepareBuilder();
        result.hasVersion = true;
        result.version_ = value;
        return this;
      }
      public Builder ClearVersion() {
        PrepareBuilder();
        result.hasVersion = false;
        result.version_ = 0;
        return this;
      }
      
      public bool HasVUserCount {
        get { return result.hasVUserCount; }
      }
      public int VUserCount {
        get { return result.VUserCount; }
        set { SetVUserCount(value); }
      }
      public Builder SetVUserCount(int value) {
        PrepareBuilder();
        result.hasVUserCount = true;
        result.vUserCount_ = value;
        return this;
      }
      public Builder ClearVUserCount() {
        PrepareBuilder();
        result.hasVUserCount = false;
        result.vUserCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.VUserInfo> VUserListList {
        get { return PrepareBuilder().vUserList_; }
      }
      public int VUserListCount {
        get { return result.VUserListCount; }
      }
      public global::mm.command.VUserInfo GetVUserList(int index) {
        return result.GetVUserList(index);
      }
      public Builder SetVUserList(int index, global::mm.command.VUserInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.vUserList_[index] = value;
        return this;
      }
      public Builder SetVUserList(int index, global::mm.command.VUserInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.vUserList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddVUserList(global::mm.command.VUserInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.vUserList_.Add(value);
        return this;
      }
      public Builder AddVUserList(global::mm.command.VUserInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.vUserList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeVUserList(scg::IEnumerable<global::mm.command.VUserInfo> values) {
        PrepareBuilder();
        result.vUserList_.Add(values);
        return this;
      }
      public Builder ClearVUserList() {
        PrepareBuilder();
        result.vUserList_.Clear();
        return this;
      }
    }
    static GetVUserInfoResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ClickCommandRequest : pb::GeneratedMessage<ClickCommandRequest, ClickCommandRequest.Builder> {
    private ClickCommandRequest() { }
    private static readonly ClickCommandRequest defaultInstance = new ClickCommandRequest().MakeReadOnly();
    private static readonly string[] _clickCommandRequestFieldNames = new string[] { "BizUserName", "ClickInfo", "ClickType", "base" };
    private static readonly uint[] _clickCommandRequestFieldTags = new uint[] { 34, 26, 16, 10 };
    public static ClickCommandRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClickCommandRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClickCommandRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ClickCommandRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClickCommandRequest, ClickCommandRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ClickCommandRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int ClickTypeFieldNumber = 2;
    private bool hasClickType;
    private int clickType_;
    public bool HasClickType {
      get { return hasClickType; }
    }
    public int ClickType {
      get { return clickType_; }
    }
    
    public const int ClickInfoFieldNumber = 3;
    private bool hasClickInfo;
    private string clickInfo_ = "";
    public bool HasClickInfo {
      get { return hasClickInfo; }
    }
    public string ClickInfo {
      get { return clickInfo_; }
    }
    
    public const int BizUserNameFieldNumber = 4;
    private bool hasBizUserName;
    private string bizUserName_ = "";
    public bool HasBizUserName {
      get { return hasBizUserName; }
    }
    public string BizUserName {
      get { return bizUserName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasClickType) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clickCommandRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasClickType) {
        output.WriteInt32(2, field_names[2], ClickType);
      }
      if (hasClickInfo) {
        output.WriteString(3, field_names[1], ClickInfo);
      }
      if (hasBizUserName) {
        output.WriteString(4, field_names[0], BizUserName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasClickType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ClickType);
        }
        if (hasClickInfo) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ClickInfo);
        }
        if (hasBizUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, BizUserName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClickCommandRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClickCommandRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClickCommandRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClickCommandRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClickCommandRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClickCommandRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClickCommandRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClickCommandRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClickCommandRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClickCommandRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClickCommandRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClickCommandRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ClickCommandRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClickCommandRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClickCommandRequest result;
      
      private ClickCommandRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ClickCommandRequest original = result;
          result = new ClickCommandRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClickCommandRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ClickCommandRequest.Descriptor; }
      }
      
      public override ClickCommandRequest DefaultInstanceForType {
        get { return global::mm.command.ClickCommandRequest.DefaultInstance; }
      }
      
      public override ClickCommandRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClickCommandRequest) {
          return MergeFrom((ClickCommandRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClickCommandRequest other) {
        if (other == global::mm.command.ClickCommandRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasClickType) {
          ClickType = other.ClickType;
        }
        if (other.HasClickInfo) {
          ClickInfo = other.ClickInfo;
        }
        if (other.HasBizUserName) {
          BizUserName = other.BizUserName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clickCommandRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clickCommandRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasClickType = input.ReadInt32(ref result.clickType_);
              break;
            }
            case 26: {
              result.hasClickInfo = input.ReadString(ref result.clickInfo_);
              break;
            }
            case 34: {
              result.hasBizUserName = input.ReadString(ref result.bizUserName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasClickType {
        get { return result.hasClickType; }
      }
      public int ClickType {
        get { return result.ClickType; }
        set { SetClickType(value); }
      }
      public Builder SetClickType(int value) {
        PrepareBuilder();
        result.hasClickType = true;
        result.clickType_ = value;
        return this;
      }
      public Builder ClearClickType() {
        PrepareBuilder();
        result.hasClickType = false;
        result.clickType_ = 0;
        return this;
      }
      
      public bool HasClickInfo {
        get { return result.hasClickInfo; }
      }
      public string ClickInfo {
        get { return result.ClickInfo; }
        set { SetClickInfo(value); }
      }
      public Builder SetClickInfo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClickInfo = true;
        result.clickInfo_ = value;
        return this;
      }
      public Builder ClearClickInfo() {
        PrepareBuilder();
        result.hasClickInfo = false;
        result.clickInfo_ = "";
        return this;
      }
      
      public bool HasBizUserName {
        get { return result.hasBizUserName; }
      }
      public string BizUserName {
        get { return result.BizUserName; }
        set { SetBizUserName(value); }
      }
      public Builder SetBizUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBizUserName = true;
        result.bizUserName_ = value;
        return this;
      }
      public Builder ClearBizUserName() {
        PrepareBuilder();
        result.hasBizUserName = false;
        result.bizUserName_ = "";
        return this;
      }
    }
    static ClickCommandRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ClickCommandResponse : pb::GeneratedMessage<ClickCommandResponse, ClickCommandResponse.Builder> {
    private ClickCommandResponse() { }
    private static readonly ClickCommandResponse defaultInstance = new ClickCommandResponse().MakeReadOnly();
    private static readonly string[] _clickCommandResponseFieldNames = new string[] { "base" };
    private static readonly uint[] _clickCommandResponseFieldTags = new uint[] { 10 };
    public static ClickCommandResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ClickCommandResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ClickCommandResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ClickCommandResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ClickCommandResponse, ClickCommandResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ClickCommandResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _clickCommandResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ClickCommandResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClickCommandResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClickCommandResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ClickCommandResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ClickCommandResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClickCommandResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ClickCommandResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ClickCommandResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ClickCommandResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ClickCommandResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ClickCommandResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ClickCommandResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ClickCommandResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ClickCommandResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ClickCommandResponse result;
      
      private ClickCommandResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ClickCommandResponse original = result;
          result = new ClickCommandResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ClickCommandResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ClickCommandResponse.Descriptor; }
      }
      
      public override ClickCommandResponse DefaultInstanceForType {
        get { return global::mm.command.ClickCommandResponse.DefaultInstance; }
      }
      
      public override ClickCommandResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ClickCommandResponse) {
          return MergeFrom((ClickCommandResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ClickCommandResponse other) {
        if (other == global::mm.command.ClickCommandResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_clickCommandResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _clickCommandResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
    }
    static ClickCommandResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BindopMobileForRegRequest : pb::GeneratedMessage<BindopMobileForRegRequest, BindopMobileForRegRequest.Builder> {
    private BindopMobileForRegRequest() { }
    private static readonly BindopMobileForRegRequest defaultInstance = new BindopMobileForRegRequest().MakeReadOnly();
    private static readonly string[] _bindopMobileForRegRequestFieldNames = new string[] { "AuthTicket", "DialFlag", "DialLang", "ForceReg", "Language", "Mobile", "Opcode", "RandomEncryKey", "SafeDeviceName", "SafeDeviceType", "UserName", "Verifycode", "adjustRet", "base", "clientSeqId", "inputMobileRetrys", "mobileCheckType", "regSessionID" };
    private static readonly uint[] _bindopMobileForRegRequestFieldTags = new uint[] { 66, 48, 58, 72, 106, 26, 32, 98, 82, 90, 18, 42, 120, 10, 130, 112, 136, 146 };
    public static BindopMobileForRegRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindopMobileForRegRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BindopMobileForRegRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindopMobileForRegRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindopMobileForRegRequest, BindopMobileForRegRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindopMobileForRegRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public const int MobileFieldNumber = 3;
    private bool hasMobile;
    private string mobile_ = "";
    public bool HasMobile {
      get { return hasMobile; }
    }
    public string Mobile {
      get { return mobile_; }
    }
    
    public const int OpcodeFieldNumber = 4;
    private bool hasOpcode;
    private int opcode_;
    public bool HasOpcode {
      get { return hasOpcode; }
    }
    public int Opcode {
      get { return opcode_; }
    }
    
    public const int VerifycodeFieldNumber = 5;
    private bool hasVerifycode;
    private string verifycode_ = "";
    public bool HasVerifycode {
      get { return hasVerifycode; }
    }
    public string Verifycode {
      get { return verifycode_; }
    }
    
    public const int DialFlagFieldNumber = 6;
    private bool hasDialFlag;
    private int dialFlag_;
    public bool HasDialFlag {
      get { return hasDialFlag; }
    }
    public int DialFlag {
      get { return dialFlag_; }
    }
    
    public const int DialLangFieldNumber = 7;
    private bool hasDialLang;
    private string dialLang_ = "";
    public bool HasDialLang {
      get { return hasDialLang; }
    }
    public string DialLang {
      get { return dialLang_; }
    }
    
    public const int AuthTicketFieldNumber = 8;
    private bool hasAuthTicket;
    private string authTicket_ = "";
    public bool HasAuthTicket {
      get { return hasAuthTicket; }
    }
    public string AuthTicket {
      get { return authTicket_; }
    }
    
    public const int ForceRegFieldNumber = 9;
    private bool hasForceReg;
    private int forceReg_;
    public bool HasForceReg {
      get { return hasForceReg; }
    }
    public int ForceReg {
      get { return forceReg_; }
    }
    
    public const int SafeDeviceNameFieldNumber = 10;
    private bool hasSafeDeviceName;
    private string safeDeviceName_ = "";
    public bool HasSafeDeviceName {
      get { return hasSafeDeviceName; }
    }
    public string SafeDeviceName {
      get { return safeDeviceName_; }
    }
    
    public const int SafeDeviceTypeFieldNumber = 11;
    private bool hasSafeDeviceType;
    private string safeDeviceType_ = "";
    public bool HasSafeDeviceType {
      get { return hasSafeDeviceType; }
    }
    public string SafeDeviceType {
      get { return safeDeviceType_; }
    }
    
    public const int RandomEncryKeyFieldNumber = 12;
    private bool hasRandomEncryKey;
    private global::mm.command.SKBuiltinBuffer_t randomEncryKey_;
    public bool HasRandomEncryKey {
      get { return hasRandomEncryKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
      get { return randomEncryKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int LanguageFieldNumber = 13;
    private bool hasLanguage;
    private string language_ = "";
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public string Language {
      get { return language_; }
    }
    
    public const int InputMobileRetrysFieldNumber = 14;
    private bool hasInputMobileRetrys;
    private int inputMobileRetrys_;
    public bool HasInputMobileRetrys {
      get { return hasInputMobileRetrys; }
    }
    public int InputMobileRetrys {
      get { return inputMobileRetrys_; }
    }
    
    public const int AdjustRetFieldNumber = 15;
    private bool hasAdjustRet;
    private int adjustRet_;
    public bool HasAdjustRet {
      get { return hasAdjustRet; }
    }
    public int AdjustRet {
      get { return adjustRet_; }
    }
    
    public const int ClientSeqIdFieldNumber = 16;
    private bool hasClientSeqId;
    private string clientSeqId_ = "";
    public bool HasClientSeqId {
      get { return hasClientSeqId; }
    }
    public string ClientSeqId {
      get { return clientSeqId_; }
    }
    
    public const int MobileCheckTypeFieldNumber = 17;
    private bool hasMobileCheckType;
    private uint mobileCheckType_;
    public bool HasMobileCheckType {
      get { return hasMobileCheckType; }
    }
    [global::System.CLSCompliant(false)]
    public uint MobileCheckType {
      get { return mobileCheckType_; }
    }
    
    public const int RegSessionIDFieldNumber = 18;
    private bool hasRegSessionID;
    private string regSessionID_ = "";
    public bool HasRegSessionID {
      get { return hasRegSessionID; }
    }
    public string RegSessionID {
      get { return regSessionID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasOpcode) return false;
        if (!Base.IsInitialized) return false;
        if (HasRandomEncryKey) {
          if (!RandomEncryKey.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bindopMobileForRegRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[13], Base);
      }
      if (hasUserName) {
        output.WriteString(2, field_names[10], UserName);
      }
      if (hasMobile) {
        output.WriteString(3, field_names[5], Mobile);
      }
      if (hasOpcode) {
        output.WriteInt32(4, field_names[6], Opcode);
      }
      if (hasVerifycode) {
        output.WriteString(5, field_names[11], Verifycode);
      }
      if (hasDialFlag) {
        output.WriteInt32(6, field_names[1], DialFlag);
      }
      if (hasDialLang) {
        output.WriteString(7, field_names[2], DialLang);
      }
      if (hasAuthTicket) {
        output.WriteString(8, field_names[0], AuthTicket);
      }
      if (hasForceReg) {
        output.WriteInt32(9, field_names[3], ForceReg);
      }
      if (hasSafeDeviceName) {
        output.WriteString(10, field_names[8], SafeDeviceName);
      }
      if (hasSafeDeviceType) {
        output.WriteString(11, field_names[9], SafeDeviceType);
      }
      if (hasRandomEncryKey) {
        output.WriteMessage(12, field_names[7], RandomEncryKey);
      }
      if (hasLanguage) {
        output.WriteString(13, field_names[4], Language);
      }
      if (hasInputMobileRetrys) {
        output.WriteInt32(14, field_names[15], InputMobileRetrys);
      }
      if (hasAdjustRet) {
        output.WriteInt32(15, field_names[12], AdjustRet);
      }
      if (hasClientSeqId) {
        output.WriteString(16, field_names[14], ClientSeqId);
      }
      if (hasMobileCheckType) {
        output.WriteUInt32(17, field_names[16], MobileCheckType);
      }
      if (hasRegSessionID) {
        output.WriteString(18, field_names[17], RegSessionID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserName);
        }
        if (hasMobile) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Mobile);
        }
        if (hasOpcode) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Opcode);
        }
        if (hasVerifycode) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Verifycode);
        }
        if (hasDialFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, DialFlag);
        }
        if (hasDialLang) {
          size += pb::CodedOutputStream.ComputeStringSize(7, DialLang);
        }
        if (hasAuthTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(8, AuthTicket);
        }
        if (hasForceReg) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, ForceReg);
        }
        if (hasSafeDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(10, SafeDeviceName);
        }
        if (hasSafeDeviceType) {
          size += pb::CodedOutputStream.ComputeStringSize(11, SafeDeviceType);
        }
        if (hasRandomEncryKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, RandomEncryKey);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeStringSize(13, Language);
        }
        if (hasInputMobileRetrys) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, InputMobileRetrys);
        }
        if (hasAdjustRet) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, AdjustRet);
        }
        if (hasClientSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(16, ClientSeqId);
        }
        if (hasMobileCheckType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(17, MobileCheckType);
        }
        if (hasRegSessionID) {
          size += pb::CodedOutputStream.ComputeStringSize(18, RegSessionID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindopMobileForRegRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindopMobileForRegRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindopMobileForRegRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindopMobileForRegRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindopMobileForRegRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindopMobileForRegRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindopMobileForRegRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindopMobileForRegRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindopMobileForRegRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindopMobileForRegRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BindopMobileForRegRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindopMobileForRegRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BindopMobileForRegRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BindopMobileForRegRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BindopMobileForRegRequest result;
      
      private BindopMobileForRegRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          BindopMobileForRegRequest original = result;
          result = new BindopMobileForRegRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BindopMobileForRegRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.BindopMobileForRegRequest.Descriptor; }
      }
      
      public override BindopMobileForRegRequest DefaultInstanceForType {
        get { return global::mm.command.BindopMobileForRegRequest.DefaultInstance; }
      }
      
      public override BindopMobileForRegRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindopMobileForRegRequest) {
          return MergeFrom((BindopMobileForRegRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindopMobileForRegRequest other) {
        if (other == global::mm.command.BindopMobileForRegRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasMobile) {
          Mobile = other.Mobile;
        }
        if (other.HasOpcode) {
          Opcode = other.Opcode;
        }
        if (other.HasVerifycode) {
          Verifycode = other.Verifycode;
        }
        if (other.HasDialFlag) {
          DialFlag = other.DialFlag;
        }
        if (other.HasDialLang) {
          DialLang = other.DialLang;
        }
        if (other.HasAuthTicket) {
          AuthTicket = other.AuthTicket;
        }
        if (other.HasForceReg) {
          ForceReg = other.ForceReg;
        }
        if (other.HasSafeDeviceName) {
          SafeDeviceName = other.SafeDeviceName;
        }
        if (other.HasSafeDeviceType) {
          SafeDeviceType = other.SafeDeviceType;
        }
        if (other.HasRandomEncryKey) {
          MergeRandomEncryKey(other.RandomEncryKey);
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasInputMobileRetrys) {
          InputMobileRetrys = other.InputMobileRetrys;
        }
        if (other.HasAdjustRet) {
          AdjustRet = other.AdjustRet;
        }
        if (other.HasClientSeqId) {
          ClientSeqId = other.ClientSeqId;
        }
        if (other.HasMobileCheckType) {
          MobileCheckType = other.MobileCheckType;
        }
        if (other.HasRegSessionID) {
          RegSessionID = other.RegSessionID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bindopMobileForRegRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bindopMobileForRegRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 26: {
              result.hasMobile = input.ReadString(ref result.mobile_);
              break;
            }
            case 32: {
              result.hasOpcode = input.ReadInt32(ref result.opcode_);
              break;
            }
            case 42: {
              result.hasVerifycode = input.ReadString(ref result.verifycode_);
              break;
            }
            case 48: {
              result.hasDialFlag = input.ReadInt32(ref result.dialFlag_);
              break;
            }
            case 58: {
              result.hasDialLang = input.ReadString(ref result.dialLang_);
              break;
            }
            case 66: {
              result.hasAuthTicket = input.ReadString(ref result.authTicket_);
              break;
            }
            case 72: {
              result.hasForceReg = input.ReadInt32(ref result.forceReg_);
              break;
            }
            case 82: {
              result.hasSafeDeviceName = input.ReadString(ref result.safeDeviceName_);
              break;
            }
            case 90: {
              result.hasSafeDeviceType = input.ReadString(ref result.safeDeviceType_);
              break;
            }
            case 98: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasRandomEncryKey) {
                subBuilder.MergeFrom(RandomEncryKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RandomEncryKey = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              result.hasLanguage = input.ReadString(ref result.language_);
              break;
            }
            case 112: {
              result.hasInputMobileRetrys = input.ReadInt32(ref result.inputMobileRetrys_);
              break;
            }
            case 120: {
              result.hasAdjustRet = input.ReadInt32(ref result.adjustRet_);
              break;
            }
            case 130: {
              result.hasClientSeqId = input.ReadString(ref result.clientSeqId_);
              break;
            }
            case 136: {
              result.hasMobileCheckType = input.ReadUInt32(ref result.mobileCheckType_);
              break;
            }
            case 146: {
              result.hasRegSessionID = input.ReadString(ref result.regSessionID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasMobile {
        get { return result.hasMobile; }
      }
      public string Mobile {
        get { return result.Mobile; }
        set { SetMobile(value); }
      }
      public Builder SetMobile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMobile = true;
        result.mobile_ = value;
        return this;
      }
      public Builder ClearMobile() {
        PrepareBuilder();
        result.hasMobile = false;
        result.mobile_ = "";
        return this;
      }
      
      public bool HasOpcode {
        get { return result.hasOpcode; }
      }
      public int Opcode {
        get { return result.Opcode; }
        set { SetOpcode(value); }
      }
      public Builder SetOpcode(int value) {
        PrepareBuilder();
        result.hasOpcode = true;
        result.opcode_ = value;
        return this;
      }
      public Builder ClearOpcode() {
        PrepareBuilder();
        result.hasOpcode = false;
        result.opcode_ = 0;
        return this;
      }
      
      public bool HasVerifycode {
        get { return result.hasVerifycode; }
      }
      public string Verifycode {
        get { return result.Verifycode; }
        set { SetVerifycode(value); }
      }
      public Builder SetVerifycode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVerifycode = true;
        result.verifycode_ = value;
        return this;
      }
      public Builder ClearVerifycode() {
        PrepareBuilder();
        result.hasVerifycode = false;
        result.verifycode_ = "";
        return this;
      }
      
      public bool HasDialFlag {
        get { return result.hasDialFlag; }
      }
      public int DialFlag {
        get { return result.DialFlag; }
        set { SetDialFlag(value); }
      }
      public Builder SetDialFlag(int value) {
        PrepareBuilder();
        result.hasDialFlag = true;
        result.dialFlag_ = value;
        return this;
      }
      public Builder ClearDialFlag() {
        PrepareBuilder();
        result.hasDialFlag = false;
        result.dialFlag_ = 0;
        return this;
      }
      
      public bool HasDialLang {
        get { return result.hasDialLang; }
      }
      public string DialLang {
        get { return result.DialLang; }
        set { SetDialLang(value); }
      }
      public Builder SetDialLang(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDialLang = true;
        result.dialLang_ = value;
        return this;
      }
      public Builder ClearDialLang() {
        PrepareBuilder();
        result.hasDialLang = false;
        result.dialLang_ = "";
        return this;
      }
      
      public bool HasAuthTicket {
        get { return result.hasAuthTicket; }
      }
      public string AuthTicket {
        get { return result.AuthTicket; }
        set { SetAuthTicket(value); }
      }
      public Builder SetAuthTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthTicket = true;
        result.authTicket_ = value;
        return this;
      }
      public Builder ClearAuthTicket() {
        PrepareBuilder();
        result.hasAuthTicket = false;
        result.authTicket_ = "";
        return this;
      }
      
      public bool HasForceReg {
        get { return result.hasForceReg; }
      }
      public int ForceReg {
        get { return result.ForceReg; }
        set { SetForceReg(value); }
      }
      public Builder SetForceReg(int value) {
        PrepareBuilder();
        result.hasForceReg = true;
        result.forceReg_ = value;
        return this;
      }
      public Builder ClearForceReg() {
        PrepareBuilder();
        result.hasForceReg = false;
        result.forceReg_ = 0;
        return this;
      }
      
      public bool HasSafeDeviceName {
        get { return result.hasSafeDeviceName; }
      }
      public string SafeDeviceName {
        get { return result.SafeDeviceName; }
        set { SetSafeDeviceName(value); }
      }
      public Builder SetSafeDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSafeDeviceName = true;
        result.safeDeviceName_ = value;
        return this;
      }
      public Builder ClearSafeDeviceName() {
        PrepareBuilder();
        result.hasSafeDeviceName = false;
        result.safeDeviceName_ = "";
        return this;
      }
      
      public bool HasSafeDeviceType {
        get { return result.hasSafeDeviceType; }
      }
      public string SafeDeviceType {
        get { return result.SafeDeviceType; }
        set { SetSafeDeviceType(value); }
      }
      public Builder SetSafeDeviceType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSafeDeviceType = true;
        result.safeDeviceType_ = value;
        return this;
      }
      public Builder ClearSafeDeviceType() {
        PrepareBuilder();
        result.hasSafeDeviceType = false;
        result.safeDeviceType_ = "";
        return this;
      }
      
      public bool HasRandomEncryKey {
       get { return result.hasRandomEncryKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
        get { return result.RandomEncryKey; }
        set { SetRandomEncryKey(value); }
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = value;
        return this;
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRandomEncryKey &&
            result.randomEncryKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.randomEncryKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.randomEncryKey_).MergeFrom(value).BuildPartial();
        } else {
          result.randomEncryKey_ = value;
        }
        result.hasRandomEncryKey = true;
        return this;
      }
      public Builder ClearRandomEncryKey() {
        PrepareBuilder();
        result.hasRandomEncryKey = false;
        result.randomEncryKey_ = null;
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public string Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = "";
        return this;
      }
      
      public bool HasInputMobileRetrys {
        get { return result.hasInputMobileRetrys; }
      }
      public int InputMobileRetrys {
        get { return result.InputMobileRetrys; }
        set { SetInputMobileRetrys(value); }
      }
      public Builder SetInputMobileRetrys(int value) {
        PrepareBuilder();
        result.hasInputMobileRetrys = true;
        result.inputMobileRetrys_ = value;
        return this;
      }
      public Builder ClearInputMobileRetrys() {
        PrepareBuilder();
        result.hasInputMobileRetrys = false;
        result.inputMobileRetrys_ = 0;
        return this;
      }
      
      public bool HasAdjustRet {
        get { return result.hasAdjustRet; }
      }
      public int AdjustRet {
        get { return result.AdjustRet; }
        set { SetAdjustRet(value); }
      }
      public Builder SetAdjustRet(int value) {
        PrepareBuilder();
        result.hasAdjustRet = true;
        result.adjustRet_ = value;
        return this;
      }
      public Builder ClearAdjustRet() {
        PrepareBuilder();
        result.hasAdjustRet = false;
        result.adjustRet_ = 0;
        return this;
      }
      
      public bool HasClientSeqId {
        get { return result.hasClientSeqId; }
      }
      public string ClientSeqId {
        get { return result.ClientSeqId; }
        set { SetClientSeqId(value); }
      }
      public Builder SetClientSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientSeqId = true;
        result.clientSeqId_ = value;
        return this;
      }
      public Builder ClearClientSeqId() {
        PrepareBuilder();
        result.hasClientSeqId = false;
        result.clientSeqId_ = "";
        return this;
      }
      
      public bool HasMobileCheckType {
        get { return result.hasMobileCheckType; }
      }
      [global::System.CLSCompliant(false)]
      public uint MobileCheckType {
        get { return result.MobileCheckType; }
        set { SetMobileCheckType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMobileCheckType(uint value) {
        PrepareBuilder();
        result.hasMobileCheckType = true;
        result.mobileCheckType_ = value;
        return this;
      }
      public Builder ClearMobileCheckType() {
        PrepareBuilder();
        result.hasMobileCheckType = false;
        result.mobileCheckType_ = 0;
        return this;
      }
      
      public bool HasRegSessionID {
        get { return result.hasRegSessionID; }
      }
      public string RegSessionID {
        get { return result.RegSessionID; }
        set { SetRegSessionID(value); }
      }
      public Builder SetRegSessionID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRegSessionID = true;
        result.regSessionID_ = value;
        return this;
      }
      public Builder ClearRegSessionID() {
        PrepareBuilder();
        result.hasRegSessionID = false;
        result.regSessionID_ = "";
        return this;
      }
    }
    static BindopMobileForRegRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BindopMobileForRegResponse : pb::GeneratedMessage<BindopMobileForRegResponse, BindopMobileForRegResponse.Builder> {
    private BindopMobileForRegResponse() { }
    private static readonly BindopMobileForRegResponse defaultInstance = new BindopMobileForRegResponse().MakeReadOnly();
    private static readonly string[] _bindopMobileForRegResponseFieldNames = new string[] { "AuthTicket", "BuiltinIPList", "MainAcct", "MainAcctType", "NeedSetPwd", "NetworkControl", "NewHostList", "Pwd", "SafeDevice", "SafeDeviceList", "SmsNo", "Username", "base", "formatedMobile", "mmtlsControlBitFlag", "mobileCheckType", "pureMobile", "regSessionID", "showStyle", "smsUpCode", "smsUpMobile", "ticket" };
    private static readonly uint[] _bindopMobileForRegResponseFieldTags = new uint[] { 82, 66, 98, 104, 32, 74, 58, 42, 88, 114, 26, 50, 10, 130, 144, 168, 122, 178, 138, 154, 162, 18 };
    public static BindopMobileForRegResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindopMobileForRegResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BindopMobileForRegResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindopMobileForRegResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindopMobileForRegResponse, BindopMobileForRegResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindopMobileForRegResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int TicketFieldNumber = 2;
    private bool hasTicket;
    private string ticket_ = "";
    public bool HasTicket {
      get { return hasTicket; }
    }
    public string Ticket {
      get { return ticket_; }
    }
    
    public const int SmsNoFieldNumber = 3;
    private bool hasSmsNo;
    private string smsNo_ = "";
    public bool HasSmsNo {
      get { return hasSmsNo; }
    }
    public string SmsNo {
      get { return smsNo_; }
    }
    
    public const int NeedSetPwdFieldNumber = 4;
    private bool hasNeedSetPwd;
    private int needSetPwd_;
    public bool HasNeedSetPwd {
      get { return hasNeedSetPwd; }
    }
    public int NeedSetPwd {
      get { return needSetPwd_; }
    }
    
    public const int PwdFieldNumber = 5;
    private bool hasPwd;
    private string pwd_ = "";
    public bool HasPwd {
      get { return hasPwd; }
    }
    public string Pwd {
      get { return pwd_; }
    }
    
    public const int UsernameFieldNumber = 6;
    private bool hasUsername;
    private string username_ = "";
    public bool HasUsername {
      get { return hasUsername; }
    }
    public string Username {
      get { return username_; }
    }
    
    public const int NewHostListFieldNumber = 7;
    private bool hasNewHostList;
    private global::mm.command.NewHostListType newHostList_;
    public bool HasNewHostList {
      get { return hasNewHostList; }
    }
    public global::mm.command.NewHostListType NewHostList {
      get { return newHostList_ ?? global::mm.command.NewHostListType.DefaultInstance; }
    }
    
    public const int BuiltinIPListFieldNumber = 8;
    private bool hasBuiltinIPList;
    private global::mm.command.IPList builtinIPList_;
    public bool HasBuiltinIPList {
      get { return hasBuiltinIPList; }
    }
    public global::mm.command.IPList BuiltinIPList {
      get { return builtinIPList_ ?? global::mm.command.IPList.DefaultInstance; }
    }
    
    public const int NetworkControlFieldNumber = 9;
    private bool hasNetworkControl;
    private global::mm.command.NetworkControlType networkControl_;
    public bool HasNetworkControl {
      get { return hasNetworkControl; }
    }
    public global::mm.command.NetworkControlType NetworkControl {
      get { return networkControl_ ?? global::mm.command.NetworkControlType.DefaultInstance; }
    }
    
    public const int AuthTicketFieldNumber = 10;
    private bool hasAuthTicket;
    private string authTicket_ = "";
    public bool HasAuthTicket {
      get { return hasAuthTicket; }
    }
    public string AuthTicket {
      get { return authTicket_; }
    }
    
    public const int SafeDeviceFieldNumber = 11;
    private bool hasSafeDevice;
    private int safeDevice_;
    public bool HasSafeDevice {
      get { return hasSafeDevice; }
    }
    public int SafeDevice {
      get { return safeDevice_; }
    }
    
    public const int MainAcctFieldNumber = 12;
    private bool hasMainAcct;
    private string mainAcct_ = "";
    public bool HasMainAcct {
      get { return hasMainAcct; }
    }
    public string MainAcct {
      get { return mainAcct_; }
    }
    
    public const int MainAcctTypeFieldNumber = 13;
    private bool hasMainAcctType;
    private uint mainAcctType_;
    public bool HasMainAcctType {
      get { return hasMainAcctType; }
    }
    [global::System.CLSCompliant(false)]
    public uint MainAcctType {
      get { return mainAcctType_; }
    }
    
    public const int SafeDeviceListFieldNumber = 14;
    private bool hasSafeDeviceList;
    private global::mm.command.SafeDevice safeDeviceList_;
    public bool HasSafeDeviceList {
      get { return hasSafeDeviceList; }
    }
    public global::mm.command.SafeDevice SafeDeviceList {
      get { return safeDeviceList_ ?? global::mm.command.SafeDevice.DefaultInstance; }
    }
    
    public const int PureMobileFieldNumber = 15;
    private bool hasPureMobile;
    private string pureMobile_ = "";
    public bool HasPureMobile {
      get { return hasPureMobile; }
    }
    public string PureMobile {
      get { return pureMobile_; }
    }
    
    public const int FormatedMobileFieldNumber = 16;
    private bool hasFormatedMobile;
    private string formatedMobile_ = "";
    public bool HasFormatedMobile {
      get { return hasFormatedMobile; }
    }
    public string FormatedMobile {
      get { return formatedMobile_; }
    }
    
    public const int ShowStyleFieldNumber = 17;
    private bool hasShowStyle;
    private global::mm.command.ShowStyleKey showStyle_;
    public bool HasShowStyle {
      get { return hasShowStyle; }
    }
    public global::mm.command.ShowStyleKey ShowStyle {
      get { return showStyle_ ?? global::mm.command.ShowStyleKey.DefaultInstance; }
    }
    
    public const int MmtlsControlBitFlagFieldNumber = 18;
    private bool hasMmtlsControlBitFlag;
    private uint mmtlsControlBitFlag_;
    public bool HasMmtlsControlBitFlag {
      get { return hasMmtlsControlBitFlag; }
    }
    [global::System.CLSCompliant(false)]
    public uint MmtlsControlBitFlag {
      get { return mmtlsControlBitFlag_; }
    }
    
    public const int SmsUpCodeFieldNumber = 19;
    private bool hasSmsUpCode;
    private string smsUpCode_ = "";
    public bool HasSmsUpCode {
      get { return hasSmsUpCode; }
    }
    public string SmsUpCode {
      get { return smsUpCode_; }
    }
    
    public const int SmsUpMobileFieldNumber = 20;
    private bool hasSmsUpMobile;
    private string smsUpMobile_ = "";
    public bool HasSmsUpMobile {
      get { return hasSmsUpMobile; }
    }
    public string SmsUpMobile {
      get { return smsUpMobile_; }
    }
    
    public const int MobileCheckTypeFieldNumber = 21;
    private bool hasMobileCheckType;
    private uint mobileCheckType_;
    public bool HasMobileCheckType {
      get { return hasMobileCheckType; }
    }
    [global::System.CLSCompliant(false)]
    public uint MobileCheckType {
      get { return mobileCheckType_; }
    }
    
    public const int RegSessionIDFieldNumber = 22;
    private bool hasRegSessionID;
    private string regSessionID_ = "";
    public bool HasRegSessionID {
      get { return hasRegSessionID; }
    }
    public string RegSessionID {
      get { return regSessionID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasNewHostList) {
          if (!NewHostList.IsInitialized) return false;
        }
        if (HasBuiltinIPList) {
          if (!BuiltinIPList.IsInitialized) return false;
        }
        if (HasSafeDeviceList) {
          if (!SafeDeviceList.IsInitialized) return false;
        }
        if (HasShowStyle) {
          if (!ShowStyle.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bindopMobileForRegResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[12], Base);
      }
      if (hasTicket) {
        output.WriteString(2, field_names[21], Ticket);
      }
      if (hasSmsNo) {
        output.WriteString(3, field_names[10], SmsNo);
      }
      if (hasNeedSetPwd) {
        output.WriteInt32(4, field_names[4], NeedSetPwd);
      }
      if (hasPwd) {
        output.WriteString(5, field_names[7], Pwd);
      }
      if (hasUsername) {
        output.WriteString(6, field_names[11], Username);
      }
      if (hasNewHostList) {
        output.WriteMessage(7, field_names[6], NewHostList);
      }
      if (hasBuiltinIPList) {
        output.WriteMessage(8, field_names[1], BuiltinIPList);
      }
      if (hasNetworkControl) {
        output.WriteMessage(9, field_names[5], NetworkControl);
      }
      if (hasAuthTicket) {
        output.WriteString(10, field_names[0], AuthTicket);
      }
      if (hasSafeDevice) {
        output.WriteInt32(11, field_names[8], SafeDevice);
      }
      if (hasMainAcct) {
        output.WriteString(12, field_names[2], MainAcct);
      }
      if (hasMainAcctType) {
        output.WriteUInt32(13, field_names[3], MainAcctType);
      }
      if (hasSafeDeviceList) {
        output.WriteMessage(14, field_names[9], SafeDeviceList);
      }
      if (hasPureMobile) {
        output.WriteString(15, field_names[16], PureMobile);
      }
      if (hasFormatedMobile) {
        output.WriteString(16, field_names[13], FormatedMobile);
      }
      if (hasShowStyle) {
        output.WriteMessage(17, field_names[18], ShowStyle);
      }
      if (hasMmtlsControlBitFlag) {
        output.WriteUInt32(18, field_names[14], MmtlsControlBitFlag);
      }
      if (hasSmsUpCode) {
        output.WriteString(19, field_names[19], SmsUpCode);
      }
      if (hasSmsUpMobile) {
        output.WriteString(20, field_names[20], SmsUpMobile);
      }
      if (hasMobileCheckType) {
        output.WriteUInt32(21, field_names[15], MobileCheckType);
      }
      if (hasRegSessionID) {
        output.WriteString(22, field_names[17], RegSessionID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Ticket);
        }
        if (hasSmsNo) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SmsNo);
        }
        if (hasNeedSetPwd) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, NeedSetPwd);
        }
        if (hasPwd) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Pwd);
        }
        if (hasUsername) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Username);
        }
        if (hasNewHostList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, NewHostList);
        }
        if (hasBuiltinIPList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, BuiltinIPList);
        }
        if (hasNetworkControl) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, NetworkControl);
        }
        if (hasAuthTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(10, AuthTicket);
        }
        if (hasSafeDevice) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, SafeDevice);
        }
        if (hasMainAcct) {
          size += pb::CodedOutputStream.ComputeStringSize(12, MainAcct);
        }
        if (hasMainAcctType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(13, MainAcctType);
        }
        if (hasSafeDeviceList) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, SafeDeviceList);
        }
        if (hasPureMobile) {
          size += pb::CodedOutputStream.ComputeStringSize(15, PureMobile);
        }
        if (hasFormatedMobile) {
          size += pb::CodedOutputStream.ComputeStringSize(16, FormatedMobile);
        }
        if (hasShowStyle) {
          size += pb::CodedOutputStream.ComputeMessageSize(17, ShowStyle);
        }
        if (hasMmtlsControlBitFlag) {
          size += pb::CodedOutputStream.ComputeUInt32Size(18, MmtlsControlBitFlag);
        }
        if (hasSmsUpCode) {
          size += pb::CodedOutputStream.ComputeStringSize(19, SmsUpCode);
        }
        if (hasSmsUpMobile) {
          size += pb::CodedOutputStream.ComputeStringSize(20, SmsUpMobile);
        }
        if (hasMobileCheckType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(21, MobileCheckType);
        }
        if (hasRegSessionID) {
          size += pb::CodedOutputStream.ComputeStringSize(22, RegSessionID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindopMobileForRegResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindopMobileForRegResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindopMobileForRegResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindopMobileForRegResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindopMobileForRegResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindopMobileForRegResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindopMobileForRegResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindopMobileForRegResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindopMobileForRegResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindopMobileForRegResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BindopMobileForRegResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindopMobileForRegResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BindopMobileForRegResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BindopMobileForRegResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BindopMobileForRegResponse result;
      
      private BindopMobileForRegResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          BindopMobileForRegResponse original = result;
          result = new BindopMobileForRegResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BindopMobileForRegResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.BindopMobileForRegResponse.Descriptor; }
      }
      
      public override BindopMobileForRegResponse DefaultInstanceForType {
        get { return global::mm.command.BindopMobileForRegResponse.DefaultInstance; }
      }
      
      public override BindopMobileForRegResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindopMobileForRegResponse) {
          return MergeFrom((BindopMobileForRegResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindopMobileForRegResponse other) {
        if (other == global::mm.command.BindopMobileForRegResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasTicket) {
          Ticket = other.Ticket;
        }
        if (other.HasSmsNo) {
          SmsNo = other.SmsNo;
        }
        if (other.HasNeedSetPwd) {
          NeedSetPwd = other.NeedSetPwd;
        }
        if (other.HasPwd) {
          Pwd = other.Pwd;
        }
        if (other.HasUsername) {
          Username = other.Username;
        }
        if (other.HasNewHostList) {
          MergeNewHostList(other.NewHostList);
        }
        if (other.HasBuiltinIPList) {
          MergeBuiltinIPList(other.BuiltinIPList);
        }
        if (other.HasNetworkControl) {
          MergeNetworkControl(other.NetworkControl);
        }
        if (other.HasAuthTicket) {
          AuthTicket = other.AuthTicket;
        }
        if (other.HasSafeDevice) {
          SafeDevice = other.SafeDevice;
        }
        if (other.HasMainAcct) {
          MainAcct = other.MainAcct;
        }
        if (other.HasMainAcctType) {
          MainAcctType = other.MainAcctType;
        }
        if (other.HasSafeDeviceList) {
          MergeSafeDeviceList(other.SafeDeviceList);
        }
        if (other.HasPureMobile) {
          PureMobile = other.PureMobile;
        }
        if (other.HasFormatedMobile) {
          FormatedMobile = other.FormatedMobile;
        }
        if (other.HasShowStyle) {
          MergeShowStyle(other.ShowStyle);
        }
        if (other.HasMmtlsControlBitFlag) {
          MmtlsControlBitFlag = other.MmtlsControlBitFlag;
        }
        if (other.HasSmsUpCode) {
          SmsUpCode = other.SmsUpCode;
        }
        if (other.HasSmsUpMobile) {
          SmsUpMobile = other.SmsUpMobile;
        }
        if (other.HasMobileCheckType) {
          MobileCheckType = other.MobileCheckType;
        }
        if (other.HasRegSessionID) {
          RegSessionID = other.RegSessionID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bindopMobileForRegResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bindopMobileForRegResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasTicket = input.ReadString(ref result.ticket_);
              break;
            }
            case 26: {
              result.hasSmsNo = input.ReadString(ref result.smsNo_);
              break;
            }
            case 32: {
              result.hasNeedSetPwd = input.ReadInt32(ref result.needSetPwd_);
              break;
            }
            case 42: {
              result.hasPwd = input.ReadString(ref result.pwd_);
              break;
            }
            case 50: {
              result.hasUsername = input.ReadString(ref result.username_);
              break;
            }
            case 58: {
              global::mm.command.NewHostListType.Builder subBuilder = global::mm.command.NewHostListType.CreateBuilder();
              if (result.hasNewHostList) {
                subBuilder.MergeFrom(NewHostList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewHostList = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::mm.command.IPList.Builder subBuilder = global::mm.command.IPList.CreateBuilder();
              if (result.hasBuiltinIPList) {
                subBuilder.MergeFrom(BuiltinIPList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BuiltinIPList = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::mm.command.NetworkControlType.Builder subBuilder = global::mm.command.NetworkControlType.CreateBuilder();
              if (result.hasNetworkControl) {
                subBuilder.MergeFrom(NetworkControl);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NetworkControl = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              result.hasAuthTicket = input.ReadString(ref result.authTicket_);
              break;
            }
            case 88: {
              result.hasSafeDevice = input.ReadInt32(ref result.safeDevice_);
              break;
            }
            case 98: {
              result.hasMainAcct = input.ReadString(ref result.mainAcct_);
              break;
            }
            case 104: {
              result.hasMainAcctType = input.ReadUInt32(ref result.mainAcctType_);
              break;
            }
            case 114: {
              global::mm.command.SafeDevice.Builder subBuilder = global::mm.command.SafeDevice.CreateBuilder();
              if (result.hasSafeDeviceList) {
                subBuilder.MergeFrom(SafeDeviceList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SafeDeviceList = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              result.hasPureMobile = input.ReadString(ref result.pureMobile_);
              break;
            }
            case 130: {
              result.hasFormatedMobile = input.ReadString(ref result.formatedMobile_);
              break;
            }
            case 138: {
              global::mm.command.ShowStyleKey.Builder subBuilder = global::mm.command.ShowStyleKey.CreateBuilder();
              if (result.hasShowStyle) {
                subBuilder.MergeFrom(ShowStyle);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ShowStyle = subBuilder.BuildPartial();
              break;
            }
            case 144: {
              result.hasMmtlsControlBitFlag = input.ReadUInt32(ref result.mmtlsControlBitFlag_);
              break;
            }
            case 154: {
              result.hasSmsUpCode = input.ReadString(ref result.smsUpCode_);
              break;
            }
            case 162: {
              result.hasSmsUpMobile = input.ReadString(ref result.smsUpMobile_);
              break;
            }
            case 168: {
              result.hasMobileCheckType = input.ReadUInt32(ref result.mobileCheckType_);
              break;
            }
            case 178: {
              result.hasRegSessionID = input.ReadString(ref result.regSessionID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasTicket {
        get { return result.hasTicket; }
      }
      public string Ticket {
        get { return result.Ticket; }
        set { SetTicket(value); }
      }
      public Builder SetTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTicket = true;
        result.ticket_ = value;
        return this;
      }
      public Builder ClearTicket() {
        PrepareBuilder();
        result.hasTicket = false;
        result.ticket_ = "";
        return this;
      }
      
      public bool HasSmsNo {
        get { return result.hasSmsNo; }
      }
      public string SmsNo {
        get { return result.SmsNo; }
        set { SetSmsNo(value); }
      }
      public Builder SetSmsNo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSmsNo = true;
        result.smsNo_ = value;
        return this;
      }
      public Builder ClearSmsNo() {
        PrepareBuilder();
        result.hasSmsNo = false;
        result.smsNo_ = "";
        return this;
      }
      
      public bool HasNeedSetPwd {
        get { return result.hasNeedSetPwd; }
      }
      public int NeedSetPwd {
        get { return result.NeedSetPwd; }
        set { SetNeedSetPwd(value); }
      }
      public Builder SetNeedSetPwd(int value) {
        PrepareBuilder();
        result.hasNeedSetPwd = true;
        result.needSetPwd_ = value;
        return this;
      }
      public Builder ClearNeedSetPwd() {
        PrepareBuilder();
        result.hasNeedSetPwd = false;
        result.needSetPwd_ = 0;
        return this;
      }
      
      public bool HasPwd {
        get { return result.hasPwd; }
      }
      public string Pwd {
        get { return result.Pwd; }
        set { SetPwd(value); }
      }
      public Builder SetPwd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPwd = true;
        result.pwd_ = value;
        return this;
      }
      public Builder ClearPwd() {
        PrepareBuilder();
        result.hasPwd = false;
        result.pwd_ = "";
        return this;
      }
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public string Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = "";
        return this;
      }
      
      public bool HasNewHostList {
       get { return result.hasNewHostList; }
      }
      public global::mm.command.NewHostListType NewHostList {
        get { return result.NewHostList; }
        set { SetNewHostList(value); }
      }
      public Builder SetNewHostList(global::mm.command.NewHostListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewHostList = true;
        result.newHostList_ = value;
        return this;
      }
      public Builder SetNewHostList(global::mm.command.NewHostListType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNewHostList = true;
        result.newHostList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewHostList(global::mm.command.NewHostListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNewHostList &&
            result.newHostList_ != global::mm.command.NewHostListType.DefaultInstance) {
            result.newHostList_ = global::mm.command.NewHostListType.CreateBuilder(result.newHostList_).MergeFrom(value).BuildPartial();
        } else {
          result.newHostList_ = value;
        }
        result.hasNewHostList = true;
        return this;
      }
      public Builder ClearNewHostList() {
        PrepareBuilder();
        result.hasNewHostList = false;
        result.newHostList_ = null;
        return this;
      }
      
      public bool HasBuiltinIPList {
       get { return result.hasBuiltinIPList; }
      }
      public global::mm.command.IPList BuiltinIPList {
        get { return result.BuiltinIPList; }
        set { SetBuiltinIPList(value); }
      }
      public Builder SetBuiltinIPList(global::mm.command.IPList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBuiltinIPList = true;
        result.builtinIPList_ = value;
        return this;
      }
      public Builder SetBuiltinIPList(global::mm.command.IPList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBuiltinIPList = true;
        result.builtinIPList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBuiltinIPList(global::mm.command.IPList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBuiltinIPList &&
            result.builtinIPList_ != global::mm.command.IPList.DefaultInstance) {
            result.builtinIPList_ = global::mm.command.IPList.CreateBuilder(result.builtinIPList_).MergeFrom(value).BuildPartial();
        } else {
          result.builtinIPList_ = value;
        }
        result.hasBuiltinIPList = true;
        return this;
      }
      public Builder ClearBuiltinIPList() {
        PrepareBuilder();
        result.hasBuiltinIPList = false;
        result.builtinIPList_ = null;
        return this;
      }
      
      public bool HasNetworkControl {
       get { return result.hasNetworkControl; }
      }
      public global::mm.command.NetworkControlType NetworkControl {
        get { return result.NetworkControl; }
        set { SetNetworkControl(value); }
      }
      public Builder SetNetworkControl(global::mm.command.NetworkControlType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNetworkControl = true;
        result.networkControl_ = value;
        return this;
      }
      public Builder SetNetworkControl(global::mm.command.NetworkControlType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNetworkControl = true;
        result.networkControl_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNetworkControl(global::mm.command.NetworkControlType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNetworkControl &&
            result.networkControl_ != global::mm.command.NetworkControlType.DefaultInstance) {
            result.networkControl_ = global::mm.command.NetworkControlType.CreateBuilder(result.networkControl_).MergeFrom(value).BuildPartial();
        } else {
          result.networkControl_ = value;
        }
        result.hasNetworkControl = true;
        return this;
      }
      public Builder ClearNetworkControl() {
        PrepareBuilder();
        result.hasNetworkControl = false;
        result.networkControl_ = null;
        return this;
      }
      
      public bool HasAuthTicket {
        get { return result.hasAuthTicket; }
      }
      public string AuthTicket {
        get { return result.AuthTicket; }
        set { SetAuthTicket(value); }
      }
      public Builder SetAuthTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthTicket = true;
        result.authTicket_ = value;
        return this;
      }
      public Builder ClearAuthTicket() {
        PrepareBuilder();
        result.hasAuthTicket = false;
        result.authTicket_ = "";
        return this;
      }
      
      public bool HasSafeDevice {
        get { return result.hasSafeDevice; }
      }
      public int SafeDevice {
        get { return result.SafeDevice; }
        set { SetSafeDevice(value); }
      }
      public Builder SetSafeDevice(int value) {
        PrepareBuilder();
        result.hasSafeDevice = true;
        result.safeDevice_ = value;
        return this;
      }
      public Builder ClearSafeDevice() {
        PrepareBuilder();
        result.hasSafeDevice = false;
        result.safeDevice_ = 0;
        return this;
      }
      
      public bool HasMainAcct {
        get { return result.hasMainAcct; }
      }
      public string MainAcct {
        get { return result.MainAcct; }
        set { SetMainAcct(value); }
      }
      public Builder SetMainAcct(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMainAcct = true;
        result.mainAcct_ = value;
        return this;
      }
      public Builder ClearMainAcct() {
        PrepareBuilder();
        result.hasMainAcct = false;
        result.mainAcct_ = "";
        return this;
      }
      
      public bool HasMainAcctType {
        get { return result.hasMainAcctType; }
      }
      [global::System.CLSCompliant(false)]
      public uint MainAcctType {
        get { return result.MainAcctType; }
        set { SetMainAcctType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMainAcctType(uint value) {
        PrepareBuilder();
        result.hasMainAcctType = true;
        result.mainAcctType_ = value;
        return this;
      }
      public Builder ClearMainAcctType() {
        PrepareBuilder();
        result.hasMainAcctType = false;
        result.mainAcctType_ = 0;
        return this;
      }
      
      public bool HasSafeDeviceList {
       get { return result.hasSafeDeviceList; }
      }
      public global::mm.command.SafeDevice SafeDeviceList {
        get { return result.SafeDeviceList; }
        set { SetSafeDeviceList(value); }
      }
      public Builder SetSafeDeviceList(global::mm.command.SafeDevice value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSafeDeviceList = true;
        result.safeDeviceList_ = value;
        return this;
      }
      public Builder SetSafeDeviceList(global::mm.command.SafeDevice.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSafeDeviceList = true;
        result.safeDeviceList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSafeDeviceList(global::mm.command.SafeDevice value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSafeDeviceList &&
            result.safeDeviceList_ != global::mm.command.SafeDevice.DefaultInstance) {
            result.safeDeviceList_ = global::mm.command.SafeDevice.CreateBuilder(result.safeDeviceList_).MergeFrom(value).BuildPartial();
        } else {
          result.safeDeviceList_ = value;
        }
        result.hasSafeDeviceList = true;
        return this;
      }
      public Builder ClearSafeDeviceList() {
        PrepareBuilder();
        result.hasSafeDeviceList = false;
        result.safeDeviceList_ = null;
        return this;
      }
      
      public bool HasPureMobile {
        get { return result.hasPureMobile; }
      }
      public string PureMobile {
        get { return result.PureMobile; }
        set { SetPureMobile(value); }
      }
      public Builder SetPureMobile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPureMobile = true;
        result.pureMobile_ = value;
        return this;
      }
      public Builder ClearPureMobile() {
        PrepareBuilder();
        result.hasPureMobile = false;
        result.pureMobile_ = "";
        return this;
      }
      
      public bool HasFormatedMobile {
        get { return result.hasFormatedMobile; }
      }
      public string FormatedMobile {
        get { return result.FormatedMobile; }
        set { SetFormatedMobile(value); }
      }
      public Builder SetFormatedMobile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFormatedMobile = true;
        result.formatedMobile_ = value;
        return this;
      }
      public Builder ClearFormatedMobile() {
        PrepareBuilder();
        result.hasFormatedMobile = false;
        result.formatedMobile_ = "";
        return this;
      }
      
      public bool HasShowStyle {
       get { return result.hasShowStyle; }
      }
      public global::mm.command.ShowStyleKey ShowStyle {
        get { return result.ShowStyle; }
        set { SetShowStyle(value); }
      }
      public Builder SetShowStyle(global::mm.command.ShowStyleKey value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasShowStyle = true;
        result.showStyle_ = value;
        return this;
      }
      public Builder SetShowStyle(global::mm.command.ShowStyleKey.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasShowStyle = true;
        result.showStyle_ = builderForValue.Build();
        return this;
      }
      public Builder MergeShowStyle(global::mm.command.ShowStyleKey value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasShowStyle &&
            result.showStyle_ != global::mm.command.ShowStyleKey.DefaultInstance) {
            result.showStyle_ = global::mm.command.ShowStyleKey.CreateBuilder(result.showStyle_).MergeFrom(value).BuildPartial();
        } else {
          result.showStyle_ = value;
        }
        result.hasShowStyle = true;
        return this;
      }
      public Builder ClearShowStyle() {
        PrepareBuilder();
        result.hasShowStyle = false;
        result.showStyle_ = null;
        return this;
      }
      
      public bool HasMmtlsControlBitFlag {
        get { return result.hasMmtlsControlBitFlag; }
      }
      [global::System.CLSCompliant(false)]
      public uint MmtlsControlBitFlag {
        get { return result.MmtlsControlBitFlag; }
        set { SetMmtlsControlBitFlag(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMmtlsControlBitFlag(uint value) {
        PrepareBuilder();
        result.hasMmtlsControlBitFlag = true;
        result.mmtlsControlBitFlag_ = value;
        return this;
      }
      public Builder ClearMmtlsControlBitFlag() {
        PrepareBuilder();
        result.hasMmtlsControlBitFlag = false;
        result.mmtlsControlBitFlag_ = 0;
        return this;
      }
      
      public bool HasSmsUpCode {
        get { return result.hasSmsUpCode; }
      }
      public string SmsUpCode {
        get { return result.SmsUpCode; }
        set { SetSmsUpCode(value); }
      }
      public Builder SetSmsUpCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSmsUpCode = true;
        result.smsUpCode_ = value;
        return this;
      }
      public Builder ClearSmsUpCode() {
        PrepareBuilder();
        result.hasSmsUpCode = false;
        result.smsUpCode_ = "";
        return this;
      }
      
      public bool HasSmsUpMobile {
        get { return result.hasSmsUpMobile; }
      }
      public string SmsUpMobile {
        get { return result.SmsUpMobile; }
        set { SetSmsUpMobile(value); }
      }
      public Builder SetSmsUpMobile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSmsUpMobile = true;
        result.smsUpMobile_ = value;
        return this;
      }
      public Builder ClearSmsUpMobile() {
        PrepareBuilder();
        result.hasSmsUpMobile = false;
        result.smsUpMobile_ = "";
        return this;
      }
      
      public bool HasMobileCheckType {
        get { return result.hasMobileCheckType; }
      }
      [global::System.CLSCompliant(false)]
      public uint MobileCheckType {
        get { return result.MobileCheckType; }
        set { SetMobileCheckType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMobileCheckType(uint value) {
        PrepareBuilder();
        result.hasMobileCheckType = true;
        result.mobileCheckType_ = value;
        return this;
      }
      public Builder ClearMobileCheckType() {
        PrepareBuilder();
        result.hasMobileCheckType = false;
        result.mobileCheckType_ = 0;
        return this;
      }
      
      public bool HasRegSessionID {
        get { return result.hasRegSessionID; }
      }
      public string RegSessionID {
        get { return result.RegSessionID; }
        set { SetRegSessionID(value); }
      }
      public Builder SetRegSessionID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRegSessionID = true;
        result.regSessionID_ = value;
        return this;
      }
      public Builder ClearRegSessionID() {
        PrepareBuilder();
        result.hasRegSessionID = false;
        result.regSessionID_ = "";
        return this;
      }
    }
    static BindopMobileForRegResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewSetPasswdRequest : pb::GeneratedMessage<NewSetPasswdRequest, NewSetPasswdRequest.Builder> {
    private NewSetPasswdRequest() { }
    private static readonly NewSetPasswdRequest defaultInstance = new NewSetPasswdRequest().MakeReadOnly();
    private static readonly string[] _newSetPasswdRequestFieldNames = new string[] { "AutoAuthKey", "Password", "Ticket", "base" };
    private static readonly uint[] _newSetPasswdRequestFieldTags = new uint[] { 34, 18, 26, 10 };
    public static NewSetPasswdRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewSetPasswdRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewSetPasswdRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSetPasswdRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewSetPasswdRequest, NewSetPasswdRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSetPasswdRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int PasswordFieldNumber = 2;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public const int TicketFieldNumber = 3;
    private bool hasTicket;
    private string ticket_ = "";
    public bool HasTicket {
      get { return hasTicket; }
    }
    public string Ticket {
      get { return ticket_; }
    }
    
    public const int AutoAuthKeyFieldNumber = 4;
    private bool hasAutoAuthKey;
    private global::mm.command.SKBuiltinBuffer_t autoAuthKey_;
    public bool HasAutoAuthKey {
      get { return hasAutoAuthKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t AutoAuthKey {
      get { return autoAuthKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasAutoAuthKey) {
          if (!AutoAuthKey.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newSetPasswdRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasPassword) {
        output.WriteString(2, field_names[1], Password);
      }
      if (hasTicket) {
        output.WriteString(3, field_names[2], Ticket);
      }
      if (hasAutoAuthKey) {
        output.WriteMessage(4, field_names[0], AutoAuthKey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Password);
        }
        if (hasTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Ticket);
        }
        if (hasAutoAuthKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, AutoAuthKey);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewSetPasswdRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSetPasswdRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSetPasswdRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSetPasswdRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSetPasswdRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSetPasswdRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewSetPasswdRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewSetPasswdRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewSetPasswdRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSetPasswdRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewSetPasswdRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewSetPasswdRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewSetPasswdRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewSetPasswdRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewSetPasswdRequest result;
      
      private NewSetPasswdRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NewSetPasswdRequest original = result;
          result = new NewSetPasswdRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewSetPasswdRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewSetPasswdRequest.Descriptor; }
      }
      
      public override NewSetPasswdRequest DefaultInstanceForType {
        get { return global::mm.command.NewSetPasswdRequest.DefaultInstance; }
      }
      
      public override NewSetPasswdRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewSetPasswdRequest) {
          return MergeFrom((NewSetPasswdRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewSetPasswdRequest other) {
        if (other == global::mm.command.NewSetPasswdRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        if (other.HasTicket) {
          Ticket = other.Ticket;
        }
        if (other.HasAutoAuthKey) {
          MergeAutoAuthKey(other.AutoAuthKey);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newSetPasswdRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newSetPasswdRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
            case 26: {
              result.hasTicket = input.ReadString(ref result.ticket_);
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasAutoAuthKey) {
                subBuilder.MergeFrom(AutoAuthKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AutoAuthKey = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
      
      public bool HasTicket {
        get { return result.hasTicket; }
      }
      public string Ticket {
        get { return result.Ticket; }
        set { SetTicket(value); }
      }
      public Builder SetTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTicket = true;
        result.ticket_ = value;
        return this;
      }
      public Builder ClearTicket() {
        PrepareBuilder();
        result.hasTicket = false;
        result.ticket_ = "";
        return this;
      }
      
      public bool HasAutoAuthKey {
       get { return result.hasAutoAuthKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t AutoAuthKey {
        get { return result.AutoAuthKey; }
        set { SetAutoAuthKey(value); }
      }
      public Builder SetAutoAuthKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAutoAuthKey = true;
        result.autoAuthKey_ = value;
        return this;
      }
      public Builder SetAutoAuthKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAutoAuthKey = true;
        result.autoAuthKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAutoAuthKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAutoAuthKey &&
            result.autoAuthKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.autoAuthKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.autoAuthKey_).MergeFrom(value).BuildPartial();
        } else {
          result.autoAuthKey_ = value;
        }
        result.hasAutoAuthKey = true;
        return this;
      }
      public Builder ClearAutoAuthKey() {
        PrepareBuilder();
        result.hasAutoAuthKey = false;
        result.autoAuthKey_ = null;
        return this;
      }
    }
    static NewSetPasswdRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewSetPasswdResponse : pb::GeneratedMessage<NewSetPasswdResponse, NewSetPasswdResponse.Builder> {
    private NewSetPasswdResponse() { }
    private static readonly NewSetPasswdResponse defaultInstance = new NewSetPasswdResponse().MakeReadOnly();
    private static readonly string[] _newSetPasswdResponseFieldNames = new string[] { "AutoAuthKey", "base" };
    private static readonly uint[] _newSetPasswdResponseFieldTags = new uint[] { 18, 10 };
    public static NewSetPasswdResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewSetPasswdResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewSetPasswdResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSetPasswdResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewSetPasswdResponse, NewSetPasswdResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewSetPasswdResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int AutoAuthKeyFieldNumber = 2;
    private bool hasAutoAuthKey;
    private global::mm.command.SKBuiltinBuffer_t autoAuthKey_;
    public bool HasAutoAuthKey {
      get { return hasAutoAuthKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t AutoAuthKey {
      get { return autoAuthKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasAutoAuthKey) {
          if (!AutoAuthKey.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newSetPasswdResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[1], Base);
      }
      if (hasAutoAuthKey) {
        output.WriteMessage(2, field_names[0], AutoAuthKey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasAutoAuthKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, AutoAuthKey);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewSetPasswdResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSetPasswdResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSetPasswdResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewSetPasswdResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewSetPasswdResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSetPasswdResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewSetPasswdResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewSetPasswdResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewSetPasswdResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewSetPasswdResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewSetPasswdResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewSetPasswdResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewSetPasswdResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewSetPasswdResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewSetPasswdResponse result;
      
      private NewSetPasswdResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NewSetPasswdResponse original = result;
          result = new NewSetPasswdResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewSetPasswdResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewSetPasswdResponse.Descriptor; }
      }
      
      public override NewSetPasswdResponse DefaultInstanceForType {
        get { return global::mm.command.NewSetPasswdResponse.DefaultInstance; }
      }
      
      public override NewSetPasswdResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewSetPasswdResponse) {
          return MergeFrom((NewSetPasswdResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewSetPasswdResponse other) {
        if (other == global::mm.command.NewSetPasswdResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasAutoAuthKey) {
          MergeAutoAuthKey(other.AutoAuthKey);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newSetPasswdResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newSetPasswdResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasAutoAuthKey) {
                subBuilder.MergeFrom(AutoAuthKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AutoAuthKey = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasAutoAuthKey {
       get { return result.hasAutoAuthKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t AutoAuthKey {
        get { return result.AutoAuthKey; }
        set { SetAutoAuthKey(value); }
      }
      public Builder SetAutoAuthKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAutoAuthKey = true;
        result.autoAuthKey_ = value;
        return this;
      }
      public Builder SetAutoAuthKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAutoAuthKey = true;
        result.autoAuthKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAutoAuthKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAutoAuthKey &&
            result.autoAuthKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.autoAuthKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.autoAuthKey_).MergeFrom(value).BuildPartial();
        } else {
          result.autoAuthKey_ = value;
        }
        result.hasAutoAuthKey = true;
        return this;
      }
      public Builder ClearAutoAuthKey() {
        PrepareBuilder();
        result.hasAutoAuthKey = false;
        result.autoAuthKey_ = null;
        return this;
      }
    }
    static NewSetPasswdResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewVerifyPasswdRequest : pb::GeneratedMessage<NewVerifyPasswdRequest, NewVerifyPasswdRequest.Builder> {
    private NewVerifyPasswdRequest() { }
    private static readonly NewVerifyPasswdRequest defaultInstance = new NewVerifyPasswdRequest().MakeReadOnly();
    private static readonly string[] _newVerifyPasswdRequestFieldNames = new string[] { "ImgCode", "ImgEncryptKey", "ImgSid", "KSid", "OpCode", "Pwd1", "Pwd2", "base" };
    private static readonly uint[] _newVerifyPasswdRequestFieldTags = new uint[] { 50, 58, 42, 66, 16, 26, 34, 10 };
    public static NewVerifyPasswdRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewVerifyPasswdRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewVerifyPasswdRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewVerifyPasswdRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewVerifyPasswdRequest, NewVerifyPasswdRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewVerifyPasswdRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int OpCodeFieldNumber = 2;
    private bool hasOpCode;
    private int opCode_;
    public bool HasOpCode {
      get { return hasOpCode; }
    }
    public int OpCode {
      get { return opCode_; }
    }
    
    public const int Pwd1FieldNumber = 3;
    private bool hasPwd1;
    private string pwd1_ = "";
    public bool HasPwd1 {
      get { return hasPwd1; }
    }
    public string Pwd1 {
      get { return pwd1_; }
    }
    
    public const int Pwd2FieldNumber = 4;
    private bool hasPwd2;
    private string pwd2_ = "";
    public bool HasPwd2 {
      get { return hasPwd2; }
    }
    public string Pwd2 {
      get { return pwd2_; }
    }
    
    public const int ImgSidFieldNumber = 5;
    private bool hasImgSid;
    private global::mm.command.SKBuiltinString_t imgSid_;
    public bool HasImgSid {
      get { return hasImgSid; }
    }
    public global::mm.command.SKBuiltinString_t ImgSid {
      get { return imgSid_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int ImgCodeFieldNumber = 6;
    private bool hasImgCode;
    private global::mm.command.SKBuiltinString_t imgCode_;
    public bool HasImgCode {
      get { return hasImgCode; }
    }
    public global::mm.command.SKBuiltinString_t ImgCode {
      get { return imgCode_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int ImgEncryptKeyFieldNumber = 7;
    private bool hasImgEncryptKey;
    private global::mm.command.SKBuiltinString_t imgEncryptKey_;
    public bool HasImgEncryptKey {
      get { return hasImgEncryptKey; }
    }
    public global::mm.command.SKBuiltinString_t ImgEncryptKey {
      get { return imgEncryptKey_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int KSidFieldNumber = 8;
    private bool hasKSid;
    private global::mm.command.SKBuiltinBuffer_t kSid_;
    public bool HasKSid {
      get { return hasKSid; }
    }
    public global::mm.command.SKBuiltinBuffer_t KSid {
      get { return kSid_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasOpCode) return false;
        if (!Base.IsInitialized) return false;
        if (HasKSid) {
          if (!KSid.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newVerifyPasswdRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[7], Base);
      }
      if (hasOpCode) {
        output.WriteInt32(2, field_names[4], OpCode);
      }
      if (hasPwd1) {
        output.WriteString(3, field_names[5], Pwd1);
      }
      if (hasPwd2) {
        output.WriteString(4, field_names[6], Pwd2);
      }
      if (hasImgSid) {
        output.WriteMessage(5, field_names[2], ImgSid);
      }
      if (hasImgCode) {
        output.WriteMessage(6, field_names[0], ImgCode);
      }
      if (hasImgEncryptKey) {
        output.WriteMessage(7, field_names[1], ImgEncryptKey);
      }
      if (hasKSid) {
        output.WriteMessage(8, field_names[3], KSid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasOpCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, OpCode);
        }
        if (hasPwd1) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Pwd1);
        }
        if (hasPwd2) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Pwd2);
        }
        if (hasImgSid) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ImgSid);
        }
        if (hasImgCode) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, ImgCode);
        }
        if (hasImgEncryptKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, ImgEncryptKey);
        }
        if (hasKSid) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, KSid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewVerifyPasswdRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewVerifyPasswdRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewVerifyPasswdRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewVerifyPasswdRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewVerifyPasswdRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewVerifyPasswdRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewVerifyPasswdRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewVerifyPasswdRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewVerifyPasswdRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewVerifyPasswdRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewVerifyPasswdRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewVerifyPasswdRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewVerifyPasswdRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewVerifyPasswdRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewVerifyPasswdRequest result;
      
      private NewVerifyPasswdRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NewVerifyPasswdRequest original = result;
          result = new NewVerifyPasswdRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewVerifyPasswdRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewVerifyPasswdRequest.Descriptor; }
      }
      
      public override NewVerifyPasswdRequest DefaultInstanceForType {
        get { return global::mm.command.NewVerifyPasswdRequest.DefaultInstance; }
      }
      
      public override NewVerifyPasswdRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewVerifyPasswdRequest) {
          return MergeFrom((NewVerifyPasswdRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewVerifyPasswdRequest other) {
        if (other == global::mm.command.NewVerifyPasswdRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasOpCode) {
          OpCode = other.OpCode;
        }
        if (other.HasPwd1) {
          Pwd1 = other.Pwd1;
        }
        if (other.HasPwd2) {
          Pwd2 = other.Pwd2;
        }
        if (other.HasImgSid) {
          MergeImgSid(other.ImgSid);
        }
        if (other.HasImgCode) {
          MergeImgCode(other.ImgCode);
        }
        if (other.HasImgEncryptKey) {
          MergeImgEncryptKey(other.ImgEncryptKey);
        }
        if (other.HasKSid) {
          MergeKSid(other.KSid);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newVerifyPasswdRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newVerifyPasswdRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOpCode = input.ReadInt32(ref result.opCode_);
              break;
            }
            case 26: {
              result.hasPwd1 = input.ReadString(ref result.pwd1_);
              break;
            }
            case 34: {
              result.hasPwd2 = input.ReadString(ref result.pwd2_);
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgSid) {
                subBuilder.MergeFrom(ImgSid);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgSid = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgCode) {
                subBuilder.MergeFrom(ImgCode);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgCode = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgEncryptKey) {
                subBuilder.MergeFrom(ImgEncryptKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgEncryptKey = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasKSid) {
                subBuilder.MergeFrom(KSid);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KSid = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasOpCode {
        get { return result.hasOpCode; }
      }
      public int OpCode {
        get { return result.OpCode; }
        set { SetOpCode(value); }
      }
      public Builder SetOpCode(int value) {
        PrepareBuilder();
        result.hasOpCode = true;
        result.opCode_ = value;
        return this;
      }
      public Builder ClearOpCode() {
        PrepareBuilder();
        result.hasOpCode = false;
        result.opCode_ = 0;
        return this;
      }
      
      public bool HasPwd1 {
        get { return result.hasPwd1; }
      }
      public string Pwd1 {
        get { return result.Pwd1; }
        set { SetPwd1(value); }
      }
      public Builder SetPwd1(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPwd1 = true;
        result.pwd1_ = value;
        return this;
      }
      public Builder ClearPwd1() {
        PrepareBuilder();
        result.hasPwd1 = false;
        result.pwd1_ = "";
        return this;
      }
      
      public bool HasPwd2 {
        get { return result.hasPwd2; }
      }
      public string Pwd2 {
        get { return result.Pwd2; }
        set { SetPwd2(value); }
      }
      public Builder SetPwd2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPwd2 = true;
        result.pwd2_ = value;
        return this;
      }
      public Builder ClearPwd2() {
        PrepareBuilder();
        result.hasPwd2 = false;
        result.pwd2_ = "";
        return this;
      }
      
      public bool HasImgSid {
       get { return result.hasImgSid; }
      }
      public global::mm.command.SKBuiltinString_t ImgSid {
        get { return result.ImgSid; }
        set { SetImgSid(value); }
      }
      public Builder SetImgSid(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgSid = true;
        result.imgSid_ = value;
        return this;
      }
      public Builder SetImgSid(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgSid = true;
        result.imgSid_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgSid(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgSid &&
            result.imgSid_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgSid_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgSid_).MergeFrom(value).BuildPartial();
        } else {
          result.imgSid_ = value;
        }
        result.hasImgSid = true;
        return this;
      }
      public Builder ClearImgSid() {
        PrepareBuilder();
        result.hasImgSid = false;
        result.imgSid_ = null;
        return this;
      }
      
      public bool HasImgCode {
       get { return result.hasImgCode; }
      }
      public global::mm.command.SKBuiltinString_t ImgCode {
        get { return result.ImgCode; }
        set { SetImgCode(value); }
      }
      public Builder SetImgCode(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgCode = true;
        result.imgCode_ = value;
        return this;
      }
      public Builder SetImgCode(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgCode = true;
        result.imgCode_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgCode(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgCode &&
            result.imgCode_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgCode_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgCode_).MergeFrom(value).BuildPartial();
        } else {
          result.imgCode_ = value;
        }
        result.hasImgCode = true;
        return this;
      }
      public Builder ClearImgCode() {
        PrepareBuilder();
        result.hasImgCode = false;
        result.imgCode_ = null;
        return this;
      }
      
      public bool HasImgEncryptKey {
       get { return result.hasImgEncryptKey; }
      }
      public global::mm.command.SKBuiltinString_t ImgEncryptKey {
        get { return result.ImgEncryptKey; }
        set { SetImgEncryptKey(value); }
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = value;
        return this;
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgEncryptKey &&
            result.imgEncryptKey_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgEncryptKey_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgEncryptKey_).MergeFrom(value).BuildPartial();
        } else {
          result.imgEncryptKey_ = value;
        }
        result.hasImgEncryptKey = true;
        return this;
      }
      public Builder ClearImgEncryptKey() {
        PrepareBuilder();
        result.hasImgEncryptKey = false;
        result.imgEncryptKey_ = null;
        return this;
      }
      
      public bool HasKSid {
       get { return result.hasKSid; }
      }
      public global::mm.command.SKBuiltinBuffer_t KSid {
        get { return result.KSid; }
        set { SetKSid(value); }
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = value;
        return this;
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKSid &&
            result.kSid_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.kSid_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.kSid_).MergeFrom(value).BuildPartial();
        } else {
          result.kSid_ = value;
        }
        result.hasKSid = true;
        return this;
      }
      public Builder ClearKSid() {
        PrepareBuilder();
        result.hasKSid = false;
        result.kSid_ = null;
        return this;
      }
    }
    static NewVerifyPasswdRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewVerifyPasswdResponse : pb::GeneratedMessage<NewVerifyPasswdResponse, NewVerifyPasswdResponse.Builder> {
    private NewVerifyPasswdResponse() { }
    private static readonly NewVerifyPasswdResponse defaultInstance = new NewVerifyPasswdResponse().MakeReadOnly();
    private static readonly string[] _newVerifyPasswdResponseFieldNames = new string[] { "A2Key", "ImgBuf", "ImgEncryptKey", "ImgSid", "KSid", "Ticket", "base" };
    private static readonly uint[] _newVerifyPasswdResponseFieldTags = new uint[] { 50, 26, 42, 18, 58, 34, 10 };
    public static NewVerifyPasswdResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewVerifyPasswdResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewVerifyPasswdResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewVerifyPasswdResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewVerifyPasswdResponse, NewVerifyPasswdResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewVerifyPasswdResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int ImgSidFieldNumber = 2;
    private bool hasImgSid;
    private global::mm.command.SKBuiltinString_t imgSid_;
    public bool HasImgSid {
      get { return hasImgSid; }
    }
    public global::mm.command.SKBuiltinString_t ImgSid {
      get { return imgSid_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int ImgBufFieldNumber = 3;
    private bool hasImgBuf;
    private global::mm.command.SKBuiltinBuffer_t imgBuf_;
    public bool HasImgBuf {
      get { return hasImgBuf; }
    }
    public global::mm.command.SKBuiltinBuffer_t ImgBuf {
      get { return imgBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int TicketFieldNumber = 4;
    private bool hasTicket;
    private string ticket_ = "";
    public bool HasTicket {
      get { return hasTicket; }
    }
    public string Ticket {
      get { return ticket_; }
    }
    
    public const int ImgEncryptKeyFieldNumber = 5;
    private bool hasImgEncryptKey;
    private global::mm.command.SKBuiltinString_t imgEncryptKey_;
    public bool HasImgEncryptKey {
      get { return hasImgEncryptKey; }
    }
    public global::mm.command.SKBuiltinString_t ImgEncryptKey {
      get { return imgEncryptKey_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int A2KeyFieldNumber = 6;
    private bool hasA2Key;
    private global::mm.command.SKBuiltinBuffer_t a2Key_;
    public bool HasA2Key {
      get { return hasA2Key; }
    }
    public global::mm.command.SKBuiltinBuffer_t A2Key {
      get { return a2Key_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int KSidFieldNumber = 7;
    private bool hasKSid;
    private global::mm.command.SKBuiltinBuffer_t kSid_;
    public bool HasKSid {
      get { return hasKSid; }
    }
    public global::mm.command.SKBuiltinBuffer_t KSid {
      get { return kSid_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasImgSid) return false;
        if (!hasImgBuf) return false;
        if (!Base.IsInitialized) return false;
        if (!ImgBuf.IsInitialized) return false;
        if (HasA2Key) {
          if (!A2Key.IsInitialized) return false;
        }
        if (HasKSid) {
          if (!KSid.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newVerifyPasswdResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[6], Base);
      }
      if (hasImgSid) {
        output.WriteMessage(2, field_names[3], ImgSid);
      }
      if (hasImgBuf) {
        output.WriteMessage(3, field_names[1], ImgBuf);
      }
      if (hasTicket) {
        output.WriteString(4, field_names[5], Ticket);
      }
      if (hasImgEncryptKey) {
        output.WriteMessage(5, field_names[2], ImgEncryptKey);
      }
      if (hasA2Key) {
        output.WriteMessage(6, field_names[0], A2Key);
      }
      if (hasKSid) {
        output.WriteMessage(7, field_names[4], KSid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasImgSid) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ImgSid);
        }
        if (hasImgBuf) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ImgBuf);
        }
        if (hasTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Ticket);
        }
        if (hasImgEncryptKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ImgEncryptKey);
        }
        if (hasA2Key) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, A2Key);
        }
        if (hasKSid) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, KSid);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewVerifyPasswdResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewVerifyPasswdResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewVerifyPasswdResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewVerifyPasswdResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewVerifyPasswdResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewVerifyPasswdResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewVerifyPasswdResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewVerifyPasswdResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewVerifyPasswdResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewVerifyPasswdResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewVerifyPasswdResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewVerifyPasswdResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewVerifyPasswdResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewVerifyPasswdResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewVerifyPasswdResponse result;
      
      private NewVerifyPasswdResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NewVerifyPasswdResponse original = result;
          result = new NewVerifyPasswdResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewVerifyPasswdResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewVerifyPasswdResponse.Descriptor; }
      }
      
      public override NewVerifyPasswdResponse DefaultInstanceForType {
        get { return global::mm.command.NewVerifyPasswdResponse.DefaultInstance; }
      }
      
      public override NewVerifyPasswdResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewVerifyPasswdResponse) {
          return MergeFrom((NewVerifyPasswdResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewVerifyPasswdResponse other) {
        if (other == global::mm.command.NewVerifyPasswdResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasImgSid) {
          MergeImgSid(other.ImgSid);
        }
        if (other.HasImgBuf) {
          MergeImgBuf(other.ImgBuf);
        }
        if (other.HasTicket) {
          Ticket = other.Ticket;
        }
        if (other.HasImgEncryptKey) {
          MergeImgEncryptKey(other.ImgEncryptKey);
        }
        if (other.HasA2Key) {
          MergeA2Key(other.A2Key);
        }
        if (other.HasKSid) {
          MergeKSid(other.KSid);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newVerifyPasswdResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newVerifyPasswdResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgSid) {
                subBuilder.MergeFrom(ImgSid);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgSid = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasImgBuf) {
                subBuilder.MergeFrom(ImgBuf);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgBuf = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              result.hasTicket = input.ReadString(ref result.ticket_);
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgEncryptKey) {
                subBuilder.MergeFrom(ImgEncryptKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgEncryptKey = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasA2Key) {
                subBuilder.MergeFrom(A2Key);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              A2Key = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasKSid) {
                subBuilder.MergeFrom(KSid);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KSid = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasImgSid {
       get { return result.hasImgSid; }
      }
      public global::mm.command.SKBuiltinString_t ImgSid {
        get { return result.ImgSid; }
        set { SetImgSid(value); }
      }
      public Builder SetImgSid(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgSid = true;
        result.imgSid_ = value;
        return this;
      }
      public Builder SetImgSid(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgSid = true;
        result.imgSid_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgSid(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgSid &&
            result.imgSid_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgSid_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgSid_).MergeFrom(value).BuildPartial();
        } else {
          result.imgSid_ = value;
        }
        result.hasImgSid = true;
        return this;
      }
      public Builder ClearImgSid() {
        PrepareBuilder();
        result.hasImgSid = false;
        result.imgSid_ = null;
        return this;
      }
      
      public bool HasImgBuf {
       get { return result.hasImgBuf; }
      }
      public global::mm.command.SKBuiltinBuffer_t ImgBuf {
        get { return result.ImgBuf; }
        set { SetImgBuf(value); }
      }
      public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgBuf = true;
        result.imgBuf_ = value;
        return this;
      }
      public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgBuf = true;
        result.imgBuf_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgBuf &&
            result.imgBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.imgBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.imgBuf_).MergeFrom(value).BuildPartial();
        } else {
          result.imgBuf_ = value;
        }
        result.hasImgBuf = true;
        return this;
      }
      public Builder ClearImgBuf() {
        PrepareBuilder();
        result.hasImgBuf = false;
        result.imgBuf_ = null;
        return this;
      }
      
      public bool HasTicket {
        get { return result.hasTicket; }
      }
      public string Ticket {
        get { return result.Ticket; }
        set { SetTicket(value); }
      }
      public Builder SetTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTicket = true;
        result.ticket_ = value;
        return this;
      }
      public Builder ClearTicket() {
        PrepareBuilder();
        result.hasTicket = false;
        result.ticket_ = "";
        return this;
      }
      
      public bool HasImgEncryptKey {
       get { return result.hasImgEncryptKey; }
      }
      public global::mm.command.SKBuiltinString_t ImgEncryptKey {
        get { return result.ImgEncryptKey; }
        set { SetImgEncryptKey(value); }
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = value;
        return this;
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgEncryptKey &&
            result.imgEncryptKey_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgEncryptKey_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgEncryptKey_).MergeFrom(value).BuildPartial();
        } else {
          result.imgEncryptKey_ = value;
        }
        result.hasImgEncryptKey = true;
        return this;
      }
      public Builder ClearImgEncryptKey() {
        PrepareBuilder();
        result.hasImgEncryptKey = false;
        result.imgEncryptKey_ = null;
        return this;
      }
      
      public bool HasA2Key {
       get { return result.hasA2Key; }
      }
      public global::mm.command.SKBuiltinBuffer_t A2Key {
        get { return result.A2Key; }
        set { SetA2Key(value); }
      }
      public Builder SetA2Key(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasA2Key = true;
        result.a2Key_ = value;
        return this;
      }
      public Builder SetA2Key(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasA2Key = true;
        result.a2Key_ = builderForValue.Build();
        return this;
      }
      public Builder MergeA2Key(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasA2Key &&
            result.a2Key_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.a2Key_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.a2Key_).MergeFrom(value).BuildPartial();
        } else {
          result.a2Key_ = value;
        }
        result.hasA2Key = true;
        return this;
      }
      public Builder ClearA2Key() {
        PrepareBuilder();
        result.hasA2Key = false;
        result.a2Key_ = null;
        return this;
      }
      
      public bool HasKSid {
       get { return result.hasKSid; }
      }
      public global::mm.command.SKBuiltinBuffer_t KSid {
        get { return result.KSid; }
        set { SetKSid(value); }
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = value;
        return this;
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKSid &&
            result.kSid_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.kSid_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.kSid_).MergeFrom(value).BuildPartial();
        } else {
          result.kSid_ = value;
        }
        result.hasKSid = true;
        return this;
      }
      public Builder ClearKSid() {
        PrepareBuilder();
        result.hasKSid = false;
        result.kSid_ = null;
        return this;
      }
    }
    static NewVerifyPasswdResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BindEmailRequest : pb::GeneratedMessage<BindEmailRequest, BindEmailRequest.Builder> {
    private BindEmailRequest() { }
    private static readonly BindEmailRequest defaultInstance = new BindEmailRequest().MakeReadOnly();
    private static readonly string[] _bindEmailRequestFieldNames = new string[] { "Email", "OpCode", "base" };
    private static readonly uint[] _bindEmailRequestFieldTags = new uint[] { 26, 16, 10 };
    public static BindEmailRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindEmailRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BindEmailRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindEmailRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindEmailRequest, BindEmailRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindEmailRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int OpCodeFieldNumber = 2;
    private bool hasOpCode;
    private int opCode_;
    public bool HasOpCode {
      get { return hasOpCode; }
    }
    public int OpCode {
      get { return opCode_; }
    }
    
    public const int EmailFieldNumber = 3;
    private bool hasEmail;
    private string email_ = "";
    public bool HasEmail {
      get { return hasEmail; }
    }
    public string Email {
      get { return email_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasOpCode) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bindEmailRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasOpCode) {
        output.WriteInt32(2, field_names[1], OpCode);
      }
      if (hasEmail) {
        output.WriteString(3, field_names[0], Email);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasOpCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, OpCode);
        }
        if (hasEmail) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Email);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindEmailRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindEmailRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindEmailRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindEmailRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindEmailRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindEmailRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindEmailRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindEmailRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindEmailRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindEmailRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BindEmailRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindEmailRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BindEmailRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BindEmailRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BindEmailRequest result;
      
      private BindEmailRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          BindEmailRequest original = result;
          result = new BindEmailRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BindEmailRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.BindEmailRequest.Descriptor; }
      }
      
      public override BindEmailRequest DefaultInstanceForType {
        get { return global::mm.command.BindEmailRequest.DefaultInstance; }
      }
      
      public override BindEmailRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindEmailRequest) {
          return MergeFrom((BindEmailRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindEmailRequest other) {
        if (other == global::mm.command.BindEmailRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasOpCode) {
          OpCode = other.OpCode;
        }
        if (other.HasEmail) {
          Email = other.Email;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bindEmailRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bindEmailRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOpCode = input.ReadInt32(ref result.opCode_);
              break;
            }
            case 26: {
              result.hasEmail = input.ReadString(ref result.email_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasOpCode {
        get { return result.hasOpCode; }
      }
      public int OpCode {
        get { return result.OpCode; }
        set { SetOpCode(value); }
      }
      public Builder SetOpCode(int value) {
        PrepareBuilder();
        result.hasOpCode = true;
        result.opCode_ = value;
        return this;
      }
      public Builder ClearOpCode() {
        PrepareBuilder();
        result.hasOpCode = false;
        result.opCode_ = 0;
        return this;
      }
      
      public bool HasEmail {
        get { return result.hasEmail; }
      }
      public string Email {
        get { return result.Email; }
        set { SetEmail(value); }
      }
      public Builder SetEmail(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEmail = true;
        result.email_ = value;
        return this;
      }
      public Builder ClearEmail() {
        PrepareBuilder();
        result.hasEmail = false;
        result.email_ = "";
        return this;
      }
    }
    static BindEmailRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BindEmailResponse : pb::GeneratedMessage<BindEmailResponse, BindEmailResponse.Builder> {
    private BindEmailResponse() { }
    private static readonly BindEmailResponse defaultInstance = new BindEmailResponse().MakeReadOnly();
    private static readonly string[] _bindEmailResponseFieldNames = new string[] { "base" };
    private static readonly uint[] _bindEmailResponseFieldTags = new uint[] { 10 };
    public static BindEmailResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindEmailResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BindEmailResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindEmailResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindEmailResponse, BindEmailResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindEmailResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bindEmailResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindEmailResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindEmailResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindEmailResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindEmailResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindEmailResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindEmailResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindEmailResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindEmailResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindEmailResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindEmailResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BindEmailResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindEmailResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BindEmailResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BindEmailResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BindEmailResponse result;
      
      private BindEmailResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          BindEmailResponse original = result;
          result = new BindEmailResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BindEmailResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.BindEmailResponse.Descriptor; }
      }
      
      public override BindEmailResponse DefaultInstanceForType {
        get { return global::mm.command.BindEmailResponse.DefaultInstance; }
      }
      
      public override BindEmailResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindEmailResponse) {
          return MergeFrom((BindEmailResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindEmailResponse other) {
        if (other == global::mm.command.BindEmailResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bindEmailResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bindEmailResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
    }
    static BindEmailResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CheckUnbindRequest : pb::GeneratedMessage<CheckUnbindRequest, CheckUnbindRequest.Builder> {
    private CheckUnbindRequest() { }
    private static readonly CheckUnbindRequest defaultInstance = new CheckUnbindRequest().MakeReadOnly();
    private static readonly string[] _checkUnbindRequestFieldNames = new string[] { "BindType", "base" };
    private static readonly uint[] _checkUnbindRequestFieldTags = new uint[] { 16, 10 };
    public static CheckUnbindRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CheckUnbindRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CheckUnbindRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CheckUnbindRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CheckUnbindRequest, CheckUnbindRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CheckUnbindRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int BindTypeFieldNumber = 2;
    private bool hasBindType;
    private int bindType_;
    public bool HasBindType {
      get { return hasBindType; }
    }
    public int BindType {
      get { return bindType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasBindType) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _checkUnbindRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[1], Base);
      }
      if (hasBindType) {
        output.WriteInt32(2, field_names[0], BindType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasBindType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, BindType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CheckUnbindRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheckUnbindRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheckUnbindRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheckUnbindRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheckUnbindRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheckUnbindRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CheckUnbindRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CheckUnbindRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CheckUnbindRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheckUnbindRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CheckUnbindRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CheckUnbindRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CheckUnbindRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CheckUnbindRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CheckUnbindRequest result;
      
      private CheckUnbindRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CheckUnbindRequest original = result;
          result = new CheckUnbindRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CheckUnbindRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.CheckUnbindRequest.Descriptor; }
      }
      
      public override CheckUnbindRequest DefaultInstanceForType {
        get { return global::mm.command.CheckUnbindRequest.DefaultInstance; }
      }
      
      public override CheckUnbindRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CheckUnbindRequest) {
          return MergeFrom((CheckUnbindRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CheckUnbindRequest other) {
        if (other == global::mm.command.CheckUnbindRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasBindType) {
          BindType = other.BindType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_checkUnbindRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _checkUnbindRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasBindType = input.ReadInt32(ref result.bindType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasBindType {
        get { return result.hasBindType; }
      }
      public int BindType {
        get { return result.BindType; }
        set { SetBindType(value); }
      }
      public Builder SetBindType(int value) {
        PrepareBuilder();
        result.hasBindType = true;
        result.bindType_ = value;
        return this;
      }
      public Builder ClearBindType() {
        PrepareBuilder();
        result.hasBindType = false;
        result.bindType_ = 0;
        return this;
      }
    }
    static CheckUnbindRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CheckUnbindResponse : pb::GeneratedMessage<CheckUnbindResponse, CheckUnbindResponse.Builder> {
    private CheckUnbindResponse() { }
    private static readonly CheckUnbindResponse defaultInstance = new CheckUnbindResponse().MakeReadOnly();
    private static readonly string[] _checkUnbindResponseFieldNames = new string[] { "RandomPasswd", "base" };
    private static readonly uint[] _checkUnbindResponseFieldTags = new uint[] { 18, 10 };
    public static CheckUnbindResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CheckUnbindResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CheckUnbindResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CheckUnbindResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CheckUnbindResponse, CheckUnbindResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CheckUnbindResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int RandomPasswdFieldNumber = 2;
    private bool hasRandomPasswd;
    private string randomPasswd_ = "";
    public bool HasRandomPasswd {
      get { return hasRandomPasswd; }
    }
    public string RandomPasswd {
      get { return randomPasswd_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _checkUnbindResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[1], Base);
      }
      if (hasRandomPasswd) {
        output.WriteString(2, field_names[0], RandomPasswd);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasRandomPasswd) {
          size += pb::CodedOutputStream.ComputeStringSize(2, RandomPasswd);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CheckUnbindResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheckUnbindResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheckUnbindResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheckUnbindResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheckUnbindResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheckUnbindResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CheckUnbindResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CheckUnbindResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CheckUnbindResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheckUnbindResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CheckUnbindResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CheckUnbindResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CheckUnbindResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CheckUnbindResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CheckUnbindResponse result;
      
      private CheckUnbindResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CheckUnbindResponse original = result;
          result = new CheckUnbindResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CheckUnbindResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.CheckUnbindResponse.Descriptor; }
      }
      
      public override CheckUnbindResponse DefaultInstanceForType {
        get { return global::mm.command.CheckUnbindResponse.DefaultInstance; }
      }
      
      public override CheckUnbindResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CheckUnbindResponse) {
          return MergeFrom((CheckUnbindResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CheckUnbindResponse other) {
        if (other == global::mm.command.CheckUnbindResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasRandomPasswd) {
          RandomPasswd = other.RandomPasswd;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_checkUnbindResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _checkUnbindResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasRandomPasswd = input.ReadString(ref result.randomPasswd_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasRandomPasswd {
        get { return result.hasRandomPasswd; }
      }
      public string RandomPasswd {
        get { return result.RandomPasswd; }
        set { SetRandomPasswd(value); }
      }
      public Builder SetRandomPasswd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRandomPasswd = true;
        result.randomPasswd_ = value;
        return this;
      }
      public Builder ClearRandomPasswd() {
        PrepareBuilder();
        result.hasRandomPasswd = false;
        result.randomPasswd_ = "";
        return this;
      }
    }
    static CheckUnbindResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UploadMContact : pb::GeneratedMessage<UploadMContact, UploadMContact.Builder> {
    private UploadMContact() { }
    private static readonly UploadMContact defaultInstance = new UploadMContact().MakeReadOnly();
    private static readonly string[] _uploadMContactFieldNames = new string[] { "Email", "EmailListSize", "Mobile", "MobileListSize", "Mobiles", "Opcode", "UserName", "base" };
    private static readonly uint[] _uploadMContactFieldTags = new uint[] { 66, 56, 34, 40, 50, 24, 18, 10 };
    public static UploadMContact DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UploadMContact DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UploadMContact ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadMContact__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UploadMContact, UploadMContact.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadMContact__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public const int OpcodeFieldNumber = 3;
    private bool hasOpcode;
    private int opcode_;
    public bool HasOpcode {
      get { return hasOpcode; }
    }
    public int Opcode {
      get { return opcode_; }
    }
    
    public const int MobileFieldNumber = 4;
    private bool hasMobile;
    private string mobile_ = "";
    public bool HasMobile {
      get { return hasMobile; }
    }
    public string Mobile {
      get { return mobile_; }
    }
    
    public const int MobileListSizeFieldNumber = 5;
    private bool hasMobileListSize;
    private int mobileListSize_;
    public bool HasMobileListSize {
      get { return hasMobileListSize; }
    }
    public int MobileListSize {
      get { return mobileListSize_; }
    }
    
    public const int MobilesFieldNumber = 6;
    private pbc::PopsicleList<global::mm.command.SKBuiltinString_t> mobiles_ = new pbc::PopsicleList<global::mm.command.SKBuiltinString_t>();
    public scg::IList<global::mm.command.SKBuiltinString_t> MobilesList {
      get { return mobiles_; }
    }
    public int MobilesCount {
      get { return mobiles_.Count; }
    }
    public global::mm.command.SKBuiltinString_t GetMobiles(int index) {
      return mobiles_[index];
    }
    
    public const int EmailListSizeFieldNumber = 7;
    private bool hasEmailListSize;
    private int emailListSize_;
    public bool HasEmailListSize {
      get { return hasEmailListSize; }
    }
    public int EmailListSize {
      get { return emailListSize_; }
    }
    
    public const int EmailFieldNumber = 8;
    private pbc::PopsicleList<global::mm.command.SKBuiltinString_t> email_ = new pbc::PopsicleList<global::mm.command.SKBuiltinString_t>();
    public scg::IList<global::mm.command.SKBuiltinString_t> EmailList {
      get { return email_; }
    }
    public int EmailCount {
      get { return email_.Count; }
    }
    public global::mm.command.SKBuiltinString_t GetEmail(int index) {
      return email_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasOpcode) return false;
        if (!hasMobileListSize) return false;
        if (!hasEmailListSize) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _uploadMContactFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[7], Base);
      }
      if (hasUserName) {
        output.WriteString(2, field_names[6], UserName);
      }
      if (hasOpcode) {
        output.WriteInt32(3, field_names[5], Opcode);
      }
      if (hasMobile) {
        output.WriteString(4, field_names[2], Mobile);
      }
      if (hasMobileListSize) {
        output.WriteInt32(5, field_names[3], MobileListSize);
      }
      if (mobiles_.Count > 0) {
        output.WriteMessageArray(6, field_names[4], mobiles_);
      }
      if (hasEmailListSize) {
        output.WriteInt32(7, field_names[1], EmailListSize);
      }
      if (email_.Count > 0) {
        output.WriteMessageArray(8, field_names[0], email_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserName);
        }
        if (hasOpcode) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Opcode);
        }
        if (hasMobile) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Mobile);
        }
        if (hasMobileListSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, MobileListSize);
        }
        foreach (global::mm.command.SKBuiltinString_t element in MobilesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (hasEmailListSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, EmailListSize);
        }
        foreach (global::mm.command.SKBuiltinString_t element in EmailList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UploadMContact ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadMContact ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadMContact ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadMContact ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadMContact ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadMContact ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UploadMContact ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UploadMContact ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UploadMContact ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadMContact ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UploadMContact MakeReadOnly() {
      mobiles_.MakeReadOnly();
      email_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UploadMContact prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UploadMContact, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UploadMContact cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UploadMContact result;
      
      private UploadMContact PrepareBuilder() {
        if (resultIsReadOnly) {
          UploadMContact original = result;
          result = new UploadMContact();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UploadMContact MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.UploadMContact.Descriptor; }
      }
      
      public override UploadMContact DefaultInstanceForType {
        get { return global::mm.command.UploadMContact.DefaultInstance; }
      }
      
      public override UploadMContact BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UploadMContact) {
          return MergeFrom((UploadMContact) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UploadMContact other) {
        if (other == global::mm.command.UploadMContact.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasOpcode) {
          Opcode = other.Opcode;
        }
        if (other.HasMobile) {
          Mobile = other.Mobile;
        }
        if (other.HasMobileListSize) {
          MobileListSize = other.MobileListSize;
        }
        if (other.mobiles_.Count != 0) {
          result.mobiles_.Add(other.mobiles_);
        }
        if (other.HasEmailListSize) {
          EmailListSize = other.EmailListSize;
        }
        if (other.email_.Count != 0) {
          result.email_.Add(other.email_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_uploadMContactFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _uploadMContactFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 24: {
              result.hasOpcode = input.ReadInt32(ref result.opcode_);
              break;
            }
            case 34: {
              result.hasMobile = input.ReadString(ref result.mobile_);
              break;
            }
            case 40: {
              result.hasMobileListSize = input.ReadInt32(ref result.mobileListSize_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.mobiles_, global::mm.command.SKBuiltinString_t.DefaultInstance, extensionRegistry);
              break;
            }
            case 56: {
              result.hasEmailListSize = input.ReadInt32(ref result.emailListSize_);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.email_, global::mm.command.SKBuiltinString_t.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasOpcode {
        get { return result.hasOpcode; }
      }
      public int Opcode {
        get { return result.Opcode; }
        set { SetOpcode(value); }
      }
      public Builder SetOpcode(int value) {
        PrepareBuilder();
        result.hasOpcode = true;
        result.opcode_ = value;
        return this;
      }
      public Builder ClearOpcode() {
        PrepareBuilder();
        result.hasOpcode = false;
        result.opcode_ = 0;
        return this;
      }
      
      public bool HasMobile {
        get { return result.hasMobile; }
      }
      public string Mobile {
        get { return result.Mobile; }
        set { SetMobile(value); }
      }
      public Builder SetMobile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMobile = true;
        result.mobile_ = value;
        return this;
      }
      public Builder ClearMobile() {
        PrepareBuilder();
        result.hasMobile = false;
        result.mobile_ = "";
        return this;
      }
      
      public bool HasMobileListSize {
        get { return result.hasMobileListSize; }
      }
      public int MobileListSize {
        get { return result.MobileListSize; }
        set { SetMobileListSize(value); }
      }
      public Builder SetMobileListSize(int value) {
        PrepareBuilder();
        result.hasMobileListSize = true;
        result.mobileListSize_ = value;
        return this;
      }
      public Builder ClearMobileListSize() {
        PrepareBuilder();
        result.hasMobileListSize = false;
        result.mobileListSize_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.SKBuiltinString_t> MobilesList {
        get { return PrepareBuilder().mobiles_; }
      }
      public int MobilesCount {
        get { return result.MobilesCount; }
      }
      public global::mm.command.SKBuiltinString_t GetMobiles(int index) {
        return result.GetMobiles(index);
      }
      public Builder SetMobiles(int index, global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mobiles_[index] = value;
        return this;
      }
      public Builder SetMobiles(int index, global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mobiles_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMobiles(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mobiles_.Add(value);
        return this;
      }
      public Builder AddMobiles(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mobiles_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMobiles(scg::IEnumerable<global::mm.command.SKBuiltinString_t> values) {
        PrepareBuilder();
        result.mobiles_.Add(values);
        return this;
      }
      public Builder ClearMobiles() {
        PrepareBuilder();
        result.mobiles_.Clear();
        return this;
      }
      
      public bool HasEmailListSize {
        get { return result.hasEmailListSize; }
      }
      public int EmailListSize {
        get { return result.EmailListSize; }
        set { SetEmailListSize(value); }
      }
      public Builder SetEmailListSize(int value) {
        PrepareBuilder();
        result.hasEmailListSize = true;
        result.emailListSize_ = value;
        return this;
      }
      public Builder ClearEmailListSize() {
        PrepareBuilder();
        result.hasEmailListSize = false;
        result.emailListSize_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.SKBuiltinString_t> EmailList {
        get { return PrepareBuilder().email_; }
      }
      public int EmailCount {
        get { return result.EmailCount; }
      }
      public global::mm.command.SKBuiltinString_t GetEmail(int index) {
        return result.GetEmail(index);
      }
      public Builder SetEmail(int index, global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.email_[index] = value;
        return this;
      }
      public Builder SetEmail(int index, global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.email_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEmail(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.email_.Add(value);
        return this;
      }
      public Builder AddEmail(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.email_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEmail(scg::IEnumerable<global::mm.command.SKBuiltinString_t> values) {
        PrepareBuilder();
        result.email_.Add(values);
        return this;
      }
      public Builder ClearEmail() {
        PrepareBuilder();
        result.email_.Clear();
        return this;
      }
    }
    static UploadMContact() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UploadMContactResponse : pb::GeneratedMessage<UploadMContactResponse, UploadMContactResponse.Builder> {
    private UploadMContactResponse() { }
    private static readonly UploadMContactResponse defaultInstance = new UploadMContactResponse().MakeReadOnly();
    private static readonly string[] _uploadMContactResponseFieldNames = new string[] { "base" };
    private static readonly uint[] _uploadMContactResponseFieldTags = new uint[] { 10 };
    public static UploadMContactResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UploadMContactResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UploadMContactResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadMContactResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UploadMContactResponse, UploadMContactResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadMContactResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _uploadMContactResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UploadMContactResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadMContactResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadMContactResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadMContactResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadMContactResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadMContactResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UploadMContactResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UploadMContactResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UploadMContactResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadMContactResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UploadMContactResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UploadMContactResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UploadMContactResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UploadMContactResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UploadMContactResponse result;
      
      private UploadMContactResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          UploadMContactResponse original = result;
          result = new UploadMContactResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UploadMContactResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.UploadMContactResponse.Descriptor; }
      }
      
      public override UploadMContactResponse DefaultInstanceForType {
        get { return global::mm.command.UploadMContactResponse.DefaultInstance; }
      }
      
      public override UploadMContactResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UploadMContactResponse) {
          return MergeFrom((UploadMContactResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UploadMContactResponse other) {
        if (other == global::mm.command.UploadMContactResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_uploadMContactResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _uploadMContactResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
    }
    static UploadMContactResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetMFriendRequest : pb::GeneratedMessage<GetMFriendRequest, GetMFriendRequest.Builder> {
    private GetMFriendRequest() { }
    private static readonly GetMFriendRequest defaultInstance = new GetMFriendRequest().MakeReadOnly();
    private static readonly string[] _getMFriendRequestFieldNames = new string[] { "MD5", "OpType", "base" };
    private static readonly uint[] _getMFriendRequestFieldTags = new uint[] { 26, 16, 10 };
    public static GetMFriendRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetMFriendRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetMFriendRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetMFriendRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetMFriendRequest, GetMFriendRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetMFriendRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int OpTypeFieldNumber = 2;
    private bool hasOpType;
    private int opType_;
    public bool HasOpType {
      get { return hasOpType; }
    }
    public int OpType {
      get { return opType_; }
    }
    
    public const int MD5FieldNumber = 3;
    private bool hasMD5;
    private string mD5_ = "";
    public bool HasMD5 {
      get { return hasMD5; }
    }
    public string MD5 {
      get { return mD5_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getMFriendRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasOpType) {
        output.WriteInt32(2, field_names[1], OpType);
      }
      if (hasMD5) {
        output.WriteString(3, field_names[0], MD5);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasOpType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, OpType);
        }
        if (hasMD5) {
          size += pb::CodedOutputStream.ComputeStringSize(3, MD5);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetMFriendRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetMFriendRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetMFriendRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetMFriendRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetMFriendRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetMFriendRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetMFriendRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetMFriendRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetMFriendRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetMFriendRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetMFriendRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetMFriendRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetMFriendRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetMFriendRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetMFriendRequest result;
      
      private GetMFriendRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetMFriendRequest original = result;
          result = new GetMFriendRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetMFriendRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetMFriendRequest.Descriptor; }
      }
      
      public override GetMFriendRequest DefaultInstanceForType {
        get { return global::mm.command.GetMFriendRequest.DefaultInstance; }
      }
      
      public override GetMFriendRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetMFriendRequest) {
          return MergeFrom((GetMFriendRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetMFriendRequest other) {
        if (other == global::mm.command.GetMFriendRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasOpType) {
          OpType = other.OpType;
        }
        if (other.HasMD5) {
          MD5 = other.MD5;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getMFriendRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getMFriendRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOpType = input.ReadInt32(ref result.opType_);
              break;
            }
            case 26: {
              result.hasMD5 = input.ReadString(ref result.mD5_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasOpType {
        get { return result.hasOpType; }
      }
      public int OpType {
        get { return result.OpType; }
        set { SetOpType(value); }
      }
      public Builder SetOpType(int value) {
        PrepareBuilder();
        result.hasOpType = true;
        result.opType_ = value;
        return this;
      }
      public Builder ClearOpType() {
        PrepareBuilder();
        result.hasOpType = false;
        result.opType_ = 0;
        return this;
      }
      
      public bool HasMD5 {
        get { return result.hasMD5; }
      }
      public string MD5 {
        get { return result.MD5; }
        set { SetMD5(value); }
      }
      public Builder SetMD5(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMD5 = true;
        result.mD5_ = value;
        return this;
      }
      public Builder ClearMD5() {
        PrepareBuilder();
        result.hasMD5 = false;
        result.mD5_ = "";
        return this;
      }
    }
    static GetMFriendRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetMFriendResponse : pb::GeneratedMessage<GetMFriendResponse, GetMFriendResponse.Builder> {
    private GetMFriendResponse() { }
    private static readonly GetMFriendResponse defaultInstance = new GetMFriendResponse().MakeReadOnly();
    private static readonly string[] _getMFriendResponseFieldNames = new string[] { "Count", "Friend", "MD5", "base" };
    private static readonly uint[] _getMFriendResponseFieldTags = new uint[] { 16, 26, 34, 10 };
    public static GetMFriendResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetMFriendResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetMFriendResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetMFriendResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetMFriendResponse, GetMFriendResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetMFriendResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int CountFieldNumber = 2;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public const int FriendFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.FriendObj> friend_ = new pbc::PopsicleList<global::mm.command.FriendObj>();
    public scg::IList<global::mm.command.FriendObj> FriendList {
      get { return friend_; }
    }
    public int FriendCount {
      get { return friend_.Count; }
    }
    public global::mm.command.FriendObj GetFriend(int index) {
      return friend_[index];
    }
    
    public const int MD5FieldNumber = 4;
    private bool hasMD5;
    private string mD5_ = "";
    public bool HasMD5 {
      get { return hasMD5; }
    }
    public string MD5 {
      get { return mD5_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.FriendObj element in FriendList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getMFriendResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasCount) {
        output.WriteInt32(2, field_names[0], Count);
      }
      if (friend_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], friend_);
      }
      if (hasMD5) {
        output.WriteString(4, field_names[2], MD5);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
        }
        foreach (global::mm.command.FriendObj element in FriendList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasMD5) {
          size += pb::CodedOutputStream.ComputeStringSize(4, MD5);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetMFriendResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetMFriendResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetMFriendResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetMFriendResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetMFriendResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetMFriendResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetMFriendResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetMFriendResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetMFriendResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetMFriendResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetMFriendResponse MakeReadOnly() {
      friend_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetMFriendResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetMFriendResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetMFriendResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetMFriendResponse result;
      
      private GetMFriendResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetMFriendResponse original = result;
          result = new GetMFriendResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetMFriendResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetMFriendResponse.Descriptor; }
      }
      
      public override GetMFriendResponse DefaultInstanceForType {
        get { return global::mm.command.GetMFriendResponse.DefaultInstance; }
      }
      
      public override GetMFriendResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetMFriendResponse) {
          return MergeFrom((GetMFriendResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetMFriendResponse other) {
        if (other == global::mm.command.GetMFriendResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.friend_.Count != 0) {
          result.friend_.Add(other.friend_);
        }
        if (other.HasMD5) {
          MD5 = other.MD5;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getMFriendResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getMFriendResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.friend_, global::mm.command.FriendObj.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              result.hasMD5 = input.ReadString(ref result.mD5_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.FriendObj> FriendList {
        get { return PrepareBuilder().friend_; }
      }
      public int FriendCount {
        get { return result.FriendCount; }
      }
      public global::mm.command.FriendObj GetFriend(int index) {
        return result.GetFriend(index);
      }
      public Builder SetFriend(int index, global::mm.command.FriendObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.friend_[index] = value;
        return this;
      }
      public Builder SetFriend(int index, global::mm.command.FriendObj.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.friend_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddFriend(global::mm.command.FriendObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.friend_.Add(value);
        return this;
      }
      public Builder AddFriend(global::mm.command.FriendObj.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.friend_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeFriend(scg::IEnumerable<global::mm.command.FriendObj> values) {
        PrepareBuilder();
        result.friend_.Add(values);
        return this;
      }
      public Builder ClearFriend() {
        PrepareBuilder();
        result.friend_.Clear();
        return this;
      }
      
      public bool HasMD5 {
        get { return result.hasMD5; }
      }
      public string MD5 {
        get { return result.MD5; }
        set { SetMD5(value); }
      }
      public Builder SetMD5(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMD5 = true;
        result.mD5_ = value;
        return this;
      }
      public Builder ClearMD5() {
        PrepareBuilder();
        result.hasMD5 = false;
        result.mD5_ = "";
        return this;
      }
    }
    static GetMFriendResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Geta8keyRequest : pb::GeneratedMessage<Geta8keyRequest, Geta8keyRequest.Builder> {
    private Geta8keyRequest() { }
    private static readonly Geta8keyRequest defaultInstance = new Geta8keyRequest().MakeReadOnly();
    private static readonly string[] _geta8KeyRequestFieldNames = new string[] { "A2Key", "AppID", "BundleID", "FriendQQ", "FriendUserName", "OpCode", "ReqUrl", "Scene", "Scope", "State", "UserName", "base" };
    private static readonly uint[] _geta8KeyRequestFieldTags = new uint[] { 26, 34, 98, 72, 66, 16, 58, 80, 42, 50, 90, 10 };
    public static Geta8keyRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Geta8keyRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Geta8keyRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_Geta8keyRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Geta8keyRequest, Geta8keyRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_Geta8keyRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int OpCodeFieldNumber = 2;
    private bool hasOpCode;
    private int opCode_;
    public bool HasOpCode {
      get { return hasOpCode; }
    }
    public int OpCode {
      get { return opCode_; }
    }
    
    public const int A2KeyFieldNumber = 3;
    private bool hasA2Key;
    private global::mm.command.SKBuiltinBuffer_t a2Key_;
    public bool HasA2Key {
      get { return hasA2Key; }
    }
    public global::mm.command.SKBuiltinBuffer_t A2Key {
      get { return a2Key_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int AppIDFieldNumber = 4;
    private bool hasAppID;
    private global::mm.command.SKBuiltinString_t appID_;
    public bool HasAppID {
      get { return hasAppID; }
    }
    public global::mm.command.SKBuiltinString_t AppID {
      get { return appID_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int ScopeFieldNumber = 5;
    private bool hasScope;
    private global::mm.command.SKBuiltinString_t scope_;
    public bool HasScope {
      get { return hasScope; }
    }
    public global::mm.command.SKBuiltinString_t Scope {
      get { return scope_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int StateFieldNumber = 6;
    private bool hasState;
    private global::mm.command.SKBuiltinString_t state_;
    public bool HasState {
      get { return hasState; }
    }
    public global::mm.command.SKBuiltinString_t State {
      get { return state_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int ReqUrlFieldNumber = 7;
    private bool hasReqUrl;
    private global::mm.command.SKBuiltinString_t reqUrl_;
    public bool HasReqUrl {
      get { return hasReqUrl; }
    }
    public global::mm.command.SKBuiltinString_t ReqUrl {
      get { return reqUrl_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int FriendUserNameFieldNumber = 8;
    private bool hasFriendUserName;
    private string friendUserName_ = "";
    public bool HasFriendUserName {
      get { return hasFriendUserName; }
    }
    public string FriendUserName {
      get { return friendUserName_; }
    }
    
    public const int FriendQQFieldNumber = 9;
    private bool hasFriendQQ;
    private int friendQQ_;
    public bool HasFriendQQ {
      get { return hasFriendQQ; }
    }
    public int FriendQQ {
      get { return friendQQ_; }
    }
    
    public const int SceneFieldNumber = 10;
    private bool hasScene;
    private int scene_;
    public bool HasScene {
      get { return hasScene; }
    }
    public int Scene {
      get { return scene_; }
    }
    
    public const int UserNameFieldNumber = 11;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public const int BundleIDFieldNumber = 12;
    private bool hasBundleID;
    private string bundleID_ = "";
    public bool HasBundleID {
      get { return hasBundleID; }
    }
    public string BundleID {
      get { return bundleID_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasOpCode) return false;
        if (!Base.IsInitialized) return false;
        if (HasA2Key) {
          if (!A2Key.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _geta8KeyRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[11], Base);
      }
      if (hasOpCode) {
        output.WriteInt32(2, field_names[5], OpCode);
      }
      if (hasA2Key) {
        output.WriteMessage(3, field_names[0], A2Key);
      }
      if (hasAppID) {
        output.WriteMessage(4, field_names[1], AppID);
      }
      if (hasScope) {
        output.WriteMessage(5, field_names[8], Scope);
      }
      if (hasState) {
        output.WriteMessage(6, field_names[9], State);
      }
      if (hasReqUrl) {
        output.WriteMessage(7, field_names[6], ReqUrl);
      }
      if (hasFriendUserName) {
        output.WriteString(8, field_names[4], FriendUserName);
      }
      if (hasFriendQQ) {
        output.WriteInt32(9, field_names[3], FriendQQ);
      }
      if (hasScene) {
        output.WriteInt32(10, field_names[7], Scene);
      }
      if (hasUserName) {
        output.WriteString(11, field_names[10], UserName);
      }
      if (hasBundleID) {
        output.WriteString(12, field_names[2], BundleID);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasOpCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, OpCode);
        }
        if (hasA2Key) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, A2Key);
        }
        if (hasAppID) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, AppID);
        }
        if (hasScope) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Scope);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, State);
        }
        if (hasReqUrl) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, ReqUrl);
        }
        if (hasFriendUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(8, FriendUserName);
        }
        if (hasFriendQQ) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, FriendQQ);
        }
        if (hasScene) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, Scene);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(11, UserName);
        }
        if (hasBundleID) {
          size += pb::CodedOutputStream.ComputeStringSize(12, BundleID);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Geta8keyRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Geta8keyRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Geta8keyRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Geta8keyRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Geta8keyRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Geta8keyRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Geta8keyRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Geta8keyRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Geta8keyRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Geta8keyRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Geta8keyRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Geta8keyRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Geta8keyRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Geta8keyRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Geta8keyRequest result;
      
      private Geta8keyRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          Geta8keyRequest original = result;
          result = new Geta8keyRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Geta8keyRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.Geta8keyRequest.Descriptor; }
      }
      
      public override Geta8keyRequest DefaultInstanceForType {
        get { return global::mm.command.Geta8keyRequest.DefaultInstance; }
      }
      
      public override Geta8keyRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Geta8keyRequest) {
          return MergeFrom((Geta8keyRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Geta8keyRequest other) {
        if (other == global::mm.command.Geta8keyRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasOpCode) {
          OpCode = other.OpCode;
        }
        if (other.HasA2Key) {
          MergeA2Key(other.A2Key);
        }
        if (other.HasAppID) {
          MergeAppID(other.AppID);
        }
        if (other.HasScope) {
          MergeScope(other.Scope);
        }
        if (other.HasState) {
          MergeState(other.State);
        }
        if (other.HasReqUrl) {
          MergeReqUrl(other.ReqUrl);
        }
        if (other.HasFriendUserName) {
          FriendUserName = other.FriendUserName;
        }
        if (other.HasFriendQQ) {
          FriendQQ = other.FriendQQ;
        }
        if (other.HasScene) {
          Scene = other.Scene;
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasBundleID) {
          BundleID = other.BundleID;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_geta8KeyRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _geta8KeyRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOpCode = input.ReadInt32(ref result.opCode_);
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasA2Key) {
                subBuilder.MergeFrom(A2Key);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              A2Key = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasAppID) {
                subBuilder.MergeFrom(AppID);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AppID = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasScope) {
                subBuilder.MergeFrom(Scope);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Scope = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasState) {
                subBuilder.MergeFrom(State);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              State = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasReqUrl) {
                subBuilder.MergeFrom(ReqUrl);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ReqUrl = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              result.hasFriendUserName = input.ReadString(ref result.friendUserName_);
              break;
            }
            case 72: {
              result.hasFriendQQ = input.ReadInt32(ref result.friendQQ_);
              break;
            }
            case 80: {
              result.hasScene = input.ReadInt32(ref result.scene_);
              break;
            }
            case 90: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 98: {
              result.hasBundleID = input.ReadString(ref result.bundleID_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasOpCode {
        get { return result.hasOpCode; }
      }
      public int OpCode {
        get { return result.OpCode; }
        set { SetOpCode(value); }
      }
      public Builder SetOpCode(int value) {
        PrepareBuilder();
        result.hasOpCode = true;
        result.opCode_ = value;
        return this;
      }
      public Builder ClearOpCode() {
        PrepareBuilder();
        result.hasOpCode = false;
        result.opCode_ = 0;
        return this;
      }
      
      public bool HasA2Key {
       get { return result.hasA2Key; }
      }
      public global::mm.command.SKBuiltinBuffer_t A2Key {
        get { return result.A2Key; }
        set { SetA2Key(value); }
      }
      public Builder SetA2Key(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasA2Key = true;
        result.a2Key_ = value;
        return this;
      }
      public Builder SetA2Key(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasA2Key = true;
        result.a2Key_ = builderForValue.Build();
        return this;
      }
      public Builder MergeA2Key(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasA2Key &&
            result.a2Key_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.a2Key_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.a2Key_).MergeFrom(value).BuildPartial();
        } else {
          result.a2Key_ = value;
        }
        result.hasA2Key = true;
        return this;
      }
      public Builder ClearA2Key() {
        PrepareBuilder();
        result.hasA2Key = false;
        result.a2Key_ = null;
        return this;
      }
      
      public bool HasAppID {
       get { return result.hasAppID; }
      }
      public global::mm.command.SKBuiltinString_t AppID {
        get { return result.AppID; }
        set { SetAppID(value); }
      }
      public Builder SetAppID(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppID = true;
        result.appID_ = value;
        return this;
      }
      public Builder SetAppID(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAppID = true;
        result.appID_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAppID(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAppID &&
            result.appID_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.appID_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.appID_).MergeFrom(value).BuildPartial();
        } else {
          result.appID_ = value;
        }
        result.hasAppID = true;
        return this;
      }
      public Builder ClearAppID() {
        PrepareBuilder();
        result.hasAppID = false;
        result.appID_ = null;
        return this;
      }
      
      public bool HasScope {
       get { return result.hasScope; }
      }
      public global::mm.command.SKBuiltinString_t Scope {
        get { return result.Scope; }
        set { SetScope(value); }
      }
      public Builder SetScope(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasScope = true;
        result.scope_ = value;
        return this;
      }
      public Builder SetScope(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasScope = true;
        result.scope_ = builderForValue.Build();
        return this;
      }
      public Builder MergeScope(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasScope &&
            result.scope_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.scope_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.scope_).MergeFrom(value).BuildPartial();
        } else {
          result.scope_ = value;
        }
        result.hasScope = true;
        return this;
      }
      public Builder ClearScope() {
        PrepareBuilder();
        result.hasScope = false;
        result.scope_ = null;
        return this;
      }
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::mm.command.SKBuiltinString_t State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder SetState(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasState = true;
        result.state_ = builderForValue.Build();
        return this;
      }
      public Builder MergeState(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasState &&
            result.state_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.state_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.state_).MergeFrom(value).BuildPartial();
        } else {
          result.state_ = value;
        }
        result.hasState = true;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = null;
        return this;
      }
      
      public bool HasReqUrl {
       get { return result.hasReqUrl; }
      }
      public global::mm.command.SKBuiltinString_t ReqUrl {
        get { return result.ReqUrl; }
        set { SetReqUrl(value); }
      }
      public Builder SetReqUrl(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasReqUrl = true;
        result.reqUrl_ = value;
        return this;
      }
      public Builder SetReqUrl(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasReqUrl = true;
        result.reqUrl_ = builderForValue.Build();
        return this;
      }
      public Builder MergeReqUrl(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasReqUrl &&
            result.reqUrl_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.reqUrl_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.reqUrl_).MergeFrom(value).BuildPartial();
        } else {
          result.reqUrl_ = value;
        }
        result.hasReqUrl = true;
        return this;
      }
      public Builder ClearReqUrl() {
        PrepareBuilder();
        result.hasReqUrl = false;
        result.reqUrl_ = null;
        return this;
      }
      
      public bool HasFriendUserName {
        get { return result.hasFriendUserName; }
      }
      public string FriendUserName {
        get { return result.FriendUserName; }
        set { SetFriendUserName(value); }
      }
      public Builder SetFriendUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFriendUserName = true;
        result.friendUserName_ = value;
        return this;
      }
      public Builder ClearFriendUserName() {
        PrepareBuilder();
        result.hasFriendUserName = false;
        result.friendUserName_ = "";
        return this;
      }
      
      public bool HasFriendQQ {
        get { return result.hasFriendQQ; }
      }
      public int FriendQQ {
        get { return result.FriendQQ; }
        set { SetFriendQQ(value); }
      }
      public Builder SetFriendQQ(int value) {
        PrepareBuilder();
        result.hasFriendQQ = true;
        result.friendQQ_ = value;
        return this;
      }
      public Builder ClearFriendQQ() {
        PrepareBuilder();
        result.hasFriendQQ = false;
        result.friendQQ_ = 0;
        return this;
      }
      
      public bool HasScene {
        get { return result.hasScene; }
      }
      public int Scene {
        get { return result.Scene; }
        set { SetScene(value); }
      }
      public Builder SetScene(int value) {
        PrepareBuilder();
        result.hasScene = true;
        result.scene_ = value;
        return this;
      }
      public Builder ClearScene() {
        PrepareBuilder();
        result.hasScene = false;
        result.scene_ = 0;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasBundleID {
        get { return result.hasBundleID; }
      }
      public string BundleID {
        get { return result.BundleID; }
        set { SetBundleID(value); }
      }
      public Builder SetBundleID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBundleID = true;
        result.bundleID_ = value;
        return this;
      }
      public Builder ClearBundleID() {
        PrepareBuilder();
        result.hasBundleID = false;
        result.bundleID_ = "";
        return this;
      }
    }
    static Geta8keyRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Geta8keyResponse : pb::GeneratedMessage<Geta8keyResponse, Geta8keyResponse.Builder> {
    private Geta8keyResponse() { }
    private static readonly Geta8keyResponse defaultInstance = new Geta8keyResponse().MakeReadOnly();
    private static readonly string[] _geta8KeyResponseFieldNames = new string[] { "A8Key", "ActionCode", "Content", "ControlBitSet", "DeepLinkBT", "FullURL", "HttpHeader", "HttpHeaderNumb", "Permission", "ScopeCount", "ScopeList", "ShareUrl", "Title", "UserName", "antispamTicket", "base", "jsapicontrolBytes", "mid", "ssid" };
    private static readonly uint[] _geta8KeyResponseFieldTags = new uint[] { 26, 32, 50, 66, 178, 18, 202, 192, 58, 128, 136, 122, 42, 74, 146, 10, 186, 162, 154 };
    public static Geta8keyResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Geta8keyResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Geta8keyResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_Geta8keyResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Geta8keyResponse, Geta8keyResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_Geta8keyResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int FullURLFieldNumber = 2;
    private bool hasFullURL;
    private string fullURL_ = "";
    public bool HasFullURL {
      get { return hasFullURL; }
    }
    public string FullURL {
      get { return fullURL_; }
    }
    
    public const int A8KeyFieldNumber = 3;
    private bool hasA8Key;
    private string a8Key_ = "";
    public bool HasA8Key {
      get { return hasA8Key; }
    }
    public string A8Key {
      get { return a8Key_; }
    }
    
    public const int ActionCodeFieldNumber = 4;
    private bool hasActionCode;
    private int actionCode_;
    public bool HasActionCode {
      get { return hasActionCode; }
    }
    public int ActionCode {
      get { return actionCode_; }
    }
    
    public const int TitleFieldNumber = 5;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int ContentFieldNumber = 6;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public const int PermissionFieldNumber = 7;
    private bool hasPermission;
    private global::mm.command.JSAPIPermission permission_;
    public bool HasPermission {
      get { return hasPermission; }
    }
    public global::mm.command.JSAPIPermission Permission {
      get { return permission_ ?? global::mm.command.JSAPIPermission.DefaultInstance; }
    }
    
    public const int ControlBitSetFieldNumber = 8;
    private bool hasControlBitSet;
    private global::mm.command.GeneralControlBitSet controlBitSet_;
    public bool HasControlBitSet {
      get { return hasControlBitSet; }
    }
    public global::mm.command.GeneralControlBitSet ControlBitSet {
      get { return controlBitSet_ ?? global::mm.command.GeneralControlBitSet.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 9;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public const int ShareUrlFieldNumber = 15;
    private bool hasShareUrl;
    private string shareUrl_ = "";
    public bool HasShareUrl {
      get { return hasShareUrl; }
    }
    public string ShareUrl {
      get { return shareUrl_; }
    }
    
    public const int ScopeCountFieldNumber = 16;
    private bool hasScopeCount;
    private uint scopeCount_;
    public bool HasScopeCount {
      get { return hasScopeCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint ScopeCount {
      get { return scopeCount_; }
    }
    
    public const int ScopeListFieldNumber = 17;
    private pbc::PopsicleList<int> scopeList_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ScopeListList {
      get { return pbc::Lists.AsReadOnly(scopeList_); }
    }
    public int ScopeListCount {
      get { return scopeList_.Count; }
    }
    public int GetScopeList(int index) {
      return scopeList_[index];
    }
    
    public const int AntispamTicketFieldNumber = 18;
    private bool hasAntispamTicket;
    private string antispamTicket_ = "";
    public bool HasAntispamTicket {
      get { return hasAntispamTicket; }
    }
    public string AntispamTicket {
      get { return antispamTicket_; }
    }
    
    public const int SsidFieldNumber = 19;
    private bool hasSsid;
    private string ssid_ = "";
    public bool HasSsid {
      get { return hasSsid; }
    }
    public string Ssid {
      get { return ssid_; }
    }
    
    public const int MidFieldNumber = 20;
    private bool hasMid;
    private string mid_ = "";
    public bool HasMid {
      get { return hasMid; }
    }
    public string Mid {
      get { return mid_; }
    }
    
    public const int DeepLinkBTFieldNumber = 22;
    private bool hasDeepLinkBT;
    private global::mm.command.DeepLinkBitSet deepLinkBT_;
    public bool HasDeepLinkBT {
      get { return hasDeepLinkBT; }
    }
    public global::mm.command.DeepLinkBitSet DeepLinkBT {
      get { return deepLinkBT_ ?? global::mm.command.DeepLinkBitSet.DefaultInstance; }
    }
    
    public const int JsapicontrolBytesFieldNumber = 23;
    private bool hasJsapicontrolBytes;
    private global::mm.command.SKBuiltinBuffer_t jsapicontrolBytes_;
    public bool HasJsapicontrolBytes {
      get { return hasJsapicontrolBytes; }
    }
    public global::mm.command.SKBuiltinBuffer_t JsapicontrolBytes {
      get { return jsapicontrolBytes_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int HttpHeaderNumbFieldNumber = 24;
    private bool hasHttpHeaderNumb;
    private uint httpHeaderNumb_;
    public bool HasHttpHeaderNumb {
      get { return hasHttpHeaderNumb; }
    }
    [global::System.CLSCompliant(false)]
    public uint HttpHeaderNumb {
      get { return httpHeaderNumb_; }
    }
    
    public const int HttpHeaderFieldNumber = 25;
    private pbc::PopsicleList<global::mm.command.HTTPHeader> httpHeader_ = new pbc::PopsicleList<global::mm.command.HTTPHeader>();
    public scg::IList<global::mm.command.HTTPHeader> HttpHeaderList {
      get { return httpHeader_; }
    }
    public int HttpHeaderCount {
      get { return httpHeader_.Count; }
    }
    public global::mm.command.HTTPHeader GetHttpHeader(int index) {
      return httpHeader_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasPermission) {
          if (!Permission.IsInitialized) return false;
        }
        if (HasControlBitSet) {
          if (!ControlBitSet.IsInitialized) return false;
        }
        if (HasDeepLinkBT) {
          if (!DeepLinkBT.IsInitialized) return false;
        }
        if (HasJsapicontrolBytes) {
          if (!JsapicontrolBytes.IsInitialized) return false;
        }
        foreach (global::mm.command.HTTPHeader element in HttpHeaderList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _geta8KeyResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[15], Base);
      }
      if (hasFullURL) {
        output.WriteString(2, field_names[5], FullURL);
      }
      if (hasA8Key) {
        output.WriteString(3, field_names[0], A8Key);
      }
      if (hasActionCode) {
        output.WriteInt32(4, field_names[1], ActionCode);
      }
      if (hasTitle) {
        output.WriteString(5, field_names[12], Title);
      }
      if (hasContent) {
        output.WriteString(6, field_names[2], Content);
      }
      if (hasPermission) {
        output.WriteMessage(7, field_names[8], Permission);
      }
      if (hasControlBitSet) {
        output.WriteMessage(8, field_names[3], ControlBitSet);
      }
      if (hasUserName) {
        output.WriteString(9, field_names[13], UserName);
      }
      if (hasShareUrl) {
        output.WriteString(15, field_names[11], ShareUrl);
      }
      if (hasScopeCount) {
        output.WriteUInt32(16, field_names[9], ScopeCount);
      }
      if (scopeList_.Count > 0) {
        output.WriteInt32Array(17, field_names[10], scopeList_);
      }
      if (hasAntispamTicket) {
        output.WriteString(18, field_names[14], AntispamTicket);
      }
      if (hasSsid) {
        output.WriteString(19, field_names[18], Ssid);
      }
      if (hasMid) {
        output.WriteString(20, field_names[17], Mid);
      }
      if (hasDeepLinkBT) {
        output.WriteMessage(22, field_names[4], DeepLinkBT);
      }
      if (hasJsapicontrolBytes) {
        output.WriteMessage(23, field_names[16], JsapicontrolBytes);
      }
      if (hasHttpHeaderNumb) {
        output.WriteUInt32(24, field_names[7], HttpHeaderNumb);
      }
      if (httpHeader_.Count > 0) {
        output.WriteMessageArray(25, field_names[6], httpHeader_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasFullURL) {
          size += pb::CodedOutputStream.ComputeStringSize(2, FullURL);
        }
        if (hasA8Key) {
          size += pb::CodedOutputStream.ComputeStringSize(3, A8Key);
        }
        if (hasActionCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ActionCode);
        }
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Title);
        }
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Content);
        }
        if (hasPermission) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, Permission);
        }
        if (hasControlBitSet) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, ControlBitSet);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(9, UserName);
        }
        if (hasShareUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(15, ShareUrl);
        }
        if (hasScopeCount) {
          size += pb::CodedOutputStream.ComputeUInt32Size(16, ScopeCount);
        }
        {
          int dataSize = 0;
          foreach (int element in ScopeListList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 2 * scopeList_.Count;
        }
        if (hasAntispamTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(18, AntispamTicket);
        }
        if (hasSsid) {
          size += pb::CodedOutputStream.ComputeStringSize(19, Ssid);
        }
        if (hasMid) {
          size += pb::CodedOutputStream.ComputeStringSize(20, Mid);
        }
        if (hasDeepLinkBT) {
          size += pb::CodedOutputStream.ComputeMessageSize(22, DeepLinkBT);
        }
        if (hasJsapicontrolBytes) {
          size += pb::CodedOutputStream.ComputeMessageSize(23, JsapicontrolBytes);
        }
        if (hasHttpHeaderNumb) {
          size += pb::CodedOutputStream.ComputeUInt32Size(24, HttpHeaderNumb);
        }
        foreach (global::mm.command.HTTPHeader element in HttpHeaderList) {
          size += pb::CodedOutputStream.ComputeMessageSize(25, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Geta8keyResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Geta8keyResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Geta8keyResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Geta8keyResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Geta8keyResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Geta8keyResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Geta8keyResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Geta8keyResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Geta8keyResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Geta8keyResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Geta8keyResponse MakeReadOnly() {
      scopeList_.MakeReadOnly();
      httpHeader_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Geta8keyResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<Geta8keyResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Geta8keyResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Geta8keyResponse result;
      
      private Geta8keyResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          Geta8keyResponse original = result;
          result = new Geta8keyResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Geta8keyResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.Geta8keyResponse.Descriptor; }
      }
      
      public override Geta8keyResponse DefaultInstanceForType {
        get { return global::mm.command.Geta8keyResponse.DefaultInstance; }
      }
      
      public override Geta8keyResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Geta8keyResponse) {
          return MergeFrom((Geta8keyResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Geta8keyResponse other) {
        if (other == global::mm.command.Geta8keyResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasFullURL) {
          FullURL = other.FullURL;
        }
        if (other.HasA8Key) {
          A8Key = other.A8Key;
        }
        if (other.HasActionCode) {
          ActionCode = other.ActionCode;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        if (other.HasPermission) {
          MergePermission(other.Permission);
        }
        if (other.HasControlBitSet) {
          MergeControlBitSet(other.ControlBitSet);
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasShareUrl) {
          ShareUrl = other.ShareUrl;
        }
        if (other.HasScopeCount) {
          ScopeCount = other.ScopeCount;
        }
        if (other.scopeList_.Count != 0) {
          result.scopeList_.Add(other.scopeList_);
        }
        if (other.HasAntispamTicket) {
          AntispamTicket = other.AntispamTicket;
        }
        if (other.HasSsid) {
          Ssid = other.Ssid;
        }
        if (other.HasMid) {
          Mid = other.Mid;
        }
        if (other.HasDeepLinkBT) {
          MergeDeepLinkBT(other.DeepLinkBT);
        }
        if (other.HasJsapicontrolBytes) {
          MergeJsapicontrolBytes(other.JsapicontrolBytes);
        }
        if (other.HasHttpHeaderNumb) {
          HttpHeaderNumb = other.HttpHeaderNumb;
        }
        if (other.httpHeader_.Count != 0) {
          result.httpHeader_.Add(other.httpHeader_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_geta8KeyResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _geta8KeyResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasFullURL = input.ReadString(ref result.fullURL_);
              break;
            }
            case 26: {
              result.hasA8Key = input.ReadString(ref result.a8Key_);
              break;
            }
            case 32: {
              result.hasActionCode = input.ReadInt32(ref result.actionCode_);
              break;
            }
            case 42: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 50: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
            case 58: {
              global::mm.command.JSAPIPermission.Builder subBuilder = global::mm.command.JSAPIPermission.CreateBuilder();
              if (result.hasPermission) {
                subBuilder.MergeFrom(Permission);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Permission = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::mm.command.GeneralControlBitSet.Builder subBuilder = global::mm.command.GeneralControlBitSet.CreateBuilder();
              if (result.hasControlBitSet) {
                subBuilder.MergeFrom(ControlBitSet);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ControlBitSet = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 122: {
              result.hasShareUrl = input.ReadString(ref result.shareUrl_);
              break;
            }
            case 128: {
              result.hasScopeCount = input.ReadUInt32(ref result.scopeCount_);
              break;
            }
            case 138:
            case 136: {
              input.ReadInt32Array(tag, field_name, result.scopeList_);
              break;
            }
            case 146: {
              result.hasAntispamTicket = input.ReadString(ref result.antispamTicket_);
              break;
            }
            case 154: {
              result.hasSsid = input.ReadString(ref result.ssid_);
              break;
            }
            case 162: {
              result.hasMid = input.ReadString(ref result.mid_);
              break;
            }
            case 178: {
              global::mm.command.DeepLinkBitSet.Builder subBuilder = global::mm.command.DeepLinkBitSet.CreateBuilder();
              if (result.hasDeepLinkBT) {
                subBuilder.MergeFrom(DeepLinkBT);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              DeepLinkBT = subBuilder.BuildPartial();
              break;
            }
            case 186: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasJsapicontrolBytes) {
                subBuilder.MergeFrom(JsapicontrolBytes);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              JsapicontrolBytes = subBuilder.BuildPartial();
              break;
            }
            case 192: {
              result.hasHttpHeaderNumb = input.ReadUInt32(ref result.httpHeaderNumb_);
              break;
            }
            case 202: {
              input.ReadMessageArray(tag, field_name, result.httpHeader_, global::mm.command.HTTPHeader.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasFullURL {
        get { return result.hasFullURL; }
      }
      public string FullURL {
        get { return result.FullURL; }
        set { SetFullURL(value); }
      }
      public Builder SetFullURL(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFullURL = true;
        result.fullURL_ = value;
        return this;
      }
      public Builder ClearFullURL() {
        PrepareBuilder();
        result.hasFullURL = false;
        result.fullURL_ = "";
        return this;
      }
      
      public bool HasA8Key {
        get { return result.hasA8Key; }
      }
      public string A8Key {
        get { return result.A8Key; }
        set { SetA8Key(value); }
      }
      public Builder SetA8Key(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasA8Key = true;
        result.a8Key_ = value;
        return this;
      }
      public Builder ClearA8Key() {
        PrepareBuilder();
        result.hasA8Key = false;
        result.a8Key_ = "";
        return this;
      }
      
      public bool HasActionCode {
        get { return result.hasActionCode; }
      }
      public int ActionCode {
        get { return result.ActionCode; }
        set { SetActionCode(value); }
      }
      public Builder SetActionCode(int value) {
        PrepareBuilder();
        result.hasActionCode = true;
        result.actionCode_ = value;
        return this;
      }
      public Builder ClearActionCode() {
        PrepareBuilder();
        result.hasActionCode = false;
        result.actionCode_ = 0;
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
      
      public bool HasPermission {
       get { return result.hasPermission; }
      }
      public global::mm.command.JSAPIPermission Permission {
        get { return result.Permission; }
        set { SetPermission(value); }
      }
      public Builder SetPermission(global::mm.command.JSAPIPermission value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPermission = true;
        result.permission_ = value;
        return this;
      }
      public Builder SetPermission(global::mm.command.JSAPIPermission.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPermission = true;
        result.permission_ = builderForValue.Build();
        return this;
      }
      public Builder MergePermission(global::mm.command.JSAPIPermission value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPermission &&
            result.permission_ != global::mm.command.JSAPIPermission.DefaultInstance) {
            result.permission_ = global::mm.command.JSAPIPermission.CreateBuilder(result.permission_).MergeFrom(value).BuildPartial();
        } else {
          result.permission_ = value;
        }
        result.hasPermission = true;
        return this;
      }
      public Builder ClearPermission() {
        PrepareBuilder();
        result.hasPermission = false;
        result.permission_ = null;
        return this;
      }
      
      public bool HasControlBitSet {
       get { return result.hasControlBitSet; }
      }
      public global::mm.command.GeneralControlBitSet ControlBitSet {
        get { return result.ControlBitSet; }
        set { SetControlBitSet(value); }
      }
      public Builder SetControlBitSet(global::mm.command.GeneralControlBitSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasControlBitSet = true;
        result.controlBitSet_ = value;
        return this;
      }
      public Builder SetControlBitSet(global::mm.command.GeneralControlBitSet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasControlBitSet = true;
        result.controlBitSet_ = builderForValue.Build();
        return this;
      }
      public Builder MergeControlBitSet(global::mm.command.GeneralControlBitSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasControlBitSet &&
            result.controlBitSet_ != global::mm.command.GeneralControlBitSet.DefaultInstance) {
            result.controlBitSet_ = global::mm.command.GeneralControlBitSet.CreateBuilder(result.controlBitSet_).MergeFrom(value).BuildPartial();
        } else {
          result.controlBitSet_ = value;
        }
        result.hasControlBitSet = true;
        return this;
      }
      public Builder ClearControlBitSet() {
        PrepareBuilder();
        result.hasControlBitSet = false;
        result.controlBitSet_ = null;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasShareUrl {
        get { return result.hasShareUrl; }
      }
      public string ShareUrl {
        get { return result.ShareUrl; }
        set { SetShareUrl(value); }
      }
      public Builder SetShareUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasShareUrl = true;
        result.shareUrl_ = value;
        return this;
      }
      public Builder ClearShareUrl() {
        PrepareBuilder();
        result.hasShareUrl = false;
        result.shareUrl_ = "";
        return this;
      }
      
      public bool HasScopeCount {
        get { return result.hasScopeCount; }
      }
      [global::System.CLSCompliant(false)]
      public uint ScopeCount {
        get { return result.ScopeCount; }
        set { SetScopeCount(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetScopeCount(uint value) {
        PrepareBuilder();
        result.hasScopeCount = true;
        result.scopeCount_ = value;
        return this;
      }
      public Builder ClearScopeCount() {
        PrepareBuilder();
        result.hasScopeCount = false;
        result.scopeCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ScopeListList {
        get { return PrepareBuilder().scopeList_; }
      }
      public int ScopeListCount {
        get { return result.ScopeListCount; }
      }
      public int GetScopeList(int index) {
        return result.GetScopeList(index);
      }
      public Builder SetScopeList(int index, int value) {
        PrepareBuilder();
        result.scopeList_[index] = value;
        return this;
      }
      public Builder AddScopeList(int value) {
        PrepareBuilder();
        result.scopeList_.Add(value);
        return this;
      }
      public Builder AddRangeScopeList(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.scopeList_.Add(values);
        return this;
      }
      public Builder ClearScopeList() {
        PrepareBuilder();
        result.scopeList_.Clear();
        return this;
      }
      
      public bool HasAntispamTicket {
        get { return result.hasAntispamTicket; }
      }
      public string AntispamTicket {
        get { return result.AntispamTicket; }
        set { SetAntispamTicket(value); }
      }
      public Builder SetAntispamTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAntispamTicket = true;
        result.antispamTicket_ = value;
        return this;
      }
      public Builder ClearAntispamTicket() {
        PrepareBuilder();
        result.hasAntispamTicket = false;
        result.antispamTicket_ = "";
        return this;
      }
      
      public bool HasSsid {
        get { return result.hasSsid; }
      }
      public string Ssid {
        get { return result.Ssid; }
        set { SetSsid(value); }
      }
      public Builder SetSsid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSsid = true;
        result.ssid_ = value;
        return this;
      }
      public Builder ClearSsid() {
        PrepareBuilder();
        result.hasSsid = false;
        result.ssid_ = "";
        return this;
      }
      
      public bool HasMid {
        get { return result.hasMid; }
      }
      public string Mid {
        get { return result.Mid; }
        set { SetMid(value); }
      }
      public Builder SetMid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMid = true;
        result.mid_ = value;
        return this;
      }
      public Builder ClearMid() {
        PrepareBuilder();
        result.hasMid = false;
        result.mid_ = "";
        return this;
      }
      
      public bool HasDeepLinkBT {
       get { return result.hasDeepLinkBT; }
      }
      public global::mm.command.DeepLinkBitSet DeepLinkBT {
        get { return result.DeepLinkBT; }
        set { SetDeepLinkBT(value); }
      }
      public Builder SetDeepLinkBT(global::mm.command.DeepLinkBitSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeepLinkBT = true;
        result.deepLinkBT_ = value;
        return this;
      }
      public Builder SetDeepLinkBT(global::mm.command.DeepLinkBitSet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasDeepLinkBT = true;
        result.deepLinkBT_ = builderForValue.Build();
        return this;
      }
      public Builder MergeDeepLinkBT(global::mm.command.DeepLinkBitSet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasDeepLinkBT &&
            result.deepLinkBT_ != global::mm.command.DeepLinkBitSet.DefaultInstance) {
            result.deepLinkBT_ = global::mm.command.DeepLinkBitSet.CreateBuilder(result.deepLinkBT_).MergeFrom(value).BuildPartial();
        } else {
          result.deepLinkBT_ = value;
        }
        result.hasDeepLinkBT = true;
        return this;
      }
      public Builder ClearDeepLinkBT() {
        PrepareBuilder();
        result.hasDeepLinkBT = false;
        result.deepLinkBT_ = null;
        return this;
      }
      
      public bool HasJsapicontrolBytes {
       get { return result.hasJsapicontrolBytes; }
      }
      public global::mm.command.SKBuiltinBuffer_t JsapicontrolBytes {
        get { return result.JsapicontrolBytes; }
        set { SetJsapicontrolBytes(value); }
      }
      public Builder SetJsapicontrolBytes(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJsapicontrolBytes = true;
        result.jsapicontrolBytes_ = value;
        return this;
      }
      public Builder SetJsapicontrolBytes(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasJsapicontrolBytes = true;
        result.jsapicontrolBytes_ = builderForValue.Build();
        return this;
      }
      public Builder MergeJsapicontrolBytes(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasJsapicontrolBytes &&
            result.jsapicontrolBytes_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.jsapicontrolBytes_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.jsapicontrolBytes_).MergeFrom(value).BuildPartial();
        } else {
          result.jsapicontrolBytes_ = value;
        }
        result.hasJsapicontrolBytes = true;
        return this;
      }
      public Builder ClearJsapicontrolBytes() {
        PrepareBuilder();
        result.hasJsapicontrolBytes = false;
        result.jsapicontrolBytes_ = null;
        return this;
      }
      
      public bool HasHttpHeaderNumb {
        get { return result.hasHttpHeaderNumb; }
      }
      [global::System.CLSCompliant(false)]
      public uint HttpHeaderNumb {
        get { return result.HttpHeaderNumb; }
        set { SetHttpHeaderNumb(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetHttpHeaderNumb(uint value) {
        PrepareBuilder();
        result.hasHttpHeaderNumb = true;
        result.httpHeaderNumb_ = value;
        return this;
      }
      public Builder ClearHttpHeaderNumb() {
        PrepareBuilder();
        result.hasHttpHeaderNumb = false;
        result.httpHeaderNumb_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.HTTPHeader> HttpHeaderList {
        get { return PrepareBuilder().httpHeader_; }
      }
      public int HttpHeaderCount {
        get { return result.HttpHeaderCount; }
      }
      public global::mm.command.HTTPHeader GetHttpHeader(int index) {
        return result.GetHttpHeader(index);
      }
      public Builder SetHttpHeader(int index, global::mm.command.HTTPHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.httpHeader_[index] = value;
        return this;
      }
      public Builder SetHttpHeader(int index, global::mm.command.HTTPHeader.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.httpHeader_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddHttpHeader(global::mm.command.HTTPHeader value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.httpHeader_.Add(value);
        return this;
      }
      public Builder AddHttpHeader(global::mm.command.HTTPHeader.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.httpHeader_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeHttpHeader(scg::IEnumerable<global::mm.command.HTTPHeader> values) {
        PrepareBuilder();
        result.httpHeader_.Add(values);
        return this;
      }
      public Builder ClearHttpHeader() {
        PrepareBuilder();
        result.httpHeader_.Clear();
        return this;
      }
    }
    static Geta8keyResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MMSnsPostRequest : pb::GeneratedMessage<MMSnsPostRequest, MMSnsPostRequest.Builder> {
    private MMSnsPostRequest() { }
    private static readonly MMSnsPostRequest defaultInstance = new MMSnsPostRequest().MakeReadOnly();
    private static readonly string[] _mMSnsPostRequestFieldNames = new string[] { "BlackList", "BlackListNumb", "ClientId", "GroupCount", "GroupIds", "ObjectDesc", "ObjectSource", "PostBGImgType", "Privacy", "ReferId", "SyncFlag", "WithUserList", "WithUserListNumb", "base" };
    private static readonly uint[] _mMSnsPostRequestFieldTags = new uint[] { 114, 104, 58, 72, 82, 18, 88, 64, 40, 96, 48, 34, 24, 10 };
    public static MMSnsPostRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MMSnsPostRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MMSnsPostRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MMSnsPostRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MMSnsPostRequest, MMSnsPostRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MMSnsPostRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int ObjectDescFieldNumber = 2;
    private bool hasObjectDesc;
    private global::mm.command.SKBuiltinBuffer_t objectDesc_;
    public bool HasObjectDesc {
      get { return hasObjectDesc; }
    }
    public global::mm.command.SKBuiltinBuffer_t ObjectDesc {
      get { return objectDesc_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int WithUserListNumbFieldNumber = 3;
    private bool hasWithUserListNumb;
    private int withUserListNumb_;
    public bool HasWithUserListNumb {
      get { return hasWithUserListNumb; }
    }
    public int WithUserListNumb {
      get { return withUserListNumb_; }
    }
    
    public const int WithUserListFieldNumber = 4;
    private pbc::PopsicleList<string> withUserList_ = new pbc::PopsicleList<string>();
    public scg::IList<string> WithUserListList {
      get { return pbc::Lists.AsReadOnly(withUserList_); }
    }
    public int WithUserListCount {
      get { return withUserList_.Count; }
    }
    public string GetWithUserList(int index) {
      return withUserList_[index];
    }
    
    public const int PrivacyFieldNumber = 5;
    private bool hasPrivacy;
    private int privacy_;
    public bool HasPrivacy {
      get { return hasPrivacy; }
    }
    public int Privacy {
      get { return privacy_; }
    }
    
    public const int SyncFlagFieldNumber = 6;
    private bool hasSyncFlag;
    private int syncFlag_;
    public bool HasSyncFlag {
      get { return hasSyncFlag; }
    }
    public int SyncFlag {
      get { return syncFlag_; }
    }
    
    public const int ClientIdFieldNumber = 7;
    private bool hasClientId;
    private string clientId_ = "";
    public bool HasClientId {
      get { return hasClientId; }
    }
    public string ClientId {
      get { return clientId_; }
    }
    
    public const int PostBGImgTypeFieldNumber = 8;
    private bool hasPostBGImgType;
    private int postBGImgType_;
    public bool HasPostBGImgType {
      get { return hasPostBGImgType; }
    }
    public int PostBGImgType {
      get { return postBGImgType_; }
    }
    
    public const int GroupCountFieldNumber = 9;
    private bool hasGroupCount;
    private int groupCount_;
    public bool HasGroupCount {
      get { return hasGroupCount; }
    }
    public int GroupCount {
      get { return groupCount_; }
    }
    
    public const int GroupIdsFieldNumber = 10;
    private pbc::PopsicleList<string> groupIds_ = new pbc::PopsicleList<string>();
    public scg::IList<string> GroupIdsList {
      get { return pbc::Lists.AsReadOnly(groupIds_); }
    }
    public int GroupIdsCount {
      get { return groupIds_.Count; }
    }
    public string GetGroupIds(int index) {
      return groupIds_[index];
    }
    
    public const int ObjectSourceFieldNumber = 11;
    private bool hasObjectSource;
    private int objectSource_;
    public bool HasObjectSource {
      get { return hasObjectSource; }
    }
    public int ObjectSource {
      get { return objectSource_; }
    }
    
    public const int ReferIdFieldNumber = 12;
    private bool hasReferId;
    private long referId_;
    public bool HasReferId {
      get { return hasReferId; }
    }
    public long ReferId {
      get { return referId_; }
    }
    
    public const int BlackListNumbFieldNumber = 13;
    private bool hasBlackListNumb;
    private int blackListNumb_;
    public bool HasBlackListNumb {
      get { return hasBlackListNumb; }
    }
    public int BlackListNumb {
      get { return blackListNumb_; }
    }
    
    public const int BlackListFieldNumber = 14;
    private pbc::PopsicleList<string> blackList_ = new pbc::PopsicleList<string>();
    public scg::IList<string> BlackListList {
      get { return pbc::Lists.AsReadOnly(blackList_); }
    }
    public int BlackListCount {
      get { return blackList_.Count; }
    }
    public string GetBlackList(int index) {
      return blackList_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasObjectDesc) return false;
        if (!Base.IsInitialized) return false;
        if (!ObjectDesc.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mMSnsPostRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[13], Base);
      }
      if (hasObjectDesc) {
        output.WriteMessage(2, field_names[5], ObjectDesc);
      }
      if (hasWithUserListNumb) {
        output.WriteInt32(3, field_names[12], WithUserListNumb);
      }
      if (withUserList_.Count > 0) {
        output.WriteStringArray(4, field_names[11], withUserList_);
      }
      if (hasPrivacy) {
        output.WriteInt32(5, field_names[8], Privacy);
      }
      if (hasSyncFlag) {
        output.WriteInt32(6, field_names[10], SyncFlag);
      }
      if (hasClientId) {
        output.WriteString(7, field_names[2], ClientId);
      }
      if (hasPostBGImgType) {
        output.WriteInt32(8, field_names[7], PostBGImgType);
      }
      if (hasGroupCount) {
        output.WriteInt32(9, field_names[3], GroupCount);
      }
      if (groupIds_.Count > 0) {
        output.WriteStringArray(10, field_names[4], groupIds_);
      }
      if (hasObjectSource) {
        output.WriteInt32(11, field_names[6], ObjectSource);
      }
      if (hasReferId) {
        output.WriteInt64(12, field_names[9], ReferId);
      }
      if (hasBlackListNumb) {
        output.WriteInt32(13, field_names[1], BlackListNumb);
      }
      if (blackList_.Count > 0) {
        output.WriteStringArray(14, field_names[0], blackList_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasObjectDesc) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ObjectDesc);
        }
        if (hasWithUserListNumb) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, WithUserListNumb);
        }
        {
          int dataSize = 0;
          foreach (string element in WithUserListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * withUserList_.Count;
        }
        if (hasPrivacy) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Privacy);
        }
        if (hasSyncFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, SyncFlag);
        }
        if (hasClientId) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ClientId);
        }
        if (hasPostBGImgType) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, PostBGImgType);
        }
        if (hasGroupCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, GroupCount);
        }
        {
          int dataSize = 0;
          foreach (string element in GroupIdsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * groupIds_.Count;
        }
        if (hasObjectSource) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, ObjectSource);
        }
        if (hasReferId) {
          size += pb::CodedOutputStream.ComputeInt64Size(12, ReferId);
        }
        if (hasBlackListNumb) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, BlackListNumb);
        }
        {
          int dataSize = 0;
          foreach (string element in BlackListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * blackList_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MMSnsPostRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMSnsPostRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMSnsPostRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMSnsPostRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMSnsPostRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMSnsPostRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MMSnsPostRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MMSnsPostRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MMSnsPostRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMSnsPostRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MMSnsPostRequest MakeReadOnly() {
      withUserList_.MakeReadOnly();
      groupIds_.MakeReadOnly();
      blackList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MMSnsPostRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MMSnsPostRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MMSnsPostRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MMSnsPostRequest result;
      
      private MMSnsPostRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          MMSnsPostRequest original = result;
          result = new MMSnsPostRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MMSnsPostRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.MMSnsPostRequest.Descriptor; }
      }
      
      public override MMSnsPostRequest DefaultInstanceForType {
        get { return global::mm.command.MMSnsPostRequest.DefaultInstance; }
      }
      
      public override MMSnsPostRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MMSnsPostRequest) {
          return MergeFrom((MMSnsPostRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MMSnsPostRequest other) {
        if (other == global::mm.command.MMSnsPostRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasObjectDesc) {
          MergeObjectDesc(other.ObjectDesc);
        }
        if (other.HasWithUserListNumb) {
          WithUserListNumb = other.WithUserListNumb;
        }
        if (other.withUserList_.Count != 0) {
          result.withUserList_.Add(other.withUserList_);
        }
        if (other.HasPrivacy) {
          Privacy = other.Privacy;
        }
        if (other.HasSyncFlag) {
          SyncFlag = other.SyncFlag;
        }
        if (other.HasClientId) {
          ClientId = other.ClientId;
        }
        if (other.HasPostBGImgType) {
          PostBGImgType = other.PostBGImgType;
        }
        if (other.HasGroupCount) {
          GroupCount = other.GroupCount;
        }
        if (other.groupIds_.Count != 0) {
          result.groupIds_.Add(other.groupIds_);
        }
        if (other.HasObjectSource) {
          ObjectSource = other.ObjectSource;
        }
        if (other.HasReferId) {
          ReferId = other.ReferId;
        }
        if (other.HasBlackListNumb) {
          BlackListNumb = other.BlackListNumb;
        }
        if (other.blackList_.Count != 0) {
          result.blackList_.Add(other.blackList_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mMSnsPostRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mMSnsPostRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasObjectDesc) {
                subBuilder.MergeFrom(ObjectDesc);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ObjectDesc = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasWithUserListNumb = input.ReadInt32(ref result.withUserListNumb_);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.withUserList_);
              break;
            }
            case 40: {
              result.hasPrivacy = input.ReadInt32(ref result.privacy_);
              break;
            }
            case 48: {
              result.hasSyncFlag = input.ReadInt32(ref result.syncFlag_);
              break;
            }
            case 58: {
              result.hasClientId = input.ReadString(ref result.clientId_);
              break;
            }
            case 64: {
              result.hasPostBGImgType = input.ReadInt32(ref result.postBGImgType_);
              break;
            }
            case 72: {
              result.hasGroupCount = input.ReadInt32(ref result.groupCount_);
              break;
            }
            case 82: {
              input.ReadStringArray(tag, field_name, result.groupIds_);
              break;
            }
            case 88: {
              result.hasObjectSource = input.ReadInt32(ref result.objectSource_);
              break;
            }
            case 96: {
              result.hasReferId = input.ReadInt64(ref result.referId_);
              break;
            }
            case 104: {
              result.hasBlackListNumb = input.ReadInt32(ref result.blackListNumb_);
              break;
            }
            case 114: {
              input.ReadStringArray(tag, field_name, result.blackList_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasObjectDesc {
       get { return result.hasObjectDesc; }
      }
      public global::mm.command.SKBuiltinBuffer_t ObjectDesc {
        get { return result.ObjectDesc; }
        set { SetObjectDesc(value); }
      }
      public Builder SetObjectDesc(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasObjectDesc = true;
        result.objectDesc_ = value;
        return this;
      }
      public Builder SetObjectDesc(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasObjectDesc = true;
        result.objectDesc_ = builderForValue.Build();
        return this;
      }
      public Builder MergeObjectDesc(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasObjectDesc &&
            result.objectDesc_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.objectDesc_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.objectDesc_).MergeFrom(value).BuildPartial();
        } else {
          result.objectDesc_ = value;
        }
        result.hasObjectDesc = true;
        return this;
      }
      public Builder ClearObjectDesc() {
        PrepareBuilder();
        result.hasObjectDesc = false;
        result.objectDesc_ = null;
        return this;
      }
      
      public bool HasWithUserListNumb {
        get { return result.hasWithUserListNumb; }
      }
      public int WithUserListNumb {
        get { return result.WithUserListNumb; }
        set { SetWithUserListNumb(value); }
      }
      public Builder SetWithUserListNumb(int value) {
        PrepareBuilder();
        result.hasWithUserListNumb = true;
        result.withUserListNumb_ = value;
        return this;
      }
      public Builder ClearWithUserListNumb() {
        PrepareBuilder();
        result.hasWithUserListNumb = false;
        result.withUserListNumb_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> WithUserListList {
        get { return PrepareBuilder().withUserList_; }
      }
      public int WithUserListCount {
        get { return result.WithUserListCount; }
      }
      public string GetWithUserList(int index) {
        return result.GetWithUserList(index);
      }
      public Builder SetWithUserList(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.withUserList_[index] = value;
        return this;
      }
      public Builder AddWithUserList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.withUserList_.Add(value);
        return this;
      }
      public Builder AddRangeWithUserList(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.withUserList_.Add(values);
        return this;
      }
      public Builder ClearWithUserList() {
        PrepareBuilder();
        result.withUserList_.Clear();
        return this;
      }
      
      public bool HasPrivacy {
        get { return result.hasPrivacy; }
      }
      public int Privacy {
        get { return result.Privacy; }
        set { SetPrivacy(value); }
      }
      public Builder SetPrivacy(int value) {
        PrepareBuilder();
        result.hasPrivacy = true;
        result.privacy_ = value;
        return this;
      }
      public Builder ClearPrivacy() {
        PrepareBuilder();
        result.hasPrivacy = false;
        result.privacy_ = 0;
        return this;
      }
      
      public bool HasSyncFlag {
        get { return result.hasSyncFlag; }
      }
      public int SyncFlag {
        get { return result.SyncFlag; }
        set { SetSyncFlag(value); }
      }
      public Builder SetSyncFlag(int value) {
        PrepareBuilder();
        result.hasSyncFlag = true;
        result.syncFlag_ = value;
        return this;
      }
      public Builder ClearSyncFlag() {
        PrepareBuilder();
        result.hasSyncFlag = false;
        result.syncFlag_ = 0;
        return this;
      }
      
      public bool HasClientId {
        get { return result.hasClientId; }
      }
      public string ClientId {
        get { return result.ClientId; }
        set { SetClientId(value); }
      }
      public Builder SetClientId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientId = true;
        result.clientId_ = value;
        return this;
      }
      public Builder ClearClientId() {
        PrepareBuilder();
        result.hasClientId = false;
        result.clientId_ = "";
        return this;
      }
      
      public bool HasPostBGImgType {
        get { return result.hasPostBGImgType; }
      }
      public int PostBGImgType {
        get { return result.PostBGImgType; }
        set { SetPostBGImgType(value); }
      }
      public Builder SetPostBGImgType(int value) {
        PrepareBuilder();
        result.hasPostBGImgType = true;
        result.postBGImgType_ = value;
        return this;
      }
      public Builder ClearPostBGImgType() {
        PrepareBuilder();
        result.hasPostBGImgType = false;
        result.postBGImgType_ = 0;
        return this;
      }
      
      public bool HasGroupCount {
        get { return result.hasGroupCount; }
      }
      public int GroupCount {
        get { return result.GroupCount; }
        set { SetGroupCount(value); }
      }
      public Builder SetGroupCount(int value) {
        PrepareBuilder();
        result.hasGroupCount = true;
        result.groupCount_ = value;
        return this;
      }
      public Builder ClearGroupCount() {
        PrepareBuilder();
        result.hasGroupCount = false;
        result.groupCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> GroupIdsList {
        get { return PrepareBuilder().groupIds_; }
      }
      public int GroupIdsCount {
        get { return result.GroupIdsCount; }
      }
      public string GetGroupIds(int index) {
        return result.GetGroupIds(index);
      }
      public Builder SetGroupIds(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groupIds_[index] = value;
        return this;
      }
      public Builder AddGroupIds(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groupIds_.Add(value);
        return this;
      }
      public Builder AddRangeGroupIds(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.groupIds_.Add(values);
        return this;
      }
      public Builder ClearGroupIds() {
        PrepareBuilder();
        result.groupIds_.Clear();
        return this;
      }
      
      public bool HasObjectSource {
        get { return result.hasObjectSource; }
      }
      public int ObjectSource {
        get { return result.ObjectSource; }
        set { SetObjectSource(value); }
      }
      public Builder SetObjectSource(int value) {
        PrepareBuilder();
        result.hasObjectSource = true;
        result.objectSource_ = value;
        return this;
      }
      public Builder ClearObjectSource() {
        PrepareBuilder();
        result.hasObjectSource = false;
        result.objectSource_ = 0;
        return this;
      }
      
      public bool HasReferId {
        get { return result.hasReferId; }
      }
      public long ReferId {
        get { return result.ReferId; }
        set { SetReferId(value); }
      }
      public Builder SetReferId(long value) {
        PrepareBuilder();
        result.hasReferId = true;
        result.referId_ = value;
        return this;
      }
      public Builder ClearReferId() {
        PrepareBuilder();
        result.hasReferId = false;
        result.referId_ = 0L;
        return this;
      }
      
      public bool HasBlackListNumb {
        get { return result.hasBlackListNumb; }
      }
      public int BlackListNumb {
        get { return result.BlackListNumb; }
        set { SetBlackListNumb(value); }
      }
      public Builder SetBlackListNumb(int value) {
        PrepareBuilder();
        result.hasBlackListNumb = true;
        result.blackListNumb_ = value;
        return this;
      }
      public Builder ClearBlackListNumb() {
        PrepareBuilder();
        result.hasBlackListNumb = false;
        result.blackListNumb_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> BlackListList {
        get { return PrepareBuilder().blackList_; }
      }
      public int BlackListCount {
        get { return result.BlackListCount; }
      }
      public string GetBlackList(int index) {
        return result.GetBlackList(index);
      }
      public Builder SetBlackList(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.blackList_[index] = value;
        return this;
      }
      public Builder AddBlackList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.blackList_.Add(value);
        return this;
      }
      public Builder AddRangeBlackList(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.blackList_.Add(values);
        return this;
      }
      public Builder ClearBlackList() {
        PrepareBuilder();
        result.blackList_.Clear();
        return this;
      }
    }
    static MMSnsPostRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MMSnsPostResponse : pb::GeneratedMessage<MMSnsPostResponse, MMSnsPostResponse.Builder> {
    private MMSnsPostResponse() { }
    private static readonly MMSnsPostResponse defaultInstance = new MMSnsPostResponse().MakeReadOnly();
    private static readonly string[] _mMSnsPostResponseFieldNames = new string[] { "base" };
    private static readonly uint[] _mMSnsPostResponseFieldTags = new uint[] { 10 };
    public static MMSnsPostResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MMSnsPostResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MMSnsPostResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MMSnsPostResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MMSnsPostResponse, MMSnsPostResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MMSnsPostResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mMSnsPostResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MMSnsPostResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMSnsPostResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMSnsPostResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MMSnsPostResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MMSnsPostResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMSnsPostResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MMSnsPostResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MMSnsPostResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MMSnsPostResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MMSnsPostResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MMSnsPostResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MMSnsPostResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MMSnsPostResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MMSnsPostResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MMSnsPostResponse result;
      
      private MMSnsPostResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          MMSnsPostResponse original = result;
          result = new MMSnsPostResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MMSnsPostResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.MMSnsPostResponse.Descriptor; }
      }
      
      public override MMSnsPostResponse DefaultInstanceForType {
        get { return global::mm.command.MMSnsPostResponse.DefaultInstance; }
      }
      
      public override MMSnsPostResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MMSnsPostResponse) {
          return MergeFrom((MMSnsPostResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MMSnsPostResponse other) {
        if (other == global::mm.command.MMSnsPostResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mMSnsPostResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mMSnsPostResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
    }
    static MMSnsPostResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MmsnsuploadRequest : pb::GeneratedMessage<MmsnsuploadRequest, MmsnsuploadRequest.Builder> {
    private MmsnsuploadRequest() { }
    private static readonly MmsnsuploadRequest defaultInstance = new MmsnsuploadRequest().MakeReadOnly();
    private static readonly string[] _mmsnsuploadRequestFieldNames = new string[] { "Buffer", "ClientId", "Description", "FilterStype", "NetType", "PhotoFrom", "StartPos", "SyncFlag", "TotalLen", "TwitterInfo", "Type", "base" };
    private static readonly uint[] _mmsnsuploadRequestFieldTags = new uint[] { 42, 50, 74, 56, 88, 80, 24, 64, 32, 98, 16, 10 };
    public static MmsnsuploadRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MmsnsuploadRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MmsnsuploadRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MmsnsuploadRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MmsnsuploadRequest, MmsnsuploadRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MmsnsuploadRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int StartPosFieldNumber = 3;
    private bool hasStartPos;
    private int startPos_;
    public bool HasStartPos {
      get { return hasStartPos; }
    }
    public int StartPos {
      get { return startPos_; }
    }
    
    public const int TotalLenFieldNumber = 4;
    private bool hasTotalLen;
    private int totalLen_;
    public bool HasTotalLen {
      get { return hasTotalLen; }
    }
    public int TotalLen {
      get { return totalLen_; }
    }
    
    public const int BufferFieldNumber = 5;
    private bool hasBuffer;
    private global::mm.command.SKBuiltinBuffer_t buffer_;
    public bool HasBuffer {
      get { return hasBuffer; }
    }
    public global::mm.command.SKBuiltinBuffer_t Buffer {
      get { return buffer_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int ClientIdFieldNumber = 6;
    private bool hasClientId;
    private string clientId_ = "";
    public bool HasClientId {
      get { return hasClientId; }
    }
    public string ClientId {
      get { return clientId_; }
    }
    
    public const int FilterStypeFieldNumber = 7;
    private bool hasFilterStype;
    private int filterStype_;
    public bool HasFilterStype {
      get { return hasFilterStype; }
    }
    public int FilterStype {
      get { return filterStype_; }
    }
    
    public const int SyncFlagFieldNumber = 8;
    private bool hasSyncFlag;
    private int syncFlag_;
    public bool HasSyncFlag {
      get { return hasSyncFlag; }
    }
    public int SyncFlag {
      get { return syncFlag_; }
    }
    
    public const int DescriptionFieldNumber = 9;
    private bool hasDescription;
    private string description_ = "";
    public bool HasDescription {
      get { return hasDescription; }
    }
    public string Description {
      get { return description_; }
    }
    
    public const int PhotoFromFieldNumber = 10;
    private bool hasPhotoFrom;
    private int photoFrom_;
    public bool HasPhotoFrom {
      get { return hasPhotoFrom; }
    }
    public int PhotoFrom {
      get { return photoFrom_; }
    }
    
    public const int NetTypeFieldNumber = 11;
    private bool hasNetType;
    private int netType_;
    public bool HasNetType {
      get { return hasNetType; }
    }
    public int NetType {
      get { return netType_; }
    }
    
    public const int TwitterInfoFieldNumber = 12;
    private bool hasTwitterInfo;
    private global::mm.command.TwitterInfoObj twitterInfo_;
    public bool HasTwitterInfo {
      get { return hasTwitterInfo; }
    }
    public global::mm.command.TwitterInfoObj TwitterInfo {
      get { return twitterInfo_ ?? global::mm.command.TwitterInfoObj.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasType) return false;
        if (!hasStartPos) return false;
        if (!hasTotalLen) return false;
        if (!hasBuffer) return false;
        if (!Base.IsInitialized) return false;
        if (!Buffer.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mmsnsuploadRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[11], Base);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[10], Type);
      }
      if (hasStartPos) {
        output.WriteInt32(3, field_names[6], StartPos);
      }
      if (hasTotalLen) {
        output.WriteInt32(4, field_names[8], TotalLen);
      }
      if (hasBuffer) {
        output.WriteMessage(5, field_names[0], Buffer);
      }
      if (hasClientId) {
        output.WriteString(6, field_names[1], ClientId);
      }
      if (hasFilterStype) {
        output.WriteInt32(7, field_names[3], FilterStype);
      }
      if (hasSyncFlag) {
        output.WriteInt32(8, field_names[7], SyncFlag);
      }
      if (hasDescription) {
        output.WriteString(9, field_names[2], Description);
      }
      if (hasPhotoFrom) {
        output.WriteInt32(10, field_names[5], PhotoFrom);
      }
      if (hasNetType) {
        output.WriteInt32(11, field_names[4], NetType);
      }
      if (hasTwitterInfo) {
        output.WriteMessage(12, field_names[9], TwitterInfo);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
        }
        if (hasStartPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, StartPos);
        }
        if (hasTotalLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, TotalLen);
        }
        if (hasBuffer) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Buffer);
        }
        if (hasClientId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ClientId);
        }
        if (hasFilterStype) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, FilterStype);
        }
        if (hasSyncFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, SyncFlag);
        }
        if (hasDescription) {
          size += pb::CodedOutputStream.ComputeStringSize(9, Description);
        }
        if (hasPhotoFrom) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, PhotoFrom);
        }
        if (hasNetType) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, NetType);
        }
        if (hasTwitterInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, TwitterInfo);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MmsnsuploadRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MmsnsuploadRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuploadRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MmsnsuploadRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuploadRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MmsnsuploadRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuploadRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MmsnsuploadRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MmsnsuploadRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MmsnsuploadRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MmsnsuploadRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MmsnsuploadRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MmsnsuploadRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MmsnsuploadRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MmsnsuploadRequest result;
      
      private MmsnsuploadRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          MmsnsuploadRequest original = result;
          result = new MmsnsuploadRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MmsnsuploadRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.MmsnsuploadRequest.Descriptor; }
      }
      
      public override MmsnsuploadRequest DefaultInstanceForType {
        get { return global::mm.command.MmsnsuploadRequest.DefaultInstance; }
      }
      
      public override MmsnsuploadRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MmsnsuploadRequest) {
          return MergeFrom((MmsnsuploadRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MmsnsuploadRequest other) {
        if (other == global::mm.command.MmsnsuploadRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasStartPos) {
          StartPos = other.StartPos;
        }
        if (other.HasTotalLen) {
          TotalLen = other.TotalLen;
        }
        if (other.HasBuffer) {
          MergeBuffer(other.Buffer);
        }
        if (other.HasClientId) {
          ClientId = other.ClientId;
        }
        if (other.HasFilterStype) {
          FilterStype = other.FilterStype;
        }
        if (other.HasSyncFlag) {
          SyncFlag = other.SyncFlag;
        }
        if (other.HasDescription) {
          Description = other.Description;
        }
        if (other.HasPhotoFrom) {
          PhotoFrom = other.PhotoFrom;
        }
        if (other.HasNetType) {
          NetType = other.NetType;
        }
        if (other.HasTwitterInfo) {
          MergeTwitterInfo(other.TwitterInfo);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mmsnsuploadRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mmsnsuploadRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 24: {
              result.hasStartPos = input.ReadInt32(ref result.startPos_);
              break;
            }
            case 32: {
              result.hasTotalLen = input.ReadInt32(ref result.totalLen_);
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasBuffer) {
                subBuilder.MergeFrom(Buffer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Buffer = subBuilder.BuildPartial();
              break;
            }
            case 50: {
              result.hasClientId = input.ReadString(ref result.clientId_);
              break;
            }
            case 56: {
              result.hasFilterStype = input.ReadInt32(ref result.filterStype_);
              break;
            }
            case 64: {
              result.hasSyncFlag = input.ReadInt32(ref result.syncFlag_);
              break;
            }
            case 74: {
              result.hasDescription = input.ReadString(ref result.description_);
              break;
            }
            case 80: {
              result.hasPhotoFrom = input.ReadInt32(ref result.photoFrom_);
              break;
            }
            case 88: {
              result.hasNetType = input.ReadInt32(ref result.netType_);
              break;
            }
            case 98: {
              global::mm.command.TwitterInfoObj.Builder subBuilder = global::mm.command.TwitterInfoObj.CreateBuilder();
              if (result.hasTwitterInfo) {
                subBuilder.MergeFrom(TwitterInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TwitterInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasStartPos {
        get { return result.hasStartPos; }
      }
      public int StartPos {
        get { return result.StartPos; }
        set { SetStartPos(value); }
      }
      public Builder SetStartPos(int value) {
        PrepareBuilder();
        result.hasStartPos = true;
        result.startPos_ = value;
        return this;
      }
      public Builder ClearStartPos() {
        PrepareBuilder();
        result.hasStartPos = false;
        result.startPos_ = 0;
        return this;
      }
      
      public bool HasTotalLen {
        get { return result.hasTotalLen; }
      }
      public int TotalLen {
        get { return result.TotalLen; }
        set { SetTotalLen(value); }
      }
      public Builder SetTotalLen(int value) {
        PrepareBuilder();
        result.hasTotalLen = true;
        result.totalLen_ = value;
        return this;
      }
      public Builder ClearTotalLen() {
        PrepareBuilder();
        result.hasTotalLen = false;
        result.totalLen_ = 0;
        return this;
      }
      
      public bool HasBuffer {
       get { return result.hasBuffer; }
      }
      public global::mm.command.SKBuiltinBuffer_t Buffer {
        get { return result.Buffer; }
        set { SetBuffer(value); }
      }
      public Builder SetBuffer(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBuffer = true;
        result.buffer_ = value;
        return this;
      }
      public Builder SetBuffer(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBuffer = true;
        result.buffer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBuffer(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBuffer &&
            result.buffer_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.buffer_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.buffer_).MergeFrom(value).BuildPartial();
        } else {
          result.buffer_ = value;
        }
        result.hasBuffer = true;
        return this;
      }
      public Builder ClearBuffer() {
        PrepareBuilder();
        result.hasBuffer = false;
        result.buffer_ = null;
        return this;
      }
      
      public bool HasClientId {
        get { return result.hasClientId; }
      }
      public string ClientId {
        get { return result.ClientId; }
        set { SetClientId(value); }
      }
      public Builder SetClientId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientId = true;
        result.clientId_ = value;
        return this;
      }
      public Builder ClearClientId() {
        PrepareBuilder();
        result.hasClientId = false;
        result.clientId_ = "";
        return this;
      }
      
      public bool HasFilterStype {
        get { return result.hasFilterStype; }
      }
      public int FilterStype {
        get { return result.FilterStype; }
        set { SetFilterStype(value); }
      }
      public Builder SetFilterStype(int value) {
        PrepareBuilder();
        result.hasFilterStype = true;
        result.filterStype_ = value;
        return this;
      }
      public Builder ClearFilterStype() {
        PrepareBuilder();
        result.hasFilterStype = false;
        result.filterStype_ = 0;
        return this;
      }
      
      public bool HasSyncFlag {
        get { return result.hasSyncFlag; }
      }
      public int SyncFlag {
        get { return result.SyncFlag; }
        set { SetSyncFlag(value); }
      }
      public Builder SetSyncFlag(int value) {
        PrepareBuilder();
        result.hasSyncFlag = true;
        result.syncFlag_ = value;
        return this;
      }
      public Builder ClearSyncFlag() {
        PrepareBuilder();
        result.hasSyncFlag = false;
        result.syncFlag_ = 0;
        return this;
      }
      
      public bool HasDescription {
        get { return result.hasDescription; }
      }
      public string Description {
        get { return result.Description; }
        set { SetDescription(value); }
      }
      public Builder SetDescription(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDescription = true;
        result.description_ = value;
        return this;
      }
      public Builder ClearDescription() {
        PrepareBuilder();
        result.hasDescription = false;
        result.description_ = "";
        return this;
      }
      
      public bool HasPhotoFrom {
        get { return result.hasPhotoFrom; }
      }
      public int PhotoFrom {
        get { return result.PhotoFrom; }
        set { SetPhotoFrom(value); }
      }
      public Builder SetPhotoFrom(int value) {
        PrepareBuilder();
        result.hasPhotoFrom = true;
        result.photoFrom_ = value;
        return this;
      }
      public Builder ClearPhotoFrom() {
        PrepareBuilder();
        result.hasPhotoFrom = false;
        result.photoFrom_ = 0;
        return this;
      }
      
      public bool HasNetType {
        get { return result.hasNetType; }
      }
      public int NetType {
        get { return result.NetType; }
        set { SetNetType(value); }
      }
      public Builder SetNetType(int value) {
        PrepareBuilder();
        result.hasNetType = true;
        result.netType_ = value;
        return this;
      }
      public Builder ClearNetType() {
        PrepareBuilder();
        result.hasNetType = false;
        result.netType_ = 0;
        return this;
      }
      
      public bool HasTwitterInfo {
       get { return result.hasTwitterInfo; }
      }
      public global::mm.command.TwitterInfoObj TwitterInfo {
        get { return result.TwitterInfo; }
        set { SetTwitterInfo(value); }
      }
      public Builder SetTwitterInfo(global::mm.command.TwitterInfoObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTwitterInfo = true;
        result.twitterInfo_ = value;
        return this;
      }
      public Builder SetTwitterInfo(global::mm.command.TwitterInfoObj.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTwitterInfo = true;
        result.twitterInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTwitterInfo(global::mm.command.TwitterInfoObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTwitterInfo &&
            result.twitterInfo_ != global::mm.command.TwitterInfoObj.DefaultInstance) {
            result.twitterInfo_ = global::mm.command.TwitterInfoObj.CreateBuilder(result.twitterInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.twitterInfo_ = value;
        }
        result.hasTwitterInfo = true;
        return this;
      }
      public Builder ClearTwitterInfo() {
        PrepareBuilder();
        result.hasTwitterInfo = false;
        result.twitterInfo_ = null;
        return this;
      }
    }
    static MmsnsuploadRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MmsnsuploadResponse : pb::GeneratedMessage<MmsnsuploadResponse, MmsnsuploadResponse.Builder> {
    private MmsnsuploadResponse() { }
    private static readonly MmsnsuploadResponse defaultInstance = new MmsnsuploadResponse().MakeReadOnly();
    private static readonly string[] _mmsnsuploadResponseFieldNames = new string[] { "BufferUrl", "ClientId", "Id", "StartPos", "ThumbUrlCount", "ThumbUrls", "TotalLen", "Type", "base" };
    private static readonly uint[] _mmsnsuploadResponseFieldTags = new uint[] { 42, 34, 64, 16, 48, 58, 24, 72, 10 };
    public static MmsnsuploadResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MmsnsuploadResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MmsnsuploadResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MmsnsuploadResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MmsnsuploadResponse, MmsnsuploadResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MmsnsuploadResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int StartPosFieldNumber = 2;
    private bool hasStartPos;
    private int startPos_;
    public bool HasStartPos {
      get { return hasStartPos; }
    }
    public int StartPos {
      get { return startPos_; }
    }
    
    public const int TotalLenFieldNumber = 3;
    private bool hasTotalLen;
    private int totalLen_;
    public bool HasTotalLen {
      get { return hasTotalLen; }
    }
    public int TotalLen {
      get { return totalLen_; }
    }
    
    public const int ClientIdFieldNumber = 4;
    private bool hasClientId;
    private string clientId_ = "";
    public bool HasClientId {
      get { return hasClientId; }
    }
    public string ClientId {
      get { return clientId_; }
    }
    
    public const int BufferUrlFieldNumber = 5;
    private bool hasBufferUrl;
    private global::mm.command.BufferUrlObj bufferUrl_;
    public bool HasBufferUrl {
      get { return hasBufferUrl; }
    }
    public global::mm.command.BufferUrlObj BufferUrl {
      get { return bufferUrl_ ?? global::mm.command.BufferUrlObj.DefaultInstance; }
    }
    
    public const int ThumbUrlCountFieldNumber = 6;
    private bool hasThumbUrlCount;
    private int thumbUrlCount_;
    public bool HasThumbUrlCount {
      get { return hasThumbUrlCount; }
    }
    public int ThumbUrlCount {
      get { return thumbUrlCount_; }
    }
    
    public const int ThumbUrlsFieldNumber = 7;
    private pbc::PopsicleList<global::mm.command.BufferUrlObj> thumbUrls_ = new pbc::PopsicleList<global::mm.command.BufferUrlObj>();
    public scg::IList<global::mm.command.BufferUrlObj> ThumbUrlsList {
      get { return thumbUrls_; }
    }
    public int ThumbUrlsCount {
      get { return thumbUrls_.Count; }
    }
    public global::mm.command.BufferUrlObj GetThumbUrls(int index) {
      return thumbUrls_[index];
    }
    
    public const int IdFieldNumber = 8;
    private bool hasId;
    private long id_;
    public bool HasId {
      get { return hasId; }
    }
    public long Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 9;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasStartPos) return false;
        if (!hasTotalLen) return false;
        if (!hasBufferUrl) return false;
        if (!hasThumbUrlCount) return false;
        if (!hasId) return false;
        if (!hasType) return false;
        if (!Base.IsInitialized) return false;
        if (!BufferUrl.IsInitialized) return false;
        foreach (global::mm.command.BufferUrlObj element in ThumbUrlsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mmsnsuploadResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[8], Base);
      }
      if (hasStartPos) {
        output.WriteInt32(2, field_names[3], StartPos);
      }
      if (hasTotalLen) {
        output.WriteInt32(3, field_names[6], TotalLen);
      }
      if (hasClientId) {
        output.WriteString(4, field_names[1], ClientId);
      }
      if (hasBufferUrl) {
        output.WriteMessage(5, field_names[0], BufferUrl);
      }
      if (hasThumbUrlCount) {
        output.WriteInt32(6, field_names[4], ThumbUrlCount);
      }
      if (thumbUrls_.Count > 0) {
        output.WriteMessageArray(7, field_names[5], thumbUrls_);
      }
      if (hasId) {
        output.WriteInt64(8, field_names[2], Id);
      }
      if (hasType) {
        output.WriteInt32(9, field_names[7], Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasStartPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, StartPos);
        }
        if (hasTotalLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, TotalLen);
        }
        if (hasClientId) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ClientId);
        }
        if (hasBufferUrl) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, BufferUrl);
        }
        if (hasThumbUrlCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, ThumbUrlCount);
        }
        foreach (global::mm.command.BufferUrlObj element in ThumbUrlsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt64Size(8, Id);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MmsnsuploadResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MmsnsuploadResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuploadResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MmsnsuploadResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuploadResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MmsnsuploadResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuploadResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MmsnsuploadResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MmsnsuploadResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MmsnsuploadResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MmsnsuploadResponse MakeReadOnly() {
      thumbUrls_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MmsnsuploadResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MmsnsuploadResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MmsnsuploadResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MmsnsuploadResponse result;
      
      private MmsnsuploadResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          MmsnsuploadResponse original = result;
          result = new MmsnsuploadResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MmsnsuploadResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.MmsnsuploadResponse.Descriptor; }
      }
      
      public override MmsnsuploadResponse DefaultInstanceForType {
        get { return global::mm.command.MmsnsuploadResponse.DefaultInstance; }
      }
      
      public override MmsnsuploadResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MmsnsuploadResponse) {
          return MergeFrom((MmsnsuploadResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MmsnsuploadResponse other) {
        if (other == global::mm.command.MmsnsuploadResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasStartPos) {
          StartPos = other.StartPos;
        }
        if (other.HasTotalLen) {
          TotalLen = other.TotalLen;
        }
        if (other.HasClientId) {
          ClientId = other.ClientId;
        }
        if (other.HasBufferUrl) {
          MergeBufferUrl(other.BufferUrl);
        }
        if (other.HasThumbUrlCount) {
          ThumbUrlCount = other.ThumbUrlCount;
        }
        if (other.thumbUrls_.Count != 0) {
          result.thumbUrls_.Add(other.thumbUrls_);
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mmsnsuploadResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mmsnsuploadResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasStartPos = input.ReadInt32(ref result.startPos_);
              break;
            }
            case 24: {
              result.hasTotalLen = input.ReadInt32(ref result.totalLen_);
              break;
            }
            case 34: {
              result.hasClientId = input.ReadString(ref result.clientId_);
              break;
            }
            case 42: {
              global::mm.command.BufferUrlObj.Builder subBuilder = global::mm.command.BufferUrlObj.CreateBuilder();
              if (result.hasBufferUrl) {
                subBuilder.MergeFrom(BufferUrl);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BufferUrl = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasThumbUrlCount = input.ReadInt32(ref result.thumbUrlCount_);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.thumbUrls_, global::mm.command.BufferUrlObj.DefaultInstance, extensionRegistry);
              break;
            }
            case 64: {
              result.hasId = input.ReadInt64(ref result.id_);
              break;
            }
            case 72: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasStartPos {
        get { return result.hasStartPos; }
      }
      public int StartPos {
        get { return result.StartPos; }
        set { SetStartPos(value); }
      }
      public Builder SetStartPos(int value) {
        PrepareBuilder();
        result.hasStartPos = true;
        result.startPos_ = value;
        return this;
      }
      public Builder ClearStartPos() {
        PrepareBuilder();
        result.hasStartPos = false;
        result.startPos_ = 0;
        return this;
      }
      
      public bool HasTotalLen {
        get { return result.hasTotalLen; }
      }
      public int TotalLen {
        get { return result.TotalLen; }
        set { SetTotalLen(value); }
      }
      public Builder SetTotalLen(int value) {
        PrepareBuilder();
        result.hasTotalLen = true;
        result.totalLen_ = value;
        return this;
      }
      public Builder ClearTotalLen() {
        PrepareBuilder();
        result.hasTotalLen = false;
        result.totalLen_ = 0;
        return this;
      }
      
      public bool HasClientId {
        get { return result.hasClientId; }
      }
      public string ClientId {
        get { return result.ClientId; }
        set { SetClientId(value); }
      }
      public Builder SetClientId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientId = true;
        result.clientId_ = value;
        return this;
      }
      public Builder ClearClientId() {
        PrepareBuilder();
        result.hasClientId = false;
        result.clientId_ = "";
        return this;
      }
      
      public bool HasBufferUrl {
       get { return result.hasBufferUrl; }
      }
      public global::mm.command.BufferUrlObj BufferUrl {
        get { return result.BufferUrl; }
        set { SetBufferUrl(value); }
      }
      public Builder SetBufferUrl(global::mm.command.BufferUrlObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBufferUrl = true;
        result.bufferUrl_ = value;
        return this;
      }
      public Builder SetBufferUrl(global::mm.command.BufferUrlObj.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBufferUrl = true;
        result.bufferUrl_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBufferUrl(global::mm.command.BufferUrlObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBufferUrl &&
            result.bufferUrl_ != global::mm.command.BufferUrlObj.DefaultInstance) {
            result.bufferUrl_ = global::mm.command.BufferUrlObj.CreateBuilder(result.bufferUrl_).MergeFrom(value).BuildPartial();
        } else {
          result.bufferUrl_ = value;
        }
        result.hasBufferUrl = true;
        return this;
      }
      public Builder ClearBufferUrl() {
        PrepareBuilder();
        result.hasBufferUrl = false;
        result.bufferUrl_ = null;
        return this;
      }
      
      public bool HasThumbUrlCount {
        get { return result.hasThumbUrlCount; }
      }
      public int ThumbUrlCount {
        get { return result.ThumbUrlCount; }
        set { SetThumbUrlCount(value); }
      }
      public Builder SetThumbUrlCount(int value) {
        PrepareBuilder();
        result.hasThumbUrlCount = true;
        result.thumbUrlCount_ = value;
        return this;
      }
      public Builder ClearThumbUrlCount() {
        PrepareBuilder();
        result.hasThumbUrlCount = false;
        result.thumbUrlCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.BufferUrlObj> ThumbUrlsList {
        get { return PrepareBuilder().thumbUrls_; }
      }
      public int ThumbUrlsCount {
        get { return result.ThumbUrlsCount; }
      }
      public global::mm.command.BufferUrlObj GetThumbUrls(int index) {
        return result.GetThumbUrls(index);
      }
      public Builder SetThumbUrls(int index, global::mm.command.BufferUrlObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.thumbUrls_[index] = value;
        return this;
      }
      public Builder SetThumbUrls(int index, global::mm.command.BufferUrlObj.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.thumbUrls_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddThumbUrls(global::mm.command.BufferUrlObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.thumbUrls_.Add(value);
        return this;
      }
      public Builder AddThumbUrls(global::mm.command.BufferUrlObj.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.thumbUrls_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeThumbUrls(scg::IEnumerable<global::mm.command.BufferUrlObj> values) {
        PrepareBuilder();
        result.thumbUrls_.Add(values);
        return this;
      }
      public Builder ClearThumbUrls() {
        PrepareBuilder();
        result.thumbUrls_.Clear();
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public long Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(long value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0L;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static MmsnsuploadResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UploadMsgImgRequest : pb::GeneratedMessage<UploadMsgImgRequest, UploadMsgImgRequest.Builder> {
    private UploadMsgImgRequest() { }
    private static readonly UploadMsgImgRequest defaultInstance = new UploadMsgImgRequest().MakeReadOnly();
    private static readonly string[] _uploadMsgImgRequestFieldNames = new string[] { "AESKey", "CDNBigImgSize", "CDNBigImgUrl", "CDNMidImgSize", "CDNMidImgUrl", "CDNThumbAESKey", "CDNThumbImgHeight", "CDNThumbImgSize", "CDNThumbImgUrl", "CDNThumbImgWidth", "ClientImgId", "CompressType", "Data", "DataLen", "EncryVer", "FromUserName", "MediaId", "MsgSource", "MsgType", "NetType", "PhotoFrom", "StartPos", "ToUserName", "TotalLen", "base" };
    private static readonly uint[] _uploadMsgImgRequestFieldTags = new uint[] { 138, 152, 122, 160, 130, 202, 184, 176, 170, 192, 18, 88, 66, 56, 144, 26, 114, 82, 72, 96, 104, 48, 34, 40, 10 };
    public static UploadMsgImgRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UploadMsgImgRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UploadMsgImgRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadMsgImgRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UploadMsgImgRequest, UploadMsgImgRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadMsgImgRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int ClientImgIdFieldNumber = 2;
    private bool hasClientImgId;
    private global::mm.command.SKBuiltinString_t clientImgId_;
    public bool HasClientImgId {
      get { return hasClientImgId; }
    }
    public global::mm.command.SKBuiltinString_t ClientImgId {
      get { return clientImgId_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int FromUserNameFieldNumber = 3;
    private bool hasFromUserName;
    private global::mm.command.SKBuiltinString_t fromUserName_;
    public bool HasFromUserName {
      get { return hasFromUserName; }
    }
    public global::mm.command.SKBuiltinString_t FromUserName {
      get { return fromUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int ToUserNameFieldNumber = 4;
    private bool hasToUserName;
    private global::mm.command.SKBuiltinString_t toUserName_;
    public bool HasToUserName {
      get { return hasToUserName; }
    }
    public global::mm.command.SKBuiltinString_t ToUserName {
      get { return toUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int TotalLenFieldNumber = 5;
    private bool hasTotalLen;
    private int totalLen_;
    public bool HasTotalLen {
      get { return hasTotalLen; }
    }
    public int TotalLen {
      get { return totalLen_; }
    }
    
    public const int StartPosFieldNumber = 6;
    private bool hasStartPos;
    private int startPos_;
    public bool HasStartPos {
      get { return hasStartPos; }
    }
    public int StartPos {
      get { return startPos_; }
    }
    
    public const int DataLenFieldNumber = 7;
    private bool hasDataLen;
    private int dataLen_;
    public bool HasDataLen {
      get { return hasDataLen; }
    }
    public int DataLen {
      get { return dataLen_; }
    }
    
    public const int DataFieldNumber = 8;
    private bool hasData;
    private global::mm.command.SKBuiltinBuffer_t data_;
    public bool HasData {
      get { return hasData; }
    }
    public global::mm.command.SKBuiltinBuffer_t Data {
      get { return data_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int MsgTypeFieldNumber = 9;
    private bool hasMsgType;
    private int msgType_;
    public bool HasMsgType {
      get { return hasMsgType; }
    }
    public int MsgType {
      get { return msgType_; }
    }
    
    public const int MsgSourceFieldNumber = 10;
    private bool hasMsgSource;
    private string msgSource_ = "";
    public bool HasMsgSource {
      get { return hasMsgSource; }
    }
    public string MsgSource {
      get { return msgSource_; }
    }
    
    public const int CompressTypeFieldNumber = 11;
    private bool hasCompressType;
    private int compressType_;
    public bool HasCompressType {
      get { return hasCompressType; }
    }
    public int CompressType {
      get { return compressType_; }
    }
    
    public const int NetTypeFieldNumber = 12;
    private bool hasNetType;
    private int netType_;
    public bool HasNetType {
      get { return hasNetType; }
    }
    public int NetType {
      get { return netType_; }
    }
    
    public const int PhotoFromFieldNumber = 13;
    private bool hasPhotoFrom;
    private int photoFrom_;
    public bool HasPhotoFrom {
      get { return hasPhotoFrom; }
    }
    public int PhotoFrom {
      get { return photoFrom_; }
    }
    
    public const int MediaIdFieldNumber = 14;
    private bool hasMediaId;
    private string mediaId_ = "";
    public bool HasMediaId {
      get { return hasMediaId; }
    }
    public string MediaId {
      get { return mediaId_; }
    }
    
    public const int CDNBigImgUrlFieldNumber = 15;
    private bool hasCDNBigImgUrl;
    private string cDNBigImgUrl_ = "";
    public bool HasCDNBigImgUrl {
      get { return hasCDNBigImgUrl; }
    }
    public string CDNBigImgUrl {
      get { return cDNBigImgUrl_; }
    }
    
    public const int CDNMidImgUrlFieldNumber = 16;
    private bool hasCDNMidImgUrl;
    private string cDNMidImgUrl_ = "";
    public bool HasCDNMidImgUrl {
      get { return hasCDNMidImgUrl; }
    }
    public string CDNMidImgUrl {
      get { return cDNMidImgUrl_; }
    }
    
    public const int AESKeyFieldNumber = 17;
    private bool hasAESKey;
    private string aESKey_ = "";
    public bool HasAESKey {
      get { return hasAESKey; }
    }
    public string AESKey {
      get { return aESKey_; }
    }
    
    public const int EncryVerFieldNumber = 18;
    private bool hasEncryVer;
    private int encryVer_;
    public bool HasEncryVer {
      get { return hasEncryVer; }
    }
    public int EncryVer {
      get { return encryVer_; }
    }
    
    public const int CDNBigImgSizeFieldNumber = 19;
    private bool hasCDNBigImgSize;
    private int cDNBigImgSize_;
    public bool HasCDNBigImgSize {
      get { return hasCDNBigImgSize; }
    }
    public int CDNBigImgSize {
      get { return cDNBigImgSize_; }
    }
    
    public const int CDNMidImgSizeFieldNumber = 20;
    private bool hasCDNMidImgSize;
    private int cDNMidImgSize_;
    public bool HasCDNMidImgSize {
      get { return hasCDNMidImgSize; }
    }
    public int CDNMidImgSize {
      get { return cDNMidImgSize_; }
    }
    
    public const int CDNThumbImgUrlFieldNumber = 21;
    private bool hasCDNThumbImgUrl;
    private string cDNThumbImgUrl_ = "";
    public bool HasCDNThumbImgUrl {
      get { return hasCDNThumbImgUrl; }
    }
    public string CDNThumbImgUrl {
      get { return cDNThumbImgUrl_; }
    }
    
    public const int CDNThumbImgSizeFieldNumber = 22;
    private bool hasCDNThumbImgSize;
    private int cDNThumbImgSize_;
    public bool HasCDNThumbImgSize {
      get { return hasCDNThumbImgSize; }
    }
    public int CDNThumbImgSize {
      get { return cDNThumbImgSize_; }
    }
    
    public const int CDNThumbImgHeightFieldNumber = 23;
    private bool hasCDNThumbImgHeight;
    private int cDNThumbImgHeight_;
    public bool HasCDNThumbImgHeight {
      get { return hasCDNThumbImgHeight; }
    }
    public int CDNThumbImgHeight {
      get { return cDNThumbImgHeight_; }
    }
    
    public const int CDNThumbImgWidthFieldNumber = 24;
    private bool hasCDNThumbImgWidth;
    private int cDNThumbImgWidth_;
    public bool HasCDNThumbImgWidth {
      get { return hasCDNThumbImgWidth; }
    }
    public int CDNThumbImgWidth {
      get { return cDNThumbImgWidth_; }
    }
    
    public const int CDNThumbAESKeyFieldNumber = 25;
    private bool hasCDNThumbAESKey;
    private string cDNThumbAESKey_ = "";
    public bool HasCDNThumbAESKey {
      get { return hasCDNThumbAESKey; }
    }
    public string CDNThumbAESKey {
      get { return cDNThumbAESKey_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasClientImgId) return false;
        if (!hasFromUserName) return false;
        if (!hasToUserName) return false;
        if (!hasTotalLen) return false;
        if (!hasStartPos) return false;
        if (!hasDataLen) return false;
        if (!hasData) return false;
        if (!Base.IsInitialized) return false;
        if (!Data.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _uploadMsgImgRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[24], Base);
      }
      if (hasClientImgId) {
        output.WriteMessage(2, field_names[10], ClientImgId);
      }
      if (hasFromUserName) {
        output.WriteMessage(3, field_names[15], FromUserName);
      }
      if (hasToUserName) {
        output.WriteMessage(4, field_names[22], ToUserName);
      }
      if (hasTotalLen) {
        output.WriteInt32(5, field_names[23], TotalLen);
      }
      if (hasStartPos) {
        output.WriteInt32(6, field_names[21], StartPos);
      }
      if (hasDataLen) {
        output.WriteInt32(7, field_names[13], DataLen);
      }
      if (hasData) {
        output.WriteMessage(8, field_names[12], Data);
      }
      if (hasMsgType) {
        output.WriteInt32(9, field_names[18], MsgType);
      }
      if (hasMsgSource) {
        output.WriteString(10, field_names[17], MsgSource);
      }
      if (hasCompressType) {
        output.WriteInt32(11, field_names[11], CompressType);
      }
      if (hasNetType) {
        output.WriteInt32(12, field_names[19], NetType);
      }
      if (hasPhotoFrom) {
        output.WriteInt32(13, field_names[20], PhotoFrom);
      }
      if (hasMediaId) {
        output.WriteString(14, field_names[16], MediaId);
      }
      if (hasCDNBigImgUrl) {
        output.WriteString(15, field_names[2], CDNBigImgUrl);
      }
      if (hasCDNMidImgUrl) {
        output.WriteString(16, field_names[4], CDNMidImgUrl);
      }
      if (hasAESKey) {
        output.WriteString(17, field_names[0], AESKey);
      }
      if (hasEncryVer) {
        output.WriteInt32(18, field_names[14], EncryVer);
      }
      if (hasCDNBigImgSize) {
        output.WriteInt32(19, field_names[1], CDNBigImgSize);
      }
      if (hasCDNMidImgSize) {
        output.WriteInt32(20, field_names[3], CDNMidImgSize);
      }
      if (hasCDNThumbImgUrl) {
        output.WriteString(21, field_names[8], CDNThumbImgUrl);
      }
      if (hasCDNThumbImgSize) {
        output.WriteInt32(22, field_names[7], CDNThumbImgSize);
      }
      if (hasCDNThumbImgHeight) {
        output.WriteInt32(23, field_names[6], CDNThumbImgHeight);
      }
      if (hasCDNThumbImgWidth) {
        output.WriteInt32(24, field_names[9], CDNThumbImgWidth);
      }
      if (hasCDNThumbAESKey) {
        output.WriteString(25, field_names[5], CDNThumbAESKey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasClientImgId) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, ClientImgId);
        }
        if (hasFromUserName) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, FromUserName);
        }
        if (hasToUserName) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, ToUserName);
        }
        if (hasTotalLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, TotalLen);
        }
        if (hasStartPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, StartPos);
        }
        if (hasDataLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, DataLen);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Data);
        }
        if (hasMsgType) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, MsgType);
        }
        if (hasMsgSource) {
          size += pb::CodedOutputStream.ComputeStringSize(10, MsgSource);
        }
        if (hasCompressType) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, CompressType);
        }
        if (hasNetType) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, NetType);
        }
        if (hasPhotoFrom) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, PhotoFrom);
        }
        if (hasMediaId) {
          size += pb::CodedOutputStream.ComputeStringSize(14, MediaId);
        }
        if (hasCDNBigImgUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(15, CDNBigImgUrl);
        }
        if (hasCDNMidImgUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(16, CDNMidImgUrl);
        }
        if (hasAESKey) {
          size += pb::CodedOutputStream.ComputeStringSize(17, AESKey);
        }
        if (hasEncryVer) {
          size += pb::CodedOutputStream.ComputeInt32Size(18, EncryVer);
        }
        if (hasCDNBigImgSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(19, CDNBigImgSize);
        }
        if (hasCDNMidImgSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, CDNMidImgSize);
        }
        if (hasCDNThumbImgUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(21, CDNThumbImgUrl);
        }
        if (hasCDNThumbImgSize) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, CDNThumbImgSize);
        }
        if (hasCDNThumbImgHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(23, CDNThumbImgHeight);
        }
        if (hasCDNThumbImgWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(24, CDNThumbImgWidth);
        }
        if (hasCDNThumbAESKey) {
          size += pb::CodedOutputStream.ComputeStringSize(25, CDNThumbAESKey);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UploadMsgImgRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadMsgImgRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadMsgImgRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadMsgImgRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadMsgImgRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadMsgImgRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UploadMsgImgRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UploadMsgImgRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UploadMsgImgRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadMsgImgRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UploadMsgImgRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UploadMsgImgRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UploadMsgImgRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UploadMsgImgRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UploadMsgImgRequest result;
      
      private UploadMsgImgRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          UploadMsgImgRequest original = result;
          result = new UploadMsgImgRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UploadMsgImgRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.UploadMsgImgRequest.Descriptor; }
      }
      
      public override UploadMsgImgRequest DefaultInstanceForType {
        get { return global::mm.command.UploadMsgImgRequest.DefaultInstance; }
      }
      
      public override UploadMsgImgRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UploadMsgImgRequest) {
          return MergeFrom((UploadMsgImgRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UploadMsgImgRequest other) {
        if (other == global::mm.command.UploadMsgImgRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasClientImgId) {
          MergeClientImgId(other.ClientImgId);
        }
        if (other.HasFromUserName) {
          MergeFromUserName(other.FromUserName);
        }
        if (other.HasToUserName) {
          MergeToUserName(other.ToUserName);
        }
        if (other.HasTotalLen) {
          TotalLen = other.TotalLen;
        }
        if (other.HasStartPos) {
          StartPos = other.StartPos;
        }
        if (other.HasDataLen) {
          DataLen = other.DataLen;
        }
        if (other.HasData) {
          MergeData(other.Data);
        }
        if (other.HasMsgType) {
          MsgType = other.MsgType;
        }
        if (other.HasMsgSource) {
          MsgSource = other.MsgSource;
        }
        if (other.HasCompressType) {
          CompressType = other.CompressType;
        }
        if (other.HasNetType) {
          NetType = other.NetType;
        }
        if (other.HasPhotoFrom) {
          PhotoFrom = other.PhotoFrom;
        }
        if (other.HasMediaId) {
          MediaId = other.MediaId;
        }
        if (other.HasCDNBigImgUrl) {
          CDNBigImgUrl = other.CDNBigImgUrl;
        }
        if (other.HasCDNMidImgUrl) {
          CDNMidImgUrl = other.CDNMidImgUrl;
        }
        if (other.HasAESKey) {
          AESKey = other.AESKey;
        }
        if (other.HasEncryVer) {
          EncryVer = other.EncryVer;
        }
        if (other.HasCDNBigImgSize) {
          CDNBigImgSize = other.CDNBigImgSize;
        }
        if (other.HasCDNMidImgSize) {
          CDNMidImgSize = other.CDNMidImgSize;
        }
        if (other.HasCDNThumbImgUrl) {
          CDNThumbImgUrl = other.CDNThumbImgUrl;
        }
        if (other.HasCDNThumbImgSize) {
          CDNThumbImgSize = other.CDNThumbImgSize;
        }
        if (other.HasCDNThumbImgHeight) {
          CDNThumbImgHeight = other.CDNThumbImgHeight;
        }
        if (other.HasCDNThumbImgWidth) {
          CDNThumbImgWidth = other.CDNThumbImgWidth;
        }
        if (other.HasCDNThumbAESKey) {
          CDNThumbAESKey = other.CDNThumbAESKey;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_uploadMsgImgRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _uploadMsgImgRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasClientImgId) {
                subBuilder.MergeFrom(ClientImgId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientImgId = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasFromUserName) {
                subBuilder.MergeFrom(FromUserName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FromUserName = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasToUserName) {
                subBuilder.MergeFrom(ToUserName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToUserName = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasTotalLen = input.ReadInt32(ref result.totalLen_);
              break;
            }
            case 48: {
              result.hasStartPos = input.ReadInt32(ref result.startPos_);
              break;
            }
            case 56: {
              result.hasDataLen = input.ReadInt32(ref result.dataLen_);
              break;
            }
            case 66: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasData) {
                subBuilder.MergeFrom(Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Data = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              result.hasMsgType = input.ReadInt32(ref result.msgType_);
              break;
            }
            case 82: {
              result.hasMsgSource = input.ReadString(ref result.msgSource_);
              break;
            }
            case 88: {
              result.hasCompressType = input.ReadInt32(ref result.compressType_);
              break;
            }
            case 96: {
              result.hasNetType = input.ReadInt32(ref result.netType_);
              break;
            }
            case 104: {
              result.hasPhotoFrom = input.ReadInt32(ref result.photoFrom_);
              break;
            }
            case 114: {
              result.hasMediaId = input.ReadString(ref result.mediaId_);
              break;
            }
            case 122: {
              result.hasCDNBigImgUrl = input.ReadString(ref result.cDNBigImgUrl_);
              break;
            }
            case 130: {
              result.hasCDNMidImgUrl = input.ReadString(ref result.cDNMidImgUrl_);
              break;
            }
            case 138: {
              result.hasAESKey = input.ReadString(ref result.aESKey_);
              break;
            }
            case 144: {
              result.hasEncryVer = input.ReadInt32(ref result.encryVer_);
              break;
            }
            case 152: {
              result.hasCDNBigImgSize = input.ReadInt32(ref result.cDNBigImgSize_);
              break;
            }
            case 160: {
              result.hasCDNMidImgSize = input.ReadInt32(ref result.cDNMidImgSize_);
              break;
            }
            case 170: {
              result.hasCDNThumbImgUrl = input.ReadString(ref result.cDNThumbImgUrl_);
              break;
            }
            case 176: {
              result.hasCDNThumbImgSize = input.ReadInt32(ref result.cDNThumbImgSize_);
              break;
            }
            case 184: {
              result.hasCDNThumbImgHeight = input.ReadInt32(ref result.cDNThumbImgHeight_);
              break;
            }
            case 192: {
              result.hasCDNThumbImgWidth = input.ReadInt32(ref result.cDNThumbImgWidth_);
              break;
            }
            case 202: {
              result.hasCDNThumbAESKey = input.ReadString(ref result.cDNThumbAESKey_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasClientImgId {
       get { return result.hasClientImgId; }
      }
      public global::mm.command.SKBuiltinString_t ClientImgId {
        get { return result.ClientImgId; }
        set { SetClientImgId(value); }
      }
      public Builder SetClientImgId(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientImgId = true;
        result.clientImgId_ = value;
        return this;
      }
      public Builder SetClientImgId(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClientImgId = true;
        result.clientImgId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientImgId(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClientImgId &&
            result.clientImgId_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.clientImgId_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.clientImgId_).MergeFrom(value).BuildPartial();
        } else {
          result.clientImgId_ = value;
        }
        result.hasClientImgId = true;
        return this;
      }
      public Builder ClearClientImgId() {
        PrepareBuilder();
        result.hasClientImgId = false;
        result.clientImgId_ = null;
        return this;
      }
      
      public bool HasFromUserName {
       get { return result.hasFromUserName; }
      }
      public global::mm.command.SKBuiltinString_t FromUserName {
        get { return result.FromUserName; }
        set { SetFromUserName(value); }
      }
      public Builder SetFromUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFromUserName = true;
        result.fromUserName_ = value;
        return this;
      }
      public Builder SetFromUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFromUserName = true;
        result.fromUserName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFromUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFromUserName &&
            result.fromUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.fromUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.fromUserName_).MergeFrom(value).BuildPartial();
        } else {
          result.fromUserName_ = value;
        }
        result.hasFromUserName = true;
        return this;
      }
      public Builder ClearFromUserName() {
        PrepareBuilder();
        result.hasFromUserName = false;
        result.fromUserName_ = null;
        return this;
      }
      
      public bool HasToUserName {
       get { return result.hasToUserName; }
      }
      public global::mm.command.SKBuiltinString_t ToUserName {
        get { return result.ToUserName; }
        set { SetToUserName(value); }
      }
      public Builder SetToUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToUserName = true;
        result.toUserName_ = value;
        return this;
      }
      public Builder SetToUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasToUserName = true;
        result.toUserName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasToUserName &&
            result.toUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.toUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.toUserName_).MergeFrom(value).BuildPartial();
        } else {
          result.toUserName_ = value;
        }
        result.hasToUserName = true;
        return this;
      }
      public Builder ClearToUserName() {
        PrepareBuilder();
        result.hasToUserName = false;
        result.toUserName_ = null;
        return this;
      }
      
      public bool HasTotalLen {
        get { return result.hasTotalLen; }
      }
      public int TotalLen {
        get { return result.TotalLen; }
        set { SetTotalLen(value); }
      }
      public Builder SetTotalLen(int value) {
        PrepareBuilder();
        result.hasTotalLen = true;
        result.totalLen_ = value;
        return this;
      }
      public Builder ClearTotalLen() {
        PrepareBuilder();
        result.hasTotalLen = false;
        result.totalLen_ = 0;
        return this;
      }
      
      public bool HasStartPos {
        get { return result.hasStartPos; }
      }
      public int StartPos {
        get { return result.StartPos; }
        set { SetStartPos(value); }
      }
      public Builder SetStartPos(int value) {
        PrepareBuilder();
        result.hasStartPos = true;
        result.startPos_ = value;
        return this;
      }
      public Builder ClearStartPos() {
        PrepareBuilder();
        result.hasStartPos = false;
        result.startPos_ = 0;
        return this;
      }
      
      public bool HasDataLen {
        get { return result.hasDataLen; }
      }
      public int DataLen {
        get { return result.DataLen; }
        set { SetDataLen(value); }
      }
      public Builder SetDataLen(int value) {
        PrepareBuilder();
        result.hasDataLen = true;
        result.dataLen_ = value;
        return this;
      }
      public Builder ClearDataLen() {
        PrepareBuilder();
        result.hasDataLen = false;
        result.dataLen_ = 0;
        return this;
      }
      
      public bool HasData {
       get { return result.hasData; }
      }
      public global::mm.command.SKBuiltinBuffer_t Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder SetData(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasData &&
            result.data_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.data_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
        } else {
          result.data_ = value;
        }
        result.hasData = true;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = null;
        return this;
      }
      
      public bool HasMsgType {
        get { return result.hasMsgType; }
      }
      public int MsgType {
        get { return result.MsgType; }
        set { SetMsgType(value); }
      }
      public Builder SetMsgType(int value) {
        PrepareBuilder();
        result.hasMsgType = true;
        result.msgType_ = value;
        return this;
      }
      public Builder ClearMsgType() {
        PrepareBuilder();
        result.hasMsgType = false;
        result.msgType_ = 0;
        return this;
      }
      
      public bool HasMsgSource {
        get { return result.hasMsgSource; }
      }
      public string MsgSource {
        get { return result.MsgSource; }
        set { SetMsgSource(value); }
      }
      public Builder SetMsgSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsgSource = true;
        result.msgSource_ = value;
        return this;
      }
      public Builder ClearMsgSource() {
        PrepareBuilder();
        result.hasMsgSource = false;
        result.msgSource_ = "";
        return this;
      }
      
      public bool HasCompressType {
        get { return result.hasCompressType; }
      }
      public int CompressType {
        get { return result.CompressType; }
        set { SetCompressType(value); }
      }
      public Builder SetCompressType(int value) {
        PrepareBuilder();
        result.hasCompressType = true;
        result.compressType_ = value;
        return this;
      }
      public Builder ClearCompressType() {
        PrepareBuilder();
        result.hasCompressType = false;
        result.compressType_ = 0;
        return this;
      }
      
      public bool HasNetType {
        get { return result.hasNetType; }
      }
      public int NetType {
        get { return result.NetType; }
        set { SetNetType(value); }
      }
      public Builder SetNetType(int value) {
        PrepareBuilder();
        result.hasNetType = true;
        result.netType_ = value;
        return this;
      }
      public Builder ClearNetType() {
        PrepareBuilder();
        result.hasNetType = false;
        result.netType_ = 0;
        return this;
      }
      
      public bool HasPhotoFrom {
        get { return result.hasPhotoFrom; }
      }
      public int PhotoFrom {
        get { return result.PhotoFrom; }
        set { SetPhotoFrom(value); }
      }
      public Builder SetPhotoFrom(int value) {
        PrepareBuilder();
        result.hasPhotoFrom = true;
        result.photoFrom_ = value;
        return this;
      }
      public Builder ClearPhotoFrom() {
        PrepareBuilder();
        result.hasPhotoFrom = false;
        result.photoFrom_ = 0;
        return this;
      }
      
      public bool HasMediaId {
        get { return result.hasMediaId; }
      }
      public string MediaId {
        get { return result.MediaId; }
        set { SetMediaId(value); }
      }
      public Builder SetMediaId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMediaId = true;
        result.mediaId_ = value;
        return this;
      }
      public Builder ClearMediaId() {
        PrepareBuilder();
        result.hasMediaId = false;
        result.mediaId_ = "";
        return this;
      }
      
      public bool HasCDNBigImgUrl {
        get { return result.hasCDNBigImgUrl; }
      }
      public string CDNBigImgUrl {
        get { return result.CDNBigImgUrl; }
        set { SetCDNBigImgUrl(value); }
      }
      public Builder SetCDNBigImgUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCDNBigImgUrl = true;
        result.cDNBigImgUrl_ = value;
        return this;
      }
      public Builder ClearCDNBigImgUrl() {
        PrepareBuilder();
        result.hasCDNBigImgUrl = false;
        result.cDNBigImgUrl_ = "";
        return this;
      }
      
      public bool HasCDNMidImgUrl {
        get { return result.hasCDNMidImgUrl; }
      }
      public string CDNMidImgUrl {
        get { return result.CDNMidImgUrl; }
        set { SetCDNMidImgUrl(value); }
      }
      public Builder SetCDNMidImgUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCDNMidImgUrl = true;
        result.cDNMidImgUrl_ = value;
        return this;
      }
      public Builder ClearCDNMidImgUrl() {
        PrepareBuilder();
        result.hasCDNMidImgUrl = false;
        result.cDNMidImgUrl_ = "";
        return this;
      }
      
      public bool HasAESKey {
        get { return result.hasAESKey; }
      }
      public string AESKey {
        get { return result.AESKey; }
        set { SetAESKey(value); }
      }
      public Builder SetAESKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAESKey = true;
        result.aESKey_ = value;
        return this;
      }
      public Builder ClearAESKey() {
        PrepareBuilder();
        result.hasAESKey = false;
        result.aESKey_ = "";
        return this;
      }
      
      public bool HasEncryVer {
        get { return result.hasEncryVer; }
      }
      public int EncryVer {
        get { return result.EncryVer; }
        set { SetEncryVer(value); }
      }
      public Builder SetEncryVer(int value) {
        PrepareBuilder();
        result.hasEncryVer = true;
        result.encryVer_ = value;
        return this;
      }
      public Builder ClearEncryVer() {
        PrepareBuilder();
        result.hasEncryVer = false;
        result.encryVer_ = 0;
        return this;
      }
      
      public bool HasCDNBigImgSize {
        get { return result.hasCDNBigImgSize; }
      }
      public int CDNBigImgSize {
        get { return result.CDNBigImgSize; }
        set { SetCDNBigImgSize(value); }
      }
      public Builder SetCDNBigImgSize(int value) {
        PrepareBuilder();
        result.hasCDNBigImgSize = true;
        result.cDNBigImgSize_ = value;
        return this;
      }
      public Builder ClearCDNBigImgSize() {
        PrepareBuilder();
        result.hasCDNBigImgSize = false;
        result.cDNBigImgSize_ = 0;
        return this;
      }
      
      public bool HasCDNMidImgSize {
        get { return result.hasCDNMidImgSize; }
      }
      public int CDNMidImgSize {
        get { return result.CDNMidImgSize; }
        set { SetCDNMidImgSize(value); }
      }
      public Builder SetCDNMidImgSize(int value) {
        PrepareBuilder();
        result.hasCDNMidImgSize = true;
        result.cDNMidImgSize_ = value;
        return this;
      }
      public Builder ClearCDNMidImgSize() {
        PrepareBuilder();
        result.hasCDNMidImgSize = false;
        result.cDNMidImgSize_ = 0;
        return this;
      }
      
      public bool HasCDNThumbImgUrl {
        get { return result.hasCDNThumbImgUrl; }
      }
      public string CDNThumbImgUrl {
        get { return result.CDNThumbImgUrl; }
        set { SetCDNThumbImgUrl(value); }
      }
      public Builder SetCDNThumbImgUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCDNThumbImgUrl = true;
        result.cDNThumbImgUrl_ = value;
        return this;
      }
      public Builder ClearCDNThumbImgUrl() {
        PrepareBuilder();
        result.hasCDNThumbImgUrl = false;
        result.cDNThumbImgUrl_ = "";
        return this;
      }
      
      public bool HasCDNThumbImgSize {
        get { return result.hasCDNThumbImgSize; }
      }
      public int CDNThumbImgSize {
        get { return result.CDNThumbImgSize; }
        set { SetCDNThumbImgSize(value); }
      }
      public Builder SetCDNThumbImgSize(int value) {
        PrepareBuilder();
        result.hasCDNThumbImgSize = true;
        result.cDNThumbImgSize_ = value;
        return this;
      }
      public Builder ClearCDNThumbImgSize() {
        PrepareBuilder();
        result.hasCDNThumbImgSize = false;
        result.cDNThumbImgSize_ = 0;
        return this;
      }
      
      public bool HasCDNThumbImgHeight {
        get { return result.hasCDNThumbImgHeight; }
      }
      public int CDNThumbImgHeight {
        get { return result.CDNThumbImgHeight; }
        set { SetCDNThumbImgHeight(value); }
      }
      public Builder SetCDNThumbImgHeight(int value) {
        PrepareBuilder();
        result.hasCDNThumbImgHeight = true;
        result.cDNThumbImgHeight_ = value;
        return this;
      }
      public Builder ClearCDNThumbImgHeight() {
        PrepareBuilder();
        result.hasCDNThumbImgHeight = false;
        result.cDNThumbImgHeight_ = 0;
        return this;
      }
      
      public bool HasCDNThumbImgWidth {
        get { return result.hasCDNThumbImgWidth; }
      }
      public int CDNThumbImgWidth {
        get { return result.CDNThumbImgWidth; }
        set { SetCDNThumbImgWidth(value); }
      }
      public Builder SetCDNThumbImgWidth(int value) {
        PrepareBuilder();
        result.hasCDNThumbImgWidth = true;
        result.cDNThumbImgWidth_ = value;
        return this;
      }
      public Builder ClearCDNThumbImgWidth() {
        PrepareBuilder();
        result.hasCDNThumbImgWidth = false;
        result.cDNThumbImgWidth_ = 0;
        return this;
      }
      
      public bool HasCDNThumbAESKey {
        get { return result.hasCDNThumbAESKey; }
      }
      public string CDNThumbAESKey {
        get { return result.CDNThumbAESKey; }
        set { SetCDNThumbAESKey(value); }
      }
      public Builder SetCDNThumbAESKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCDNThumbAESKey = true;
        result.cDNThumbAESKey_ = value;
        return this;
      }
      public Builder ClearCDNThumbAESKey() {
        PrepareBuilder();
        result.hasCDNThumbAESKey = false;
        result.cDNThumbAESKey_ = "";
        return this;
      }
    }
    static UploadMsgImgRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UploadMsgImgResponse : pb::GeneratedMessage<UploadMsgImgResponse, UploadMsgImgResponse.Builder> {
    private UploadMsgImgResponse() { }
    private static readonly UploadMsgImgResponse defaultInstance = new UploadMsgImgResponse().MakeReadOnly();
    private static readonly string[] _uploadMsgImgResponseFieldNames = new string[] { "ClientImgId", "CreateTime", "DataLen", "FromUserName", "MsgId", "StartPos", "ToUserName", "TotalLen", "base" };
    private static readonly uint[] _uploadMsgImgResponseFieldTags = new uint[] { 26, 72, 64, 34, 16, 56, 42, 48, 10 };
    public static UploadMsgImgResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UploadMsgImgResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UploadMsgImgResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadMsgImgResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UploadMsgImgResponse, UploadMsgImgResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadMsgImgResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int MsgIdFieldNumber = 2;
    private bool hasMsgId;
    private int msgId_;
    public bool HasMsgId {
      get { return hasMsgId; }
    }
    public int MsgId {
      get { return msgId_; }
    }
    
    public const int ClientImgIdFieldNumber = 3;
    private bool hasClientImgId;
    private global::mm.command.SKBuiltinString_t clientImgId_;
    public bool HasClientImgId {
      get { return hasClientImgId; }
    }
    public global::mm.command.SKBuiltinString_t ClientImgId {
      get { return clientImgId_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int FromUserNameFieldNumber = 4;
    private bool hasFromUserName;
    private global::mm.command.SKBuiltinString_t fromUserName_;
    public bool HasFromUserName {
      get { return hasFromUserName; }
    }
    public global::mm.command.SKBuiltinString_t FromUserName {
      get { return fromUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int ToUserNameFieldNumber = 5;
    private bool hasToUserName;
    private global::mm.command.SKBuiltinString_t toUserName_;
    public bool HasToUserName {
      get { return hasToUserName; }
    }
    public global::mm.command.SKBuiltinString_t ToUserName {
      get { return toUserName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int TotalLenFieldNumber = 6;
    private bool hasTotalLen;
    private int totalLen_;
    public bool HasTotalLen {
      get { return hasTotalLen; }
    }
    public int TotalLen {
      get { return totalLen_; }
    }
    
    public const int StartPosFieldNumber = 7;
    private bool hasStartPos;
    private int startPos_;
    public bool HasStartPos {
      get { return hasStartPos; }
    }
    public int StartPos {
      get { return startPos_; }
    }
    
    public const int DataLenFieldNumber = 8;
    private bool hasDataLen;
    private int dataLen_;
    public bool HasDataLen {
      get { return hasDataLen; }
    }
    public int DataLen {
      get { return dataLen_; }
    }
    
    public const int CreateTimeFieldNumber = 9;
    private bool hasCreateTime;
    private int createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public int CreateTime {
      get { return createTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasMsgId) return false;
        if (!hasClientImgId) return false;
        if (!hasFromUserName) return false;
        if (!hasToUserName) return false;
        if (!hasTotalLen) return false;
        if (!hasStartPos) return false;
        if (!hasDataLen) return false;
        if (!hasCreateTime) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _uploadMsgImgResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[8], Base);
      }
      if (hasMsgId) {
        output.WriteInt32(2, field_names[4], MsgId);
      }
      if (hasClientImgId) {
        output.WriteMessage(3, field_names[0], ClientImgId);
      }
      if (hasFromUserName) {
        output.WriteMessage(4, field_names[3], FromUserName);
      }
      if (hasToUserName) {
        output.WriteMessage(5, field_names[6], ToUserName);
      }
      if (hasTotalLen) {
        output.WriteInt32(6, field_names[7], TotalLen);
      }
      if (hasStartPos) {
        output.WriteInt32(7, field_names[5], StartPos);
      }
      if (hasDataLen) {
        output.WriteInt32(8, field_names[2], DataLen);
      }
      if (hasCreateTime) {
        output.WriteInt32(9, field_names[1], CreateTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasMsgId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MsgId);
        }
        if (hasClientImgId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ClientImgId);
        }
        if (hasFromUserName) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, FromUserName);
        }
        if (hasToUserName) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, ToUserName);
        }
        if (hasTotalLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, TotalLen);
        }
        if (hasStartPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, StartPos);
        }
        if (hasDataLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, DataLen);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, CreateTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UploadMsgImgResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadMsgImgResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadMsgImgResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadMsgImgResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadMsgImgResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadMsgImgResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UploadMsgImgResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UploadMsgImgResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UploadMsgImgResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadMsgImgResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UploadMsgImgResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UploadMsgImgResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UploadMsgImgResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UploadMsgImgResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UploadMsgImgResponse result;
      
      private UploadMsgImgResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          UploadMsgImgResponse original = result;
          result = new UploadMsgImgResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UploadMsgImgResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.UploadMsgImgResponse.Descriptor; }
      }
      
      public override UploadMsgImgResponse DefaultInstanceForType {
        get { return global::mm.command.UploadMsgImgResponse.DefaultInstance; }
      }
      
      public override UploadMsgImgResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UploadMsgImgResponse) {
          return MergeFrom((UploadMsgImgResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UploadMsgImgResponse other) {
        if (other == global::mm.command.UploadMsgImgResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasMsgId) {
          MsgId = other.MsgId;
        }
        if (other.HasClientImgId) {
          MergeClientImgId(other.ClientImgId);
        }
        if (other.HasFromUserName) {
          MergeFromUserName(other.FromUserName);
        }
        if (other.HasToUserName) {
          MergeToUserName(other.ToUserName);
        }
        if (other.HasTotalLen) {
          TotalLen = other.TotalLen;
        }
        if (other.HasStartPos) {
          StartPos = other.StartPos;
        }
        if (other.HasDataLen) {
          DataLen = other.DataLen;
        }
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_uploadMsgImgResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _uploadMsgImgResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasMsgId = input.ReadInt32(ref result.msgId_);
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasClientImgId) {
                subBuilder.MergeFrom(ClientImgId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientImgId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasFromUserName) {
                subBuilder.MergeFrom(FromUserName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              FromUserName = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasToUserName) {
                subBuilder.MergeFrom(ToUserName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ToUserName = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasTotalLen = input.ReadInt32(ref result.totalLen_);
              break;
            }
            case 56: {
              result.hasStartPos = input.ReadInt32(ref result.startPos_);
              break;
            }
            case 64: {
              result.hasDataLen = input.ReadInt32(ref result.dataLen_);
              break;
            }
            case 72: {
              result.hasCreateTime = input.ReadInt32(ref result.createTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasMsgId {
        get { return result.hasMsgId; }
      }
      public int MsgId {
        get { return result.MsgId; }
        set { SetMsgId(value); }
      }
      public Builder SetMsgId(int value) {
        PrepareBuilder();
        result.hasMsgId = true;
        result.msgId_ = value;
        return this;
      }
      public Builder ClearMsgId() {
        PrepareBuilder();
        result.hasMsgId = false;
        result.msgId_ = 0;
        return this;
      }
      
      public bool HasClientImgId {
       get { return result.hasClientImgId; }
      }
      public global::mm.command.SKBuiltinString_t ClientImgId {
        get { return result.ClientImgId; }
        set { SetClientImgId(value); }
      }
      public Builder SetClientImgId(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientImgId = true;
        result.clientImgId_ = value;
        return this;
      }
      public Builder SetClientImgId(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClientImgId = true;
        result.clientImgId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientImgId(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClientImgId &&
            result.clientImgId_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.clientImgId_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.clientImgId_).MergeFrom(value).BuildPartial();
        } else {
          result.clientImgId_ = value;
        }
        result.hasClientImgId = true;
        return this;
      }
      public Builder ClearClientImgId() {
        PrepareBuilder();
        result.hasClientImgId = false;
        result.clientImgId_ = null;
        return this;
      }
      
      public bool HasFromUserName {
       get { return result.hasFromUserName; }
      }
      public global::mm.command.SKBuiltinString_t FromUserName {
        get { return result.FromUserName; }
        set { SetFromUserName(value); }
      }
      public Builder SetFromUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFromUserName = true;
        result.fromUserName_ = value;
        return this;
      }
      public Builder SetFromUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFromUserName = true;
        result.fromUserName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFromUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFromUserName &&
            result.fromUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.fromUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.fromUserName_).MergeFrom(value).BuildPartial();
        } else {
          result.fromUserName_ = value;
        }
        result.hasFromUserName = true;
        return this;
      }
      public Builder ClearFromUserName() {
        PrepareBuilder();
        result.hasFromUserName = false;
        result.fromUserName_ = null;
        return this;
      }
      
      public bool HasToUserName {
       get { return result.hasToUserName; }
      }
      public global::mm.command.SKBuiltinString_t ToUserName {
        get { return result.ToUserName; }
        set { SetToUserName(value); }
      }
      public Builder SetToUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToUserName = true;
        result.toUserName_ = value;
        return this;
      }
      public Builder SetToUserName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasToUserName = true;
        result.toUserName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeToUserName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasToUserName &&
            result.toUserName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.toUserName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.toUserName_).MergeFrom(value).BuildPartial();
        } else {
          result.toUserName_ = value;
        }
        result.hasToUserName = true;
        return this;
      }
      public Builder ClearToUserName() {
        PrepareBuilder();
        result.hasToUserName = false;
        result.toUserName_ = null;
        return this;
      }
      
      public bool HasTotalLen {
        get { return result.hasTotalLen; }
      }
      public int TotalLen {
        get { return result.TotalLen; }
        set { SetTotalLen(value); }
      }
      public Builder SetTotalLen(int value) {
        PrepareBuilder();
        result.hasTotalLen = true;
        result.totalLen_ = value;
        return this;
      }
      public Builder ClearTotalLen() {
        PrepareBuilder();
        result.hasTotalLen = false;
        result.totalLen_ = 0;
        return this;
      }
      
      public bool HasStartPos {
        get { return result.hasStartPos; }
      }
      public int StartPos {
        get { return result.StartPos; }
        set { SetStartPos(value); }
      }
      public Builder SetStartPos(int value) {
        PrepareBuilder();
        result.hasStartPos = true;
        result.startPos_ = value;
        return this;
      }
      public Builder ClearStartPos() {
        PrepareBuilder();
        result.hasStartPos = false;
        result.startPos_ = 0;
        return this;
      }
      
      public bool HasDataLen {
        get { return result.hasDataLen; }
      }
      public int DataLen {
        get { return result.DataLen; }
        set { SetDataLen(value); }
      }
      public Builder SetDataLen(int value) {
        PrepareBuilder();
        result.hasDataLen = true;
        result.dataLen_ = value;
        return this;
      }
      public Builder ClearDataLen() {
        PrepareBuilder();
        result.hasDataLen = false;
        result.dataLen_ = 0;
        return this;
      }
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public int CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(int value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
    }
    static UploadMsgImgResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GeneralSetRequest : pb::GeneratedMessage<GeneralSetRequest, GeneralSetRequest.Builder> {
    private GeneralSetRequest() { }
    private static readonly GeneralSetRequest defaultInstance = new GeneralSetRequest().MakeReadOnly();
    private static readonly string[] _generalSetRequestFieldNames = new string[] { "SetType", "SetValue", "base" };
    private static readonly uint[] _generalSetRequestFieldTags = new uint[] { 16, 26, 10 };
    public static GeneralSetRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GeneralSetRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GeneralSetRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GeneralSetRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GeneralSetRequest, GeneralSetRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GeneralSetRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int SetTypeFieldNumber = 2;
    private bool hasSetType;
    private int setType_;
    public bool HasSetType {
      get { return hasSetType; }
    }
    public int SetType {
      get { return setType_; }
    }
    
    public const int SetValueFieldNumber = 3;
    private bool hasSetValue;
    private string setValue_ = "";
    public bool HasSetValue {
      get { return hasSetValue; }
    }
    public string SetValue {
      get { return setValue_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasSetType) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _generalSetRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasSetType) {
        output.WriteInt32(2, field_names[0], SetType);
      }
      if (hasSetValue) {
        output.WriteString(3, field_names[1], SetValue);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasSetType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, SetType);
        }
        if (hasSetValue) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SetValue);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GeneralSetRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GeneralSetRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GeneralSetRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GeneralSetRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GeneralSetRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GeneralSetRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GeneralSetRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GeneralSetRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GeneralSetRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GeneralSetRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GeneralSetRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GeneralSetRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GeneralSetRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GeneralSetRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GeneralSetRequest result;
      
      private GeneralSetRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GeneralSetRequest original = result;
          result = new GeneralSetRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GeneralSetRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GeneralSetRequest.Descriptor; }
      }
      
      public override GeneralSetRequest DefaultInstanceForType {
        get { return global::mm.command.GeneralSetRequest.DefaultInstance; }
      }
      
      public override GeneralSetRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GeneralSetRequest) {
          return MergeFrom((GeneralSetRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GeneralSetRequest other) {
        if (other == global::mm.command.GeneralSetRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasSetType) {
          SetType = other.SetType;
        }
        if (other.HasSetValue) {
          SetValue = other.SetValue;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_generalSetRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _generalSetRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasSetType = input.ReadInt32(ref result.setType_);
              break;
            }
            case 26: {
              result.hasSetValue = input.ReadString(ref result.setValue_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasSetType {
        get { return result.hasSetType; }
      }
      public int SetType {
        get { return result.SetType; }
        set { SetSetType(value); }
      }
      public Builder SetSetType(int value) {
        PrepareBuilder();
        result.hasSetType = true;
        result.setType_ = value;
        return this;
      }
      public Builder ClearSetType() {
        PrepareBuilder();
        result.hasSetType = false;
        result.setType_ = 0;
        return this;
      }
      
      public bool HasSetValue {
        get { return result.hasSetValue; }
      }
      public string SetValue {
        get { return result.SetValue; }
        set { SetSetValue(value); }
      }
      public Builder SetSetValue(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSetValue = true;
        result.setValue_ = value;
        return this;
      }
      public Builder ClearSetValue() {
        PrepareBuilder();
        result.hasSetValue = false;
        result.setValue_ = "";
        return this;
      }
    }
    static GeneralSetRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GeneralSetResponse : pb::GeneratedMessage<GeneralSetResponse, GeneralSetResponse.Builder> {
    private GeneralSetResponse() { }
    private static readonly GeneralSetResponse defaultInstance = new GeneralSetResponse().MakeReadOnly();
    private static readonly string[] _generalSetResponseFieldNames = new string[] { "base" };
    private static readonly uint[] _generalSetResponseFieldTags = new uint[] { 10 };
    public static GeneralSetResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GeneralSetResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GeneralSetResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GeneralSetResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GeneralSetResponse, GeneralSetResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GeneralSetResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _generalSetResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GeneralSetResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GeneralSetResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GeneralSetResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GeneralSetResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GeneralSetResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GeneralSetResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GeneralSetResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GeneralSetResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GeneralSetResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GeneralSetResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GeneralSetResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GeneralSetResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GeneralSetResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GeneralSetResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GeneralSetResponse result;
      
      private GeneralSetResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GeneralSetResponse original = result;
          result = new GeneralSetResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GeneralSetResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GeneralSetResponse.Descriptor; }
      }
      
      public override GeneralSetResponse DefaultInstanceForType {
        get { return global::mm.command.GeneralSetResponse.DefaultInstance; }
      }
      
      public override GeneralSetResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GeneralSetResponse) {
          return MergeFrom((GeneralSetResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GeneralSetResponse other) {
        if (other == global::mm.command.GeneralSetResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_generalSetResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _generalSetResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
    }
    static GeneralSetResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UnbindqqRequest : pb::GeneratedMessage<UnbindqqRequest, UnbindqqRequest.Builder> {
    private UnbindqqRequest() { }
    private static readonly UnbindqqRequest defaultInstance = new UnbindqqRequest().MakeReadOnly();
    private static readonly string[] _unbindqqRequestFieldNames = new string[] { "Ticket", "base" };
    private static readonly uint[] _unbindqqRequestFieldTags = new uint[] { 18, 10 };
    public static UnbindqqRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UnbindqqRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UnbindqqRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UnbindqqRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UnbindqqRequest, UnbindqqRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UnbindqqRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int TicketFieldNumber = 2;
    private bool hasTicket;
    private string ticket_ = "";
    public bool HasTicket {
      get { return hasTicket; }
    }
    public string Ticket {
      get { return ticket_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _unbindqqRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[1], Base);
      }
      if (hasTicket) {
        output.WriteString(2, field_names[0], Ticket);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Ticket);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UnbindqqRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnbindqqRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnbindqqRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnbindqqRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnbindqqRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnbindqqRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UnbindqqRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UnbindqqRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UnbindqqRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnbindqqRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UnbindqqRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UnbindqqRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UnbindqqRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UnbindqqRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UnbindqqRequest result;
      
      private UnbindqqRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          UnbindqqRequest original = result;
          result = new UnbindqqRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UnbindqqRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.UnbindqqRequest.Descriptor; }
      }
      
      public override UnbindqqRequest DefaultInstanceForType {
        get { return global::mm.command.UnbindqqRequest.DefaultInstance; }
      }
      
      public override UnbindqqRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UnbindqqRequest) {
          return MergeFrom((UnbindqqRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UnbindqqRequest other) {
        if (other == global::mm.command.UnbindqqRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasTicket) {
          Ticket = other.Ticket;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_unbindqqRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _unbindqqRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasTicket = input.ReadString(ref result.ticket_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasTicket {
        get { return result.hasTicket; }
      }
      public string Ticket {
        get { return result.Ticket; }
        set { SetTicket(value); }
      }
      public Builder SetTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTicket = true;
        result.ticket_ = value;
        return this;
      }
      public Builder ClearTicket() {
        PrepareBuilder();
        result.hasTicket = false;
        result.ticket_ = "";
        return this;
      }
    }
    static UnbindqqRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UnbindqqResponse : pb::GeneratedMessage<UnbindqqResponse, UnbindqqResponse.Builder> {
    private UnbindqqResponse() { }
    private static readonly UnbindqqResponse defaultInstance = new UnbindqqResponse().MakeReadOnly();
    private static readonly string[] _unbindqqResponseFieldNames = new string[] { "base" };
    private static readonly uint[] _unbindqqResponseFieldTags = new uint[] { 10 };
    public static UnbindqqResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UnbindqqResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UnbindqqResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UnbindqqResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UnbindqqResponse, UnbindqqResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UnbindqqResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _unbindqqResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UnbindqqResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnbindqqResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnbindqqResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UnbindqqResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UnbindqqResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnbindqqResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UnbindqqResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UnbindqqResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UnbindqqResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UnbindqqResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UnbindqqResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UnbindqqResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UnbindqqResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UnbindqqResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UnbindqqResponse result;
      
      private UnbindqqResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          UnbindqqResponse original = result;
          result = new UnbindqqResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UnbindqqResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.UnbindqqResponse.Descriptor; }
      }
      
      public override UnbindqqResponse DefaultInstanceForType {
        get { return global::mm.command.UnbindqqResponse.DefaultInstance; }
      }
      
      public override UnbindqqResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UnbindqqResponse) {
          return MergeFrom((UnbindqqResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UnbindqqResponse other) {
        if (other == global::mm.command.UnbindqqResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_unbindqqResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _unbindqqResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
    }
    static UnbindqqResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendAppMsgRequest : pb::GeneratedMessage<SendAppMsgRequest, SendAppMsgRequest.Builder> {
    private SendAppMsgRequest() { }
    private static readonly SendAppMsgRequest defaultInstance = new SendAppMsgRequest().MakeReadOnly();
    private static readonly string[] _sendAppMsgRequestFieldNames = new string[] { "CommentUrl", "Msg", "base" };
    private static readonly uint[] _sendAppMsgRequestFieldTags = new uint[] { 26, 18, 10 };
    public static SendAppMsgRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendAppMsgRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendAppMsgRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SendAppMsgRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendAppMsgRequest, SendAppMsgRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SendAppMsgRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int MsgFieldNumber = 2;
    private bool hasMsg;
    private global::mm.command.AppMsgObject msg_;
    public bool HasMsg {
      get { return hasMsg; }
    }
    public global::mm.command.AppMsgObject Msg {
      get { return msg_ ?? global::mm.command.AppMsgObject.DefaultInstance; }
    }
    
    public const int CommentUrlFieldNumber = 3;
    private bool hasCommentUrl;
    private string commentUrl_ = "";
    public bool HasCommentUrl {
      get { return hasCommentUrl; }
    }
    public string CommentUrl {
      get { return commentUrl_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasMsg) return false;
        if (!Base.IsInitialized) return false;
        if (!Msg.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sendAppMsgRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasMsg) {
        output.WriteMessage(2, field_names[1], Msg);
      }
      if (hasCommentUrl) {
        output.WriteString(3, field_names[0], CommentUrl);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasMsg) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Msg);
        }
        if (hasCommentUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(3, CommentUrl);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SendAppMsgRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendAppMsgRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendAppMsgRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendAppMsgRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendAppMsgRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendAppMsgRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendAppMsgRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendAppMsgRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendAppMsgRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendAppMsgRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendAppMsgRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendAppMsgRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SendAppMsgRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendAppMsgRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendAppMsgRequest result;
      
      private SendAppMsgRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SendAppMsgRequest original = result;
          result = new SendAppMsgRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendAppMsgRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.SendAppMsgRequest.Descriptor; }
      }
      
      public override SendAppMsgRequest DefaultInstanceForType {
        get { return global::mm.command.SendAppMsgRequest.DefaultInstance; }
      }
      
      public override SendAppMsgRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SendAppMsgRequest) {
          return MergeFrom((SendAppMsgRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SendAppMsgRequest other) {
        if (other == global::mm.command.SendAppMsgRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasMsg) {
          MergeMsg(other.Msg);
        }
        if (other.HasCommentUrl) {
          CommentUrl = other.CommentUrl;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sendAppMsgRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sendAppMsgRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.AppMsgObject.Builder subBuilder = global::mm.command.AppMsgObject.CreateBuilder();
              if (result.hasMsg) {
                subBuilder.MergeFrom(Msg);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Msg = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasCommentUrl = input.ReadString(ref result.commentUrl_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasMsg {
       get { return result.hasMsg; }
      }
      public global::mm.command.AppMsgObject Msg {
        get { return result.Msg; }
        set { SetMsg(value); }
      }
      public Builder SetMsg(global::mm.command.AppMsgObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = value;
        return this;
      }
      public Builder SetMsg(global::mm.command.AppMsgObject.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasMsg = true;
        result.msg_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMsg(global::mm.command.AppMsgObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasMsg &&
            result.msg_ != global::mm.command.AppMsgObject.DefaultInstance) {
            result.msg_ = global::mm.command.AppMsgObject.CreateBuilder(result.msg_).MergeFrom(value).BuildPartial();
        } else {
          result.msg_ = value;
        }
        result.hasMsg = true;
        return this;
      }
      public Builder ClearMsg() {
        PrepareBuilder();
        result.hasMsg = false;
        result.msg_ = null;
        return this;
      }
      
      public bool HasCommentUrl {
        get { return result.hasCommentUrl; }
      }
      public string CommentUrl {
        get { return result.CommentUrl; }
        set { SetCommentUrl(value); }
      }
      public Builder SetCommentUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCommentUrl = true;
        result.commentUrl_ = value;
        return this;
      }
      public Builder ClearCommentUrl() {
        PrepareBuilder();
        result.hasCommentUrl = false;
        result.commentUrl_ = "";
        return this;
      }
    }
    static SendAppMsgRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class SendAppMsgResponse : pb::GeneratedMessage<SendAppMsgResponse, SendAppMsgResponse.Builder> {
    private SendAppMsgResponse() { }
    private static readonly SendAppMsgResponse defaultInstance = new SendAppMsgResponse().MakeReadOnly();
    private static readonly string[] _sendAppMsgResponseFieldNames = new string[] { "AppId", "ClientMsgId", "CreateTime", "FromUserName", "MsgId", "ToUserName", "Type", "base" };
    private static readonly uint[] _sendAppMsgResponseFieldTags = new uint[] { 18, 50, 56, 26, 40, 34, 64, 10 };
    public static SendAppMsgResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SendAppMsgResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SendAppMsgResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SendAppMsgResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SendAppMsgResponse, SendAppMsgResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_SendAppMsgResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int AppIdFieldNumber = 2;
    private bool hasAppId;
    private string appId_ = "";
    public bool HasAppId {
      get { return hasAppId; }
    }
    public string AppId {
      get { return appId_; }
    }
    
    public const int FromUserNameFieldNumber = 3;
    private bool hasFromUserName;
    private string fromUserName_ = "";
    public bool HasFromUserName {
      get { return hasFromUserName; }
    }
    public string FromUserName {
      get { return fromUserName_; }
    }
    
    public const int ToUserNameFieldNumber = 4;
    private bool hasToUserName;
    private string toUserName_ = "";
    public bool HasToUserName {
      get { return hasToUserName; }
    }
    public string ToUserName {
      get { return toUserName_; }
    }
    
    public const int MsgIdFieldNumber = 5;
    private bool hasMsgId;
    private int msgId_;
    public bool HasMsgId {
      get { return hasMsgId; }
    }
    public int MsgId {
      get { return msgId_; }
    }
    
    public const int ClientMsgIdFieldNumber = 6;
    private bool hasClientMsgId;
    private string clientMsgId_ = "";
    public bool HasClientMsgId {
      get { return hasClientMsgId; }
    }
    public string ClientMsgId {
      get { return clientMsgId_; }
    }
    
    public const int CreateTimeFieldNumber = 7;
    private bool hasCreateTime;
    private int createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public int CreateTime {
      get { return createTime_; }
    }
    
    public const int TypeFieldNumber = 8;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasMsgId) return false;
        if (!hasCreateTime) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _sendAppMsgResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[7], Base);
      }
      if (hasAppId) {
        output.WriteString(2, field_names[0], AppId);
      }
      if (hasFromUserName) {
        output.WriteString(3, field_names[3], FromUserName);
      }
      if (hasToUserName) {
        output.WriteString(4, field_names[5], ToUserName);
      }
      if (hasMsgId) {
        output.WriteInt32(5, field_names[4], MsgId);
      }
      if (hasClientMsgId) {
        output.WriteString(6, field_names[1], ClientMsgId);
      }
      if (hasCreateTime) {
        output.WriteInt32(7, field_names[2], CreateTime);
      }
      if (hasType) {
        output.WriteInt32(8, field_names[6], Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasAppId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, AppId);
        }
        if (hasFromUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(3, FromUserName);
        }
        if (hasToUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ToUserName);
        }
        if (hasMsgId) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, MsgId);
        }
        if (hasClientMsgId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ClientMsgId);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, CreateTime);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SendAppMsgResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendAppMsgResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendAppMsgResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SendAppMsgResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SendAppMsgResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendAppMsgResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SendAppMsgResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SendAppMsgResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SendAppMsgResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SendAppMsgResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SendAppMsgResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SendAppMsgResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<SendAppMsgResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SendAppMsgResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SendAppMsgResponse result;
      
      private SendAppMsgResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          SendAppMsgResponse original = result;
          result = new SendAppMsgResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SendAppMsgResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.SendAppMsgResponse.Descriptor; }
      }
      
      public override SendAppMsgResponse DefaultInstanceForType {
        get { return global::mm.command.SendAppMsgResponse.DefaultInstance; }
      }
      
      public override SendAppMsgResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SendAppMsgResponse) {
          return MergeFrom((SendAppMsgResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SendAppMsgResponse other) {
        if (other == global::mm.command.SendAppMsgResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasAppId) {
          AppId = other.AppId;
        }
        if (other.HasFromUserName) {
          FromUserName = other.FromUserName;
        }
        if (other.HasToUserName) {
          ToUserName = other.ToUserName;
        }
        if (other.HasMsgId) {
          MsgId = other.MsgId;
        }
        if (other.HasClientMsgId) {
          ClientMsgId = other.ClientMsgId;
        }
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_sendAppMsgResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _sendAppMsgResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasAppId = input.ReadString(ref result.appId_);
              break;
            }
            case 26: {
              result.hasFromUserName = input.ReadString(ref result.fromUserName_);
              break;
            }
            case 34: {
              result.hasToUserName = input.ReadString(ref result.toUserName_);
              break;
            }
            case 40: {
              result.hasMsgId = input.ReadInt32(ref result.msgId_);
              break;
            }
            case 50: {
              result.hasClientMsgId = input.ReadString(ref result.clientMsgId_);
              break;
            }
            case 56: {
              result.hasCreateTime = input.ReadInt32(ref result.createTime_);
              break;
            }
            case 64: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasAppId {
        get { return result.hasAppId; }
      }
      public string AppId {
        get { return result.AppId; }
        set { SetAppId(value); }
      }
      public Builder SetAppId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAppId = true;
        result.appId_ = value;
        return this;
      }
      public Builder ClearAppId() {
        PrepareBuilder();
        result.hasAppId = false;
        result.appId_ = "";
        return this;
      }
      
      public bool HasFromUserName {
        get { return result.hasFromUserName; }
      }
      public string FromUserName {
        get { return result.FromUserName; }
        set { SetFromUserName(value); }
      }
      public Builder SetFromUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFromUserName = true;
        result.fromUserName_ = value;
        return this;
      }
      public Builder ClearFromUserName() {
        PrepareBuilder();
        result.hasFromUserName = false;
        result.fromUserName_ = "";
        return this;
      }
      
      public bool HasToUserName {
        get { return result.hasToUserName; }
      }
      public string ToUserName {
        get { return result.ToUserName; }
        set { SetToUserName(value); }
      }
      public Builder SetToUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToUserName = true;
        result.toUserName_ = value;
        return this;
      }
      public Builder ClearToUserName() {
        PrepareBuilder();
        result.hasToUserName = false;
        result.toUserName_ = "";
        return this;
      }
      
      public bool HasMsgId {
        get { return result.hasMsgId; }
      }
      public int MsgId {
        get { return result.MsgId; }
        set { SetMsgId(value); }
      }
      public Builder SetMsgId(int value) {
        PrepareBuilder();
        result.hasMsgId = true;
        result.msgId_ = value;
        return this;
      }
      public Builder ClearMsgId() {
        PrepareBuilder();
        result.hasMsgId = false;
        result.msgId_ = 0;
        return this;
      }
      
      public bool HasClientMsgId {
        get { return result.hasClientMsgId; }
      }
      public string ClientMsgId {
        get { return result.ClientMsgId; }
        set { SetClientMsgId(value); }
      }
      public Builder SetClientMsgId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientMsgId = true;
        result.clientMsgId_ = value;
        return this;
      }
      public Builder ClearClientMsgId() {
        PrepareBuilder();
        result.hasClientMsgId = false;
        result.clientMsgId_ = "";
        return this;
      }
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public int CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(int value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
    }
    static SendAppMsgResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BindOpMobileRequest : pb::GeneratedMessage<BindOpMobileRequest, BindOpMobileRequest.Builder> {
    private BindOpMobileRequest() { }
    private static readonly BindOpMobileRequest defaultInstance = new BindOpMobileRequest().MakeReadOnly();
    private static readonly string[] _bindOpMobileRequestFieldNames = new string[] { "AuthTicket", "DialFlag", "DialLang", "ForceReg", "Mobile", "Opcode", "RandomEncryKey", "SafeDeviceName", "SafeDeviceType", "UserName", "Verifycode", "base" };
    private static readonly uint[] _bindOpMobileRequestFieldTags = new uint[] { 66, 48, 58, 72, 26, 32, 98, 82, 90, 18, 42, 10 };
    public static BindOpMobileRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindOpMobileRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BindOpMobileRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindOpMobileRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindOpMobileRequest, BindOpMobileRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindOpMobileRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int UserNameFieldNumber = 2;
    private bool hasUserName;
    private string userName_ = "";
    public bool HasUserName {
      get { return hasUserName; }
    }
    public string UserName {
      get { return userName_; }
    }
    
    public const int MobileFieldNumber = 3;
    private bool hasMobile;
    private string mobile_ = "";
    public bool HasMobile {
      get { return hasMobile; }
    }
    public string Mobile {
      get { return mobile_; }
    }
    
    public const int OpcodeFieldNumber = 4;
    private bool hasOpcode;
    private int opcode_;
    public bool HasOpcode {
      get { return hasOpcode; }
    }
    public int Opcode {
      get { return opcode_; }
    }
    
    public const int VerifycodeFieldNumber = 5;
    private bool hasVerifycode;
    private string verifycode_ = "";
    public bool HasVerifycode {
      get { return hasVerifycode; }
    }
    public string Verifycode {
      get { return verifycode_; }
    }
    
    public const int DialFlagFieldNumber = 6;
    private bool hasDialFlag;
    private int dialFlag_;
    public bool HasDialFlag {
      get { return hasDialFlag; }
    }
    public int DialFlag {
      get { return dialFlag_; }
    }
    
    public const int DialLangFieldNumber = 7;
    private bool hasDialLang;
    private string dialLang_ = "";
    public bool HasDialLang {
      get { return hasDialLang; }
    }
    public string DialLang {
      get { return dialLang_; }
    }
    
    public const int AuthTicketFieldNumber = 8;
    private bool hasAuthTicket;
    private string authTicket_ = "";
    public bool HasAuthTicket {
      get { return hasAuthTicket; }
    }
    public string AuthTicket {
      get { return authTicket_; }
    }
    
    public const int ForceRegFieldNumber = 9;
    private bool hasForceReg;
    private int forceReg_;
    public bool HasForceReg {
      get { return hasForceReg; }
    }
    public int ForceReg {
      get { return forceReg_; }
    }
    
    public const int SafeDeviceNameFieldNumber = 10;
    private bool hasSafeDeviceName;
    private string safeDeviceName_ = "";
    public bool HasSafeDeviceName {
      get { return hasSafeDeviceName; }
    }
    public string SafeDeviceName {
      get { return safeDeviceName_; }
    }
    
    public const int SafeDeviceTypeFieldNumber = 11;
    private bool hasSafeDeviceType;
    private string safeDeviceType_ = "";
    public bool HasSafeDeviceType {
      get { return hasSafeDeviceType; }
    }
    public string SafeDeviceType {
      get { return safeDeviceType_; }
    }
    
    public const int RandomEncryKeyFieldNumber = 12;
    private bool hasRandomEncryKey;
    private global::mm.command.SKBuiltinBuffer_t randomEncryKey_;
    public bool HasRandomEncryKey {
      get { return hasRandomEncryKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
      get { return randomEncryKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasOpcode) return false;
        if (!Base.IsInitialized) return false;
        if (HasRandomEncryKey) {
          if (!RandomEncryKey.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bindOpMobileRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[11], Base);
      }
      if (hasUserName) {
        output.WriteString(2, field_names[9], UserName);
      }
      if (hasMobile) {
        output.WriteString(3, field_names[4], Mobile);
      }
      if (hasOpcode) {
        output.WriteInt32(4, field_names[5], Opcode);
      }
      if (hasVerifycode) {
        output.WriteString(5, field_names[10], Verifycode);
      }
      if (hasDialFlag) {
        output.WriteInt32(6, field_names[1], DialFlag);
      }
      if (hasDialLang) {
        output.WriteString(7, field_names[2], DialLang);
      }
      if (hasAuthTicket) {
        output.WriteString(8, field_names[0], AuthTicket);
      }
      if (hasForceReg) {
        output.WriteInt32(9, field_names[3], ForceReg);
      }
      if (hasSafeDeviceName) {
        output.WriteString(10, field_names[7], SafeDeviceName);
      }
      if (hasSafeDeviceType) {
        output.WriteString(11, field_names[8], SafeDeviceType);
      }
      if (hasRandomEncryKey) {
        output.WriteMessage(12, field_names[6], RandomEncryKey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, UserName);
        }
        if (hasMobile) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Mobile);
        }
        if (hasOpcode) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Opcode);
        }
        if (hasVerifycode) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Verifycode);
        }
        if (hasDialFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, DialFlag);
        }
        if (hasDialLang) {
          size += pb::CodedOutputStream.ComputeStringSize(7, DialLang);
        }
        if (hasAuthTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(8, AuthTicket);
        }
        if (hasForceReg) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, ForceReg);
        }
        if (hasSafeDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(10, SafeDeviceName);
        }
        if (hasSafeDeviceType) {
          size += pb::CodedOutputStream.ComputeStringSize(11, SafeDeviceType);
        }
        if (hasRandomEncryKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, RandomEncryKey);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindOpMobileRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindOpMobileRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindOpMobileRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindOpMobileRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindOpMobileRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindOpMobileRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindOpMobileRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindOpMobileRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindOpMobileRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindOpMobileRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BindOpMobileRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindOpMobileRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BindOpMobileRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BindOpMobileRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BindOpMobileRequest result;
      
      private BindOpMobileRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          BindOpMobileRequest original = result;
          result = new BindOpMobileRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BindOpMobileRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.BindOpMobileRequest.Descriptor; }
      }
      
      public override BindOpMobileRequest DefaultInstanceForType {
        get { return global::mm.command.BindOpMobileRequest.DefaultInstance; }
      }
      
      public override BindOpMobileRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindOpMobileRequest) {
          return MergeFrom((BindOpMobileRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindOpMobileRequest other) {
        if (other == global::mm.command.BindOpMobileRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasUserName) {
          UserName = other.UserName;
        }
        if (other.HasMobile) {
          Mobile = other.Mobile;
        }
        if (other.HasOpcode) {
          Opcode = other.Opcode;
        }
        if (other.HasVerifycode) {
          Verifycode = other.Verifycode;
        }
        if (other.HasDialFlag) {
          DialFlag = other.DialFlag;
        }
        if (other.HasDialLang) {
          DialLang = other.DialLang;
        }
        if (other.HasAuthTicket) {
          AuthTicket = other.AuthTicket;
        }
        if (other.HasForceReg) {
          ForceReg = other.ForceReg;
        }
        if (other.HasSafeDeviceName) {
          SafeDeviceName = other.SafeDeviceName;
        }
        if (other.HasSafeDeviceType) {
          SafeDeviceType = other.SafeDeviceType;
        }
        if (other.HasRandomEncryKey) {
          MergeRandomEncryKey(other.RandomEncryKey);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bindOpMobileRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bindOpMobileRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasUserName = input.ReadString(ref result.userName_);
              break;
            }
            case 26: {
              result.hasMobile = input.ReadString(ref result.mobile_);
              break;
            }
            case 32: {
              result.hasOpcode = input.ReadInt32(ref result.opcode_);
              break;
            }
            case 42: {
              result.hasVerifycode = input.ReadString(ref result.verifycode_);
              break;
            }
            case 48: {
              result.hasDialFlag = input.ReadInt32(ref result.dialFlag_);
              break;
            }
            case 58: {
              result.hasDialLang = input.ReadString(ref result.dialLang_);
              break;
            }
            case 66: {
              result.hasAuthTicket = input.ReadString(ref result.authTicket_);
              break;
            }
            case 72: {
              result.hasForceReg = input.ReadInt32(ref result.forceReg_);
              break;
            }
            case 82: {
              result.hasSafeDeviceName = input.ReadString(ref result.safeDeviceName_);
              break;
            }
            case 90: {
              result.hasSafeDeviceType = input.ReadString(ref result.safeDeviceType_);
              break;
            }
            case 98: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasRandomEncryKey) {
                subBuilder.MergeFrom(RandomEncryKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RandomEncryKey = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasUserName {
        get { return result.hasUserName; }
      }
      public string UserName {
        get { return result.UserName; }
        set { SetUserName(value); }
      }
      public Builder SetUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserName = true;
        result.userName_ = value;
        return this;
      }
      public Builder ClearUserName() {
        PrepareBuilder();
        result.hasUserName = false;
        result.userName_ = "";
        return this;
      }
      
      public bool HasMobile {
        get { return result.hasMobile; }
      }
      public string Mobile {
        get { return result.Mobile; }
        set { SetMobile(value); }
      }
      public Builder SetMobile(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMobile = true;
        result.mobile_ = value;
        return this;
      }
      public Builder ClearMobile() {
        PrepareBuilder();
        result.hasMobile = false;
        result.mobile_ = "";
        return this;
      }
      
      public bool HasOpcode {
        get { return result.hasOpcode; }
      }
      public int Opcode {
        get { return result.Opcode; }
        set { SetOpcode(value); }
      }
      public Builder SetOpcode(int value) {
        PrepareBuilder();
        result.hasOpcode = true;
        result.opcode_ = value;
        return this;
      }
      public Builder ClearOpcode() {
        PrepareBuilder();
        result.hasOpcode = false;
        result.opcode_ = 0;
        return this;
      }
      
      public bool HasVerifycode {
        get { return result.hasVerifycode; }
      }
      public string Verifycode {
        get { return result.Verifycode; }
        set { SetVerifycode(value); }
      }
      public Builder SetVerifycode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasVerifycode = true;
        result.verifycode_ = value;
        return this;
      }
      public Builder ClearVerifycode() {
        PrepareBuilder();
        result.hasVerifycode = false;
        result.verifycode_ = "";
        return this;
      }
      
      public bool HasDialFlag {
        get { return result.hasDialFlag; }
      }
      public int DialFlag {
        get { return result.DialFlag; }
        set { SetDialFlag(value); }
      }
      public Builder SetDialFlag(int value) {
        PrepareBuilder();
        result.hasDialFlag = true;
        result.dialFlag_ = value;
        return this;
      }
      public Builder ClearDialFlag() {
        PrepareBuilder();
        result.hasDialFlag = false;
        result.dialFlag_ = 0;
        return this;
      }
      
      public bool HasDialLang {
        get { return result.hasDialLang; }
      }
      public string DialLang {
        get { return result.DialLang; }
        set { SetDialLang(value); }
      }
      public Builder SetDialLang(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDialLang = true;
        result.dialLang_ = value;
        return this;
      }
      public Builder ClearDialLang() {
        PrepareBuilder();
        result.hasDialLang = false;
        result.dialLang_ = "";
        return this;
      }
      
      public bool HasAuthTicket {
        get { return result.hasAuthTicket; }
      }
      public string AuthTicket {
        get { return result.AuthTicket; }
        set { SetAuthTicket(value); }
      }
      public Builder SetAuthTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthTicket = true;
        result.authTicket_ = value;
        return this;
      }
      public Builder ClearAuthTicket() {
        PrepareBuilder();
        result.hasAuthTicket = false;
        result.authTicket_ = "";
        return this;
      }
      
      public bool HasForceReg {
        get { return result.hasForceReg; }
      }
      public int ForceReg {
        get { return result.ForceReg; }
        set { SetForceReg(value); }
      }
      public Builder SetForceReg(int value) {
        PrepareBuilder();
        result.hasForceReg = true;
        result.forceReg_ = value;
        return this;
      }
      public Builder ClearForceReg() {
        PrepareBuilder();
        result.hasForceReg = false;
        result.forceReg_ = 0;
        return this;
      }
      
      public bool HasSafeDeviceName {
        get { return result.hasSafeDeviceName; }
      }
      public string SafeDeviceName {
        get { return result.SafeDeviceName; }
        set { SetSafeDeviceName(value); }
      }
      public Builder SetSafeDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSafeDeviceName = true;
        result.safeDeviceName_ = value;
        return this;
      }
      public Builder ClearSafeDeviceName() {
        PrepareBuilder();
        result.hasSafeDeviceName = false;
        result.safeDeviceName_ = "";
        return this;
      }
      
      public bool HasSafeDeviceType {
        get { return result.hasSafeDeviceType; }
      }
      public string SafeDeviceType {
        get { return result.SafeDeviceType; }
        set { SetSafeDeviceType(value); }
      }
      public Builder SetSafeDeviceType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSafeDeviceType = true;
        result.safeDeviceType_ = value;
        return this;
      }
      public Builder ClearSafeDeviceType() {
        PrepareBuilder();
        result.hasSafeDeviceType = false;
        result.safeDeviceType_ = "";
        return this;
      }
      
      public bool HasRandomEncryKey {
       get { return result.hasRandomEncryKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
        get { return result.RandomEncryKey; }
        set { SetRandomEncryKey(value); }
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = value;
        return this;
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRandomEncryKey &&
            result.randomEncryKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.randomEncryKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.randomEncryKey_).MergeFrom(value).BuildPartial();
        } else {
          result.randomEncryKey_ = value;
        }
        result.hasRandomEncryKey = true;
        return this;
      }
      public Builder ClearRandomEncryKey() {
        PrepareBuilder();
        result.hasRandomEncryKey = false;
        result.randomEncryKey_ = null;
        return this;
      }
    }
    static BindOpMobileRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BindOpMobileResponse : pb::GeneratedMessage<BindOpMobileResponse, BindOpMobileResponse.Builder> {
    private BindOpMobileResponse() { }
    private static readonly BindOpMobileResponse defaultInstance = new BindOpMobileResponse().MakeReadOnly();
    private static readonly string[] _bindOpMobileResponseFieldNames = new string[] { "AuthTicket", "BuiltinIPList", "MainAcct", "MainAcctType", "NeedSetPwd", "NetworkControl", "NewHostList", "Pwd", "SafeDevice", "SafeDeviceList", "SmsNo", "Username", "base", "ticket" };
    private static readonly uint[] _bindOpMobileResponseFieldTags = new uint[] { 82, 66, 98, 104, 32, 74, 58, 42, 88, 114, 26, 50, 10, 18 };
    public static BindOpMobileResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindOpMobileResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BindOpMobileResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindOpMobileResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindOpMobileResponse, BindOpMobileResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindOpMobileResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int TicketFieldNumber = 2;
    private bool hasTicket;
    private string ticket_ = "";
    public bool HasTicket {
      get { return hasTicket; }
    }
    public string Ticket {
      get { return ticket_; }
    }
    
    public const int SmsNoFieldNumber = 3;
    private bool hasSmsNo;
    private string smsNo_ = "";
    public bool HasSmsNo {
      get { return hasSmsNo; }
    }
    public string SmsNo {
      get { return smsNo_; }
    }
    
    public const int NeedSetPwdFieldNumber = 4;
    private bool hasNeedSetPwd;
    private int needSetPwd_;
    public bool HasNeedSetPwd {
      get { return hasNeedSetPwd; }
    }
    public int NeedSetPwd {
      get { return needSetPwd_; }
    }
    
    public const int PwdFieldNumber = 5;
    private bool hasPwd;
    private string pwd_ = "";
    public bool HasPwd {
      get { return hasPwd; }
    }
    public string Pwd {
      get { return pwd_; }
    }
    
    public const int UsernameFieldNumber = 6;
    private bool hasUsername;
    private string username_ = "";
    public bool HasUsername {
      get { return hasUsername; }
    }
    public string Username {
      get { return username_; }
    }
    
    public const int NewHostListFieldNumber = 7;
    private bool hasNewHostList;
    private global::mm.command.NewHostListType newHostList_;
    public bool HasNewHostList {
      get { return hasNewHostList; }
    }
    public global::mm.command.NewHostListType NewHostList {
      get { return newHostList_ ?? global::mm.command.NewHostListType.DefaultInstance; }
    }
    
    public const int BuiltinIPListFieldNumber = 8;
    private bool hasBuiltinIPList;
    private global::mm.command.IPList builtinIPList_;
    public bool HasBuiltinIPList {
      get { return hasBuiltinIPList; }
    }
    public global::mm.command.IPList BuiltinIPList {
      get { return builtinIPList_ ?? global::mm.command.IPList.DefaultInstance; }
    }
    
    public const int NetworkControlFieldNumber = 9;
    private bool hasNetworkControl;
    private global::mm.command.NetworkControlType networkControl_;
    public bool HasNetworkControl {
      get { return hasNetworkControl; }
    }
    public global::mm.command.NetworkControlType NetworkControl {
      get { return networkControl_ ?? global::mm.command.NetworkControlType.DefaultInstance; }
    }
    
    public const int AuthTicketFieldNumber = 10;
    private bool hasAuthTicket;
    private string authTicket_ = "";
    public bool HasAuthTicket {
      get { return hasAuthTicket; }
    }
    public string AuthTicket {
      get { return authTicket_; }
    }
    
    public const int SafeDeviceFieldNumber = 11;
    private bool hasSafeDevice;
    private int safeDevice_;
    public bool HasSafeDevice {
      get { return hasSafeDevice; }
    }
    public int SafeDevice {
      get { return safeDevice_; }
    }
    
    public const int MainAcctFieldNumber = 12;
    private bool hasMainAcct;
    private string mainAcct_ = "";
    public bool HasMainAcct {
      get { return hasMainAcct; }
    }
    public string MainAcct {
      get { return mainAcct_; }
    }
    
    public const int MainAcctTypeFieldNumber = 13;
    private bool hasMainAcctType;
    private int mainAcctType_;
    public bool HasMainAcctType {
      get { return hasMainAcctType; }
    }
    public int MainAcctType {
      get { return mainAcctType_; }
    }
    
    public const int SafeDeviceListFieldNumber = 14;
    private bool hasSafeDeviceList;
    private global::mm.command.SafeDevice safeDeviceList_;
    public bool HasSafeDeviceList {
      get { return hasSafeDeviceList; }
    }
    public global::mm.command.SafeDevice SafeDeviceList {
      get { return safeDeviceList_ ?? global::mm.command.SafeDevice.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasNewHostList) {
          if (!NewHostList.IsInitialized) return false;
        }
        if (HasBuiltinIPList) {
          if (!BuiltinIPList.IsInitialized) return false;
        }
        if (HasSafeDeviceList) {
          if (!SafeDeviceList.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bindOpMobileResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[12], Base);
      }
      if (hasTicket) {
        output.WriteString(2, field_names[13], Ticket);
      }
      if (hasSmsNo) {
        output.WriteString(3, field_names[10], SmsNo);
      }
      if (hasNeedSetPwd) {
        output.WriteInt32(4, field_names[4], NeedSetPwd);
      }
      if (hasPwd) {
        output.WriteString(5, field_names[7], Pwd);
      }
      if (hasUsername) {
        output.WriteString(6, field_names[11], Username);
      }
      if (hasNewHostList) {
        output.WriteMessage(7, field_names[6], NewHostList);
      }
      if (hasBuiltinIPList) {
        output.WriteMessage(8, field_names[1], BuiltinIPList);
      }
      if (hasNetworkControl) {
        output.WriteMessage(9, field_names[5], NetworkControl);
      }
      if (hasAuthTicket) {
        output.WriteString(10, field_names[0], AuthTicket);
      }
      if (hasSafeDevice) {
        output.WriteInt32(11, field_names[8], SafeDevice);
      }
      if (hasMainAcct) {
        output.WriteString(12, field_names[2], MainAcct);
      }
      if (hasMainAcctType) {
        output.WriteInt32(13, field_names[3], MainAcctType);
      }
      if (hasSafeDeviceList) {
        output.WriteMessage(14, field_names[9], SafeDeviceList);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Ticket);
        }
        if (hasSmsNo) {
          size += pb::CodedOutputStream.ComputeStringSize(3, SmsNo);
        }
        if (hasNeedSetPwd) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, NeedSetPwd);
        }
        if (hasPwd) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Pwd);
        }
        if (hasUsername) {
          size += pb::CodedOutputStream.ComputeStringSize(6, Username);
        }
        if (hasNewHostList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, NewHostList);
        }
        if (hasBuiltinIPList) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, BuiltinIPList);
        }
        if (hasNetworkControl) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, NetworkControl);
        }
        if (hasAuthTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(10, AuthTicket);
        }
        if (hasSafeDevice) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, SafeDevice);
        }
        if (hasMainAcct) {
          size += pb::CodedOutputStream.ComputeStringSize(12, MainAcct);
        }
        if (hasMainAcctType) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, MainAcctType);
        }
        if (hasSafeDeviceList) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, SafeDeviceList);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindOpMobileResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindOpMobileResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindOpMobileResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindOpMobileResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindOpMobileResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindOpMobileResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindOpMobileResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindOpMobileResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindOpMobileResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindOpMobileResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BindOpMobileResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindOpMobileResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BindOpMobileResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BindOpMobileResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BindOpMobileResponse result;
      
      private BindOpMobileResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          BindOpMobileResponse original = result;
          result = new BindOpMobileResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BindOpMobileResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.BindOpMobileResponse.Descriptor; }
      }
      
      public override BindOpMobileResponse DefaultInstanceForType {
        get { return global::mm.command.BindOpMobileResponse.DefaultInstance; }
      }
      
      public override BindOpMobileResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindOpMobileResponse) {
          return MergeFrom((BindOpMobileResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindOpMobileResponse other) {
        if (other == global::mm.command.BindOpMobileResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasTicket) {
          Ticket = other.Ticket;
        }
        if (other.HasSmsNo) {
          SmsNo = other.SmsNo;
        }
        if (other.HasNeedSetPwd) {
          NeedSetPwd = other.NeedSetPwd;
        }
        if (other.HasPwd) {
          Pwd = other.Pwd;
        }
        if (other.HasUsername) {
          Username = other.Username;
        }
        if (other.HasNewHostList) {
          MergeNewHostList(other.NewHostList);
        }
        if (other.HasBuiltinIPList) {
          MergeBuiltinIPList(other.BuiltinIPList);
        }
        if (other.HasNetworkControl) {
          MergeNetworkControl(other.NetworkControl);
        }
        if (other.HasAuthTicket) {
          AuthTicket = other.AuthTicket;
        }
        if (other.HasSafeDevice) {
          SafeDevice = other.SafeDevice;
        }
        if (other.HasMainAcct) {
          MainAcct = other.MainAcct;
        }
        if (other.HasMainAcctType) {
          MainAcctType = other.MainAcctType;
        }
        if (other.HasSafeDeviceList) {
          MergeSafeDeviceList(other.SafeDeviceList);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bindOpMobileResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bindOpMobileResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasTicket = input.ReadString(ref result.ticket_);
              break;
            }
            case 26: {
              result.hasSmsNo = input.ReadString(ref result.smsNo_);
              break;
            }
            case 32: {
              result.hasNeedSetPwd = input.ReadInt32(ref result.needSetPwd_);
              break;
            }
            case 42: {
              result.hasPwd = input.ReadString(ref result.pwd_);
              break;
            }
            case 50: {
              result.hasUsername = input.ReadString(ref result.username_);
              break;
            }
            case 58: {
              global::mm.command.NewHostListType.Builder subBuilder = global::mm.command.NewHostListType.CreateBuilder();
              if (result.hasNewHostList) {
                subBuilder.MergeFrom(NewHostList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewHostList = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::mm.command.IPList.Builder subBuilder = global::mm.command.IPList.CreateBuilder();
              if (result.hasBuiltinIPList) {
                subBuilder.MergeFrom(BuiltinIPList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BuiltinIPList = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::mm.command.NetworkControlType.Builder subBuilder = global::mm.command.NetworkControlType.CreateBuilder();
              if (result.hasNetworkControl) {
                subBuilder.MergeFrom(NetworkControl);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NetworkControl = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              result.hasAuthTicket = input.ReadString(ref result.authTicket_);
              break;
            }
            case 88: {
              result.hasSafeDevice = input.ReadInt32(ref result.safeDevice_);
              break;
            }
            case 98: {
              result.hasMainAcct = input.ReadString(ref result.mainAcct_);
              break;
            }
            case 104: {
              result.hasMainAcctType = input.ReadInt32(ref result.mainAcctType_);
              break;
            }
            case 114: {
              global::mm.command.SafeDevice.Builder subBuilder = global::mm.command.SafeDevice.CreateBuilder();
              if (result.hasSafeDeviceList) {
                subBuilder.MergeFrom(SafeDeviceList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SafeDeviceList = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasTicket {
        get { return result.hasTicket; }
      }
      public string Ticket {
        get { return result.Ticket; }
        set { SetTicket(value); }
      }
      public Builder SetTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTicket = true;
        result.ticket_ = value;
        return this;
      }
      public Builder ClearTicket() {
        PrepareBuilder();
        result.hasTicket = false;
        result.ticket_ = "";
        return this;
      }
      
      public bool HasSmsNo {
        get { return result.hasSmsNo; }
      }
      public string SmsNo {
        get { return result.SmsNo; }
        set { SetSmsNo(value); }
      }
      public Builder SetSmsNo(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSmsNo = true;
        result.smsNo_ = value;
        return this;
      }
      public Builder ClearSmsNo() {
        PrepareBuilder();
        result.hasSmsNo = false;
        result.smsNo_ = "";
        return this;
      }
      
      public bool HasNeedSetPwd {
        get { return result.hasNeedSetPwd; }
      }
      public int NeedSetPwd {
        get { return result.NeedSetPwd; }
        set { SetNeedSetPwd(value); }
      }
      public Builder SetNeedSetPwd(int value) {
        PrepareBuilder();
        result.hasNeedSetPwd = true;
        result.needSetPwd_ = value;
        return this;
      }
      public Builder ClearNeedSetPwd() {
        PrepareBuilder();
        result.hasNeedSetPwd = false;
        result.needSetPwd_ = 0;
        return this;
      }
      
      public bool HasPwd {
        get { return result.hasPwd; }
      }
      public string Pwd {
        get { return result.Pwd; }
        set { SetPwd(value); }
      }
      public Builder SetPwd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPwd = true;
        result.pwd_ = value;
        return this;
      }
      public Builder ClearPwd() {
        PrepareBuilder();
        result.hasPwd = false;
        result.pwd_ = "";
        return this;
      }
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public string Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = "";
        return this;
      }
      
      public bool HasNewHostList {
       get { return result.hasNewHostList; }
      }
      public global::mm.command.NewHostListType NewHostList {
        get { return result.NewHostList; }
        set { SetNewHostList(value); }
      }
      public Builder SetNewHostList(global::mm.command.NewHostListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewHostList = true;
        result.newHostList_ = value;
        return this;
      }
      public Builder SetNewHostList(global::mm.command.NewHostListType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNewHostList = true;
        result.newHostList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewHostList(global::mm.command.NewHostListType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNewHostList &&
            result.newHostList_ != global::mm.command.NewHostListType.DefaultInstance) {
            result.newHostList_ = global::mm.command.NewHostListType.CreateBuilder(result.newHostList_).MergeFrom(value).BuildPartial();
        } else {
          result.newHostList_ = value;
        }
        result.hasNewHostList = true;
        return this;
      }
      public Builder ClearNewHostList() {
        PrepareBuilder();
        result.hasNewHostList = false;
        result.newHostList_ = null;
        return this;
      }
      
      public bool HasBuiltinIPList {
       get { return result.hasBuiltinIPList; }
      }
      public global::mm.command.IPList BuiltinIPList {
        get { return result.BuiltinIPList; }
        set { SetBuiltinIPList(value); }
      }
      public Builder SetBuiltinIPList(global::mm.command.IPList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBuiltinIPList = true;
        result.builtinIPList_ = value;
        return this;
      }
      public Builder SetBuiltinIPList(global::mm.command.IPList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBuiltinIPList = true;
        result.builtinIPList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBuiltinIPList(global::mm.command.IPList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBuiltinIPList &&
            result.builtinIPList_ != global::mm.command.IPList.DefaultInstance) {
            result.builtinIPList_ = global::mm.command.IPList.CreateBuilder(result.builtinIPList_).MergeFrom(value).BuildPartial();
        } else {
          result.builtinIPList_ = value;
        }
        result.hasBuiltinIPList = true;
        return this;
      }
      public Builder ClearBuiltinIPList() {
        PrepareBuilder();
        result.hasBuiltinIPList = false;
        result.builtinIPList_ = null;
        return this;
      }
      
      public bool HasNetworkControl {
       get { return result.hasNetworkControl; }
      }
      public global::mm.command.NetworkControlType NetworkControl {
        get { return result.NetworkControl; }
        set { SetNetworkControl(value); }
      }
      public Builder SetNetworkControl(global::mm.command.NetworkControlType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNetworkControl = true;
        result.networkControl_ = value;
        return this;
      }
      public Builder SetNetworkControl(global::mm.command.NetworkControlType.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNetworkControl = true;
        result.networkControl_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNetworkControl(global::mm.command.NetworkControlType value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNetworkControl &&
            result.networkControl_ != global::mm.command.NetworkControlType.DefaultInstance) {
            result.networkControl_ = global::mm.command.NetworkControlType.CreateBuilder(result.networkControl_).MergeFrom(value).BuildPartial();
        } else {
          result.networkControl_ = value;
        }
        result.hasNetworkControl = true;
        return this;
      }
      public Builder ClearNetworkControl() {
        PrepareBuilder();
        result.hasNetworkControl = false;
        result.networkControl_ = null;
        return this;
      }
      
      public bool HasAuthTicket {
        get { return result.hasAuthTicket; }
      }
      public string AuthTicket {
        get { return result.AuthTicket; }
        set { SetAuthTicket(value); }
      }
      public Builder SetAuthTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuthTicket = true;
        result.authTicket_ = value;
        return this;
      }
      public Builder ClearAuthTicket() {
        PrepareBuilder();
        result.hasAuthTicket = false;
        result.authTicket_ = "";
        return this;
      }
      
      public bool HasSafeDevice {
        get { return result.hasSafeDevice; }
      }
      public int SafeDevice {
        get { return result.SafeDevice; }
        set { SetSafeDevice(value); }
      }
      public Builder SetSafeDevice(int value) {
        PrepareBuilder();
        result.hasSafeDevice = true;
        result.safeDevice_ = value;
        return this;
      }
      public Builder ClearSafeDevice() {
        PrepareBuilder();
        result.hasSafeDevice = false;
        result.safeDevice_ = 0;
        return this;
      }
      
      public bool HasMainAcct {
        get { return result.hasMainAcct; }
      }
      public string MainAcct {
        get { return result.MainAcct; }
        set { SetMainAcct(value); }
      }
      public Builder SetMainAcct(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMainAcct = true;
        result.mainAcct_ = value;
        return this;
      }
      public Builder ClearMainAcct() {
        PrepareBuilder();
        result.hasMainAcct = false;
        result.mainAcct_ = "";
        return this;
      }
      
      public bool HasMainAcctType {
        get { return result.hasMainAcctType; }
      }
      public int MainAcctType {
        get { return result.MainAcctType; }
        set { SetMainAcctType(value); }
      }
      public Builder SetMainAcctType(int value) {
        PrepareBuilder();
        result.hasMainAcctType = true;
        result.mainAcctType_ = value;
        return this;
      }
      public Builder ClearMainAcctType() {
        PrepareBuilder();
        result.hasMainAcctType = false;
        result.mainAcctType_ = 0;
        return this;
      }
      
      public bool HasSafeDeviceList {
       get { return result.hasSafeDeviceList; }
      }
      public global::mm.command.SafeDevice SafeDeviceList {
        get { return result.SafeDeviceList; }
        set { SetSafeDeviceList(value); }
      }
      public Builder SetSafeDeviceList(global::mm.command.SafeDevice value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSafeDeviceList = true;
        result.safeDeviceList_ = value;
        return this;
      }
      public Builder SetSafeDeviceList(global::mm.command.SafeDevice.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSafeDeviceList = true;
        result.safeDeviceList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSafeDeviceList(global::mm.command.SafeDevice value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSafeDeviceList &&
            result.safeDeviceList_ != global::mm.command.SafeDevice.DefaultInstance) {
            result.safeDeviceList_ = global::mm.command.SafeDevice.CreateBuilder(result.safeDeviceList_).MergeFrom(value).BuildPartial();
        } else {
          result.safeDeviceList_ = value;
        }
        result.hasSafeDeviceList = true;
        return this;
      }
      public Builder ClearSafeDeviceList() {
        PrepareBuilder();
        result.hasSafeDeviceList = false;
        result.safeDeviceList_ = null;
        return this;
      }
    }
    static BindOpMobileResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BindQQRequest : pb::GeneratedMessage<BindQQRequest, BindQQRequest.Builder> {
    private BindQQRequest() { }
    private static readonly BindQQRequest defaultInstance = new BindQQRequest().MakeReadOnly();
    private static readonly string[] _bindQQRequestFieldNames = new string[] { "ImgCode", "ImgEncryptKey", "ImgSid", "KSid", "OPCode", "Pwd", "Pwd2", "QQ", "SafeDeviceName", "SafeDeviceType", "SetAsMainAcct", "base" };
    private static readonly uint[] _bindQQRequestFieldTags = new uint[] { 50, 66, 42, 74, 56, 26, 34, 16, 90, 98, 80, 10 };
    public static BindQQRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindQQRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BindQQRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindQQRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindQQRequest, BindQQRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindQQRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int QQFieldNumber = 2;
    private bool hasQQ;
    private uint qQ_;
    public bool HasQQ {
      get { return hasQQ; }
    }
    [global::System.CLSCompliant(false)]
    public uint QQ {
      get { return qQ_; }
    }
    
    public const int PwdFieldNumber = 3;
    private bool hasPwd;
    private string pwd_ = "";
    public bool HasPwd {
      get { return hasPwd; }
    }
    public string Pwd {
      get { return pwd_; }
    }
    
    public const int Pwd2FieldNumber = 4;
    private bool hasPwd2;
    private string pwd2_ = "";
    public bool HasPwd2 {
      get { return hasPwd2; }
    }
    public string Pwd2 {
      get { return pwd2_; }
    }
    
    public const int ImgSidFieldNumber = 5;
    private bool hasImgSid;
    private string imgSid_ = "";
    public bool HasImgSid {
      get { return hasImgSid; }
    }
    public string ImgSid {
      get { return imgSid_; }
    }
    
    public const int ImgCodeFieldNumber = 6;
    private bool hasImgCode;
    private string imgCode_ = "";
    public bool HasImgCode {
      get { return hasImgCode; }
    }
    public string ImgCode {
      get { return imgCode_; }
    }
    
    public const int OPCodeFieldNumber = 7;
    private bool hasOPCode;
    private int oPCode_;
    public bool HasOPCode {
      get { return hasOPCode; }
    }
    public int OPCode {
      get { return oPCode_; }
    }
    
    public const int ImgEncryptKeyFieldNumber = 8;
    private bool hasImgEncryptKey;
    private global::mm.command.SKBuiltinString_t imgEncryptKey_;
    public bool HasImgEncryptKey {
      get { return hasImgEncryptKey; }
    }
    public global::mm.command.SKBuiltinString_t ImgEncryptKey {
      get { return imgEncryptKey_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int KSidFieldNumber = 9;
    private bool hasKSid;
    private global::mm.command.SKBuiltinBuffer_t kSid_;
    public bool HasKSid {
      get { return hasKSid; }
    }
    public global::mm.command.SKBuiltinBuffer_t KSid {
      get { return kSid_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int SetAsMainAcctFieldNumber = 10;
    private bool hasSetAsMainAcct;
    private int setAsMainAcct_;
    public bool HasSetAsMainAcct {
      get { return hasSetAsMainAcct; }
    }
    public int SetAsMainAcct {
      get { return setAsMainAcct_; }
    }
    
    public const int SafeDeviceNameFieldNumber = 11;
    private bool hasSafeDeviceName;
    private string safeDeviceName_ = "";
    public bool HasSafeDeviceName {
      get { return hasSafeDeviceName; }
    }
    public string SafeDeviceName {
      get { return safeDeviceName_; }
    }
    
    public const int SafeDeviceTypeFieldNumber = 12;
    private bool hasSafeDeviceType;
    private string safeDeviceType_ = "";
    public bool HasSafeDeviceType {
      get { return hasSafeDeviceType; }
    }
    public string SafeDeviceType {
      get { return safeDeviceType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasQQ) return false;
        if (!hasOPCode) return false;
        if (!Base.IsInitialized) return false;
        if (HasKSid) {
          if (!KSid.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bindQQRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[11], Base);
      }
      if (hasQQ) {
        output.WriteUInt32(2, field_names[7], QQ);
      }
      if (hasPwd) {
        output.WriteString(3, field_names[5], Pwd);
      }
      if (hasPwd2) {
        output.WriteString(4, field_names[6], Pwd2);
      }
      if (hasImgSid) {
        output.WriteString(5, field_names[2], ImgSid);
      }
      if (hasImgCode) {
        output.WriteString(6, field_names[0], ImgCode);
      }
      if (hasOPCode) {
        output.WriteInt32(7, field_names[4], OPCode);
      }
      if (hasImgEncryptKey) {
        output.WriteMessage(8, field_names[1], ImgEncryptKey);
      }
      if (hasKSid) {
        output.WriteMessage(9, field_names[3], KSid);
      }
      if (hasSetAsMainAcct) {
        output.WriteInt32(10, field_names[10], SetAsMainAcct);
      }
      if (hasSafeDeviceName) {
        output.WriteString(11, field_names[8], SafeDeviceName);
      }
      if (hasSafeDeviceType) {
        output.WriteString(12, field_names[9], SafeDeviceType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasQQ) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, QQ);
        }
        if (hasPwd) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Pwd);
        }
        if (hasPwd2) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Pwd2);
        }
        if (hasImgSid) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ImgSid);
        }
        if (hasImgCode) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ImgCode);
        }
        if (hasOPCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, OPCode);
        }
        if (hasImgEncryptKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, ImgEncryptKey);
        }
        if (hasKSid) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, KSid);
        }
        if (hasSetAsMainAcct) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, SetAsMainAcct);
        }
        if (hasSafeDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(11, SafeDeviceName);
        }
        if (hasSafeDeviceType) {
          size += pb::CodedOutputStream.ComputeStringSize(12, SafeDeviceType);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindQQRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindQQRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindQQRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindQQRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindQQRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindQQRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindQQRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindQQRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindQQRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindQQRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BindQQRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindQQRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BindQQRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BindQQRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BindQQRequest result;
      
      private BindQQRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          BindQQRequest original = result;
          result = new BindQQRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BindQQRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.BindQQRequest.Descriptor; }
      }
      
      public override BindQQRequest DefaultInstanceForType {
        get { return global::mm.command.BindQQRequest.DefaultInstance; }
      }
      
      public override BindQQRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindQQRequest) {
          return MergeFrom((BindQQRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindQQRequest other) {
        if (other == global::mm.command.BindQQRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasQQ) {
          QQ = other.QQ;
        }
        if (other.HasPwd) {
          Pwd = other.Pwd;
        }
        if (other.HasPwd2) {
          Pwd2 = other.Pwd2;
        }
        if (other.HasImgSid) {
          ImgSid = other.ImgSid;
        }
        if (other.HasImgCode) {
          ImgCode = other.ImgCode;
        }
        if (other.HasOPCode) {
          OPCode = other.OPCode;
        }
        if (other.HasImgEncryptKey) {
          MergeImgEncryptKey(other.ImgEncryptKey);
        }
        if (other.HasKSid) {
          MergeKSid(other.KSid);
        }
        if (other.HasSetAsMainAcct) {
          SetAsMainAcct = other.SetAsMainAcct;
        }
        if (other.HasSafeDeviceName) {
          SafeDeviceName = other.SafeDeviceName;
        }
        if (other.HasSafeDeviceType) {
          SafeDeviceType = other.SafeDeviceType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bindQQRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bindQQRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasQQ = input.ReadUInt32(ref result.qQ_);
              break;
            }
            case 26: {
              result.hasPwd = input.ReadString(ref result.pwd_);
              break;
            }
            case 34: {
              result.hasPwd2 = input.ReadString(ref result.pwd2_);
              break;
            }
            case 42: {
              result.hasImgSid = input.ReadString(ref result.imgSid_);
              break;
            }
            case 50: {
              result.hasImgCode = input.ReadString(ref result.imgCode_);
              break;
            }
            case 56: {
              result.hasOPCode = input.ReadInt32(ref result.oPCode_);
              break;
            }
            case 66: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgEncryptKey) {
                subBuilder.MergeFrom(ImgEncryptKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgEncryptKey = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasKSid) {
                subBuilder.MergeFrom(KSid);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KSid = subBuilder.BuildPartial();
              break;
            }
            case 80: {
              result.hasSetAsMainAcct = input.ReadInt32(ref result.setAsMainAcct_);
              break;
            }
            case 90: {
              result.hasSafeDeviceName = input.ReadString(ref result.safeDeviceName_);
              break;
            }
            case 98: {
              result.hasSafeDeviceType = input.ReadString(ref result.safeDeviceType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasQQ {
        get { return result.hasQQ; }
      }
      [global::System.CLSCompliant(false)]
      public uint QQ {
        get { return result.QQ; }
        set { SetQQ(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetQQ(uint value) {
        PrepareBuilder();
        result.hasQQ = true;
        result.qQ_ = value;
        return this;
      }
      public Builder ClearQQ() {
        PrepareBuilder();
        result.hasQQ = false;
        result.qQ_ = 0;
        return this;
      }
      
      public bool HasPwd {
        get { return result.hasPwd; }
      }
      public string Pwd {
        get { return result.Pwd; }
        set { SetPwd(value); }
      }
      public Builder SetPwd(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPwd = true;
        result.pwd_ = value;
        return this;
      }
      public Builder ClearPwd() {
        PrepareBuilder();
        result.hasPwd = false;
        result.pwd_ = "";
        return this;
      }
      
      public bool HasPwd2 {
        get { return result.hasPwd2; }
      }
      public string Pwd2 {
        get { return result.Pwd2; }
        set { SetPwd2(value); }
      }
      public Builder SetPwd2(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPwd2 = true;
        result.pwd2_ = value;
        return this;
      }
      public Builder ClearPwd2() {
        PrepareBuilder();
        result.hasPwd2 = false;
        result.pwd2_ = "";
        return this;
      }
      
      public bool HasImgSid {
        get { return result.hasImgSid; }
      }
      public string ImgSid {
        get { return result.ImgSid; }
        set { SetImgSid(value); }
      }
      public Builder SetImgSid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgSid = true;
        result.imgSid_ = value;
        return this;
      }
      public Builder ClearImgSid() {
        PrepareBuilder();
        result.hasImgSid = false;
        result.imgSid_ = "";
        return this;
      }
      
      public bool HasImgCode {
        get { return result.hasImgCode; }
      }
      public string ImgCode {
        get { return result.ImgCode; }
        set { SetImgCode(value); }
      }
      public Builder SetImgCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgCode = true;
        result.imgCode_ = value;
        return this;
      }
      public Builder ClearImgCode() {
        PrepareBuilder();
        result.hasImgCode = false;
        result.imgCode_ = "";
        return this;
      }
      
      public bool HasOPCode {
        get { return result.hasOPCode; }
      }
      public int OPCode {
        get { return result.OPCode; }
        set { SetOPCode(value); }
      }
      public Builder SetOPCode(int value) {
        PrepareBuilder();
        result.hasOPCode = true;
        result.oPCode_ = value;
        return this;
      }
      public Builder ClearOPCode() {
        PrepareBuilder();
        result.hasOPCode = false;
        result.oPCode_ = 0;
        return this;
      }
      
      public bool HasImgEncryptKey {
       get { return result.hasImgEncryptKey; }
      }
      public global::mm.command.SKBuiltinString_t ImgEncryptKey {
        get { return result.ImgEncryptKey; }
        set { SetImgEncryptKey(value); }
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = value;
        return this;
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgEncryptKey &&
            result.imgEncryptKey_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgEncryptKey_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgEncryptKey_).MergeFrom(value).BuildPartial();
        } else {
          result.imgEncryptKey_ = value;
        }
        result.hasImgEncryptKey = true;
        return this;
      }
      public Builder ClearImgEncryptKey() {
        PrepareBuilder();
        result.hasImgEncryptKey = false;
        result.imgEncryptKey_ = null;
        return this;
      }
      
      public bool HasKSid {
       get { return result.hasKSid; }
      }
      public global::mm.command.SKBuiltinBuffer_t KSid {
        get { return result.KSid; }
        set { SetKSid(value); }
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = value;
        return this;
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKSid &&
            result.kSid_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.kSid_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.kSid_).MergeFrom(value).BuildPartial();
        } else {
          result.kSid_ = value;
        }
        result.hasKSid = true;
        return this;
      }
      public Builder ClearKSid() {
        PrepareBuilder();
        result.hasKSid = false;
        result.kSid_ = null;
        return this;
      }
      
      public bool HasSetAsMainAcct {
        get { return result.hasSetAsMainAcct; }
      }
      public int SetAsMainAcct {
        get { return result.SetAsMainAcct; }
        set { SetSetAsMainAcct(value); }
      }
      public Builder SetSetAsMainAcct(int value) {
        PrepareBuilder();
        result.hasSetAsMainAcct = true;
        result.setAsMainAcct_ = value;
        return this;
      }
      public Builder ClearSetAsMainAcct() {
        PrepareBuilder();
        result.hasSetAsMainAcct = false;
        result.setAsMainAcct_ = 0;
        return this;
      }
      
      public bool HasSafeDeviceName {
        get { return result.hasSafeDeviceName; }
      }
      public string SafeDeviceName {
        get { return result.SafeDeviceName; }
        set { SetSafeDeviceName(value); }
      }
      public Builder SetSafeDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSafeDeviceName = true;
        result.safeDeviceName_ = value;
        return this;
      }
      public Builder ClearSafeDeviceName() {
        PrepareBuilder();
        result.hasSafeDeviceName = false;
        result.safeDeviceName_ = "";
        return this;
      }
      
      public bool HasSafeDeviceType {
        get { return result.hasSafeDeviceType; }
      }
      public string SafeDeviceType {
        get { return result.SafeDeviceType; }
        set { SetSafeDeviceType(value); }
      }
      public Builder SetSafeDeviceType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSafeDeviceType = true;
        result.safeDeviceType_ = value;
        return this;
      }
      public Builder ClearSafeDeviceType() {
        PrepareBuilder();
        result.hasSafeDeviceType = false;
        result.safeDeviceType_ = "";
        return this;
      }
    }
    static BindQQRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BindQQResponse : pb::GeneratedMessage<BindQQResponse, BindQQResponse.Builder> {
    private BindQQResponse() { }
    private static readonly BindQQResponse defaultInstance = new BindQQResponse().MakeReadOnly();
    private static readonly string[] _bindQQResponseFieldNames = new string[] { "A2Key", "ImgBuf", "ImgEncryptKey", "ImgSid", "KSid", "MicroBlogName", "PrivateMsgStatus", "PushMailStatus", "QQMailSkey", "SafeDevice", "SafeDeviceList", "Status", "base" };
    private static readonly uint[] _bindQQResponseFieldTags = new uint[] { 82, 26, 74, 18, 90, 50, 40, 32, 66, 104, 98, 56, 10 };
    public static BindQQResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override BindQQResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BindQQResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindQQResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<BindQQResponse, BindQQResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_BindQQResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int ImgSidFieldNumber = 2;
    private bool hasImgSid;
    private string imgSid_ = "";
    public bool HasImgSid {
      get { return hasImgSid; }
    }
    public string ImgSid {
      get { return imgSid_; }
    }
    
    public const int ImgBufFieldNumber = 3;
    private bool hasImgBuf;
    private global::mm.command.SKBuiltinBuffer_t imgBuf_;
    public bool HasImgBuf {
      get { return hasImgBuf; }
    }
    public global::mm.command.SKBuiltinBuffer_t ImgBuf {
      get { return imgBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int PushMailStatusFieldNumber = 4;
    private bool hasPushMailStatus;
    private int pushMailStatus_;
    public bool HasPushMailStatus {
      get { return hasPushMailStatus; }
    }
    public int PushMailStatus {
      get { return pushMailStatus_; }
    }
    
    public const int PrivateMsgStatusFieldNumber = 5;
    private bool hasPrivateMsgStatus;
    private int privateMsgStatus_;
    public bool HasPrivateMsgStatus {
      get { return hasPrivateMsgStatus; }
    }
    public int PrivateMsgStatus {
      get { return privateMsgStatus_; }
    }
    
    public const int MicroBlogNameFieldNumber = 6;
    private bool hasMicroBlogName;
    private string microBlogName_ = "";
    public bool HasMicroBlogName {
      get { return hasMicroBlogName; }
    }
    public string MicroBlogName {
      get { return microBlogName_; }
    }
    
    public const int StatusFieldNumber = 7;
    private bool hasStatus;
    private int status_;
    public bool HasStatus {
      get { return hasStatus; }
    }
    public int Status {
      get { return status_; }
    }
    
    public const int QQMailSkeyFieldNumber = 8;
    private bool hasQQMailSkey;
    private string qQMailSkey_ = "";
    public bool HasQQMailSkey {
      get { return hasQQMailSkey; }
    }
    public string QQMailSkey {
      get { return qQMailSkey_; }
    }
    
    public const int ImgEncryptKeyFieldNumber = 9;
    private bool hasImgEncryptKey;
    private global::mm.command.SKBuiltinString_t imgEncryptKey_;
    public bool HasImgEncryptKey {
      get { return hasImgEncryptKey; }
    }
    public global::mm.command.SKBuiltinString_t ImgEncryptKey {
      get { return imgEncryptKey_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int A2KeyFieldNumber = 10;
    private bool hasA2Key;
    private global::mm.command.SKBuiltinBuffer_t a2Key_;
    public bool HasA2Key {
      get { return hasA2Key; }
    }
    public global::mm.command.SKBuiltinBuffer_t A2Key {
      get { return a2Key_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int KSidFieldNumber = 11;
    private bool hasKSid;
    private global::mm.command.SKBuiltinBuffer_t kSid_;
    public bool HasKSid {
      get { return hasKSid; }
    }
    public global::mm.command.SKBuiltinBuffer_t KSid {
      get { return kSid_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int SafeDeviceListFieldNumber = 12;
    private bool hasSafeDeviceList;
    private global::mm.command.SafeDevice safeDeviceList_;
    public bool HasSafeDeviceList {
      get { return hasSafeDeviceList; }
    }
    public global::mm.command.SafeDevice SafeDeviceList {
      get { return safeDeviceList_ ?? global::mm.command.SafeDevice.DefaultInstance; }
    }
    
    public const int SafeDeviceFieldNumber = 13;
    private bool hasSafeDevice;
    private int safeDevice_;
    public bool HasSafeDevice {
      get { return hasSafeDevice; }
    }
    public int SafeDevice {
      get { return safeDevice_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasImgBuf) return false;
        if (!Base.IsInitialized) return false;
        if (!ImgBuf.IsInitialized) return false;
        if (HasA2Key) {
          if (!A2Key.IsInitialized) return false;
        }
        if (HasKSid) {
          if (!KSid.IsInitialized) return false;
        }
        if (HasSafeDeviceList) {
          if (!SafeDeviceList.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _bindQQResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[12], Base);
      }
      if (hasImgSid) {
        output.WriteString(2, field_names[3], ImgSid);
      }
      if (hasImgBuf) {
        output.WriteMessage(3, field_names[1], ImgBuf);
      }
      if (hasPushMailStatus) {
        output.WriteInt32(4, field_names[7], PushMailStatus);
      }
      if (hasPrivateMsgStatus) {
        output.WriteInt32(5, field_names[6], PrivateMsgStatus);
      }
      if (hasMicroBlogName) {
        output.WriteString(6, field_names[5], MicroBlogName);
      }
      if (hasStatus) {
        output.WriteInt32(7, field_names[11], Status);
      }
      if (hasQQMailSkey) {
        output.WriteString(8, field_names[8], QQMailSkey);
      }
      if (hasImgEncryptKey) {
        output.WriteMessage(9, field_names[2], ImgEncryptKey);
      }
      if (hasA2Key) {
        output.WriteMessage(10, field_names[0], A2Key);
      }
      if (hasKSid) {
        output.WriteMessage(11, field_names[4], KSid);
      }
      if (hasSafeDeviceList) {
        output.WriteMessage(12, field_names[10], SafeDeviceList);
      }
      if (hasSafeDevice) {
        output.WriteInt32(13, field_names[9], SafeDevice);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasImgSid) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ImgSid);
        }
        if (hasImgBuf) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ImgBuf);
        }
        if (hasPushMailStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, PushMailStatus);
        }
        if (hasPrivateMsgStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, PrivateMsgStatus);
        }
        if (hasMicroBlogName) {
          size += pb::CodedOutputStream.ComputeStringSize(6, MicroBlogName);
        }
        if (hasStatus) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, Status);
        }
        if (hasQQMailSkey) {
          size += pb::CodedOutputStream.ComputeStringSize(8, QQMailSkey);
        }
        if (hasImgEncryptKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, ImgEncryptKey);
        }
        if (hasA2Key) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, A2Key);
        }
        if (hasKSid) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, KSid);
        }
        if (hasSafeDeviceList) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, SafeDeviceList);
        }
        if (hasSafeDevice) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, SafeDevice);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static BindQQResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindQQResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindQQResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static BindQQResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static BindQQResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindQQResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static BindQQResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static BindQQResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static BindQQResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static BindQQResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BindQQResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(BindQQResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<BindQQResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BindQQResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BindQQResponse result;
      
      private BindQQResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          BindQQResponse original = result;
          result = new BindQQResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BindQQResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.BindQQResponse.Descriptor; }
      }
      
      public override BindQQResponse DefaultInstanceForType {
        get { return global::mm.command.BindQQResponse.DefaultInstance; }
      }
      
      public override BindQQResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is BindQQResponse) {
          return MergeFrom((BindQQResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BindQQResponse other) {
        if (other == global::mm.command.BindQQResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasImgSid) {
          ImgSid = other.ImgSid;
        }
        if (other.HasImgBuf) {
          MergeImgBuf(other.ImgBuf);
        }
        if (other.HasPushMailStatus) {
          PushMailStatus = other.PushMailStatus;
        }
        if (other.HasPrivateMsgStatus) {
          PrivateMsgStatus = other.PrivateMsgStatus;
        }
        if (other.HasMicroBlogName) {
          MicroBlogName = other.MicroBlogName;
        }
        if (other.HasStatus) {
          Status = other.Status;
        }
        if (other.HasQQMailSkey) {
          QQMailSkey = other.QQMailSkey;
        }
        if (other.HasImgEncryptKey) {
          MergeImgEncryptKey(other.ImgEncryptKey);
        }
        if (other.HasA2Key) {
          MergeA2Key(other.A2Key);
        }
        if (other.HasKSid) {
          MergeKSid(other.KSid);
        }
        if (other.HasSafeDeviceList) {
          MergeSafeDeviceList(other.SafeDeviceList);
        }
        if (other.HasSafeDevice) {
          SafeDevice = other.SafeDevice;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_bindQQResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _bindQQResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasImgSid = input.ReadString(ref result.imgSid_);
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasImgBuf) {
                subBuilder.MergeFrom(ImgBuf);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgBuf = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasPushMailStatus = input.ReadInt32(ref result.pushMailStatus_);
              break;
            }
            case 40: {
              result.hasPrivateMsgStatus = input.ReadInt32(ref result.privateMsgStatus_);
              break;
            }
            case 50: {
              result.hasMicroBlogName = input.ReadString(ref result.microBlogName_);
              break;
            }
            case 56: {
              result.hasStatus = input.ReadInt32(ref result.status_);
              break;
            }
            case 66: {
              result.hasQQMailSkey = input.ReadString(ref result.qQMailSkey_);
              break;
            }
            case 74: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasImgEncryptKey) {
                subBuilder.MergeFrom(ImgEncryptKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgEncryptKey = subBuilder.BuildPartial();
              break;
            }
            case 82: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasA2Key) {
                subBuilder.MergeFrom(A2Key);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              A2Key = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasKSid) {
                subBuilder.MergeFrom(KSid);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              KSid = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::mm.command.SafeDevice.Builder subBuilder = global::mm.command.SafeDevice.CreateBuilder();
              if (result.hasSafeDeviceList) {
                subBuilder.MergeFrom(SafeDeviceList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SafeDeviceList = subBuilder.BuildPartial();
              break;
            }
            case 104: {
              result.hasSafeDevice = input.ReadInt32(ref result.safeDevice_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasImgSid {
        get { return result.hasImgSid; }
      }
      public string ImgSid {
        get { return result.ImgSid; }
        set { SetImgSid(value); }
      }
      public Builder SetImgSid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgSid = true;
        result.imgSid_ = value;
        return this;
      }
      public Builder ClearImgSid() {
        PrepareBuilder();
        result.hasImgSid = false;
        result.imgSid_ = "";
        return this;
      }
      
      public bool HasImgBuf {
       get { return result.hasImgBuf; }
      }
      public global::mm.command.SKBuiltinBuffer_t ImgBuf {
        get { return result.ImgBuf; }
        set { SetImgBuf(value); }
      }
      public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgBuf = true;
        result.imgBuf_ = value;
        return this;
      }
      public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgBuf = true;
        result.imgBuf_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgBuf &&
            result.imgBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.imgBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.imgBuf_).MergeFrom(value).BuildPartial();
        } else {
          result.imgBuf_ = value;
        }
        result.hasImgBuf = true;
        return this;
      }
      public Builder ClearImgBuf() {
        PrepareBuilder();
        result.hasImgBuf = false;
        result.imgBuf_ = null;
        return this;
      }
      
      public bool HasPushMailStatus {
        get { return result.hasPushMailStatus; }
      }
      public int PushMailStatus {
        get { return result.PushMailStatus; }
        set { SetPushMailStatus(value); }
      }
      public Builder SetPushMailStatus(int value) {
        PrepareBuilder();
        result.hasPushMailStatus = true;
        result.pushMailStatus_ = value;
        return this;
      }
      public Builder ClearPushMailStatus() {
        PrepareBuilder();
        result.hasPushMailStatus = false;
        result.pushMailStatus_ = 0;
        return this;
      }
      
      public bool HasPrivateMsgStatus {
        get { return result.hasPrivateMsgStatus; }
      }
      public int PrivateMsgStatus {
        get { return result.PrivateMsgStatus; }
        set { SetPrivateMsgStatus(value); }
      }
      public Builder SetPrivateMsgStatus(int value) {
        PrepareBuilder();
        result.hasPrivateMsgStatus = true;
        result.privateMsgStatus_ = value;
        return this;
      }
      public Builder ClearPrivateMsgStatus() {
        PrepareBuilder();
        result.hasPrivateMsgStatus = false;
        result.privateMsgStatus_ = 0;
        return this;
      }
      
      public bool HasMicroBlogName {
        get { return result.hasMicroBlogName; }
      }
      public string MicroBlogName {
        get { return result.MicroBlogName; }
        set { SetMicroBlogName(value); }
      }
      public Builder SetMicroBlogName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMicroBlogName = true;
        result.microBlogName_ = value;
        return this;
      }
      public Builder ClearMicroBlogName() {
        PrepareBuilder();
        result.hasMicroBlogName = false;
        result.microBlogName_ = "";
        return this;
      }
      
      public bool HasStatus {
        get { return result.hasStatus; }
      }
      public int Status {
        get { return result.Status; }
        set { SetStatus(value); }
      }
      public Builder SetStatus(int value) {
        PrepareBuilder();
        result.hasStatus = true;
        result.status_ = value;
        return this;
      }
      public Builder ClearStatus() {
        PrepareBuilder();
        result.hasStatus = false;
        result.status_ = 0;
        return this;
      }
      
      public bool HasQQMailSkey {
        get { return result.hasQQMailSkey; }
      }
      public string QQMailSkey {
        get { return result.QQMailSkey; }
        set { SetQQMailSkey(value); }
      }
      public Builder SetQQMailSkey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQQMailSkey = true;
        result.qQMailSkey_ = value;
        return this;
      }
      public Builder ClearQQMailSkey() {
        PrepareBuilder();
        result.hasQQMailSkey = false;
        result.qQMailSkey_ = "";
        return this;
      }
      
      public bool HasImgEncryptKey {
       get { return result.hasImgEncryptKey; }
      }
      public global::mm.command.SKBuiltinString_t ImgEncryptKey {
        get { return result.ImgEncryptKey; }
        set { SetImgEncryptKey(value); }
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = value;
        return this;
      }
      public Builder SetImgEncryptKey(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgEncryptKey = true;
        result.imgEncryptKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgEncryptKey(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgEncryptKey &&
            result.imgEncryptKey_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.imgEncryptKey_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.imgEncryptKey_).MergeFrom(value).BuildPartial();
        } else {
          result.imgEncryptKey_ = value;
        }
        result.hasImgEncryptKey = true;
        return this;
      }
      public Builder ClearImgEncryptKey() {
        PrepareBuilder();
        result.hasImgEncryptKey = false;
        result.imgEncryptKey_ = null;
        return this;
      }
      
      public bool HasA2Key {
       get { return result.hasA2Key; }
      }
      public global::mm.command.SKBuiltinBuffer_t A2Key {
        get { return result.A2Key; }
        set { SetA2Key(value); }
      }
      public Builder SetA2Key(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasA2Key = true;
        result.a2Key_ = value;
        return this;
      }
      public Builder SetA2Key(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasA2Key = true;
        result.a2Key_ = builderForValue.Build();
        return this;
      }
      public Builder MergeA2Key(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasA2Key &&
            result.a2Key_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.a2Key_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.a2Key_).MergeFrom(value).BuildPartial();
        } else {
          result.a2Key_ = value;
        }
        result.hasA2Key = true;
        return this;
      }
      public Builder ClearA2Key() {
        PrepareBuilder();
        result.hasA2Key = false;
        result.a2Key_ = null;
        return this;
      }
      
      public bool HasKSid {
       get { return result.hasKSid; }
      }
      public global::mm.command.SKBuiltinBuffer_t KSid {
        get { return result.KSid; }
        set { SetKSid(value); }
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = value;
        return this;
      }
      public Builder SetKSid(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasKSid = true;
        result.kSid_ = builderForValue.Build();
        return this;
      }
      public Builder MergeKSid(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasKSid &&
            result.kSid_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.kSid_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.kSid_).MergeFrom(value).BuildPartial();
        } else {
          result.kSid_ = value;
        }
        result.hasKSid = true;
        return this;
      }
      public Builder ClearKSid() {
        PrepareBuilder();
        result.hasKSid = false;
        result.kSid_ = null;
        return this;
      }
      
      public bool HasSafeDeviceList {
       get { return result.hasSafeDeviceList; }
      }
      public global::mm.command.SafeDevice SafeDeviceList {
        get { return result.SafeDeviceList; }
        set { SetSafeDeviceList(value); }
      }
      public Builder SetSafeDeviceList(global::mm.command.SafeDevice value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSafeDeviceList = true;
        result.safeDeviceList_ = value;
        return this;
      }
      public Builder SetSafeDeviceList(global::mm.command.SafeDevice.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSafeDeviceList = true;
        result.safeDeviceList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSafeDeviceList(global::mm.command.SafeDevice value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSafeDeviceList &&
            result.safeDeviceList_ != global::mm.command.SafeDevice.DefaultInstance) {
            result.safeDeviceList_ = global::mm.command.SafeDevice.CreateBuilder(result.safeDeviceList_).MergeFrom(value).BuildPartial();
        } else {
          result.safeDeviceList_ = value;
        }
        result.hasSafeDeviceList = true;
        return this;
      }
      public Builder ClearSafeDeviceList() {
        PrepareBuilder();
        result.hasSafeDeviceList = false;
        result.safeDeviceList_ = null;
        return this;
      }
      
      public bool HasSafeDevice {
        get { return result.hasSafeDevice; }
      }
      public int SafeDevice {
        get { return result.SafeDevice; }
        set { SetSafeDevice(value); }
      }
      public Builder SetSafeDevice(int value) {
        PrepareBuilder();
        result.hasSafeDevice = true;
        result.safeDevice_ = value;
        return this;
      }
      public Builder ClearSafeDevice() {
        PrepareBuilder();
        result.hasSafeDevice = false;
        result.safeDevice_ = 0;
        return this;
      }
    }
    static BindQQResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ThrowBottleRequest : pb::GeneratedMessage<ThrowBottleRequest, ThrowBottleRequest.Builder> {
    private ThrowBottleRequest() { }
    private static readonly ThrowBottleRequest defaultInstance = new ThrowBottleRequest().MakeReadOnly();
    private static readonly string[] _throwBottleRequestFieldNames = new string[] { "BottleType", "ClientID", "Content", "MsgType", "StartPos", "TotalLen", "VoiceLength", "base" };
    private static readonly uint[] _throwBottleRequestFieldTags = new uint[] { 24, 58, 34, 16, 40, 48, 64, 10 };
    public static ThrowBottleRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ThrowBottleRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ThrowBottleRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ThrowBottleRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ThrowBottleRequest, ThrowBottleRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ThrowBottleRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int MsgTypeFieldNumber = 2;
    private bool hasMsgType;
    private int msgType_;
    public bool HasMsgType {
      get { return hasMsgType; }
    }
    public int MsgType {
      get { return msgType_; }
    }
    
    public const int BottleTypeFieldNumber = 3;
    private bool hasBottleType;
    private int bottleType_;
    public bool HasBottleType {
      get { return hasBottleType; }
    }
    public int BottleType {
      get { return bottleType_; }
    }
    
    public const int ContentFieldNumber = 4;
    private bool hasContent;
    private global::mm.command.SKBuiltinBuffer_t content_;
    public bool HasContent {
      get { return hasContent; }
    }
    public global::mm.command.SKBuiltinBuffer_t Content {
      get { return content_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int StartPosFieldNumber = 5;
    private bool hasStartPos;
    private int startPos_;
    public bool HasStartPos {
      get { return hasStartPos; }
    }
    public int StartPos {
      get { return startPos_; }
    }
    
    public const int TotalLenFieldNumber = 6;
    private bool hasTotalLen;
    private int totalLen_;
    public bool HasTotalLen {
      get { return hasTotalLen; }
    }
    public int TotalLen {
      get { return totalLen_; }
    }
    
    public const int ClientIDFieldNumber = 7;
    private bool hasClientID;
    private string clientID_ = "";
    public bool HasClientID {
      get { return hasClientID; }
    }
    public string ClientID {
      get { return clientID_; }
    }
    
    public const int VoiceLengthFieldNumber = 8;
    private bool hasVoiceLength;
    private int voiceLength_;
    public bool HasVoiceLength {
      get { return hasVoiceLength; }
    }
    public int VoiceLength {
      get { return voiceLength_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasMsgType) return false;
        if (!hasBottleType) return false;
        if (!hasContent) return false;
        if (!hasStartPos) return false;
        if (!hasTotalLen) return false;
        if (!Base.IsInitialized) return false;
        if (!Content.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _throwBottleRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[7], Base);
      }
      if (hasMsgType) {
        output.WriteInt32(2, field_names[3], MsgType);
      }
      if (hasBottleType) {
        output.WriteInt32(3, field_names[0], BottleType);
      }
      if (hasContent) {
        output.WriteMessage(4, field_names[2], Content);
      }
      if (hasStartPos) {
        output.WriteInt32(5, field_names[4], StartPos);
      }
      if (hasTotalLen) {
        output.WriteInt32(6, field_names[5], TotalLen);
      }
      if (hasClientID) {
        output.WriteString(7, field_names[1], ClientID);
      }
      if (hasVoiceLength) {
        output.WriteInt32(8, field_names[6], VoiceLength);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasMsgType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MsgType);
        }
        if (hasBottleType) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, BottleType);
        }
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Content);
        }
        if (hasStartPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, StartPos);
        }
        if (hasTotalLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, TotalLen);
        }
        if (hasClientID) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ClientID);
        }
        if (hasVoiceLength) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, VoiceLength);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ThrowBottleRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThrowBottleRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThrowBottleRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThrowBottleRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThrowBottleRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThrowBottleRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ThrowBottleRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ThrowBottleRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ThrowBottleRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThrowBottleRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ThrowBottleRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ThrowBottleRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ThrowBottleRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ThrowBottleRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ThrowBottleRequest result;
      
      private ThrowBottleRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ThrowBottleRequest original = result;
          result = new ThrowBottleRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ThrowBottleRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ThrowBottleRequest.Descriptor; }
      }
      
      public override ThrowBottleRequest DefaultInstanceForType {
        get { return global::mm.command.ThrowBottleRequest.DefaultInstance; }
      }
      
      public override ThrowBottleRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ThrowBottleRequest) {
          return MergeFrom((ThrowBottleRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ThrowBottleRequest other) {
        if (other == global::mm.command.ThrowBottleRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasMsgType) {
          MsgType = other.MsgType;
        }
        if (other.HasBottleType) {
          BottleType = other.BottleType;
        }
        if (other.HasContent) {
          MergeContent(other.Content);
        }
        if (other.HasStartPos) {
          StartPos = other.StartPos;
        }
        if (other.HasTotalLen) {
          TotalLen = other.TotalLen;
        }
        if (other.HasClientID) {
          ClientID = other.ClientID;
        }
        if (other.HasVoiceLength) {
          VoiceLength = other.VoiceLength;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_throwBottleRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _throwBottleRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasMsgType = input.ReadInt32(ref result.msgType_);
              break;
            }
            case 24: {
              result.hasBottleType = input.ReadInt32(ref result.bottleType_);
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasContent) {
                subBuilder.MergeFrom(Content);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Content = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasStartPos = input.ReadInt32(ref result.startPos_);
              break;
            }
            case 48: {
              result.hasTotalLen = input.ReadInt32(ref result.totalLen_);
              break;
            }
            case 58: {
              result.hasClientID = input.ReadString(ref result.clientID_);
              break;
            }
            case 64: {
              result.hasVoiceLength = input.ReadInt32(ref result.voiceLength_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasMsgType {
        get { return result.hasMsgType; }
      }
      public int MsgType {
        get { return result.MsgType; }
        set { SetMsgType(value); }
      }
      public Builder SetMsgType(int value) {
        PrepareBuilder();
        result.hasMsgType = true;
        result.msgType_ = value;
        return this;
      }
      public Builder ClearMsgType() {
        PrepareBuilder();
        result.hasMsgType = false;
        result.msgType_ = 0;
        return this;
      }
      
      public bool HasBottleType {
        get { return result.hasBottleType; }
      }
      public int BottleType {
        get { return result.BottleType; }
        set { SetBottleType(value); }
      }
      public Builder SetBottleType(int value) {
        PrepareBuilder();
        result.hasBottleType = true;
        result.bottleType_ = value;
        return this;
      }
      public Builder ClearBottleType() {
        PrepareBuilder();
        result.hasBottleType = false;
        result.bottleType_ = 0;
        return this;
      }
      
      public bool HasContent {
       get { return result.hasContent; }
      }
      public global::mm.command.SKBuiltinBuffer_t Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder SetContent(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = builderForValue.Build();
        return this;
      }
      public Builder MergeContent(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasContent &&
            result.content_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.content_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.content_).MergeFrom(value).BuildPartial();
        } else {
          result.content_ = value;
        }
        result.hasContent = true;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = null;
        return this;
      }
      
      public bool HasStartPos {
        get { return result.hasStartPos; }
      }
      public int StartPos {
        get { return result.StartPos; }
        set { SetStartPos(value); }
      }
      public Builder SetStartPos(int value) {
        PrepareBuilder();
        result.hasStartPos = true;
        result.startPos_ = value;
        return this;
      }
      public Builder ClearStartPos() {
        PrepareBuilder();
        result.hasStartPos = false;
        result.startPos_ = 0;
        return this;
      }
      
      public bool HasTotalLen {
        get { return result.hasTotalLen; }
      }
      public int TotalLen {
        get { return result.TotalLen; }
        set { SetTotalLen(value); }
      }
      public Builder SetTotalLen(int value) {
        PrepareBuilder();
        result.hasTotalLen = true;
        result.totalLen_ = value;
        return this;
      }
      public Builder ClearTotalLen() {
        PrepareBuilder();
        result.hasTotalLen = false;
        result.totalLen_ = 0;
        return this;
      }
      
      public bool HasClientID {
        get { return result.hasClientID; }
      }
      public string ClientID {
        get { return result.ClientID; }
        set { SetClientID(value); }
      }
      public Builder SetClientID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientID = true;
        result.clientID_ = value;
        return this;
      }
      public Builder ClearClientID() {
        PrepareBuilder();
        result.hasClientID = false;
        result.clientID_ = "";
        return this;
      }
      
      public bool HasVoiceLength {
        get { return result.hasVoiceLength; }
      }
      public int VoiceLength {
        get { return result.VoiceLength; }
        set { SetVoiceLength(value); }
      }
      public Builder SetVoiceLength(int value) {
        PrepareBuilder();
        result.hasVoiceLength = true;
        result.voiceLength_ = value;
        return this;
      }
      public Builder ClearVoiceLength() {
        PrepareBuilder();
        result.hasVoiceLength = false;
        result.voiceLength_ = 0;
        return this;
      }
    }
    static ThrowBottleRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ThrowBottleResponse : pb::GeneratedMessage<ThrowBottleResponse, ThrowBottleResponse.Builder> {
    private ThrowBottleResponse() { }
    private static readonly ThrowBottleResponse defaultInstance = new ThrowBottleResponse().MakeReadOnly();
    private static readonly string[] _throwBottleResponseFieldNames = new string[] { "BottleList", "BottleListNumb", "Distance", "PickCount", "StartPos", "ThrowCount", "TotalLen", "base" };
    private static readonly uint[] _throwBottleResponseFieldTags = new uint[] { 58, 48, 64, 40, 16, 32, 24, 10 };
    public static ThrowBottleResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ThrowBottleResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ThrowBottleResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ThrowBottleResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ThrowBottleResponse, ThrowBottleResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ThrowBottleResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int StartPosFieldNumber = 2;
    private bool hasStartPos;
    private int startPos_;
    public bool HasStartPos {
      get { return hasStartPos; }
    }
    public int StartPos {
      get { return startPos_; }
    }
    
    public const int TotalLenFieldNumber = 3;
    private bool hasTotalLen;
    private int totalLen_;
    public bool HasTotalLen {
      get { return hasTotalLen; }
    }
    public int TotalLen {
      get { return totalLen_; }
    }
    
    public const int ThrowCountFieldNumber = 4;
    private bool hasThrowCount;
    private int throwCount_;
    public bool HasThrowCount {
      get { return hasThrowCount; }
    }
    public int ThrowCount {
      get { return throwCount_; }
    }
    
    public const int PickCountFieldNumber = 5;
    private bool hasPickCount;
    private int pickCount_;
    public bool HasPickCount {
      get { return hasPickCount; }
    }
    public int PickCount {
      get { return pickCount_; }
    }
    
    public const int BottleListNumbFieldNumber = 6;
    private bool hasBottleListNumb;
    private int bottleListNumb_;
    public bool HasBottleListNumb {
      get { return hasBottleListNumb; }
    }
    public int BottleListNumb {
      get { return bottleListNumb_; }
    }
    
    public const int BottleListFieldNumber = 7;
    private pbc::PopsicleList<global::mm.command.SKBuiltinString_t> bottleList_ = new pbc::PopsicleList<global::mm.command.SKBuiltinString_t>();
    public scg::IList<global::mm.command.SKBuiltinString_t> BottleListList {
      get { return bottleList_; }
    }
    public int BottleListCount {
      get { return bottleList_.Count; }
    }
    public global::mm.command.SKBuiltinString_t GetBottleList(int index) {
      return bottleList_[index];
    }
    
    public const int DistanceFieldNumber = 8;
    private bool hasDistance;
    private int distance_;
    public bool HasDistance {
      get { return hasDistance; }
    }
    public int Distance {
      get { return distance_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasStartPos) return false;
        if (!hasTotalLen) return false;
        if (!hasThrowCount) return false;
        if (!hasPickCount) return false;
        if (!hasBottleListNumb) return false;
        if (!hasDistance) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _throwBottleResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[7], Base);
      }
      if (hasStartPos) {
        output.WriteInt32(2, field_names[4], StartPos);
      }
      if (hasTotalLen) {
        output.WriteInt32(3, field_names[6], TotalLen);
      }
      if (hasThrowCount) {
        output.WriteInt32(4, field_names[5], ThrowCount);
      }
      if (hasPickCount) {
        output.WriteInt32(5, field_names[3], PickCount);
      }
      if (hasBottleListNumb) {
        output.WriteInt32(6, field_names[1], BottleListNumb);
      }
      if (bottleList_.Count > 0) {
        output.WriteMessageArray(7, field_names[0], bottleList_);
      }
      if (hasDistance) {
        output.WriteInt32(8, field_names[2], Distance);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasStartPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, StartPos);
        }
        if (hasTotalLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, TotalLen);
        }
        if (hasThrowCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ThrowCount);
        }
        if (hasPickCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, PickCount);
        }
        if (hasBottleListNumb) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, BottleListNumb);
        }
        foreach (global::mm.command.SKBuiltinString_t element in BottleListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        if (hasDistance) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Distance);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ThrowBottleResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThrowBottleResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThrowBottleResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ThrowBottleResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ThrowBottleResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThrowBottleResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ThrowBottleResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ThrowBottleResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ThrowBottleResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ThrowBottleResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ThrowBottleResponse MakeReadOnly() {
      bottleList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ThrowBottleResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ThrowBottleResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ThrowBottleResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ThrowBottleResponse result;
      
      private ThrowBottleResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ThrowBottleResponse original = result;
          result = new ThrowBottleResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ThrowBottleResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ThrowBottleResponse.Descriptor; }
      }
      
      public override ThrowBottleResponse DefaultInstanceForType {
        get { return global::mm.command.ThrowBottleResponse.DefaultInstance; }
      }
      
      public override ThrowBottleResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ThrowBottleResponse) {
          return MergeFrom((ThrowBottleResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ThrowBottleResponse other) {
        if (other == global::mm.command.ThrowBottleResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasStartPos) {
          StartPos = other.StartPos;
        }
        if (other.HasTotalLen) {
          TotalLen = other.TotalLen;
        }
        if (other.HasThrowCount) {
          ThrowCount = other.ThrowCount;
        }
        if (other.HasPickCount) {
          PickCount = other.PickCount;
        }
        if (other.HasBottleListNumb) {
          BottleListNumb = other.BottleListNumb;
        }
        if (other.bottleList_.Count != 0) {
          result.bottleList_.Add(other.bottleList_);
        }
        if (other.HasDistance) {
          Distance = other.Distance;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_throwBottleResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _throwBottleResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasStartPos = input.ReadInt32(ref result.startPos_);
              break;
            }
            case 24: {
              result.hasTotalLen = input.ReadInt32(ref result.totalLen_);
              break;
            }
            case 32: {
              result.hasThrowCount = input.ReadInt32(ref result.throwCount_);
              break;
            }
            case 40: {
              result.hasPickCount = input.ReadInt32(ref result.pickCount_);
              break;
            }
            case 48: {
              result.hasBottleListNumb = input.ReadInt32(ref result.bottleListNumb_);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.bottleList_, global::mm.command.SKBuiltinString_t.DefaultInstance, extensionRegistry);
              break;
            }
            case 64: {
              result.hasDistance = input.ReadInt32(ref result.distance_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasStartPos {
        get { return result.hasStartPos; }
      }
      public int StartPos {
        get { return result.StartPos; }
        set { SetStartPos(value); }
      }
      public Builder SetStartPos(int value) {
        PrepareBuilder();
        result.hasStartPos = true;
        result.startPos_ = value;
        return this;
      }
      public Builder ClearStartPos() {
        PrepareBuilder();
        result.hasStartPos = false;
        result.startPos_ = 0;
        return this;
      }
      
      public bool HasTotalLen {
        get { return result.hasTotalLen; }
      }
      public int TotalLen {
        get { return result.TotalLen; }
        set { SetTotalLen(value); }
      }
      public Builder SetTotalLen(int value) {
        PrepareBuilder();
        result.hasTotalLen = true;
        result.totalLen_ = value;
        return this;
      }
      public Builder ClearTotalLen() {
        PrepareBuilder();
        result.hasTotalLen = false;
        result.totalLen_ = 0;
        return this;
      }
      
      public bool HasThrowCount {
        get { return result.hasThrowCount; }
      }
      public int ThrowCount {
        get { return result.ThrowCount; }
        set { SetThrowCount(value); }
      }
      public Builder SetThrowCount(int value) {
        PrepareBuilder();
        result.hasThrowCount = true;
        result.throwCount_ = value;
        return this;
      }
      public Builder ClearThrowCount() {
        PrepareBuilder();
        result.hasThrowCount = false;
        result.throwCount_ = 0;
        return this;
      }
      
      public bool HasPickCount {
        get { return result.hasPickCount; }
      }
      public int PickCount {
        get { return result.PickCount; }
        set { SetPickCount(value); }
      }
      public Builder SetPickCount(int value) {
        PrepareBuilder();
        result.hasPickCount = true;
        result.pickCount_ = value;
        return this;
      }
      public Builder ClearPickCount() {
        PrepareBuilder();
        result.hasPickCount = false;
        result.pickCount_ = 0;
        return this;
      }
      
      public bool HasBottleListNumb {
        get { return result.hasBottleListNumb; }
      }
      public int BottleListNumb {
        get { return result.BottleListNumb; }
        set { SetBottleListNumb(value); }
      }
      public Builder SetBottleListNumb(int value) {
        PrepareBuilder();
        result.hasBottleListNumb = true;
        result.bottleListNumb_ = value;
        return this;
      }
      public Builder ClearBottleListNumb() {
        PrepareBuilder();
        result.hasBottleListNumb = false;
        result.bottleListNumb_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.SKBuiltinString_t> BottleListList {
        get { return PrepareBuilder().bottleList_; }
      }
      public int BottleListCount {
        get { return result.BottleListCount; }
      }
      public global::mm.command.SKBuiltinString_t GetBottleList(int index) {
        return result.GetBottleList(index);
      }
      public Builder SetBottleList(int index, global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bottleList_[index] = value;
        return this;
      }
      public Builder SetBottleList(int index, global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bottleList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBottleList(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.bottleList_.Add(value);
        return this;
      }
      public Builder AddBottleList(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.bottleList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBottleList(scg::IEnumerable<global::mm.command.SKBuiltinString_t> values) {
        PrepareBuilder();
        result.bottleList_.Add(values);
        return this;
      }
      public Builder ClearBottleList() {
        PrepareBuilder();
        result.bottleList_.Clear();
        return this;
      }
      
      public bool HasDistance {
        get { return result.hasDistance; }
      }
      public int Distance {
        get { return result.Distance; }
        set { SetDistance(value); }
      }
      public Builder SetDistance(int value) {
        PrepareBuilder();
        result.hasDistance = true;
        result.distance_ = value;
        return this;
      }
      public Builder ClearDistance() {
        PrepareBuilder();
        result.hasDistance = false;
        result.distance_ = 0;
        return this;
      }
    }
    static ThrowBottleResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ShakereportRequest : pb::GeneratedMessage<ShakereportRequest, ShakereportRequest.Builder> {
    private ShakereportRequest() { }
    private static readonly ShakereportRequest defaultInstance = new ShakereportRequest().MakeReadOnly();
    private static readonly string[] _shakereportRequestFieldNames = new string[] { "CellId", "GPSSource", "ImgId", "Latitude", "Longitude", "MacAddr", "OpCode", "Precision", "Times", "base" };
    private static readonly uint[] _shakereportRequestFieldTags = new uint[] { 58, 80, 64, 37, 29, 50, 16, 40, 72, 10 };
    public static ShakereportRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ShakereportRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ShakereportRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ShakereportRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ShakereportRequest, ShakereportRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ShakereportRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int OpCodeFieldNumber = 2;
    private bool hasOpCode;
    private int opCode_;
    public bool HasOpCode {
      get { return hasOpCode; }
    }
    public int OpCode {
      get { return opCode_; }
    }
    
    public const int LongitudeFieldNumber = 3;
    private bool hasLongitude;
    private float longitude_;
    public bool HasLongitude {
      get { return hasLongitude; }
    }
    public float Longitude {
      get { return longitude_; }
    }
    
    public const int LatitudeFieldNumber = 4;
    private bool hasLatitude;
    private float latitude_;
    public bool HasLatitude {
      get { return hasLatitude; }
    }
    public float Latitude {
      get { return latitude_; }
    }
    
    public const int PrecisionFieldNumber = 5;
    private bool hasPrecision;
    private int precision_;
    public bool HasPrecision {
      get { return hasPrecision; }
    }
    public int Precision {
      get { return precision_; }
    }
    
    public const int MacAddrFieldNumber = 6;
    private bool hasMacAddr;
    private string macAddr_ = "";
    public bool HasMacAddr {
      get { return hasMacAddr; }
    }
    public string MacAddr {
      get { return macAddr_; }
    }
    
    public const int CellIdFieldNumber = 7;
    private bool hasCellId;
    private string cellId_ = "";
    public bool HasCellId {
      get { return hasCellId; }
    }
    public string CellId {
      get { return cellId_; }
    }
    
    public const int ImgIdFieldNumber = 8;
    private bool hasImgId;
    private int imgId_;
    public bool HasImgId {
      get { return hasImgId; }
    }
    public int ImgId {
      get { return imgId_; }
    }
    
    public const int TimesFieldNumber = 9;
    private bool hasTimes;
    private int times_;
    public bool HasTimes {
      get { return hasTimes; }
    }
    public int Times {
      get { return times_; }
    }
    
    public const int GPSSourceFieldNumber = 10;
    private bool hasGPSSource;
    private int gPSSource_;
    public bool HasGPSSource {
      get { return hasGPSSource; }
    }
    public int GPSSource {
      get { return gPSSource_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasOpCode) return false;
        if (!hasLongitude) return false;
        if (!hasLatitude) return false;
        if (!hasPrecision) return false;
        if (!hasImgId) return false;
        if (!hasTimes) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _shakereportRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[9], Base);
      }
      if (hasOpCode) {
        output.WriteInt32(2, field_names[6], OpCode);
      }
      if (hasLongitude) {
        output.WriteFloat(3, field_names[4], Longitude);
      }
      if (hasLatitude) {
        output.WriteFloat(4, field_names[3], Latitude);
      }
      if (hasPrecision) {
        output.WriteInt32(5, field_names[7], Precision);
      }
      if (hasMacAddr) {
        output.WriteString(6, field_names[5], MacAddr);
      }
      if (hasCellId) {
        output.WriteString(7, field_names[0], CellId);
      }
      if (hasImgId) {
        output.WriteInt32(8, field_names[2], ImgId);
      }
      if (hasTimes) {
        output.WriteInt32(9, field_names[8], Times);
      }
      if (hasGPSSource) {
        output.WriteInt32(10, field_names[1], GPSSource);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasOpCode) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, OpCode);
        }
        if (hasLongitude) {
          size += pb::CodedOutputStream.ComputeFloatSize(3, Longitude);
        }
        if (hasLatitude) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, Latitude);
        }
        if (hasPrecision) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Precision);
        }
        if (hasMacAddr) {
          size += pb::CodedOutputStream.ComputeStringSize(6, MacAddr);
        }
        if (hasCellId) {
          size += pb::CodedOutputStream.ComputeStringSize(7, CellId);
        }
        if (hasImgId) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, ImgId);
        }
        if (hasTimes) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, Times);
        }
        if (hasGPSSource) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, GPSSource);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ShakereportRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ShakereportRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ShakereportRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ShakereportRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ShakereportRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ShakereportRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ShakereportRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ShakereportRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ShakereportRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ShakereportRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ShakereportRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ShakereportRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ShakereportRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ShakereportRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ShakereportRequest result;
      
      private ShakereportRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ShakereportRequest original = result;
          result = new ShakereportRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ShakereportRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ShakereportRequest.Descriptor; }
      }
      
      public override ShakereportRequest DefaultInstanceForType {
        get { return global::mm.command.ShakereportRequest.DefaultInstance; }
      }
      
      public override ShakereportRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ShakereportRequest) {
          return MergeFrom((ShakereportRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ShakereportRequest other) {
        if (other == global::mm.command.ShakereportRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasOpCode) {
          OpCode = other.OpCode;
        }
        if (other.HasLongitude) {
          Longitude = other.Longitude;
        }
        if (other.HasLatitude) {
          Latitude = other.Latitude;
        }
        if (other.HasPrecision) {
          Precision = other.Precision;
        }
        if (other.HasMacAddr) {
          MacAddr = other.MacAddr;
        }
        if (other.HasCellId) {
          CellId = other.CellId;
        }
        if (other.HasImgId) {
          ImgId = other.ImgId;
        }
        if (other.HasTimes) {
          Times = other.Times;
        }
        if (other.HasGPSSource) {
          GPSSource = other.GPSSource;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_shakereportRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _shakereportRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOpCode = input.ReadInt32(ref result.opCode_);
              break;
            }
            case 29: {
              result.hasLongitude = input.ReadFloat(ref result.longitude_);
              break;
            }
            case 37: {
              result.hasLatitude = input.ReadFloat(ref result.latitude_);
              break;
            }
            case 40: {
              result.hasPrecision = input.ReadInt32(ref result.precision_);
              break;
            }
            case 50: {
              result.hasMacAddr = input.ReadString(ref result.macAddr_);
              break;
            }
            case 58: {
              result.hasCellId = input.ReadString(ref result.cellId_);
              break;
            }
            case 64: {
              result.hasImgId = input.ReadInt32(ref result.imgId_);
              break;
            }
            case 72: {
              result.hasTimes = input.ReadInt32(ref result.times_);
              break;
            }
            case 80: {
              result.hasGPSSource = input.ReadInt32(ref result.gPSSource_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasOpCode {
        get { return result.hasOpCode; }
      }
      public int OpCode {
        get { return result.OpCode; }
        set { SetOpCode(value); }
      }
      public Builder SetOpCode(int value) {
        PrepareBuilder();
        result.hasOpCode = true;
        result.opCode_ = value;
        return this;
      }
      public Builder ClearOpCode() {
        PrepareBuilder();
        result.hasOpCode = false;
        result.opCode_ = 0;
        return this;
      }
      
      public bool HasLongitude {
        get { return result.hasLongitude; }
      }
      public float Longitude {
        get { return result.Longitude; }
        set { SetLongitude(value); }
      }
      public Builder SetLongitude(float value) {
        PrepareBuilder();
        result.hasLongitude = true;
        result.longitude_ = value;
        return this;
      }
      public Builder ClearLongitude() {
        PrepareBuilder();
        result.hasLongitude = false;
        result.longitude_ = 0F;
        return this;
      }
      
      public bool HasLatitude {
        get { return result.hasLatitude; }
      }
      public float Latitude {
        get { return result.Latitude; }
        set { SetLatitude(value); }
      }
      public Builder SetLatitude(float value) {
        PrepareBuilder();
        result.hasLatitude = true;
        result.latitude_ = value;
        return this;
      }
      public Builder ClearLatitude() {
        PrepareBuilder();
        result.hasLatitude = false;
        result.latitude_ = 0F;
        return this;
      }
      
      public bool HasPrecision {
        get { return result.hasPrecision; }
      }
      public int Precision {
        get { return result.Precision; }
        set { SetPrecision(value); }
      }
      public Builder SetPrecision(int value) {
        PrepareBuilder();
        result.hasPrecision = true;
        result.precision_ = value;
        return this;
      }
      public Builder ClearPrecision() {
        PrepareBuilder();
        result.hasPrecision = false;
        result.precision_ = 0;
        return this;
      }
      
      public bool HasMacAddr {
        get { return result.hasMacAddr; }
      }
      public string MacAddr {
        get { return result.MacAddr; }
        set { SetMacAddr(value); }
      }
      public Builder SetMacAddr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMacAddr = true;
        result.macAddr_ = value;
        return this;
      }
      public Builder ClearMacAddr() {
        PrepareBuilder();
        result.hasMacAddr = false;
        result.macAddr_ = "";
        return this;
      }
      
      public bool HasCellId {
        get { return result.hasCellId; }
      }
      public string CellId {
        get { return result.CellId; }
        set { SetCellId(value); }
      }
      public Builder SetCellId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCellId = true;
        result.cellId_ = value;
        return this;
      }
      public Builder ClearCellId() {
        PrepareBuilder();
        result.hasCellId = false;
        result.cellId_ = "";
        return this;
      }
      
      public bool HasImgId {
        get { return result.hasImgId; }
      }
      public int ImgId {
        get { return result.ImgId; }
        set { SetImgId(value); }
      }
      public Builder SetImgId(int value) {
        PrepareBuilder();
        result.hasImgId = true;
        result.imgId_ = value;
        return this;
      }
      public Builder ClearImgId() {
        PrepareBuilder();
        result.hasImgId = false;
        result.imgId_ = 0;
        return this;
      }
      
      public bool HasTimes {
        get { return result.hasTimes; }
      }
      public int Times {
        get { return result.Times; }
        set { SetTimes(value); }
      }
      public Builder SetTimes(int value) {
        PrepareBuilder();
        result.hasTimes = true;
        result.times_ = value;
        return this;
      }
      public Builder ClearTimes() {
        PrepareBuilder();
        result.hasTimes = false;
        result.times_ = 0;
        return this;
      }
      
      public bool HasGPSSource {
        get { return result.hasGPSSource; }
      }
      public int GPSSource {
        get { return result.GPSSource; }
        set { SetGPSSource(value); }
      }
      public Builder SetGPSSource(int value) {
        PrepareBuilder();
        result.hasGPSSource = true;
        result.gPSSource_ = value;
        return this;
      }
      public Builder ClearGPSSource() {
        PrepareBuilder();
        result.hasGPSSource = false;
        result.gPSSource_ = 0;
        return this;
      }
    }
    static ShakereportRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ShakereportResponse : pb::GeneratedMessage<ShakereportResponse, ShakereportResponse.Builder> {
    private ShakereportResponse() { }
    private static readonly ShakereportResponse defaultInstance = new ShakereportResponse().MakeReadOnly();
    private static readonly string[] _shakereportResponseFieldNames = new string[] { "Buffer", "ImgId", "ImgTotoalLen", "Ret", "base" };
    private static readonly uint[] _shakereportResponseFieldTags = new uint[] { 18, 32, 40, 24, 10 };
    public static ShakereportResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ShakereportResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ShakereportResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ShakereportResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ShakereportResponse, ShakereportResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ShakereportResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int BufferFieldNumber = 2;
    private bool hasBuffer;
    private global::mm.command.SKBuiltinBuffer_t buffer_;
    public bool HasBuffer {
      get { return hasBuffer; }
    }
    public global::mm.command.SKBuiltinBuffer_t Buffer {
      get { return buffer_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int RetFieldNumber = 3;
    private bool hasRet;
    private int ret_;
    public bool HasRet {
      get { return hasRet; }
    }
    public int Ret {
      get { return ret_; }
    }
    
    public const int ImgIdFieldNumber = 4;
    private bool hasImgId;
    private int imgId_;
    public bool HasImgId {
      get { return hasImgId; }
    }
    public int ImgId {
      get { return imgId_; }
    }
    
    public const int ImgTotoalLenFieldNumber = 5;
    private bool hasImgTotoalLen;
    private int imgTotoalLen_;
    public bool HasImgTotoalLen {
      get { return hasImgTotoalLen; }
    }
    public int ImgTotoalLen {
      get { return imgTotoalLen_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasBuffer) return false;
        if (!hasRet) return false;
        if (!hasImgId) return false;
        if (!Base.IsInitialized) return false;
        if (!Buffer.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _shakereportResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[4], Base);
      }
      if (hasBuffer) {
        output.WriteMessage(2, field_names[0], Buffer);
      }
      if (hasRet) {
        output.WriteInt32(3, field_names[3], Ret);
      }
      if (hasImgId) {
        output.WriteInt32(4, field_names[1], ImgId);
      }
      if (hasImgTotoalLen) {
        output.WriteInt32(5, field_names[2], ImgTotoalLen);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasBuffer) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Buffer);
        }
        if (hasRet) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Ret);
        }
        if (hasImgId) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, ImgId);
        }
        if (hasImgTotoalLen) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, ImgTotoalLen);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ShakereportResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ShakereportResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ShakereportResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ShakereportResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ShakereportResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ShakereportResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ShakereportResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ShakereportResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ShakereportResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ShakereportResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ShakereportResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ShakereportResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ShakereportResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ShakereportResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ShakereportResponse result;
      
      private ShakereportResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ShakereportResponse original = result;
          result = new ShakereportResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ShakereportResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ShakereportResponse.Descriptor; }
      }
      
      public override ShakereportResponse DefaultInstanceForType {
        get { return global::mm.command.ShakereportResponse.DefaultInstance; }
      }
      
      public override ShakereportResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ShakereportResponse) {
          return MergeFrom((ShakereportResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ShakereportResponse other) {
        if (other == global::mm.command.ShakereportResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasBuffer) {
          MergeBuffer(other.Buffer);
        }
        if (other.HasRet) {
          Ret = other.Ret;
        }
        if (other.HasImgId) {
          ImgId = other.ImgId;
        }
        if (other.HasImgTotoalLen) {
          ImgTotoalLen = other.ImgTotoalLen;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_shakereportResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _shakereportResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasBuffer) {
                subBuilder.MergeFrom(Buffer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Buffer = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasRet = input.ReadInt32(ref result.ret_);
              break;
            }
            case 32: {
              result.hasImgId = input.ReadInt32(ref result.imgId_);
              break;
            }
            case 40: {
              result.hasImgTotoalLen = input.ReadInt32(ref result.imgTotoalLen_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasBuffer {
       get { return result.hasBuffer; }
      }
      public global::mm.command.SKBuiltinBuffer_t Buffer {
        get { return result.Buffer; }
        set { SetBuffer(value); }
      }
      public Builder SetBuffer(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBuffer = true;
        result.buffer_ = value;
        return this;
      }
      public Builder SetBuffer(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBuffer = true;
        result.buffer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBuffer(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBuffer &&
            result.buffer_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.buffer_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.buffer_).MergeFrom(value).BuildPartial();
        } else {
          result.buffer_ = value;
        }
        result.hasBuffer = true;
        return this;
      }
      public Builder ClearBuffer() {
        PrepareBuilder();
        result.hasBuffer = false;
        result.buffer_ = null;
        return this;
      }
      
      public bool HasRet {
        get { return result.hasRet; }
      }
      public int Ret {
        get { return result.Ret; }
        set { SetRet(value); }
      }
      public Builder SetRet(int value) {
        PrepareBuilder();
        result.hasRet = true;
        result.ret_ = value;
        return this;
      }
      public Builder ClearRet() {
        PrepareBuilder();
        result.hasRet = false;
        result.ret_ = 0;
        return this;
      }
      
      public bool HasImgId {
        get { return result.hasImgId; }
      }
      public int ImgId {
        get { return result.ImgId; }
        set { SetImgId(value); }
      }
      public Builder SetImgId(int value) {
        PrepareBuilder();
        result.hasImgId = true;
        result.imgId_ = value;
        return this;
      }
      public Builder ClearImgId() {
        PrepareBuilder();
        result.hasImgId = false;
        result.imgId_ = 0;
        return this;
      }
      
      public bool HasImgTotoalLen {
        get { return result.hasImgTotoalLen; }
      }
      public int ImgTotoalLen {
        get { return result.ImgTotoalLen; }
        set { SetImgTotoalLen(value); }
      }
      public Builder SetImgTotoalLen(int value) {
        PrepareBuilder();
        result.hasImgTotoalLen = true;
        result.imgTotoalLen_ = value;
        return this;
      }
      public Builder ClearImgTotoalLen() {
        PrepareBuilder();
        result.hasImgTotoalLen = false;
        result.imgTotoalLen_ = 0;
        return this;
      }
    }
    static ShakereportResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ShakegetRequest : pb::GeneratedMessage<ShakegetRequest, ShakegetRequest.Builder> {
    private ShakegetRequest() { }
    private static readonly ShakegetRequest defaultInstance = new ShakegetRequest().MakeReadOnly();
    private static readonly string[] _shakegetRequestFieldNames = new string[] { "Buffer", "IsNewVerson", "base" };
    private static readonly uint[] _shakegetRequestFieldTags = new uint[] { 18, 24, 10 };
    public static ShakegetRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ShakegetRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ShakegetRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ShakegetRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ShakegetRequest, ShakegetRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ShakegetRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int BufferFieldNumber = 2;
    private bool hasBuffer;
    private global::mm.command.SKBuiltinBuffer_t buffer_;
    public bool HasBuffer {
      get { return hasBuffer; }
    }
    public global::mm.command.SKBuiltinBuffer_t Buffer {
      get { return buffer_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int IsNewVersonFieldNumber = 3;
    private bool hasIsNewVerson;
    private int isNewVerson_;
    public bool HasIsNewVerson {
      get { return hasIsNewVerson; }
    }
    public int IsNewVerson {
      get { return isNewVerson_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasBuffer) return false;
        if (!Base.IsInitialized) return false;
        if (!Buffer.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _shakegetRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasBuffer) {
        output.WriteMessage(2, field_names[0], Buffer);
      }
      if (hasIsNewVerson) {
        output.WriteInt32(3, field_names[1], IsNewVerson);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasBuffer) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Buffer);
        }
        if (hasIsNewVerson) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, IsNewVerson);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ShakegetRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ShakegetRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ShakegetRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ShakegetRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ShakegetRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ShakegetRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ShakegetRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ShakegetRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ShakegetRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ShakegetRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ShakegetRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ShakegetRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ShakegetRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ShakegetRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ShakegetRequest result;
      
      private ShakegetRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ShakegetRequest original = result;
          result = new ShakegetRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ShakegetRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ShakegetRequest.Descriptor; }
      }
      
      public override ShakegetRequest DefaultInstanceForType {
        get { return global::mm.command.ShakegetRequest.DefaultInstance; }
      }
      
      public override ShakegetRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ShakegetRequest) {
          return MergeFrom((ShakegetRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ShakegetRequest other) {
        if (other == global::mm.command.ShakegetRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasBuffer) {
          MergeBuffer(other.Buffer);
        }
        if (other.HasIsNewVerson) {
          IsNewVerson = other.IsNewVerson;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_shakegetRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _shakegetRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasBuffer) {
                subBuilder.MergeFrom(Buffer);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Buffer = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasIsNewVerson = input.ReadInt32(ref result.isNewVerson_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasBuffer {
       get { return result.hasBuffer; }
      }
      public global::mm.command.SKBuiltinBuffer_t Buffer {
        get { return result.Buffer; }
        set { SetBuffer(value); }
      }
      public Builder SetBuffer(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBuffer = true;
        result.buffer_ = value;
        return this;
      }
      public Builder SetBuffer(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBuffer = true;
        result.buffer_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBuffer(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBuffer &&
            result.buffer_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.buffer_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.buffer_).MergeFrom(value).BuildPartial();
        } else {
          result.buffer_ = value;
        }
        result.hasBuffer = true;
        return this;
      }
      public Builder ClearBuffer() {
        PrepareBuilder();
        result.hasBuffer = false;
        result.buffer_ = null;
        return this;
      }
      
      public bool HasIsNewVerson {
        get { return result.hasIsNewVerson; }
      }
      public int IsNewVerson {
        get { return result.IsNewVerson; }
        set { SetIsNewVerson(value); }
      }
      public Builder SetIsNewVerson(int value) {
        PrepareBuilder();
        result.hasIsNewVerson = true;
        result.isNewVerson_ = value;
        return this;
      }
      public Builder ClearIsNewVerson() {
        PrepareBuilder();
        result.hasIsNewVerson = false;
        result.isNewVerson_ = 0;
        return this;
      }
    }
    static ShakegetRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ShakegetResponse : pb::GeneratedMessage<ShakegetResponse, ShakegetResponse.Builder> {
    private ShakegetResponse() { }
    private static readonly ShakegetResponse defaultInstance = new ShakegetResponse().MakeReadOnly();
    private static readonly string[] _shakegetResponseFieldNames = new string[] { "Count", "Ret", "Scence", "ShakeGetList", "Tips", "base" };
    private static readonly uint[] _shakegetResponseFieldTags = new uint[] { 16, 48, 40, 26, 34, 10 };
    public static ShakegetResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ShakegetResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ShakegetResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ShakegetResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ShakegetResponse, ShakegetResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ShakegetResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int CountFieldNumber = 2;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public const int ShakeGetListFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.ShakeGetObj> shakeGetList_ = new pbc::PopsicleList<global::mm.command.ShakeGetObj>();
    public scg::IList<global::mm.command.ShakeGetObj> ShakeGetListList {
      get { return shakeGetList_; }
    }
    public int ShakeGetListCount {
      get { return shakeGetList_.Count; }
    }
    public global::mm.command.ShakeGetObj GetShakeGetList(int index) {
      return shakeGetList_[index];
    }
    
    public const int TipsFieldNumber = 4;
    private bool hasTips;
    private string tips_ = "";
    public bool HasTips {
      get { return hasTips; }
    }
    public string Tips {
      get { return tips_; }
    }
    
    public const int ScenceFieldNumber = 5;
    private bool hasScence;
    private int scence_;
    public bool HasScence {
      get { return hasScence; }
    }
    public int Scence {
      get { return scence_; }
    }
    
    public const int RetFieldNumber = 6;
    private bool hasRet;
    private int ret_;
    public bool HasRet {
      get { return hasRet; }
    }
    public int Ret {
      get { return ret_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasCount) return false;
        if (!hasScence) return false;
        if (!hasRet) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.ShakeGetObj element in ShakeGetListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _shakegetResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[5], Base);
      }
      if (hasCount) {
        output.WriteInt32(2, field_names[0], Count);
      }
      if (shakeGetList_.Count > 0) {
        output.WriteMessageArray(3, field_names[3], shakeGetList_);
      }
      if (hasTips) {
        output.WriteString(4, field_names[4], Tips);
      }
      if (hasScence) {
        output.WriteInt32(5, field_names[2], Scence);
      }
      if (hasRet) {
        output.WriteInt32(6, field_names[1], Ret);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
        }
        foreach (global::mm.command.ShakeGetObj element in ShakeGetListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasTips) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Tips);
        }
        if (hasScence) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Scence);
        }
        if (hasRet) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Ret);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ShakegetResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ShakegetResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ShakegetResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ShakegetResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ShakegetResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ShakegetResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ShakegetResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ShakegetResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ShakegetResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ShakegetResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ShakegetResponse MakeReadOnly() {
      shakeGetList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ShakegetResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ShakegetResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ShakegetResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ShakegetResponse result;
      
      private ShakegetResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ShakegetResponse original = result;
          result = new ShakegetResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ShakegetResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ShakegetResponse.Descriptor; }
      }
      
      public override ShakegetResponse DefaultInstanceForType {
        get { return global::mm.command.ShakegetResponse.DefaultInstance; }
      }
      
      public override ShakegetResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ShakegetResponse) {
          return MergeFrom((ShakegetResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ShakegetResponse other) {
        if (other == global::mm.command.ShakegetResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        if (other.shakeGetList_.Count != 0) {
          result.shakeGetList_.Add(other.shakeGetList_);
        }
        if (other.HasTips) {
          Tips = other.Tips;
        }
        if (other.HasScence) {
          Scence = other.Scence;
        }
        if (other.HasRet) {
          Ret = other.Ret;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_shakegetResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _shakegetResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.shakeGetList_, global::mm.command.ShakeGetObj.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              result.hasTips = input.ReadString(ref result.tips_);
              break;
            }
            case 40: {
              result.hasScence = input.ReadInt32(ref result.scence_);
              break;
            }
            case 48: {
              result.hasRet = input.ReadInt32(ref result.ret_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.ShakeGetObj> ShakeGetListList {
        get { return PrepareBuilder().shakeGetList_; }
      }
      public int ShakeGetListCount {
        get { return result.ShakeGetListCount; }
      }
      public global::mm.command.ShakeGetObj GetShakeGetList(int index) {
        return result.GetShakeGetList(index);
      }
      public Builder SetShakeGetList(int index, global::mm.command.ShakeGetObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.shakeGetList_[index] = value;
        return this;
      }
      public Builder SetShakeGetList(int index, global::mm.command.ShakeGetObj.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.shakeGetList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddShakeGetList(global::mm.command.ShakeGetObj value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.shakeGetList_.Add(value);
        return this;
      }
      public Builder AddShakeGetList(global::mm.command.ShakeGetObj.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.shakeGetList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeShakeGetList(scg::IEnumerable<global::mm.command.ShakeGetObj> values) {
        PrepareBuilder();
        result.shakeGetList_.Add(values);
        return this;
      }
      public Builder ClearShakeGetList() {
        PrepareBuilder();
        result.shakeGetList_.Clear();
        return this;
      }
      
      public bool HasTips {
        get { return result.hasTips; }
      }
      public string Tips {
        get { return result.Tips; }
        set { SetTips(value); }
      }
      public Builder SetTips(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTips = true;
        result.tips_ = value;
        return this;
      }
      public Builder ClearTips() {
        PrepareBuilder();
        result.hasTips = false;
        result.tips_ = "";
        return this;
      }
      
      public bool HasScence {
        get { return result.hasScence; }
      }
      public int Scence {
        get { return result.Scence; }
        set { SetScence(value); }
      }
      public Builder SetScence(int value) {
        PrepareBuilder();
        result.hasScence = true;
        result.scence_ = value;
        return this;
      }
      public Builder ClearScence() {
        PrepareBuilder();
        result.hasScence = false;
        result.scence_ = 0;
        return this;
      }
      
      public bool HasRet {
        get { return result.hasRet; }
      }
      public int Ret {
        get { return result.Ret; }
        set { SetRet(value); }
      }
      public Builder SetRet(int value) {
        PrepareBuilder();
        result.hasRet = true;
        result.ret_ = value;
        return this;
      }
      public Builder ClearRet() {
        PrepareBuilder();
        result.hasRet = false;
        result.ret_ = 0;
        return this;
      }
    }
    static ShakegetResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ManualAuthRequest : pb::GeneratedMessage<ManualAuthRequest, ManualAuthRequest.Builder> {
    private ManualAuthRequest() { }
    private static readonly ManualAuthRequest defaultInstance = new ManualAuthRequest().MakeReadOnly();
    private static readonly string[] _manualAuthRequestFieldNames = new string[] { "ADSource", "BaseReqInfo", "BundleId", "Channel", "ClientCheckData", "ClientSeqId", "CountryCode", "DeviceBrand", "DeviceModel", "DeviceName", "DeviceType", "IMEI", "InputType", "IphoneVer", "Language", "OSType", "Signature", "SoftType", "TimeStamp", "TimeZone", "base", "builtinIpseq" };
    private static readonly uint[] _manualAuthRequestFieldTags = new uint[] { 162, 18, 154, 104, 186, 50, 146, 122, 130, 66, 74, 26, 176, 170, 82, 138, 58, 34, 112, 90, 10, 40 };
    public static ManualAuthRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ManualAuthRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ManualAuthRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ManualAuthRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ManualAuthRequest, ManualAuthRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ManualAuthRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int BaseReqInfoFieldNumber = 2;
    private bool hasBaseReqInfo;
    private global::mm.command.ExtData baseReqInfo_;
    public bool HasBaseReqInfo {
      get { return hasBaseReqInfo; }
    }
    public global::mm.command.ExtData BaseReqInfo {
      get { return baseReqInfo_ ?? global::mm.command.ExtData.DefaultInstance; }
    }
    
    public const int IMEIFieldNumber = 3;
    private bool hasIMEI;
    private string iMEI_ = "";
    public bool HasIMEI {
      get { return hasIMEI; }
    }
    public string IMEI {
      get { return iMEI_; }
    }
    
    public const int SoftTypeFieldNumber = 4;
    private bool hasSoftType;
    private string softType_ = "";
    public bool HasSoftType {
      get { return hasSoftType; }
    }
    public string SoftType {
      get { return softType_; }
    }
    
    public const int BuiltinIpseqFieldNumber = 5;
    private bool hasBuiltinIpseq;
    private uint builtinIpseq_;
    public bool HasBuiltinIpseq {
      get { return hasBuiltinIpseq; }
    }
    [global::System.CLSCompliant(false)]
    public uint BuiltinIpseq {
      get { return builtinIpseq_; }
    }
    
    public const int ClientSeqIdFieldNumber = 6;
    private bool hasClientSeqId;
    private string clientSeqId_ = "";
    public bool HasClientSeqId {
      get { return hasClientSeqId; }
    }
    public string ClientSeqId {
      get { return clientSeqId_; }
    }
    
    public const int SignatureFieldNumber = 7;
    private bool hasSignature;
    private string signature_ = "";
    public bool HasSignature {
      get { return hasSignature; }
    }
    public string Signature {
      get { return signature_; }
    }
    
    public const int DeviceNameFieldNumber = 8;
    private bool hasDeviceName;
    private string deviceName_ = "";
    public bool HasDeviceName {
      get { return hasDeviceName; }
    }
    public string DeviceName {
      get { return deviceName_; }
    }
    
    public const int DeviceTypeFieldNumber = 9;
    private bool hasDeviceType;
    private string deviceType_ = "";
    public bool HasDeviceType {
      get { return hasDeviceType; }
    }
    public string DeviceType {
      get { return deviceType_; }
    }
    
    public const int LanguageFieldNumber = 10;
    private bool hasLanguage;
    private string language_ = "";
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public string Language {
      get { return language_; }
    }
    
    public const int TimeZoneFieldNumber = 11;
    private bool hasTimeZone;
    private string timeZone_ = "";
    public bool HasTimeZone {
      get { return hasTimeZone; }
    }
    public string TimeZone {
      get { return timeZone_; }
    }
    
    public const int ChannelFieldNumber = 13;
    private bool hasChannel;
    private int channel_;
    public bool HasChannel {
      get { return hasChannel; }
    }
    public int Channel {
      get { return channel_; }
    }
    
    public const int TimeStampFieldNumber = 14;
    private bool hasTimeStamp;
    private uint timeStamp_;
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int DeviceBrandFieldNumber = 15;
    private bool hasDeviceBrand;
    private string deviceBrand_ = "";
    public bool HasDeviceBrand {
      get { return hasDeviceBrand; }
    }
    public string DeviceBrand {
      get { return deviceBrand_; }
    }
    
    public const int DeviceModelFieldNumber = 16;
    private bool hasDeviceModel;
    private string deviceModel_ = "";
    public bool HasDeviceModel {
      get { return hasDeviceModel; }
    }
    public string DeviceModel {
      get { return deviceModel_; }
    }
    
    public const int OSTypeFieldNumber = 17;
    private bool hasOSType;
    private string oSType_ = "";
    public bool HasOSType {
      get { return hasOSType; }
    }
    public string OSType {
      get { return oSType_; }
    }
    
    public const int CountryCodeFieldNumber = 18;
    private bool hasCountryCode;
    private string countryCode_ = "";
    public bool HasCountryCode {
      get { return hasCountryCode; }
    }
    public string CountryCode {
      get { return countryCode_; }
    }
    
    public const int BundleIdFieldNumber = 19;
    private bool hasBundleId;
    private string bundleId_ = "";
    public bool HasBundleId {
      get { return hasBundleId; }
    }
    public string BundleId {
      get { return bundleId_; }
    }
    
    public const int ADSourceFieldNumber = 20;
    private bool hasADSource;
    private string aDSource_ = "";
    public bool HasADSource {
      get { return hasADSource; }
    }
    public string ADSource {
      get { return aDSource_; }
    }
    
    public const int IphoneVerFieldNumber = 21;
    private bool hasIphoneVer;
    private string iphoneVer_ = "";
    public bool HasIphoneVer {
      get { return hasIphoneVer; }
    }
    public string IphoneVer {
      get { return iphoneVer_; }
    }
    
    public const int InputTypeFieldNumber = 22;
    private bool hasInputType;
    private int inputType_;
    public bool HasInputType {
      get { return hasInputType; }
    }
    public int InputType {
      get { return inputType_; }
    }
    
    public const int ClientCheckDataFieldNumber = 23;
    private bool hasClientCheckData;
    private global::mm.command.SKBuiltinBuffer_t clientCheckData_;
    public bool HasClientCheckData {
      get { return hasClientCheckData; }
    }
    public global::mm.command.SKBuiltinBuffer_t ClientCheckData {
      get { return clientCheckData_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasTimeStamp) return false;
        if (!Base.IsInitialized) return false;
        if (HasBaseReqInfo) {
          if (!BaseReqInfo.IsInitialized) return false;
        }
        if (HasClientCheckData) {
          if (!ClientCheckData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _manualAuthRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[20], Base);
      }
      if (hasBaseReqInfo) {
        output.WriteMessage(2, field_names[1], BaseReqInfo);
      }
      if (hasIMEI) {
        output.WriteString(3, field_names[11], IMEI);
      }
      if (hasSoftType) {
        output.WriteString(4, field_names[17], SoftType);
      }
      if (hasBuiltinIpseq) {
        output.WriteUInt32(5, field_names[21], BuiltinIpseq);
      }
      if (hasClientSeqId) {
        output.WriteString(6, field_names[5], ClientSeqId);
      }
      if (hasSignature) {
        output.WriteString(7, field_names[16], Signature);
      }
      if (hasDeviceName) {
        output.WriteString(8, field_names[9], DeviceName);
      }
      if (hasDeviceType) {
        output.WriteString(9, field_names[10], DeviceType);
      }
      if (hasLanguage) {
        output.WriteString(10, field_names[14], Language);
      }
      if (hasTimeZone) {
        output.WriteString(11, field_names[19], TimeZone);
      }
      if (hasChannel) {
        output.WriteInt32(13, field_names[3], Channel);
      }
      if (hasTimeStamp) {
        output.WriteUInt32(14, field_names[18], TimeStamp);
      }
      if (hasDeviceBrand) {
        output.WriteString(15, field_names[7], DeviceBrand);
      }
      if (hasDeviceModel) {
        output.WriteString(16, field_names[8], DeviceModel);
      }
      if (hasOSType) {
        output.WriteString(17, field_names[15], OSType);
      }
      if (hasCountryCode) {
        output.WriteString(18, field_names[6], CountryCode);
      }
      if (hasBundleId) {
        output.WriteString(19, field_names[2], BundleId);
      }
      if (hasADSource) {
        output.WriteString(20, field_names[0], ADSource);
      }
      if (hasIphoneVer) {
        output.WriteString(21, field_names[13], IphoneVer);
      }
      if (hasInputType) {
        output.WriteInt32(22, field_names[12], InputType);
      }
      if (hasClientCheckData) {
        output.WriteMessage(23, field_names[4], ClientCheckData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasBaseReqInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, BaseReqInfo);
        }
        if (hasIMEI) {
          size += pb::CodedOutputStream.ComputeStringSize(3, IMEI);
        }
        if (hasSoftType) {
          size += pb::CodedOutputStream.ComputeStringSize(4, SoftType);
        }
        if (hasBuiltinIpseq) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, BuiltinIpseq);
        }
        if (hasClientSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ClientSeqId);
        }
        if (hasSignature) {
          size += pb::CodedOutputStream.ComputeStringSize(7, Signature);
        }
        if (hasDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(8, DeviceName);
        }
        if (hasDeviceType) {
          size += pb::CodedOutputStream.ComputeStringSize(9, DeviceType);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeStringSize(10, Language);
        }
        if (hasTimeZone) {
          size += pb::CodedOutputStream.ComputeStringSize(11, TimeZone);
        }
        if (hasChannel) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, Channel);
        }
        if (hasTimeStamp) {
          size += pb::CodedOutputStream.ComputeUInt32Size(14, TimeStamp);
        }
        if (hasDeviceBrand) {
          size += pb::CodedOutputStream.ComputeStringSize(15, DeviceBrand);
        }
        if (hasDeviceModel) {
          size += pb::CodedOutputStream.ComputeStringSize(16, DeviceModel);
        }
        if (hasOSType) {
          size += pb::CodedOutputStream.ComputeStringSize(17, OSType);
        }
        if (hasCountryCode) {
          size += pb::CodedOutputStream.ComputeStringSize(18, CountryCode);
        }
        if (hasBundleId) {
          size += pb::CodedOutputStream.ComputeStringSize(19, BundleId);
        }
        if (hasADSource) {
          size += pb::CodedOutputStream.ComputeStringSize(20, ADSource);
        }
        if (hasIphoneVer) {
          size += pb::CodedOutputStream.ComputeStringSize(21, IphoneVer);
        }
        if (hasInputType) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, InputType);
        }
        if (hasClientCheckData) {
          size += pb::CodedOutputStream.ComputeMessageSize(23, ClientCheckData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ManualAuthRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ManualAuthRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ManualAuthRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ManualAuthRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ManualAuthRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ManualAuthRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ManualAuthRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ManualAuthRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ManualAuthRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ManualAuthRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ManualAuthRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ManualAuthRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ManualAuthRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ManualAuthRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ManualAuthRequest result;
      
      private ManualAuthRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ManualAuthRequest original = result;
          result = new ManualAuthRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ManualAuthRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ManualAuthRequest.Descriptor; }
      }
      
      public override ManualAuthRequest DefaultInstanceForType {
        get { return global::mm.command.ManualAuthRequest.DefaultInstance; }
      }
      
      public override ManualAuthRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ManualAuthRequest) {
          return MergeFrom((ManualAuthRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ManualAuthRequest other) {
        if (other == global::mm.command.ManualAuthRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasBaseReqInfo) {
          MergeBaseReqInfo(other.BaseReqInfo);
        }
        if (other.HasIMEI) {
          IMEI = other.IMEI;
        }
        if (other.HasSoftType) {
          SoftType = other.SoftType;
        }
        if (other.HasBuiltinIpseq) {
          BuiltinIpseq = other.BuiltinIpseq;
        }
        if (other.HasClientSeqId) {
          ClientSeqId = other.ClientSeqId;
        }
        if (other.HasSignature) {
          Signature = other.Signature;
        }
        if (other.HasDeviceName) {
          DeviceName = other.DeviceName;
        }
        if (other.HasDeviceType) {
          DeviceType = other.DeviceType;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasTimeZone) {
          TimeZone = other.TimeZone;
        }
        if (other.HasChannel) {
          Channel = other.Channel;
        }
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasDeviceBrand) {
          DeviceBrand = other.DeviceBrand;
        }
        if (other.HasDeviceModel) {
          DeviceModel = other.DeviceModel;
        }
        if (other.HasOSType) {
          OSType = other.OSType;
        }
        if (other.HasCountryCode) {
          CountryCode = other.CountryCode;
        }
        if (other.HasBundleId) {
          BundleId = other.BundleId;
        }
        if (other.HasADSource) {
          ADSource = other.ADSource;
        }
        if (other.HasIphoneVer) {
          IphoneVer = other.IphoneVer;
        }
        if (other.HasInputType) {
          InputType = other.InputType;
        }
        if (other.HasClientCheckData) {
          MergeClientCheckData(other.ClientCheckData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_manualAuthRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _manualAuthRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.ExtData.Builder subBuilder = global::mm.command.ExtData.CreateBuilder();
              if (result.hasBaseReqInfo) {
                subBuilder.MergeFrom(BaseReqInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseReqInfo = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasIMEI = input.ReadString(ref result.iMEI_);
              break;
            }
            case 34: {
              result.hasSoftType = input.ReadString(ref result.softType_);
              break;
            }
            case 40: {
              result.hasBuiltinIpseq = input.ReadUInt32(ref result.builtinIpseq_);
              break;
            }
            case 50: {
              result.hasClientSeqId = input.ReadString(ref result.clientSeqId_);
              break;
            }
            case 58: {
              result.hasSignature = input.ReadString(ref result.signature_);
              break;
            }
            case 66: {
              result.hasDeviceName = input.ReadString(ref result.deviceName_);
              break;
            }
            case 74: {
              result.hasDeviceType = input.ReadString(ref result.deviceType_);
              break;
            }
            case 82: {
              result.hasLanguage = input.ReadString(ref result.language_);
              break;
            }
            case 90: {
              result.hasTimeZone = input.ReadString(ref result.timeZone_);
              break;
            }
            case 104: {
              result.hasChannel = input.ReadInt32(ref result.channel_);
              break;
            }
            case 112: {
              result.hasTimeStamp = input.ReadUInt32(ref result.timeStamp_);
              break;
            }
            case 122: {
              result.hasDeviceBrand = input.ReadString(ref result.deviceBrand_);
              break;
            }
            case 130: {
              result.hasDeviceModel = input.ReadString(ref result.deviceModel_);
              break;
            }
            case 138: {
              result.hasOSType = input.ReadString(ref result.oSType_);
              break;
            }
            case 146: {
              result.hasCountryCode = input.ReadString(ref result.countryCode_);
              break;
            }
            case 154: {
              result.hasBundleId = input.ReadString(ref result.bundleId_);
              break;
            }
            case 162: {
              result.hasADSource = input.ReadString(ref result.aDSource_);
              break;
            }
            case 170: {
              result.hasIphoneVer = input.ReadString(ref result.iphoneVer_);
              break;
            }
            case 176: {
              result.hasInputType = input.ReadInt32(ref result.inputType_);
              break;
            }
            case 186: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasClientCheckData) {
                subBuilder.MergeFrom(ClientCheckData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ClientCheckData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasBaseReqInfo {
       get { return result.hasBaseReqInfo; }
      }
      public global::mm.command.ExtData BaseReqInfo {
        get { return result.BaseReqInfo; }
        set { SetBaseReqInfo(value); }
      }
      public Builder SetBaseReqInfo(global::mm.command.ExtData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseReqInfo = true;
        result.baseReqInfo_ = value;
        return this;
      }
      public Builder SetBaseReqInfo(global::mm.command.ExtData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseReqInfo = true;
        result.baseReqInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseReqInfo(global::mm.command.ExtData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseReqInfo &&
            result.baseReqInfo_ != global::mm.command.ExtData.DefaultInstance) {
            result.baseReqInfo_ = global::mm.command.ExtData.CreateBuilder(result.baseReqInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.baseReqInfo_ = value;
        }
        result.hasBaseReqInfo = true;
        return this;
      }
      public Builder ClearBaseReqInfo() {
        PrepareBuilder();
        result.hasBaseReqInfo = false;
        result.baseReqInfo_ = null;
        return this;
      }
      
      public bool HasIMEI {
        get { return result.hasIMEI; }
      }
      public string IMEI {
        get { return result.IMEI; }
        set { SetIMEI(value); }
      }
      public Builder SetIMEI(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIMEI = true;
        result.iMEI_ = value;
        return this;
      }
      public Builder ClearIMEI() {
        PrepareBuilder();
        result.hasIMEI = false;
        result.iMEI_ = "";
        return this;
      }
      
      public bool HasSoftType {
        get { return result.hasSoftType; }
      }
      public string SoftType {
        get { return result.SoftType; }
        set { SetSoftType(value); }
      }
      public Builder SetSoftType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSoftType = true;
        result.softType_ = value;
        return this;
      }
      public Builder ClearSoftType() {
        PrepareBuilder();
        result.hasSoftType = false;
        result.softType_ = "";
        return this;
      }
      
      public bool HasBuiltinIpseq {
        get { return result.hasBuiltinIpseq; }
      }
      [global::System.CLSCompliant(false)]
      public uint BuiltinIpseq {
        get { return result.BuiltinIpseq; }
        set { SetBuiltinIpseq(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBuiltinIpseq(uint value) {
        PrepareBuilder();
        result.hasBuiltinIpseq = true;
        result.builtinIpseq_ = value;
        return this;
      }
      public Builder ClearBuiltinIpseq() {
        PrepareBuilder();
        result.hasBuiltinIpseq = false;
        result.builtinIpseq_ = 0;
        return this;
      }
      
      public bool HasClientSeqId {
        get { return result.hasClientSeqId; }
      }
      public string ClientSeqId {
        get { return result.ClientSeqId; }
        set { SetClientSeqId(value); }
      }
      public Builder SetClientSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientSeqId = true;
        result.clientSeqId_ = value;
        return this;
      }
      public Builder ClearClientSeqId() {
        PrepareBuilder();
        result.hasClientSeqId = false;
        result.clientSeqId_ = "";
        return this;
      }
      
      public bool HasSignature {
        get { return result.hasSignature; }
      }
      public string Signature {
        get { return result.Signature; }
        set { SetSignature(value); }
      }
      public Builder SetSignature(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSignature = true;
        result.signature_ = value;
        return this;
      }
      public Builder ClearSignature() {
        PrepareBuilder();
        result.hasSignature = false;
        result.signature_ = "";
        return this;
      }
      
      public bool HasDeviceName {
        get { return result.hasDeviceName; }
      }
      public string DeviceName {
        get { return result.DeviceName; }
        set { SetDeviceName(value); }
      }
      public Builder SetDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceName = true;
        result.deviceName_ = value;
        return this;
      }
      public Builder ClearDeviceName() {
        PrepareBuilder();
        result.hasDeviceName = false;
        result.deviceName_ = "";
        return this;
      }
      
      public bool HasDeviceType {
        get { return result.hasDeviceType; }
      }
      public string DeviceType {
        get { return result.DeviceType; }
        set { SetDeviceType(value); }
      }
      public Builder SetDeviceType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceType = true;
        result.deviceType_ = value;
        return this;
      }
      public Builder ClearDeviceType() {
        PrepareBuilder();
        result.hasDeviceType = false;
        result.deviceType_ = "";
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public string Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = "";
        return this;
      }
      
      public bool HasTimeZone {
        get { return result.hasTimeZone; }
      }
      public string TimeZone {
        get { return result.TimeZone; }
        set { SetTimeZone(value); }
      }
      public Builder SetTimeZone(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimeZone = true;
        result.timeZone_ = value;
        return this;
      }
      public Builder ClearTimeZone() {
        PrepareBuilder();
        result.hasTimeZone = false;
        result.timeZone_ = "";
        return this;
      }
      
      public bool HasChannel {
        get { return result.hasChannel; }
      }
      public int Channel {
        get { return result.Channel; }
        set { SetChannel(value); }
      }
      public Builder SetChannel(int value) {
        PrepareBuilder();
        result.hasChannel = true;
        result.channel_ = value;
        return this;
      }
      public Builder ClearChannel() {
        PrepareBuilder();
        result.hasChannel = false;
        result.channel_ = 0;
        return this;
      }
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeStamp(uint value) {
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = 0;
        return this;
      }
      
      public bool HasDeviceBrand {
        get { return result.hasDeviceBrand; }
      }
      public string DeviceBrand {
        get { return result.DeviceBrand; }
        set { SetDeviceBrand(value); }
      }
      public Builder SetDeviceBrand(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceBrand = true;
        result.deviceBrand_ = value;
        return this;
      }
      public Builder ClearDeviceBrand() {
        PrepareBuilder();
        result.hasDeviceBrand = false;
        result.deviceBrand_ = "";
        return this;
      }
      
      public bool HasDeviceModel {
        get { return result.hasDeviceModel; }
      }
      public string DeviceModel {
        get { return result.DeviceModel; }
        set { SetDeviceModel(value); }
      }
      public Builder SetDeviceModel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceModel = true;
        result.deviceModel_ = value;
        return this;
      }
      public Builder ClearDeviceModel() {
        PrepareBuilder();
        result.hasDeviceModel = false;
        result.deviceModel_ = "";
        return this;
      }
      
      public bool HasOSType {
        get { return result.hasOSType; }
      }
      public string OSType {
        get { return result.OSType; }
        set { SetOSType(value); }
      }
      public Builder SetOSType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOSType = true;
        result.oSType_ = value;
        return this;
      }
      public Builder ClearOSType() {
        PrepareBuilder();
        result.hasOSType = false;
        result.oSType_ = "";
        return this;
      }
      
      public bool HasCountryCode {
        get { return result.hasCountryCode; }
      }
      public string CountryCode {
        get { return result.CountryCode; }
        set { SetCountryCode(value); }
      }
      public Builder SetCountryCode(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCountryCode = true;
        result.countryCode_ = value;
        return this;
      }
      public Builder ClearCountryCode() {
        PrepareBuilder();
        result.hasCountryCode = false;
        result.countryCode_ = "";
        return this;
      }
      
      public bool HasBundleId {
        get { return result.hasBundleId; }
      }
      public string BundleId {
        get { return result.BundleId; }
        set { SetBundleId(value); }
      }
      public Builder SetBundleId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBundleId = true;
        result.bundleId_ = value;
        return this;
      }
      public Builder ClearBundleId() {
        PrepareBuilder();
        result.hasBundleId = false;
        result.bundleId_ = "";
        return this;
      }
      
      public bool HasADSource {
        get { return result.hasADSource; }
      }
      public string ADSource {
        get { return result.ADSource; }
        set { SetADSource(value); }
      }
      public Builder SetADSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasADSource = true;
        result.aDSource_ = value;
        return this;
      }
      public Builder ClearADSource() {
        PrepareBuilder();
        result.hasADSource = false;
        result.aDSource_ = "";
        return this;
      }
      
      public bool HasIphoneVer {
        get { return result.hasIphoneVer; }
      }
      public string IphoneVer {
        get { return result.IphoneVer; }
        set { SetIphoneVer(value); }
      }
      public Builder SetIphoneVer(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIphoneVer = true;
        result.iphoneVer_ = value;
        return this;
      }
      public Builder ClearIphoneVer() {
        PrepareBuilder();
        result.hasIphoneVer = false;
        result.iphoneVer_ = "";
        return this;
      }
      
      public bool HasInputType {
        get { return result.hasInputType; }
      }
      public int InputType {
        get { return result.InputType; }
        set { SetInputType(value); }
      }
      public Builder SetInputType(int value) {
        PrepareBuilder();
        result.hasInputType = true;
        result.inputType_ = value;
        return this;
      }
      public Builder ClearInputType() {
        PrepareBuilder();
        result.hasInputType = false;
        result.inputType_ = 0;
        return this;
      }
      
      public bool HasClientCheckData {
       get { return result.hasClientCheckData; }
      }
      public global::mm.command.SKBuiltinBuffer_t ClientCheckData {
        get { return result.ClientCheckData; }
        set { SetClientCheckData(value); }
      }
      public Builder SetClientCheckData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientCheckData = true;
        result.clientCheckData_ = value;
        return this;
      }
      public Builder SetClientCheckData(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasClientCheckData = true;
        result.clientCheckData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeClientCheckData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasClientCheckData &&
            result.clientCheckData_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.clientCheckData_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.clientCheckData_).MergeFrom(value).BuildPartial();
        } else {
          result.clientCheckData_ = value;
        }
        result.hasClientCheckData = true;
        return this;
      }
      public Builder ClearClientCheckData() {
        PrepareBuilder();
        result.hasClientCheckData = false;
        result.clientCheckData_ = null;
        return this;
      }
    }
    static ManualAuthRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AutoAuthRequest : pb::GeneratedMessage<AutoAuthRequest, AutoAuthRequest.Builder> {
    private AutoAuthRequest() { }
    private static readonly AutoAuthRequest defaultInstance = new AutoAuthRequest().MakeReadOnly();
    private static readonly string[] _autoAuthRequestFieldNames = new string[] { "AutoAuthKey", "BaseReqInfo", "ClientSeqId", "DeviceName", "DeviceType", "IMEI", "Language", "Signature", "SoftType", "TimeZone", "base", "builtinIpseq" };
    private static readonly uint[] _autoAuthRequestFieldTags = new uint[] { 26, 18, 58, 74, 82, 34, 90, 66, 42, 98, 10, 48 };
    public static AutoAuthRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AutoAuthRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AutoAuthRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_AutoAuthRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AutoAuthRequest, AutoAuthRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_AutoAuthRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int BaseReqInfoFieldNumber = 2;
    private bool hasBaseReqInfo;
    private global::mm.command.ExtData baseReqInfo_;
    public bool HasBaseReqInfo {
      get { return hasBaseReqInfo; }
    }
    public global::mm.command.ExtData BaseReqInfo {
      get { return baseReqInfo_ ?? global::mm.command.ExtData.DefaultInstance; }
    }
    
    public const int AutoAuthKeyFieldNumber = 3;
    private bool hasAutoAuthKey;
    private global::mm.command.SKBuiltinBuffer_t autoAuthKey_;
    public bool HasAutoAuthKey {
      get { return hasAutoAuthKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t AutoAuthKey {
      get { return autoAuthKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int IMEIFieldNumber = 4;
    private bool hasIMEI;
    private string iMEI_ = "";
    public bool HasIMEI {
      get { return hasIMEI; }
    }
    public string IMEI {
      get { return iMEI_; }
    }
    
    public const int SoftTypeFieldNumber = 5;
    private bool hasSoftType;
    private string softType_ = "";
    public bool HasSoftType {
      get { return hasSoftType; }
    }
    public string SoftType {
      get { return softType_; }
    }
    
    public const int BuiltinIpseqFieldNumber = 6;
    private bool hasBuiltinIpseq;
    private uint builtinIpseq_;
    public bool HasBuiltinIpseq {
      get { return hasBuiltinIpseq; }
    }
    [global::System.CLSCompliant(false)]
    public uint BuiltinIpseq {
      get { return builtinIpseq_; }
    }
    
    public const int ClientSeqIdFieldNumber = 7;
    private bool hasClientSeqId;
    private string clientSeqId_ = "";
    public bool HasClientSeqId {
      get { return hasClientSeqId; }
    }
    public string ClientSeqId {
      get { return clientSeqId_; }
    }
    
    public const int SignatureFieldNumber = 8;
    private bool hasSignature;
    private string signature_ = "";
    public bool HasSignature {
      get { return hasSignature; }
    }
    public string Signature {
      get { return signature_; }
    }
    
    public const int DeviceNameFieldNumber = 9;
    private bool hasDeviceName;
    private string deviceName_ = "";
    public bool HasDeviceName {
      get { return hasDeviceName; }
    }
    public string DeviceName {
      get { return deviceName_; }
    }
    
    public const int DeviceTypeFieldNumber = 10;
    private bool hasDeviceType;
    private string deviceType_ = "";
    public bool HasDeviceType {
      get { return hasDeviceType; }
    }
    public string DeviceType {
      get { return deviceType_; }
    }
    
    public const int LanguageFieldNumber = 11;
    private bool hasLanguage;
    private string language_ = "";
    public bool HasLanguage {
      get { return hasLanguage; }
    }
    public string Language {
      get { return language_; }
    }
    
    public const int TimeZoneFieldNumber = 12;
    private bool hasTimeZone;
    private string timeZone_ = "";
    public bool HasTimeZone {
      get { return hasTimeZone; }
    }
    public string TimeZone {
      get { return timeZone_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasBuiltinIpseq) return false;
        if (!Base.IsInitialized) return false;
        if (HasBaseReqInfo) {
          if (!BaseReqInfo.IsInitialized) return false;
        }
        if (HasAutoAuthKey) {
          if (!AutoAuthKey.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _autoAuthRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[10], Base);
      }
      if (hasBaseReqInfo) {
        output.WriteMessage(2, field_names[1], BaseReqInfo);
      }
      if (hasAutoAuthKey) {
        output.WriteMessage(3, field_names[0], AutoAuthKey);
      }
      if (hasIMEI) {
        output.WriteString(4, field_names[5], IMEI);
      }
      if (hasSoftType) {
        output.WriteString(5, field_names[8], SoftType);
      }
      if (hasBuiltinIpseq) {
        output.WriteUInt32(6, field_names[11], BuiltinIpseq);
      }
      if (hasClientSeqId) {
        output.WriteString(7, field_names[2], ClientSeqId);
      }
      if (hasSignature) {
        output.WriteString(8, field_names[7], Signature);
      }
      if (hasDeviceName) {
        output.WriteString(9, field_names[3], DeviceName);
      }
      if (hasDeviceType) {
        output.WriteString(10, field_names[4], DeviceType);
      }
      if (hasLanguage) {
        output.WriteString(11, field_names[6], Language);
      }
      if (hasTimeZone) {
        output.WriteString(12, field_names[9], TimeZone);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasBaseReqInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, BaseReqInfo);
        }
        if (hasAutoAuthKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, AutoAuthKey);
        }
        if (hasIMEI) {
          size += pb::CodedOutputStream.ComputeStringSize(4, IMEI);
        }
        if (hasSoftType) {
          size += pb::CodedOutputStream.ComputeStringSize(5, SoftType);
        }
        if (hasBuiltinIpseq) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, BuiltinIpseq);
        }
        if (hasClientSeqId) {
          size += pb::CodedOutputStream.ComputeStringSize(7, ClientSeqId);
        }
        if (hasSignature) {
          size += pb::CodedOutputStream.ComputeStringSize(8, Signature);
        }
        if (hasDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(9, DeviceName);
        }
        if (hasDeviceType) {
          size += pb::CodedOutputStream.ComputeStringSize(10, DeviceType);
        }
        if (hasLanguage) {
          size += pb::CodedOutputStream.ComputeStringSize(11, Language);
        }
        if (hasTimeZone) {
          size += pb::CodedOutputStream.ComputeStringSize(12, TimeZone);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AutoAuthRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AutoAuthRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AutoAuthRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AutoAuthRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AutoAuthRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AutoAuthRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AutoAuthRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AutoAuthRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AutoAuthRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AutoAuthRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AutoAuthRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AutoAuthRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AutoAuthRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AutoAuthRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AutoAuthRequest result;
      
      private AutoAuthRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          AutoAuthRequest original = result;
          result = new AutoAuthRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AutoAuthRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.AutoAuthRequest.Descriptor; }
      }
      
      public override AutoAuthRequest DefaultInstanceForType {
        get { return global::mm.command.AutoAuthRequest.DefaultInstance; }
      }
      
      public override AutoAuthRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AutoAuthRequest) {
          return MergeFrom((AutoAuthRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AutoAuthRequest other) {
        if (other == global::mm.command.AutoAuthRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasBaseReqInfo) {
          MergeBaseReqInfo(other.BaseReqInfo);
        }
        if (other.HasAutoAuthKey) {
          MergeAutoAuthKey(other.AutoAuthKey);
        }
        if (other.HasIMEI) {
          IMEI = other.IMEI;
        }
        if (other.HasSoftType) {
          SoftType = other.SoftType;
        }
        if (other.HasBuiltinIpseq) {
          BuiltinIpseq = other.BuiltinIpseq;
        }
        if (other.HasClientSeqId) {
          ClientSeqId = other.ClientSeqId;
        }
        if (other.HasSignature) {
          Signature = other.Signature;
        }
        if (other.HasDeviceName) {
          DeviceName = other.DeviceName;
        }
        if (other.HasDeviceType) {
          DeviceType = other.DeviceType;
        }
        if (other.HasLanguage) {
          Language = other.Language;
        }
        if (other.HasTimeZone) {
          TimeZone = other.TimeZone;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_autoAuthRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _autoAuthRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.ExtData.Builder subBuilder = global::mm.command.ExtData.CreateBuilder();
              if (result.hasBaseReqInfo) {
                subBuilder.MergeFrom(BaseReqInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseReqInfo = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasAutoAuthKey) {
                subBuilder.MergeFrom(AutoAuthKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              AutoAuthKey = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              result.hasIMEI = input.ReadString(ref result.iMEI_);
              break;
            }
            case 42: {
              result.hasSoftType = input.ReadString(ref result.softType_);
              break;
            }
            case 48: {
              result.hasBuiltinIpseq = input.ReadUInt32(ref result.builtinIpseq_);
              break;
            }
            case 58: {
              result.hasClientSeqId = input.ReadString(ref result.clientSeqId_);
              break;
            }
            case 66: {
              result.hasSignature = input.ReadString(ref result.signature_);
              break;
            }
            case 74: {
              result.hasDeviceName = input.ReadString(ref result.deviceName_);
              break;
            }
            case 82: {
              result.hasDeviceType = input.ReadString(ref result.deviceType_);
              break;
            }
            case 90: {
              result.hasLanguage = input.ReadString(ref result.language_);
              break;
            }
            case 98: {
              result.hasTimeZone = input.ReadString(ref result.timeZone_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasBaseReqInfo {
       get { return result.hasBaseReqInfo; }
      }
      public global::mm.command.ExtData BaseReqInfo {
        get { return result.BaseReqInfo; }
        set { SetBaseReqInfo(value); }
      }
      public Builder SetBaseReqInfo(global::mm.command.ExtData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseReqInfo = true;
        result.baseReqInfo_ = value;
        return this;
      }
      public Builder SetBaseReqInfo(global::mm.command.ExtData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseReqInfo = true;
        result.baseReqInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseReqInfo(global::mm.command.ExtData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseReqInfo &&
            result.baseReqInfo_ != global::mm.command.ExtData.DefaultInstance) {
            result.baseReqInfo_ = global::mm.command.ExtData.CreateBuilder(result.baseReqInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.baseReqInfo_ = value;
        }
        result.hasBaseReqInfo = true;
        return this;
      }
      public Builder ClearBaseReqInfo() {
        PrepareBuilder();
        result.hasBaseReqInfo = false;
        result.baseReqInfo_ = null;
        return this;
      }
      
      public bool HasAutoAuthKey {
       get { return result.hasAutoAuthKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t AutoAuthKey {
        get { return result.AutoAuthKey; }
        set { SetAutoAuthKey(value); }
      }
      public Builder SetAutoAuthKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAutoAuthKey = true;
        result.autoAuthKey_ = value;
        return this;
      }
      public Builder SetAutoAuthKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAutoAuthKey = true;
        result.autoAuthKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAutoAuthKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAutoAuthKey &&
            result.autoAuthKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.autoAuthKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.autoAuthKey_).MergeFrom(value).BuildPartial();
        } else {
          result.autoAuthKey_ = value;
        }
        result.hasAutoAuthKey = true;
        return this;
      }
      public Builder ClearAutoAuthKey() {
        PrepareBuilder();
        result.hasAutoAuthKey = false;
        result.autoAuthKey_ = null;
        return this;
      }
      
      public bool HasIMEI {
        get { return result.hasIMEI; }
      }
      public string IMEI {
        get { return result.IMEI; }
        set { SetIMEI(value); }
      }
      public Builder SetIMEI(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasIMEI = true;
        result.iMEI_ = value;
        return this;
      }
      public Builder ClearIMEI() {
        PrepareBuilder();
        result.hasIMEI = false;
        result.iMEI_ = "";
        return this;
      }
      
      public bool HasSoftType {
        get { return result.hasSoftType; }
      }
      public string SoftType {
        get { return result.SoftType; }
        set { SetSoftType(value); }
      }
      public Builder SetSoftType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSoftType = true;
        result.softType_ = value;
        return this;
      }
      public Builder ClearSoftType() {
        PrepareBuilder();
        result.hasSoftType = false;
        result.softType_ = "";
        return this;
      }
      
      public bool HasBuiltinIpseq {
        get { return result.hasBuiltinIpseq; }
      }
      [global::System.CLSCompliant(false)]
      public uint BuiltinIpseq {
        get { return result.BuiltinIpseq; }
        set { SetBuiltinIpseq(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBuiltinIpseq(uint value) {
        PrepareBuilder();
        result.hasBuiltinIpseq = true;
        result.builtinIpseq_ = value;
        return this;
      }
      public Builder ClearBuiltinIpseq() {
        PrepareBuilder();
        result.hasBuiltinIpseq = false;
        result.builtinIpseq_ = 0;
        return this;
      }
      
      public bool HasClientSeqId {
        get { return result.hasClientSeqId; }
      }
      public string ClientSeqId {
        get { return result.ClientSeqId; }
        set { SetClientSeqId(value); }
      }
      public Builder SetClientSeqId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientSeqId = true;
        result.clientSeqId_ = value;
        return this;
      }
      public Builder ClearClientSeqId() {
        PrepareBuilder();
        result.hasClientSeqId = false;
        result.clientSeqId_ = "";
        return this;
      }
      
      public bool HasSignature {
        get { return result.hasSignature; }
      }
      public string Signature {
        get { return result.Signature; }
        set { SetSignature(value); }
      }
      public Builder SetSignature(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSignature = true;
        result.signature_ = value;
        return this;
      }
      public Builder ClearSignature() {
        PrepareBuilder();
        result.hasSignature = false;
        result.signature_ = "";
        return this;
      }
      
      public bool HasDeviceName {
        get { return result.hasDeviceName; }
      }
      public string DeviceName {
        get { return result.DeviceName; }
        set { SetDeviceName(value); }
      }
      public Builder SetDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceName = true;
        result.deviceName_ = value;
        return this;
      }
      public Builder ClearDeviceName() {
        PrepareBuilder();
        result.hasDeviceName = false;
        result.deviceName_ = "";
        return this;
      }
      
      public bool HasDeviceType {
        get { return result.hasDeviceType; }
      }
      public string DeviceType {
        get { return result.DeviceType; }
        set { SetDeviceType(value); }
      }
      public Builder SetDeviceType(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceType = true;
        result.deviceType_ = value;
        return this;
      }
      public Builder ClearDeviceType() {
        PrepareBuilder();
        result.hasDeviceType = false;
        result.deviceType_ = "";
        return this;
      }
      
      public bool HasLanguage {
        get { return result.hasLanguage; }
      }
      public string Language {
        get { return result.Language; }
        set { SetLanguage(value); }
      }
      public Builder SetLanguage(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLanguage = true;
        result.language_ = value;
        return this;
      }
      public Builder ClearLanguage() {
        PrepareBuilder();
        result.hasLanguage = false;
        result.language_ = "";
        return this;
      }
      
      public bool HasTimeZone {
        get { return result.hasTimeZone; }
      }
      public string TimeZone {
        get { return result.TimeZone; }
        set { SetTimeZone(value); }
      }
      public Builder SetTimeZone(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTimeZone = true;
        result.timeZone_ = value;
        return this;
      }
      public Builder ClearTimeZone() {
        PrepareBuilder();
        result.hasTimeZone = false;
        result.timeZone_ = "";
        return this;
      }
    }
    static AutoAuthRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetLoginQRCodeRequest : pb::GeneratedMessage<GetLoginQRCodeRequest, GetLoginQRCodeRequest.Builder> {
    private GetLoginQRCodeRequest() { }
    private static readonly GetLoginQRCodeRequest defaultInstance = new GetLoginQRCodeRequest().MakeReadOnly();
    private static readonly string[] _getLoginQRCodeRequestFieldNames = new string[] { "base", "deviceName", "opcode", "randomEncryKey", "username" };
    private static readonly uint[] _getLoginQRCodeRequestFieldTags = new uint[] { 10, 34, 24, 18, 42 };
    public static GetLoginQRCodeRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetLoginQRCodeRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetLoginQRCodeRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetLoginQRCodeRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetLoginQRCodeRequest, GetLoginQRCodeRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetLoginQRCodeRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int RandomEncryKeyFieldNumber = 2;
    private bool hasRandomEncryKey;
    private global::mm.command.SKBuiltinBuffer_t randomEncryKey_;
    public bool HasRandomEncryKey {
      get { return hasRandomEncryKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
      get { return randomEncryKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int OpcodeFieldNumber = 3;
    private bool hasOpcode;
    private uint opcode_;
    public bool HasOpcode {
      get { return hasOpcode; }
    }
    [global::System.CLSCompliant(false)]
    public uint Opcode {
      get { return opcode_; }
    }
    
    public const int DeviceNameFieldNumber = 4;
    private bool hasDeviceName;
    private string deviceName_ = "";
    public bool HasDeviceName {
      get { return hasDeviceName; }
    }
    public string DeviceName {
      get { return deviceName_; }
    }
    
    public const int UsernameFieldNumber = 5;
    private bool hasUsername;
    private string username_ = "";
    public bool HasUsername {
      get { return hasUsername; }
    }
    public string Username {
      get { return username_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasRandomEncryKey) return false;
        if (!hasOpcode) return false;
        if (!Base.IsInitialized) return false;
        if (!RandomEncryKey.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getLoginQRCodeRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      if (hasRandomEncryKey) {
        output.WriteMessage(2, field_names[3], RandomEncryKey);
      }
      if (hasOpcode) {
        output.WriteUInt32(3, field_names[2], Opcode);
      }
      if (hasDeviceName) {
        output.WriteString(4, field_names[1], DeviceName);
      }
      if (hasUsername) {
        output.WriteString(5, field_names[4], Username);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasRandomEncryKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, RandomEncryKey);
        }
        if (hasOpcode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Opcode);
        }
        if (hasDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, DeviceName);
        }
        if (hasUsername) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Username);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetLoginQRCodeRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetLoginQRCodeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetLoginQRCodeRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetLoginQRCodeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetLoginQRCodeRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetLoginQRCodeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetLoginQRCodeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetLoginQRCodeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetLoginQRCodeRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetLoginQRCodeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetLoginQRCodeRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetLoginQRCodeRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetLoginQRCodeRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetLoginQRCodeRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetLoginQRCodeRequest result;
      
      private GetLoginQRCodeRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetLoginQRCodeRequest original = result;
          result = new GetLoginQRCodeRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetLoginQRCodeRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetLoginQRCodeRequest.Descriptor; }
      }
      
      public override GetLoginQRCodeRequest DefaultInstanceForType {
        get { return global::mm.command.GetLoginQRCodeRequest.DefaultInstance; }
      }
      
      public override GetLoginQRCodeRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetLoginQRCodeRequest) {
          return MergeFrom((GetLoginQRCodeRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetLoginQRCodeRequest other) {
        if (other == global::mm.command.GetLoginQRCodeRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasRandomEncryKey) {
          MergeRandomEncryKey(other.RandomEncryKey);
        }
        if (other.HasOpcode) {
          Opcode = other.Opcode;
        }
        if (other.HasDeviceName) {
          DeviceName = other.DeviceName;
        }
        if (other.HasUsername) {
          Username = other.Username;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getLoginQRCodeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getLoginQRCodeRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasRandomEncryKey) {
                subBuilder.MergeFrom(RandomEncryKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RandomEncryKey = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasOpcode = input.ReadUInt32(ref result.opcode_);
              break;
            }
            case 34: {
              result.hasDeviceName = input.ReadString(ref result.deviceName_);
              break;
            }
            case 42: {
              result.hasUsername = input.ReadString(ref result.username_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasRandomEncryKey {
       get { return result.hasRandomEncryKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
        get { return result.RandomEncryKey; }
        set { SetRandomEncryKey(value); }
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = value;
        return this;
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRandomEncryKey &&
            result.randomEncryKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.randomEncryKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.randomEncryKey_).MergeFrom(value).BuildPartial();
        } else {
          result.randomEncryKey_ = value;
        }
        result.hasRandomEncryKey = true;
        return this;
      }
      public Builder ClearRandomEncryKey() {
        PrepareBuilder();
        result.hasRandomEncryKey = false;
        result.randomEncryKey_ = null;
        return this;
      }
      
      public bool HasOpcode {
        get { return result.hasOpcode; }
      }
      [global::System.CLSCompliant(false)]
      public uint Opcode {
        get { return result.Opcode; }
        set { SetOpcode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpcode(uint value) {
        PrepareBuilder();
        result.hasOpcode = true;
        result.opcode_ = value;
        return this;
      }
      public Builder ClearOpcode() {
        PrepareBuilder();
        result.hasOpcode = false;
        result.opcode_ = 0;
        return this;
      }
      
      public bool HasDeviceName {
        get { return result.hasDeviceName; }
      }
      public string DeviceName {
        get { return result.DeviceName; }
        set { SetDeviceName(value); }
      }
      public Builder SetDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceName = true;
        result.deviceName_ = value;
        return this;
      }
      public Builder ClearDeviceName() {
        PrepareBuilder();
        result.hasDeviceName = false;
        result.deviceName_ = "";
        return this;
      }
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public string Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = "";
        return this;
      }
    }
    static GetLoginQRCodeRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetLoginQRCodeResponse : pb::GeneratedMessage<GetLoginQRCodeResponse, GetLoginQRCodeResponse.Builder> {
    private GetLoginQRCodeResponse() { }
    private static readonly GetLoginQRCodeResponse defaultInstance = new GetLoginQRCodeResponse().MakeReadOnly();
    private static readonly string[] _getLoginQRCodeResponseFieldNames = new string[] { "Base", "BlueToothBroadCastContent", "BlueToothBroadCastUuid", "CheckTime", "ExpiredTime", "NotifyKey", "QRCode", "UUID" };
    private static readonly uint[] _getLoginQRCodeResponseFieldTags = new uint[] { 10, 66, 58, 32, 48, 42, 18, 26 };
    public static GetLoginQRCodeResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetLoginQRCodeResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetLoginQRCodeResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetLoginQRCodeResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetLoginQRCodeResponse, GetLoginQRCodeResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetLoginQRCodeResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int QRCodeFieldNumber = 2;
    private bool hasQRCode;
    private global::mm.command.SKBuiltinBuffer_t qRCode_;
    public bool HasQRCode {
      get { return hasQRCode; }
    }
    public global::mm.command.SKBuiltinBuffer_t QRCode {
      get { return qRCode_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int UUIDFieldNumber = 3;
    private bool hasUUID;
    private string uUID_ = "";
    public bool HasUUID {
      get { return hasUUID; }
    }
    public string UUID {
      get { return uUID_; }
    }
    
    public const int CheckTimeFieldNumber = 4;
    private bool hasCheckTime;
    private uint checkTime_;
    public bool HasCheckTime {
      get { return hasCheckTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint CheckTime {
      get { return checkTime_; }
    }
    
    public const int NotifyKeyFieldNumber = 5;
    private bool hasNotifyKey;
    private global::mm.command.SKBuiltinBuffer_t notifyKey_;
    public bool HasNotifyKey {
      get { return hasNotifyKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t NotifyKey {
      get { return notifyKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int ExpiredTimeFieldNumber = 6;
    private bool hasExpiredTime;
    private uint expiredTime_;
    public bool HasExpiredTime {
      get { return hasExpiredTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExpiredTime {
      get { return expiredTime_; }
    }
    
    public const int BlueToothBroadCastUuidFieldNumber = 7;
    private bool hasBlueToothBroadCastUuid;
    private string blueToothBroadCastUuid_ = "";
    public bool HasBlueToothBroadCastUuid {
      get { return hasBlueToothBroadCastUuid; }
    }
    public string BlueToothBroadCastUuid {
      get { return blueToothBroadCastUuid_; }
    }
    
    public const int BlueToothBroadCastContentFieldNumber = 8;
    private bool hasBlueToothBroadCastContent;
    private global::mm.command.SKBuiltinBuffer_t blueToothBroadCastContent_;
    public bool HasBlueToothBroadCastContent {
      get { return hasBlueToothBroadCastContent; }
    }
    public global::mm.command.SKBuiltinBuffer_t BlueToothBroadCastContent {
      get { return blueToothBroadCastContent_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasQRCode) return false;
        if (!hasUUID) return false;
        if (!hasCheckTime) return false;
        if (!Base.IsInitialized) return false;
        if (!QRCode.IsInitialized) return false;
        if (HasNotifyKey) {
          if (!NotifyKey.IsInitialized) return false;
        }
        if (HasBlueToothBroadCastContent) {
          if (!BlueToothBroadCastContent.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getLoginQRCodeResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      if (hasQRCode) {
        output.WriteMessage(2, field_names[6], QRCode);
      }
      if (hasUUID) {
        output.WriteString(3, field_names[7], UUID);
      }
      if (hasCheckTime) {
        output.WriteUInt32(4, field_names[3], CheckTime);
      }
      if (hasNotifyKey) {
        output.WriteMessage(5, field_names[5], NotifyKey);
      }
      if (hasExpiredTime) {
        output.WriteUInt32(6, field_names[4], ExpiredTime);
      }
      if (hasBlueToothBroadCastUuid) {
        output.WriteString(7, field_names[2], BlueToothBroadCastUuid);
      }
      if (hasBlueToothBroadCastContent) {
        output.WriteMessage(8, field_names[1], BlueToothBroadCastContent);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasQRCode) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, QRCode);
        }
        if (hasUUID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, UUID);
        }
        if (hasCheckTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, CheckTime);
        }
        if (hasNotifyKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, NotifyKey);
        }
        if (hasExpiredTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, ExpiredTime);
        }
        if (hasBlueToothBroadCastUuid) {
          size += pb::CodedOutputStream.ComputeStringSize(7, BlueToothBroadCastUuid);
        }
        if (hasBlueToothBroadCastContent) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, BlueToothBroadCastContent);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetLoginQRCodeResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetLoginQRCodeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetLoginQRCodeResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetLoginQRCodeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetLoginQRCodeResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetLoginQRCodeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetLoginQRCodeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetLoginQRCodeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetLoginQRCodeResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetLoginQRCodeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetLoginQRCodeResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetLoginQRCodeResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetLoginQRCodeResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetLoginQRCodeResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetLoginQRCodeResponse result;
      
      private GetLoginQRCodeResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetLoginQRCodeResponse original = result;
          result = new GetLoginQRCodeResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetLoginQRCodeResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetLoginQRCodeResponse.Descriptor; }
      }
      
      public override GetLoginQRCodeResponse DefaultInstanceForType {
        get { return global::mm.command.GetLoginQRCodeResponse.DefaultInstance; }
      }
      
      public override GetLoginQRCodeResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetLoginQRCodeResponse) {
          return MergeFrom((GetLoginQRCodeResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetLoginQRCodeResponse other) {
        if (other == global::mm.command.GetLoginQRCodeResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasQRCode) {
          MergeQRCode(other.QRCode);
        }
        if (other.HasUUID) {
          UUID = other.UUID;
        }
        if (other.HasCheckTime) {
          CheckTime = other.CheckTime;
        }
        if (other.HasNotifyKey) {
          MergeNotifyKey(other.NotifyKey);
        }
        if (other.HasExpiredTime) {
          ExpiredTime = other.ExpiredTime;
        }
        if (other.HasBlueToothBroadCastUuid) {
          BlueToothBroadCastUuid = other.BlueToothBroadCastUuid;
        }
        if (other.HasBlueToothBroadCastContent) {
          MergeBlueToothBroadCastContent(other.BlueToothBroadCastContent);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getLoginQRCodeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getLoginQRCodeResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasQRCode) {
                subBuilder.MergeFrom(QRCode);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              QRCode = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasUUID = input.ReadString(ref result.uUID_);
              break;
            }
            case 32: {
              result.hasCheckTime = input.ReadUInt32(ref result.checkTime_);
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasNotifyKey) {
                subBuilder.MergeFrom(NotifyKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NotifyKey = subBuilder.BuildPartial();
              break;
            }
            case 48: {
              result.hasExpiredTime = input.ReadUInt32(ref result.expiredTime_);
              break;
            }
            case 58: {
              result.hasBlueToothBroadCastUuid = input.ReadString(ref result.blueToothBroadCastUuid_);
              break;
            }
            case 66: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasBlueToothBroadCastContent) {
                subBuilder.MergeFrom(BlueToothBroadCastContent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BlueToothBroadCastContent = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasQRCode {
       get { return result.hasQRCode; }
      }
      public global::mm.command.SKBuiltinBuffer_t QRCode {
        get { return result.QRCode; }
        set { SetQRCode(value); }
      }
      public Builder SetQRCode(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQRCode = true;
        result.qRCode_ = value;
        return this;
      }
      public Builder SetQRCode(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasQRCode = true;
        result.qRCode_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQRCode(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasQRCode &&
            result.qRCode_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.qRCode_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.qRCode_).MergeFrom(value).BuildPartial();
        } else {
          result.qRCode_ = value;
        }
        result.hasQRCode = true;
        return this;
      }
      public Builder ClearQRCode() {
        PrepareBuilder();
        result.hasQRCode = false;
        result.qRCode_ = null;
        return this;
      }
      
      public bool HasUUID {
        get { return result.hasUUID; }
      }
      public string UUID {
        get { return result.UUID; }
        set { SetUUID(value); }
      }
      public Builder SetUUID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUUID = true;
        result.uUID_ = value;
        return this;
      }
      public Builder ClearUUID() {
        PrepareBuilder();
        result.hasUUID = false;
        result.uUID_ = "";
        return this;
      }
      
      public bool HasCheckTime {
        get { return result.hasCheckTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint CheckTime {
        get { return result.CheckTime; }
        set { SetCheckTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetCheckTime(uint value) {
        PrepareBuilder();
        result.hasCheckTime = true;
        result.checkTime_ = value;
        return this;
      }
      public Builder ClearCheckTime() {
        PrepareBuilder();
        result.hasCheckTime = false;
        result.checkTime_ = 0;
        return this;
      }
      
      public bool HasNotifyKey {
       get { return result.hasNotifyKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t NotifyKey {
        get { return result.NotifyKey; }
        set { SetNotifyKey(value); }
      }
      public Builder SetNotifyKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNotifyKey = true;
        result.notifyKey_ = value;
        return this;
      }
      public Builder SetNotifyKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNotifyKey = true;
        result.notifyKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNotifyKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNotifyKey &&
            result.notifyKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.notifyKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.notifyKey_).MergeFrom(value).BuildPartial();
        } else {
          result.notifyKey_ = value;
        }
        result.hasNotifyKey = true;
        return this;
      }
      public Builder ClearNotifyKey() {
        PrepareBuilder();
        result.hasNotifyKey = false;
        result.notifyKey_ = null;
        return this;
      }
      
      public bool HasExpiredTime {
        get { return result.hasExpiredTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint ExpiredTime {
        get { return result.ExpiredTime; }
        set { SetExpiredTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetExpiredTime(uint value) {
        PrepareBuilder();
        result.hasExpiredTime = true;
        result.expiredTime_ = value;
        return this;
      }
      public Builder ClearExpiredTime() {
        PrepareBuilder();
        result.hasExpiredTime = false;
        result.expiredTime_ = 0;
        return this;
      }
      
      public bool HasBlueToothBroadCastUuid {
        get { return result.hasBlueToothBroadCastUuid; }
      }
      public string BlueToothBroadCastUuid {
        get { return result.BlueToothBroadCastUuid; }
        set { SetBlueToothBroadCastUuid(value); }
      }
      public Builder SetBlueToothBroadCastUuid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBlueToothBroadCastUuid = true;
        result.blueToothBroadCastUuid_ = value;
        return this;
      }
      public Builder ClearBlueToothBroadCastUuid() {
        PrepareBuilder();
        result.hasBlueToothBroadCastUuid = false;
        result.blueToothBroadCastUuid_ = "";
        return this;
      }
      
      public bool HasBlueToothBroadCastContent {
       get { return result.hasBlueToothBroadCastContent; }
      }
      public global::mm.command.SKBuiltinBuffer_t BlueToothBroadCastContent {
        get { return result.BlueToothBroadCastContent; }
        set { SetBlueToothBroadCastContent(value); }
      }
      public Builder SetBlueToothBroadCastContent(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBlueToothBroadCastContent = true;
        result.blueToothBroadCastContent_ = value;
        return this;
      }
      public Builder SetBlueToothBroadCastContent(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBlueToothBroadCastContent = true;
        result.blueToothBroadCastContent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBlueToothBroadCastContent(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBlueToothBroadCastContent &&
            result.blueToothBroadCastContent_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.blueToothBroadCastContent_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.blueToothBroadCastContent_).MergeFrom(value).BuildPartial();
        } else {
          result.blueToothBroadCastContent_ = value;
        }
        result.hasBlueToothBroadCastContent = true;
        return this;
      }
      public Builder ClearBlueToothBroadCastContent() {
        PrepareBuilder();
        result.hasBlueToothBroadCastContent = false;
        result.blueToothBroadCastContent_ = null;
        return this;
      }
    }
    static GetLoginQRCodeResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class NewAuthResponse : pb::GeneratedMessage<NewAuthResponse, NewAuthResponse.Builder> {
    private NewAuthResponse() { }
    private static readonly NewAuthResponse defaultInstance = new NewAuthResponse().MakeReadOnly();
    private static readonly string[] _newAuthResponseFieldNames = new string[] { "Auth", "Server", "User", "base", "int2" };
    private static readonly uint[] _newAuthResponseFieldTags = new uint[] { 26, 42, 34, 10, 16 };
    public static NewAuthResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NewAuthResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NewAuthResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewAuthResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NewAuthResponse, NewAuthResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_NewAuthResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int Int2FieldNumber = 2;
    private bool hasInt2;
    private int int2_;
    public bool HasInt2 {
      get { return hasInt2; }
    }
    public int Int2 {
      get { return int2_; }
    }
    
    public const int AuthFieldNumber = 3;
    private bool hasAuth;
    private global::mm.command.AuthData auth_;
    public bool HasAuth {
      get { return hasAuth; }
    }
    public global::mm.command.AuthData Auth {
      get { return auth_ ?? global::mm.command.AuthData.DefaultInstance; }
    }
    
    public const int UserFieldNumber = 4;
    private bool hasUser;
    private global::mm.command.AccountInfo user_;
    public bool HasUser {
      get { return hasUser; }
    }
    public global::mm.command.AccountInfo User {
      get { return user_ ?? global::mm.command.AccountInfo.DefaultInstance; }
    }
    
    public const int ServerFieldNumber = 5;
    private bool hasServer;
    private global::mm.command.ServerInfo server_;
    public bool HasServer {
      get { return hasServer; }
    }
    public global::mm.command.ServerInfo Server {
      get { return server_ ?? global::mm.command.ServerInfo.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasAuth) {
          if (!Auth.IsInitialized) return false;
        }
        if (HasUser) {
          if (!User.IsInitialized) return false;
        }
        if (HasServer) {
          if (!Server.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _newAuthResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasInt2) {
        output.WriteInt32(2, field_names[4], Int2);
      }
      if (hasAuth) {
        output.WriteMessage(3, field_names[0], Auth);
      }
      if (hasUser) {
        output.WriteMessage(4, field_names[2], User);
      }
      if (hasServer) {
        output.WriteMessage(5, field_names[1], Server);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasInt2) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Int2);
        }
        if (hasAuth) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Auth);
        }
        if (hasUser) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, User);
        }
        if (hasServer) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Server);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NewAuthResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewAuthResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewAuthResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NewAuthResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NewAuthResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewAuthResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NewAuthResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NewAuthResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NewAuthResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NewAuthResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NewAuthResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NewAuthResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<NewAuthResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NewAuthResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NewAuthResponse result;
      
      private NewAuthResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NewAuthResponse original = result;
          result = new NewAuthResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NewAuthResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.NewAuthResponse.Descriptor; }
      }
      
      public override NewAuthResponse DefaultInstanceForType {
        get { return global::mm.command.NewAuthResponse.DefaultInstance; }
      }
      
      public override NewAuthResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NewAuthResponse) {
          return MergeFrom((NewAuthResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NewAuthResponse other) {
        if (other == global::mm.command.NewAuthResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasInt2) {
          Int2 = other.Int2;
        }
        if (other.HasAuth) {
          MergeAuth(other.Auth);
        }
        if (other.HasUser) {
          MergeUser(other.User);
        }
        if (other.HasServer) {
          MergeServer(other.Server);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_newAuthResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _newAuthResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasInt2 = input.ReadInt32(ref result.int2_);
              break;
            }
            case 26: {
              global::mm.command.AuthData.Builder subBuilder = global::mm.command.AuthData.CreateBuilder();
              if (result.hasAuth) {
                subBuilder.MergeFrom(Auth);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Auth = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::mm.command.AccountInfo.Builder subBuilder = global::mm.command.AccountInfo.CreateBuilder();
              if (result.hasUser) {
                subBuilder.MergeFrom(User);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              User = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::mm.command.ServerInfo.Builder subBuilder = global::mm.command.ServerInfo.CreateBuilder();
              if (result.hasServer) {
                subBuilder.MergeFrom(Server);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Server = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasInt2 {
        get { return result.hasInt2; }
      }
      public int Int2 {
        get { return result.Int2; }
        set { SetInt2(value); }
      }
      public Builder SetInt2(int value) {
        PrepareBuilder();
        result.hasInt2 = true;
        result.int2_ = value;
        return this;
      }
      public Builder ClearInt2() {
        PrepareBuilder();
        result.hasInt2 = false;
        result.int2_ = 0;
        return this;
      }
      
      public bool HasAuth {
       get { return result.hasAuth; }
      }
      public global::mm.command.AuthData Auth {
        get { return result.Auth; }
        set { SetAuth(value); }
      }
      public Builder SetAuth(global::mm.command.AuthData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAuth = true;
        result.auth_ = value;
        return this;
      }
      public Builder SetAuth(global::mm.command.AuthData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAuth = true;
        result.auth_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAuth(global::mm.command.AuthData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAuth &&
            result.auth_ != global::mm.command.AuthData.DefaultInstance) {
            result.auth_ = global::mm.command.AuthData.CreateBuilder(result.auth_).MergeFrom(value).BuildPartial();
        } else {
          result.auth_ = value;
        }
        result.hasAuth = true;
        return this;
      }
      public Builder ClearAuth() {
        PrepareBuilder();
        result.hasAuth = false;
        result.auth_ = null;
        return this;
      }
      
      public bool HasUser {
       get { return result.hasUser; }
      }
      public global::mm.command.AccountInfo User {
        get { return result.User; }
        set { SetUser(value); }
      }
      public Builder SetUser(global::mm.command.AccountInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = value;
        return this;
      }
      public Builder SetUser(global::mm.command.AccountInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUser = true;
        result.user_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUser(global::mm.command.AccountInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUser &&
            result.user_ != global::mm.command.AccountInfo.DefaultInstance) {
            result.user_ = global::mm.command.AccountInfo.CreateBuilder(result.user_).MergeFrom(value).BuildPartial();
        } else {
          result.user_ = value;
        }
        result.hasUser = true;
        return this;
      }
      public Builder ClearUser() {
        PrepareBuilder();
        result.hasUser = false;
        result.user_ = null;
        return this;
      }
      
      public bool HasServer {
       get { return result.hasServer; }
      }
      public global::mm.command.ServerInfo Server {
        get { return result.Server; }
        set { SetServer(value); }
      }
      public Builder SetServer(global::mm.command.ServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServer = true;
        result.server_ = value;
        return this;
      }
      public Builder SetServer(global::mm.command.ServerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasServer = true;
        result.server_ = builderForValue.Build();
        return this;
      }
      public Builder MergeServer(global::mm.command.ServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasServer &&
            result.server_ != global::mm.command.ServerInfo.DefaultInstance) {
            result.server_ = global::mm.command.ServerInfo.CreateBuilder(result.server_).MergeFrom(value).BuildPartial();
        } else {
          result.server_ = value;
        }
        result.hasServer = true;
        return this;
      }
      public Builder ClearServer() {
        PrepareBuilder();
        result.hasServer = false;
        result.server_ = null;
        return this;
      }
    }
    static NewAuthResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CheckLoginQRCodeRequest : pb::GeneratedMessage<CheckLoginQRCodeRequest, CheckLoginQRCodeRequest.Builder> {
    private CheckLoginQRCodeRequest() { }
    private static readonly CheckLoginQRCodeRequest defaultInstance = new CheckLoginQRCodeRequest().MakeReadOnly();
    private static readonly string[] _checkLoginQRCodeRequestFieldNames = new string[] { "base", "opcode", "randomEncryKey", "timeStamp", "uuid" };
    private static readonly uint[] _checkLoginQRCodeRequestFieldTags = new uint[] { 10, 40, 18, 32, 26 };
    public static CheckLoginQRCodeRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CheckLoginQRCodeRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CheckLoginQRCodeRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CheckLoginQRCodeRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CheckLoginQRCodeRequest, CheckLoginQRCodeRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CheckLoginQRCodeRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int RandomEncryKeyFieldNumber = 2;
    private bool hasRandomEncryKey;
    private global::mm.command.SKBuiltinBuffer_t randomEncryKey_;
    public bool HasRandomEncryKey {
      get { return hasRandomEncryKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
      get { return randomEncryKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int UuidFieldNumber = 3;
    private bool hasUuid;
    private string uuid_ = "";
    public bool HasUuid {
      get { return hasUuid; }
    }
    public string Uuid {
      get { return uuid_; }
    }
    
    public const int TimeStampFieldNumber = 4;
    private bool hasTimeStamp;
    private uint timeStamp_;
    public bool HasTimeStamp {
      get { return hasTimeStamp; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeStamp {
      get { return timeStamp_; }
    }
    
    public const int OpcodeFieldNumber = 5;
    private bool hasOpcode;
    private uint opcode_;
    public bool HasOpcode {
      get { return hasOpcode; }
    }
    [global::System.CLSCompliant(false)]
    public uint Opcode {
      get { return opcode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasRandomEncryKey) return false;
        if (!hasUuid) return false;
        if (!hasTimeStamp) return false;
        if (!hasOpcode) return false;
        if (!Base.IsInitialized) return false;
        if (!RandomEncryKey.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _checkLoginQRCodeRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      if (hasRandomEncryKey) {
        output.WriteMessage(2, field_names[2], RandomEncryKey);
      }
      if (hasUuid) {
        output.WriteString(3, field_names[4], Uuid);
      }
      if (hasTimeStamp) {
        output.WriteUInt32(4, field_names[3], TimeStamp);
      }
      if (hasOpcode) {
        output.WriteUInt32(5, field_names[1], Opcode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasRandomEncryKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, RandomEncryKey);
        }
        if (hasUuid) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Uuid);
        }
        if (hasTimeStamp) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, TimeStamp);
        }
        if (hasOpcode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, Opcode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CheckLoginQRCodeRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheckLoginQRCodeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheckLoginQRCodeRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheckLoginQRCodeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheckLoginQRCodeRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheckLoginQRCodeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CheckLoginQRCodeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CheckLoginQRCodeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CheckLoginQRCodeRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheckLoginQRCodeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CheckLoginQRCodeRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CheckLoginQRCodeRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CheckLoginQRCodeRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CheckLoginQRCodeRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CheckLoginQRCodeRequest result;
      
      private CheckLoginQRCodeRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CheckLoginQRCodeRequest original = result;
          result = new CheckLoginQRCodeRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CheckLoginQRCodeRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.CheckLoginQRCodeRequest.Descriptor; }
      }
      
      public override CheckLoginQRCodeRequest DefaultInstanceForType {
        get { return global::mm.command.CheckLoginQRCodeRequest.DefaultInstance; }
      }
      
      public override CheckLoginQRCodeRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CheckLoginQRCodeRequest) {
          return MergeFrom((CheckLoginQRCodeRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CheckLoginQRCodeRequest other) {
        if (other == global::mm.command.CheckLoginQRCodeRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasRandomEncryKey) {
          MergeRandomEncryKey(other.RandomEncryKey);
        }
        if (other.HasUuid) {
          Uuid = other.Uuid;
        }
        if (other.HasTimeStamp) {
          TimeStamp = other.TimeStamp;
        }
        if (other.HasOpcode) {
          Opcode = other.Opcode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_checkLoginQRCodeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _checkLoginQRCodeRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasRandomEncryKey) {
                subBuilder.MergeFrom(RandomEncryKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RandomEncryKey = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              result.hasUuid = input.ReadString(ref result.uuid_);
              break;
            }
            case 32: {
              result.hasTimeStamp = input.ReadUInt32(ref result.timeStamp_);
              break;
            }
            case 40: {
              result.hasOpcode = input.ReadUInt32(ref result.opcode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasRandomEncryKey {
       get { return result.hasRandomEncryKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
        get { return result.RandomEncryKey; }
        set { SetRandomEncryKey(value); }
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = value;
        return this;
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRandomEncryKey &&
            result.randomEncryKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.randomEncryKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.randomEncryKey_).MergeFrom(value).BuildPartial();
        } else {
          result.randomEncryKey_ = value;
        }
        result.hasRandomEncryKey = true;
        return this;
      }
      public Builder ClearRandomEncryKey() {
        PrepareBuilder();
        result.hasRandomEncryKey = false;
        result.randomEncryKey_ = null;
        return this;
      }
      
      public bool HasUuid {
        get { return result.hasUuid; }
      }
      public string Uuid {
        get { return result.Uuid; }
        set { SetUuid(value); }
      }
      public Builder SetUuid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUuid = true;
        result.uuid_ = value;
        return this;
      }
      public Builder ClearUuid() {
        PrepareBuilder();
        result.hasUuid = false;
        result.uuid_ = "";
        return this;
      }
      
      public bool HasTimeStamp {
        get { return result.hasTimeStamp; }
      }
      [global::System.CLSCompliant(false)]
      public uint TimeStamp {
        get { return result.TimeStamp; }
        set { SetTimeStamp(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetTimeStamp(uint value) {
        PrepareBuilder();
        result.hasTimeStamp = true;
        result.timeStamp_ = value;
        return this;
      }
      public Builder ClearTimeStamp() {
        PrepareBuilder();
        result.hasTimeStamp = false;
        result.timeStamp_ = 0;
        return this;
      }
      
      public bool HasOpcode {
        get { return result.hasOpcode; }
      }
      [global::System.CLSCompliant(false)]
      public uint Opcode {
        get { return result.Opcode; }
        set { SetOpcode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpcode(uint value) {
        PrepareBuilder();
        result.hasOpcode = true;
        result.opcode_ = value;
        return this;
      }
      public Builder ClearOpcode() {
        PrepareBuilder();
        result.hasOpcode = false;
        result.opcode_ = 0;
        return this;
      }
    }
    static CheckLoginQRCodeRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CheckLoginQRCodeResponse : pb::GeneratedMessage<CheckLoginQRCodeResponse, CheckLoginQRCodeResponse.Builder> {
    private CheckLoginQRCodeResponse() { }
    private static readonly CheckLoginQRCodeResponse defaultInstance = new CheckLoginQRCodeResponse().MakeReadOnly();
    private static readonly string[] _checkLoginQRCodeResponseFieldNames = new string[] { "base", "notifyPkg" };
    private static readonly uint[] _checkLoginQRCodeResponseFieldTags = new uint[] { 10, 26 };
    public static CheckLoginQRCodeResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CheckLoginQRCodeResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CheckLoginQRCodeResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CheckLoginQRCodeResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CheckLoginQRCodeResponse, CheckLoginQRCodeResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CheckLoginQRCodeResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int NotifyPkgFieldNumber = 3;
    private bool hasNotifyPkg;
    private global::mm.command.LoginQRCodeNotifyPkg notifyPkg_;
    public bool HasNotifyPkg {
      get { return hasNotifyPkg; }
    }
    public global::mm.command.LoginQRCodeNotifyPkg NotifyPkg {
      get { return notifyPkg_ ?? global::mm.command.LoginQRCodeNotifyPkg.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasNotifyPkg) {
          if (!NotifyPkg.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _checkLoginQRCodeResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      if (hasNotifyPkg) {
        output.WriteMessage(3, field_names[1], NotifyPkg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasNotifyPkg) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, NotifyPkg);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CheckLoginQRCodeResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheckLoginQRCodeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheckLoginQRCodeResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CheckLoginQRCodeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CheckLoginQRCodeResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheckLoginQRCodeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CheckLoginQRCodeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CheckLoginQRCodeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CheckLoginQRCodeResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CheckLoginQRCodeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CheckLoginQRCodeResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CheckLoginQRCodeResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CheckLoginQRCodeResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CheckLoginQRCodeResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CheckLoginQRCodeResponse result;
      
      private CheckLoginQRCodeResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CheckLoginQRCodeResponse original = result;
          result = new CheckLoginQRCodeResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CheckLoginQRCodeResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.CheckLoginQRCodeResponse.Descriptor; }
      }
      
      public override CheckLoginQRCodeResponse DefaultInstanceForType {
        get { return global::mm.command.CheckLoginQRCodeResponse.DefaultInstance; }
      }
      
      public override CheckLoginQRCodeResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CheckLoginQRCodeResponse) {
          return MergeFrom((CheckLoginQRCodeResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CheckLoginQRCodeResponse other) {
        if (other == global::mm.command.CheckLoginQRCodeResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasNotifyPkg) {
          MergeNotifyPkg(other.NotifyPkg);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_checkLoginQRCodeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _checkLoginQRCodeResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::mm.command.LoginQRCodeNotifyPkg.Builder subBuilder = global::mm.command.LoginQRCodeNotifyPkg.CreateBuilder();
              if (result.hasNotifyPkg) {
                subBuilder.MergeFrom(NotifyPkg);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NotifyPkg = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasNotifyPkg {
       get { return result.hasNotifyPkg; }
      }
      public global::mm.command.LoginQRCodeNotifyPkg NotifyPkg {
        get { return result.NotifyPkg; }
        set { SetNotifyPkg(value); }
      }
      public Builder SetNotifyPkg(global::mm.command.LoginQRCodeNotifyPkg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNotifyPkg = true;
        result.notifyPkg_ = value;
        return this;
      }
      public Builder SetNotifyPkg(global::mm.command.LoginQRCodeNotifyPkg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNotifyPkg = true;
        result.notifyPkg_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNotifyPkg(global::mm.command.LoginQRCodeNotifyPkg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNotifyPkg &&
            result.notifyPkg_ != global::mm.command.LoginQRCodeNotifyPkg.DefaultInstance) {
            result.notifyPkg_ = global::mm.command.LoginQRCodeNotifyPkg.CreateBuilder(result.notifyPkg_).MergeFrom(value).BuildPartial();
        } else {
          result.notifyPkg_ = value;
        }
        result.hasNotifyPkg = true;
        return this;
      }
      public Builder ClearNotifyPkg() {
        PrepareBuilder();
        result.hasNotifyPkg = false;
        result.notifyPkg_ = null;
        return this;
      }
    }
    static CheckLoginQRCodeResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TenpayRequest : pb::GeneratedMessage<TenpayRequest, TenpayRequest.Builder> {
    private TenpayRequest() { }
    private static readonly TenpayRequest defaultInstance = new TenpayRequest().MakeReadOnly();
    private static readonly string[] _tenpayRequestFieldNames = new string[] { "CmdAux", "CmdID", "CmdStr", "Scene", "base" };
    private static readonly uint[] _tenpayRequestFieldTags = new uint[] { 42, 16, 34, 24, 10 };
    public static TenpayRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TenpayRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TenpayRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_TenpayRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TenpayRequest, TenpayRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_TenpayRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int CmdIDFieldNumber = 2;
    private bool hasCmdID;
    private int cmdID_;
    public bool HasCmdID {
      get { return hasCmdID; }
    }
    public int CmdID {
      get { return cmdID_; }
    }
    
    public const int SceneFieldNumber = 3;
    private bool hasScene;
    private int scene_;
    public bool HasScene {
      get { return hasScene; }
    }
    public int Scene {
      get { return scene_; }
    }
    
    public const int CmdStrFieldNumber = 4;
    private bool hasCmdStr;
    private global::mm.command.SKBuiltinBuffer_t cmdStr_;
    public bool HasCmdStr {
      get { return hasCmdStr; }
    }
    public global::mm.command.SKBuiltinBuffer_t CmdStr {
      get { return cmdStr_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int CmdAuxFieldNumber = 5;
    private bool hasCmdAux;
    private global::mm.command.SKBuiltinBuffer_t cmdAux_;
    public bool HasCmdAux {
      get { return hasCmdAux; }
    }
    public global::mm.command.SKBuiltinBuffer_t CmdAux {
      get { return cmdAux_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasCmdID) return false;
        if (!hasScene) return false;
        if (!hasCmdStr) return false;
        if (!Base.IsInitialized) return false;
        if (!CmdStr.IsInitialized) return false;
        if (HasCmdAux) {
          if (!CmdAux.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tenpayRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[4], Base);
      }
      if (hasCmdID) {
        output.WriteInt32(2, field_names[1], CmdID);
      }
      if (hasScene) {
        output.WriteInt32(3, field_names[3], Scene);
      }
      if (hasCmdStr) {
        output.WriteMessage(4, field_names[2], CmdStr);
      }
      if (hasCmdAux) {
        output.WriteMessage(5, field_names[0], CmdAux);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasCmdID) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, CmdID);
        }
        if (hasScene) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Scene);
        }
        if (hasCmdStr) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, CmdStr);
        }
        if (hasCmdAux) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, CmdAux);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TenpayRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TenpayRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TenpayRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TenpayRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TenpayRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TenpayRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TenpayRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TenpayRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TenpayRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TenpayRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TenpayRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TenpayRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TenpayRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TenpayRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TenpayRequest result;
      
      private TenpayRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          TenpayRequest original = result;
          result = new TenpayRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TenpayRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.TenpayRequest.Descriptor; }
      }
      
      public override TenpayRequest DefaultInstanceForType {
        get { return global::mm.command.TenpayRequest.DefaultInstance; }
      }
      
      public override TenpayRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TenpayRequest) {
          return MergeFrom((TenpayRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TenpayRequest other) {
        if (other == global::mm.command.TenpayRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCmdID) {
          CmdID = other.CmdID;
        }
        if (other.HasScene) {
          Scene = other.Scene;
        }
        if (other.HasCmdStr) {
          MergeCmdStr(other.CmdStr);
        }
        if (other.HasCmdAux) {
          MergeCmdAux(other.CmdAux);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tenpayRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tenpayRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasCmdID = input.ReadInt32(ref result.cmdID_);
              break;
            }
            case 24: {
              result.hasScene = input.ReadInt32(ref result.scene_);
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasCmdStr) {
                subBuilder.MergeFrom(CmdStr);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CmdStr = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasCmdAux) {
                subBuilder.MergeFrom(CmdAux);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CmdAux = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCmdID {
        get { return result.hasCmdID; }
      }
      public int CmdID {
        get { return result.CmdID; }
        set { SetCmdID(value); }
      }
      public Builder SetCmdID(int value) {
        PrepareBuilder();
        result.hasCmdID = true;
        result.cmdID_ = value;
        return this;
      }
      public Builder ClearCmdID() {
        PrepareBuilder();
        result.hasCmdID = false;
        result.cmdID_ = 0;
        return this;
      }
      
      public bool HasScene {
        get { return result.hasScene; }
      }
      public int Scene {
        get { return result.Scene; }
        set { SetScene(value); }
      }
      public Builder SetScene(int value) {
        PrepareBuilder();
        result.hasScene = true;
        result.scene_ = value;
        return this;
      }
      public Builder ClearScene() {
        PrepareBuilder();
        result.hasScene = false;
        result.scene_ = 0;
        return this;
      }
      
      public bool HasCmdStr {
       get { return result.hasCmdStr; }
      }
      public global::mm.command.SKBuiltinBuffer_t CmdStr {
        get { return result.CmdStr; }
        set { SetCmdStr(value); }
      }
      public Builder SetCmdStr(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCmdStr = true;
        result.cmdStr_ = value;
        return this;
      }
      public Builder SetCmdStr(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCmdStr = true;
        result.cmdStr_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCmdStr(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCmdStr &&
            result.cmdStr_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.cmdStr_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.cmdStr_).MergeFrom(value).BuildPartial();
        } else {
          result.cmdStr_ = value;
        }
        result.hasCmdStr = true;
        return this;
      }
      public Builder ClearCmdStr() {
        PrepareBuilder();
        result.hasCmdStr = false;
        result.cmdStr_ = null;
        return this;
      }
      
      public bool HasCmdAux {
       get { return result.hasCmdAux; }
      }
      public global::mm.command.SKBuiltinBuffer_t CmdAux {
        get { return result.CmdAux; }
        set { SetCmdAux(value); }
      }
      public Builder SetCmdAux(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCmdAux = true;
        result.cmdAux_ = value;
        return this;
      }
      public Builder SetCmdAux(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCmdAux = true;
        result.cmdAux_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCmdAux(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCmdAux &&
            result.cmdAux_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.cmdAux_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.cmdAux_).MergeFrom(value).BuildPartial();
        } else {
          result.cmdAux_ = value;
        }
        result.hasCmdAux = true;
        return this;
      }
      public Builder ClearCmdAux() {
        PrepareBuilder();
        result.hasCmdAux = false;
        result.cmdAux_ = null;
        return this;
      }
    }
    static TenpayRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TenpayResponse : pb::GeneratedMessage<TenpayResponse, TenpayResponse.Builder> {
    private TenpayResponse() { }
    private static readonly TenpayResponse defaultInstance = new TenpayResponse().MakeReadOnly();
    private static readonly string[] _tenpayResponseFieldNames = new string[] { "CmdStr", "base", "item3", "item4", "item5", "item6", "item7" };
    private static readonly uint[] _tenpayResponseFieldTags = new uint[] { 18, 10, 24, 34, 40, 48, 58 };
    public static TenpayResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TenpayResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TenpayResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_TenpayResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TenpayResponse, TenpayResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_TenpayResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int CmdStrFieldNumber = 2;
    private bool hasCmdStr;
    private global::mm.command.SKBuiltinBuffer_t cmdStr_;
    public bool HasCmdStr {
      get { return hasCmdStr; }
    }
    public global::mm.command.SKBuiltinBuffer_t CmdStr {
      get { return cmdStr_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int Item3FieldNumber = 3;
    private bool hasItem3;
    private int item3_;
    public bool HasItem3 {
      get { return hasItem3; }
    }
    public int Item3 {
      get { return item3_; }
    }
    
    public const int Item4FieldNumber = 4;
    private bool hasItem4;
    private string item4_ = "";
    public bool HasItem4 {
      get { return hasItem4; }
    }
    public string Item4 {
      get { return item4_; }
    }
    
    public const int Item5FieldNumber = 5;
    private bool hasItem5;
    private int item5_;
    public bool HasItem5 {
      get { return hasItem5; }
    }
    public int Item5 {
      get { return item5_; }
    }
    
    public const int Item6FieldNumber = 6;
    private bool hasItem6;
    private int item6_;
    public bool HasItem6 {
      get { return hasItem6; }
    }
    public int Item6 {
      get { return item6_; }
    }
    
    public const int Item7FieldNumber = 7;
    private bool hasItem7;
    private string item7_ = "";
    public bool HasItem7 {
      get { return hasItem7; }
    }
    public string Item7 {
      get { return item7_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasCmdStr) {
          if (!CmdStr.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tenpayResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[1], Base);
      }
      if (hasCmdStr) {
        output.WriteMessage(2, field_names[0], CmdStr);
      }
      if (hasItem3) {
        output.WriteInt32(3, field_names[2], Item3);
      }
      if (hasItem4) {
        output.WriteString(4, field_names[3], Item4);
      }
      if (hasItem5) {
        output.WriteInt32(5, field_names[4], Item5);
      }
      if (hasItem6) {
        output.WriteInt32(6, field_names[5], Item6);
      }
      if (hasItem7) {
        output.WriteString(7, field_names[6], Item7);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasCmdStr) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, CmdStr);
        }
        if (hasItem3) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Item3);
        }
        if (hasItem4) {
          size += pb::CodedOutputStream.ComputeStringSize(4, Item4);
        }
        if (hasItem5) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Item5);
        }
        if (hasItem6) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Item6);
        }
        if (hasItem7) {
          size += pb::CodedOutputStream.ComputeStringSize(7, Item7);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TenpayResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TenpayResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TenpayResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TenpayResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TenpayResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TenpayResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TenpayResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TenpayResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TenpayResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TenpayResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TenpayResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TenpayResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TenpayResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TenpayResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TenpayResponse result;
      
      private TenpayResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          TenpayResponse original = result;
          result = new TenpayResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TenpayResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.TenpayResponse.Descriptor; }
      }
      
      public override TenpayResponse DefaultInstanceForType {
        get { return global::mm.command.TenpayResponse.DefaultInstance; }
      }
      
      public override TenpayResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TenpayResponse) {
          return MergeFrom((TenpayResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TenpayResponse other) {
        if (other == global::mm.command.TenpayResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCmdStr) {
          MergeCmdStr(other.CmdStr);
        }
        if (other.HasItem3) {
          Item3 = other.Item3;
        }
        if (other.HasItem4) {
          Item4 = other.Item4;
        }
        if (other.HasItem5) {
          Item5 = other.Item5;
        }
        if (other.HasItem6) {
          Item6 = other.Item6;
        }
        if (other.HasItem7) {
          Item7 = other.Item7;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tenpayResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tenpayResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasCmdStr) {
                subBuilder.MergeFrom(CmdStr);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CmdStr = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasItem3 = input.ReadInt32(ref result.item3_);
              break;
            }
            case 34: {
              result.hasItem4 = input.ReadString(ref result.item4_);
              break;
            }
            case 40: {
              result.hasItem5 = input.ReadInt32(ref result.item5_);
              break;
            }
            case 48: {
              result.hasItem6 = input.ReadInt32(ref result.item6_);
              break;
            }
            case 58: {
              result.hasItem7 = input.ReadString(ref result.item7_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCmdStr {
       get { return result.hasCmdStr; }
      }
      public global::mm.command.SKBuiltinBuffer_t CmdStr {
        get { return result.CmdStr; }
        set { SetCmdStr(value); }
      }
      public Builder SetCmdStr(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCmdStr = true;
        result.cmdStr_ = value;
        return this;
      }
      public Builder SetCmdStr(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCmdStr = true;
        result.cmdStr_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCmdStr(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCmdStr &&
            result.cmdStr_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.cmdStr_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.cmdStr_).MergeFrom(value).BuildPartial();
        } else {
          result.cmdStr_ = value;
        }
        result.hasCmdStr = true;
        return this;
      }
      public Builder ClearCmdStr() {
        PrepareBuilder();
        result.hasCmdStr = false;
        result.cmdStr_ = null;
        return this;
      }
      
      public bool HasItem3 {
        get { return result.hasItem3; }
      }
      public int Item3 {
        get { return result.Item3; }
        set { SetItem3(value); }
      }
      public Builder SetItem3(int value) {
        PrepareBuilder();
        result.hasItem3 = true;
        result.item3_ = value;
        return this;
      }
      public Builder ClearItem3() {
        PrepareBuilder();
        result.hasItem3 = false;
        result.item3_ = 0;
        return this;
      }
      
      public bool HasItem4 {
        get { return result.hasItem4; }
      }
      public string Item4 {
        get { return result.Item4; }
        set { SetItem4(value); }
      }
      public Builder SetItem4(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem4 = true;
        result.item4_ = value;
        return this;
      }
      public Builder ClearItem4() {
        PrepareBuilder();
        result.hasItem4 = false;
        result.item4_ = "";
        return this;
      }
      
      public bool HasItem5 {
        get { return result.hasItem5; }
      }
      public int Item5 {
        get { return result.Item5; }
        set { SetItem5(value); }
      }
      public Builder SetItem5(int value) {
        PrepareBuilder();
        result.hasItem5 = true;
        result.item5_ = value;
        return this;
      }
      public Builder ClearItem5() {
        PrepareBuilder();
        result.hasItem5 = false;
        result.item5_ = 0;
        return this;
      }
      
      public bool HasItem6 {
        get { return result.hasItem6; }
      }
      public int Item6 {
        get { return result.Item6; }
        set { SetItem6(value); }
      }
      public Builder SetItem6(int value) {
        PrepareBuilder();
        result.hasItem6 = true;
        result.item6_ = value;
        return this;
      }
      public Builder ClearItem6() {
        PrepareBuilder();
        result.hasItem6 = false;
        result.item6_ = 0;
        return this;
      }
      
      public bool HasItem7 {
        get { return result.hasItem7; }
      }
      public string Item7 {
        get { return result.Item7; }
        set { SetItem7(value); }
      }
      public Builder SetItem7(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItem7 = true;
        result.item7_ = value;
        return this;
      }
      public Builder ClearItem7() {
        PrepareBuilder();
        result.hasItem7 = false;
        result.item7_ = "";
        return this;
      }
    }
    static TenpayResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateChatRoomRequest : pb::GeneratedMessage<CreateChatRoomRequest, CreateChatRoomRequest.Builder> {
    private CreateChatRoomRequest() { }
    private static readonly CreateChatRoomRequest defaultInstance = new CreateChatRoomRequest().MakeReadOnly();
    private static readonly string[] _createChatRoomRequestFieldNames = new string[] { "MemberCount", "Members", "Topic", "base" };
    private static readonly uint[] _createChatRoomRequestFieldTags = new uint[] { 24, 34, 18, 10 };
    public static CreateChatRoomRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateChatRoomRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateChatRoomRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CreateChatRoomRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateChatRoomRequest, CreateChatRoomRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CreateChatRoomRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int TopicFieldNumber = 2;
    private bool hasTopic;
    private global::mm.command.SKBuiltinString_t topic_;
    public bool HasTopic {
      get { return hasTopic; }
    }
    public global::mm.command.SKBuiltinString_t Topic {
      get { return topic_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int MemberCountFieldNumber = 3;
    private bool hasMemberCount;
    private int memberCount_;
    public bool HasMemberCount {
      get { return hasMemberCount; }
    }
    public int MemberCount {
      get { return memberCount_; }
    }
    
    public const int MembersFieldNumber = 4;
    private pbc::PopsicleList<global::mm.command.ChatRoomItem> members_ = new pbc::PopsicleList<global::mm.command.ChatRoomItem>();
    public scg::IList<global::mm.command.ChatRoomItem> MembersList {
      get { return members_; }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public global::mm.command.ChatRoomItem GetMembers(int index) {
      return members_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasTopic) return false;
        if (!hasMemberCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.ChatRoomItem element in MembersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createChatRoomRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasTopic) {
        output.WriteMessage(2, field_names[2], Topic);
      }
      if (hasMemberCount) {
        output.WriteInt32(3, field_names[0], MemberCount);
      }
      if (members_.Count > 0) {
        output.WriteMessageArray(4, field_names[1], members_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasTopic) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Topic);
        }
        if (hasMemberCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, MemberCount);
        }
        foreach (global::mm.command.ChatRoomItem element in MembersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateChatRoomRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChatRoomRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChatRoomRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChatRoomRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChatRoomRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChatRoomRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateChatRoomRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateChatRoomRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateChatRoomRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChatRoomRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateChatRoomRequest MakeReadOnly() {
      members_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateChatRoomRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateChatRoomRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateChatRoomRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateChatRoomRequest result;
      
      private CreateChatRoomRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateChatRoomRequest original = result;
          result = new CreateChatRoomRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateChatRoomRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.CreateChatRoomRequest.Descriptor; }
      }
      
      public override CreateChatRoomRequest DefaultInstanceForType {
        get { return global::mm.command.CreateChatRoomRequest.DefaultInstance; }
      }
      
      public override CreateChatRoomRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateChatRoomRequest) {
          return MergeFrom((CreateChatRoomRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateChatRoomRequest other) {
        if (other == global::mm.command.CreateChatRoomRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasTopic) {
          MergeTopic(other.Topic);
        }
        if (other.HasMemberCount) {
          MemberCount = other.MemberCount;
        }
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createChatRoomRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createChatRoomRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasTopic) {
                subBuilder.MergeFrom(Topic);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Topic = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasMemberCount = input.ReadInt32(ref result.memberCount_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.members_, global::mm.command.ChatRoomItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasTopic {
       get { return result.hasTopic; }
      }
      public global::mm.command.SKBuiltinString_t Topic {
        get { return result.Topic; }
        set { SetTopic(value); }
      }
      public Builder SetTopic(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTopic = true;
        result.topic_ = value;
        return this;
      }
      public Builder SetTopic(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTopic = true;
        result.topic_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTopic(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTopic &&
            result.topic_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.topic_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.topic_).MergeFrom(value).BuildPartial();
        } else {
          result.topic_ = value;
        }
        result.hasTopic = true;
        return this;
      }
      public Builder ClearTopic() {
        PrepareBuilder();
        result.hasTopic = false;
        result.topic_ = null;
        return this;
      }
      
      public bool HasMemberCount {
        get { return result.hasMemberCount; }
      }
      public int MemberCount {
        get { return result.MemberCount; }
        set { SetMemberCount(value); }
      }
      public Builder SetMemberCount(int value) {
        PrepareBuilder();
        result.hasMemberCount = true;
        result.memberCount_ = value;
        return this;
      }
      public Builder ClearMemberCount() {
        PrepareBuilder();
        result.hasMemberCount = false;
        result.memberCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.ChatRoomItem> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public global::mm.command.ChatRoomItem GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, global::mm.command.ChatRoomItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder SetMembers(int index, global::mm.command.ChatRoomItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMembers(global::mm.command.ChatRoomItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddMembers(global::mm.command.ChatRoomItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<global::mm.command.ChatRoomItem> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
    }
    static CreateChatRoomRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CreateChatRoomResponse : pb::GeneratedMessage<CreateChatRoomResponse, CreateChatRoomResponse.Builder> {
    private CreateChatRoomResponse() { }
    private static readonly CreateChatRoomResponse defaultInstance = new CreateChatRoomResponse().MakeReadOnly();
    private static readonly string[] _createChatRoomResponseFieldNames = new string[] { "BigHeadImgUrl", "ChatRoomName", "ImgBuf", "MemberCount", "Members", "PYInitial", "QuanPin", "SmallHeadImgUrl", "Topic", "base" };
    private static readonly uint[] _createChatRoomResponseFieldTags = new uint[] { 74, 58, 66, 40, 50, 26, 34, 82, 18, 10 };
    public static CreateChatRoomResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CreateChatRoomResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CreateChatRoomResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CreateChatRoomResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CreateChatRoomResponse, CreateChatRoomResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_CreateChatRoomResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int TopicFieldNumber = 2;
    private bool hasTopic;
    private global::mm.command.SKBuiltinString_t topic_;
    public bool HasTopic {
      get { return hasTopic; }
    }
    public global::mm.command.SKBuiltinString_t Topic {
      get { return topic_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int PYInitialFieldNumber = 3;
    private bool hasPYInitial;
    private global::mm.command.SKBuiltinString_t pYInitial_;
    public bool HasPYInitial {
      get { return hasPYInitial; }
    }
    public global::mm.command.SKBuiltinString_t PYInitial {
      get { return pYInitial_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int QuanPinFieldNumber = 4;
    private bool hasQuanPin;
    private global::mm.command.SKBuiltinString_t quanPin_;
    public bool HasQuanPin {
      get { return hasQuanPin; }
    }
    public global::mm.command.SKBuiltinString_t QuanPin {
      get { return quanPin_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int MemberCountFieldNumber = 5;
    private bool hasMemberCount;
    private int memberCount_;
    public bool HasMemberCount {
      get { return hasMemberCount; }
    }
    public int MemberCount {
      get { return memberCount_; }
    }
    
    public const int MembersFieldNumber = 6;
    private pbc::PopsicleList<global::mm.command.MemberInfo> members_ = new pbc::PopsicleList<global::mm.command.MemberInfo>();
    public scg::IList<global::mm.command.MemberInfo> MembersList {
      get { return members_; }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public global::mm.command.MemberInfo GetMembers(int index) {
      return members_[index];
    }
    
    public const int ChatRoomNameFieldNumber = 7;
    private bool hasChatRoomName;
    private global::mm.command.SKBuiltinString_t chatRoomName_;
    public bool HasChatRoomName {
      get { return hasChatRoomName; }
    }
    public global::mm.command.SKBuiltinString_t ChatRoomName {
      get { return chatRoomName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public const int ImgBufFieldNumber = 8;
    private bool hasImgBuf;
    private global::mm.command.SKBuiltinBuffer_t imgBuf_;
    public bool HasImgBuf {
      get { return hasImgBuf; }
    }
    public global::mm.command.SKBuiltinBuffer_t ImgBuf {
      get { return imgBuf_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int BigHeadImgUrlFieldNumber = 9;
    private bool hasBigHeadImgUrl;
    private string bigHeadImgUrl_ = "";
    public bool HasBigHeadImgUrl {
      get { return hasBigHeadImgUrl; }
    }
    public string BigHeadImgUrl {
      get { return bigHeadImgUrl_; }
    }
    
    public const int SmallHeadImgUrlFieldNumber = 10;
    private bool hasSmallHeadImgUrl;
    private string smallHeadImgUrl_ = "";
    public bool HasSmallHeadImgUrl {
      get { return hasSmallHeadImgUrl; }
    }
    public string SmallHeadImgUrl {
      get { return smallHeadImgUrl_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasImgBuf) {
          if (!ImgBuf.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _createChatRoomResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[9], Base);
      }
      if (hasTopic) {
        output.WriteMessage(2, field_names[8], Topic);
      }
      if (hasPYInitial) {
        output.WriteMessage(3, field_names[5], PYInitial);
      }
      if (hasQuanPin) {
        output.WriteMessage(4, field_names[6], QuanPin);
      }
      if (hasMemberCount) {
        output.WriteInt32(5, field_names[3], MemberCount);
      }
      if (members_.Count > 0) {
        output.WriteMessageArray(6, field_names[4], members_);
      }
      if (hasChatRoomName) {
        output.WriteMessage(7, field_names[1], ChatRoomName);
      }
      if (hasImgBuf) {
        output.WriteMessage(8, field_names[2], ImgBuf);
      }
      if (hasBigHeadImgUrl) {
        output.WriteString(9, field_names[0], BigHeadImgUrl);
      }
      if (hasSmallHeadImgUrl) {
        output.WriteString(10, field_names[7], SmallHeadImgUrl);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasTopic) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Topic);
        }
        if (hasPYInitial) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, PYInitial);
        }
        if (hasQuanPin) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, QuanPin);
        }
        if (hasMemberCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, MemberCount);
        }
        foreach (global::mm.command.MemberInfo element in MembersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (hasChatRoomName) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, ChatRoomName);
        }
        if (hasImgBuf) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, ImgBuf);
        }
        if (hasBigHeadImgUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(9, BigHeadImgUrl);
        }
        if (hasSmallHeadImgUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(10, SmallHeadImgUrl);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static CreateChatRoomResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChatRoomResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChatRoomResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CreateChatRoomResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CreateChatRoomResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChatRoomResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CreateChatRoomResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CreateChatRoomResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CreateChatRoomResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CreateChatRoomResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CreateChatRoomResponse MakeReadOnly() {
      members_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CreateChatRoomResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CreateChatRoomResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CreateChatRoomResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CreateChatRoomResponse result;
      
      private CreateChatRoomResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          CreateChatRoomResponse original = result;
          result = new CreateChatRoomResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CreateChatRoomResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.CreateChatRoomResponse.Descriptor; }
      }
      
      public override CreateChatRoomResponse DefaultInstanceForType {
        get { return global::mm.command.CreateChatRoomResponse.DefaultInstance; }
      }
      
      public override CreateChatRoomResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CreateChatRoomResponse) {
          return MergeFrom((CreateChatRoomResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CreateChatRoomResponse other) {
        if (other == global::mm.command.CreateChatRoomResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasTopic) {
          MergeTopic(other.Topic);
        }
        if (other.HasPYInitial) {
          MergePYInitial(other.PYInitial);
        }
        if (other.HasQuanPin) {
          MergeQuanPin(other.QuanPin);
        }
        if (other.HasMemberCount) {
          MemberCount = other.MemberCount;
        }
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        if (other.HasChatRoomName) {
          MergeChatRoomName(other.ChatRoomName);
        }
        if (other.HasImgBuf) {
          MergeImgBuf(other.ImgBuf);
        }
        if (other.HasBigHeadImgUrl) {
          BigHeadImgUrl = other.BigHeadImgUrl;
        }
        if (other.HasSmallHeadImgUrl) {
          SmallHeadImgUrl = other.SmallHeadImgUrl;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_createChatRoomResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _createChatRoomResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasTopic) {
                subBuilder.MergeFrom(Topic);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Topic = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasPYInitial) {
                subBuilder.MergeFrom(PYInitial);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PYInitial = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasQuanPin) {
                subBuilder.MergeFrom(QuanPin);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              QuanPin = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasMemberCount = input.ReadInt32(ref result.memberCount_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.members_, global::mm.command.MemberInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasChatRoomName) {
                subBuilder.MergeFrom(ChatRoomName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChatRoomName = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasImgBuf) {
                subBuilder.MergeFrom(ImgBuf);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ImgBuf = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              result.hasBigHeadImgUrl = input.ReadString(ref result.bigHeadImgUrl_);
              break;
            }
            case 82: {
              result.hasSmallHeadImgUrl = input.ReadString(ref result.smallHeadImgUrl_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasTopic {
       get { return result.hasTopic; }
      }
      public global::mm.command.SKBuiltinString_t Topic {
        get { return result.Topic; }
        set { SetTopic(value); }
      }
      public Builder SetTopic(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTopic = true;
        result.topic_ = value;
        return this;
      }
      public Builder SetTopic(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTopic = true;
        result.topic_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTopic(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTopic &&
            result.topic_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.topic_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.topic_).MergeFrom(value).BuildPartial();
        } else {
          result.topic_ = value;
        }
        result.hasTopic = true;
        return this;
      }
      public Builder ClearTopic() {
        PrepareBuilder();
        result.hasTopic = false;
        result.topic_ = null;
        return this;
      }
      
      public bool HasPYInitial {
       get { return result.hasPYInitial; }
      }
      public global::mm.command.SKBuiltinString_t PYInitial {
        get { return result.PYInitial; }
        set { SetPYInitial(value); }
      }
      public Builder SetPYInitial(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPYInitial = true;
        result.pYInitial_ = value;
        return this;
      }
      public Builder SetPYInitial(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPYInitial = true;
        result.pYInitial_ = builderForValue.Build();
        return this;
      }
      public Builder MergePYInitial(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPYInitial &&
            result.pYInitial_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.pYInitial_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.pYInitial_).MergeFrom(value).BuildPartial();
        } else {
          result.pYInitial_ = value;
        }
        result.hasPYInitial = true;
        return this;
      }
      public Builder ClearPYInitial() {
        PrepareBuilder();
        result.hasPYInitial = false;
        result.pYInitial_ = null;
        return this;
      }
      
      public bool HasQuanPin {
       get { return result.hasQuanPin; }
      }
      public global::mm.command.SKBuiltinString_t QuanPin {
        get { return result.QuanPin; }
        set { SetQuanPin(value); }
      }
      public Builder SetQuanPin(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQuanPin = true;
        result.quanPin_ = value;
        return this;
      }
      public Builder SetQuanPin(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasQuanPin = true;
        result.quanPin_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQuanPin(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasQuanPin &&
            result.quanPin_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.quanPin_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.quanPin_).MergeFrom(value).BuildPartial();
        } else {
          result.quanPin_ = value;
        }
        result.hasQuanPin = true;
        return this;
      }
      public Builder ClearQuanPin() {
        PrepareBuilder();
        result.hasQuanPin = false;
        result.quanPin_ = null;
        return this;
      }
      
      public bool HasMemberCount {
        get { return result.hasMemberCount; }
      }
      public int MemberCount {
        get { return result.MemberCount; }
        set { SetMemberCount(value); }
      }
      public Builder SetMemberCount(int value) {
        PrepareBuilder();
        result.hasMemberCount = true;
        result.memberCount_ = value;
        return this;
      }
      public Builder ClearMemberCount() {
        PrepareBuilder();
        result.hasMemberCount = false;
        result.memberCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.MemberInfo> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public global::mm.command.MemberInfo GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, global::mm.command.MemberInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder SetMembers(int index, global::mm.command.MemberInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMembers(global::mm.command.MemberInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddMembers(global::mm.command.MemberInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<global::mm.command.MemberInfo> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
      
      public bool HasChatRoomName {
       get { return result.hasChatRoomName; }
      }
      public global::mm.command.SKBuiltinString_t ChatRoomName {
        get { return result.ChatRoomName; }
        set { SetChatRoomName(value); }
      }
      public Builder SetChatRoomName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChatRoomName = true;
        result.chatRoomName_ = value;
        return this;
      }
      public Builder SetChatRoomName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChatRoomName = true;
        result.chatRoomName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChatRoomName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChatRoomName &&
            result.chatRoomName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.chatRoomName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.chatRoomName_).MergeFrom(value).BuildPartial();
        } else {
          result.chatRoomName_ = value;
        }
        result.hasChatRoomName = true;
        return this;
      }
      public Builder ClearChatRoomName() {
        PrepareBuilder();
        result.hasChatRoomName = false;
        result.chatRoomName_ = null;
        return this;
      }
      
      public bool HasImgBuf {
       get { return result.hasImgBuf; }
      }
      public global::mm.command.SKBuiltinBuffer_t ImgBuf {
        get { return result.ImgBuf; }
        set { SetImgBuf(value); }
      }
      public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasImgBuf = true;
        result.imgBuf_ = value;
        return this;
      }
      public Builder SetImgBuf(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasImgBuf = true;
        result.imgBuf_ = builderForValue.Build();
        return this;
      }
      public Builder MergeImgBuf(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasImgBuf &&
            result.imgBuf_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.imgBuf_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.imgBuf_).MergeFrom(value).BuildPartial();
        } else {
          result.imgBuf_ = value;
        }
        result.hasImgBuf = true;
        return this;
      }
      public Builder ClearImgBuf() {
        PrepareBuilder();
        result.hasImgBuf = false;
        result.imgBuf_ = null;
        return this;
      }
      
      public bool HasBigHeadImgUrl {
        get { return result.hasBigHeadImgUrl; }
      }
      public string BigHeadImgUrl {
        get { return result.BigHeadImgUrl; }
        set { SetBigHeadImgUrl(value); }
      }
      public Builder SetBigHeadImgUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBigHeadImgUrl = true;
        result.bigHeadImgUrl_ = value;
        return this;
      }
      public Builder ClearBigHeadImgUrl() {
        PrepareBuilder();
        result.hasBigHeadImgUrl = false;
        result.bigHeadImgUrl_ = "";
        return this;
      }
      
      public bool HasSmallHeadImgUrl {
        get { return result.hasSmallHeadImgUrl; }
      }
      public string SmallHeadImgUrl {
        get { return result.SmallHeadImgUrl; }
        set { SetSmallHeadImgUrl(value); }
      }
      public Builder SetSmallHeadImgUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSmallHeadImgUrl = true;
        result.smallHeadImgUrl_ = value;
        return this;
      }
      public Builder ClearSmallHeadImgUrl() {
        PrepareBuilder();
        result.hasSmallHeadImgUrl = false;
        result.smallHeadImgUrl_ = "";
        return this;
      }
    }
    static CreateChatRoomResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddChatRoomMemberRequest : pb::GeneratedMessage<AddChatRoomMemberRequest, AddChatRoomMemberRequest.Builder> {
    private AddChatRoomMemberRequest() { }
    private static readonly AddChatRoomMemberRequest defaultInstance = new AddChatRoomMemberRequest().MakeReadOnly();
    private static readonly string[] _addChatRoomMemberRequestFieldNames = new string[] { "ChatRoomName", "MemberCount", "Members", "base" };
    private static readonly uint[] _addChatRoomMemberRequestFieldTags = new uint[] { 34, 16, 26, 10 };
    public static AddChatRoomMemberRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AddChatRoomMemberRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AddChatRoomMemberRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_AddChatRoomMemberRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AddChatRoomMemberRequest, AddChatRoomMemberRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_AddChatRoomMemberRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int MemberCountFieldNumber = 2;
    private bool hasMemberCount;
    private int memberCount_;
    public bool HasMemberCount {
      get { return hasMemberCount; }
    }
    public int MemberCount {
      get { return memberCount_; }
    }
    
    public const int MembersFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.ChatRoomItem> members_ = new pbc::PopsicleList<global::mm.command.ChatRoomItem>();
    public scg::IList<global::mm.command.ChatRoomItem> MembersList {
      get { return members_; }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public global::mm.command.ChatRoomItem GetMembers(int index) {
      return members_[index];
    }
    
    public const int ChatRoomNameFieldNumber = 4;
    private bool hasChatRoomName;
    private global::mm.command.SKBuiltinString_t chatRoomName_;
    public bool HasChatRoomName {
      get { return hasChatRoomName; }
    }
    public global::mm.command.SKBuiltinString_t ChatRoomName {
      get { return chatRoomName_ ?? global::mm.command.SKBuiltinString_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasMemberCount) return false;
        if (!hasChatRoomName) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.ChatRoomItem element in MembersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _addChatRoomMemberRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasMemberCount) {
        output.WriteInt32(2, field_names[1], MemberCount);
      }
      if (members_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], members_);
      }
      if (hasChatRoomName) {
        output.WriteMessage(4, field_names[0], ChatRoomName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasMemberCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MemberCount);
        }
        foreach (global::mm.command.ChatRoomItem element in MembersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasChatRoomName) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, ChatRoomName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AddChatRoomMemberRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AddChatRoomMemberRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AddChatRoomMemberRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AddChatRoomMemberRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AddChatRoomMemberRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AddChatRoomMemberRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AddChatRoomMemberRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AddChatRoomMemberRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AddChatRoomMemberRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AddChatRoomMemberRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AddChatRoomMemberRequest MakeReadOnly() {
      members_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AddChatRoomMemberRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AddChatRoomMemberRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AddChatRoomMemberRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AddChatRoomMemberRequest result;
      
      private AddChatRoomMemberRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          AddChatRoomMemberRequest original = result;
          result = new AddChatRoomMemberRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AddChatRoomMemberRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.AddChatRoomMemberRequest.Descriptor; }
      }
      
      public override AddChatRoomMemberRequest DefaultInstanceForType {
        get { return global::mm.command.AddChatRoomMemberRequest.DefaultInstance; }
      }
      
      public override AddChatRoomMemberRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AddChatRoomMemberRequest) {
          return MergeFrom((AddChatRoomMemberRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AddChatRoomMemberRequest other) {
        if (other == global::mm.command.AddChatRoomMemberRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasMemberCount) {
          MemberCount = other.MemberCount;
        }
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        if (other.HasChatRoomName) {
          MergeChatRoomName(other.ChatRoomName);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_addChatRoomMemberRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _addChatRoomMemberRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasMemberCount = input.ReadInt32(ref result.memberCount_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.members_, global::mm.command.ChatRoomItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              global::mm.command.SKBuiltinString_t.Builder subBuilder = global::mm.command.SKBuiltinString_t.CreateBuilder();
              if (result.hasChatRoomName) {
                subBuilder.MergeFrom(ChatRoomName);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ChatRoomName = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasMemberCount {
        get { return result.hasMemberCount; }
      }
      public int MemberCount {
        get { return result.MemberCount; }
        set { SetMemberCount(value); }
      }
      public Builder SetMemberCount(int value) {
        PrepareBuilder();
        result.hasMemberCount = true;
        result.memberCount_ = value;
        return this;
      }
      public Builder ClearMemberCount() {
        PrepareBuilder();
        result.hasMemberCount = false;
        result.memberCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.ChatRoomItem> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public global::mm.command.ChatRoomItem GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, global::mm.command.ChatRoomItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder SetMembers(int index, global::mm.command.ChatRoomItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMembers(global::mm.command.ChatRoomItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddMembers(global::mm.command.ChatRoomItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<global::mm.command.ChatRoomItem> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
      
      public bool HasChatRoomName {
       get { return result.hasChatRoomName; }
      }
      public global::mm.command.SKBuiltinString_t ChatRoomName {
        get { return result.ChatRoomName; }
        set { SetChatRoomName(value); }
      }
      public Builder SetChatRoomName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChatRoomName = true;
        result.chatRoomName_ = value;
        return this;
      }
      public Builder SetChatRoomName(global::mm.command.SKBuiltinString_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasChatRoomName = true;
        result.chatRoomName_ = builderForValue.Build();
        return this;
      }
      public Builder MergeChatRoomName(global::mm.command.SKBuiltinString_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasChatRoomName &&
            result.chatRoomName_ != global::mm.command.SKBuiltinString_t.DefaultInstance) {
            result.chatRoomName_ = global::mm.command.SKBuiltinString_t.CreateBuilder(result.chatRoomName_).MergeFrom(value).BuildPartial();
        } else {
          result.chatRoomName_ = value;
        }
        result.hasChatRoomName = true;
        return this;
      }
      public Builder ClearChatRoomName() {
        PrepareBuilder();
        result.hasChatRoomName = false;
        result.chatRoomName_ = null;
        return this;
      }
    }
    static AddChatRoomMemberRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class AddChatRoomMemberResponse : pb::GeneratedMessage<AddChatRoomMemberResponse, AddChatRoomMemberResponse.Builder> {
    private AddChatRoomMemberResponse() { }
    private static readonly AddChatRoomMemberResponse defaultInstance = new AddChatRoomMemberResponse().MakeReadOnly();
    private static readonly string[] _addChatRoomMemberResponseFieldNames = new string[] { "MemberCount", "Members", "base" };
    private static readonly uint[] _addChatRoomMemberResponseFieldTags = new uint[] { 16, 26, 10 };
    public static AddChatRoomMemberResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override AddChatRoomMemberResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override AddChatRoomMemberResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_AddChatRoomMemberResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<AddChatRoomMemberResponse, AddChatRoomMemberResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_AddChatRoomMemberResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int MemberCountFieldNumber = 2;
    private bool hasMemberCount;
    private int memberCount_;
    public bool HasMemberCount {
      get { return hasMemberCount; }
    }
    public int MemberCount {
      get { return memberCount_; }
    }
    
    public const int MembersFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.MemberInfo> members_ = new pbc::PopsicleList<global::mm.command.MemberInfo>();
    public scg::IList<global::mm.command.MemberInfo> MembersList {
      get { return members_; }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public global::mm.command.MemberInfo GetMembers(int index) {
      return members_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasMemberCount) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _addChatRoomMemberResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasMemberCount) {
        output.WriteInt32(2, field_names[0], MemberCount);
      }
      if (members_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], members_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasMemberCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MemberCount);
        }
        foreach (global::mm.command.MemberInfo element in MembersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static AddChatRoomMemberResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AddChatRoomMemberResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AddChatRoomMemberResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static AddChatRoomMemberResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static AddChatRoomMemberResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AddChatRoomMemberResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static AddChatRoomMemberResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static AddChatRoomMemberResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static AddChatRoomMemberResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static AddChatRoomMemberResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private AddChatRoomMemberResponse MakeReadOnly() {
      members_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(AddChatRoomMemberResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<AddChatRoomMemberResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(AddChatRoomMemberResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private AddChatRoomMemberResponse result;
      
      private AddChatRoomMemberResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          AddChatRoomMemberResponse original = result;
          result = new AddChatRoomMemberResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override AddChatRoomMemberResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.AddChatRoomMemberResponse.Descriptor; }
      }
      
      public override AddChatRoomMemberResponse DefaultInstanceForType {
        get { return global::mm.command.AddChatRoomMemberResponse.DefaultInstance; }
      }
      
      public override AddChatRoomMemberResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is AddChatRoomMemberResponse) {
          return MergeFrom((AddChatRoomMemberResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(AddChatRoomMemberResponse other) {
        if (other == global::mm.command.AddChatRoomMemberResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasMemberCount) {
          MemberCount = other.MemberCount;
        }
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_addChatRoomMemberResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _addChatRoomMemberResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasMemberCount = input.ReadInt32(ref result.memberCount_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.members_, global::mm.command.MemberInfo.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasMemberCount {
        get { return result.hasMemberCount; }
      }
      public int MemberCount {
        get { return result.MemberCount; }
        set { SetMemberCount(value); }
      }
      public Builder SetMemberCount(int value) {
        PrepareBuilder();
        result.hasMemberCount = true;
        result.memberCount_ = value;
        return this;
      }
      public Builder ClearMemberCount() {
        PrepareBuilder();
        result.hasMemberCount = false;
        result.memberCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.MemberInfo> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public global::mm.command.MemberInfo GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, global::mm.command.MemberInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder SetMembers(int index, global::mm.command.MemberInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMembers(global::mm.command.MemberInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddMembers(global::mm.command.MemberInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<global::mm.command.MemberInfo> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
    }
    static AddChatRoomMemberResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DelChatRoomMemberRequest : pb::GeneratedMessage<DelChatRoomMemberRequest, DelChatRoomMemberRequest.Builder> {
    private DelChatRoomMemberRequest() { }
    private static readonly DelChatRoomMemberRequest defaultInstance = new DelChatRoomMemberRequest().MakeReadOnly();
    private static readonly string[] _delChatRoomMemberRequestFieldNames = new string[] { "ChatRoomName", "MemberCount", "Members", "base" };
    private static readonly uint[] _delChatRoomMemberRequestFieldTags = new uint[] { 34, 16, 26, 10 };
    public static DelChatRoomMemberRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DelChatRoomMemberRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DelChatRoomMemberRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_DelChatRoomMemberRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DelChatRoomMemberRequest, DelChatRoomMemberRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_DelChatRoomMemberRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int MemberCountFieldNumber = 2;
    private bool hasMemberCount;
    private int memberCount_;
    public bool HasMemberCount {
      get { return hasMemberCount; }
    }
    public int MemberCount {
      get { return memberCount_; }
    }
    
    public const int MembersFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.ChatRoomItem> members_ = new pbc::PopsicleList<global::mm.command.ChatRoomItem>();
    public scg::IList<global::mm.command.ChatRoomItem> MembersList {
      get { return members_; }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public global::mm.command.ChatRoomItem GetMembers(int index) {
      return members_[index];
    }
    
    public const int ChatRoomNameFieldNumber = 4;
    private bool hasChatRoomName;
    private string chatRoomName_ = "";
    public bool HasChatRoomName {
      get { return hasChatRoomName; }
    }
    public string ChatRoomName {
      get { return chatRoomName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasMemberCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.ChatRoomItem element in MembersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _delChatRoomMemberRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[3], Base);
      }
      if (hasMemberCount) {
        output.WriteInt32(2, field_names[1], MemberCount);
      }
      if (members_.Count > 0) {
        output.WriteMessageArray(3, field_names[2], members_);
      }
      if (hasChatRoomName) {
        output.WriteString(4, field_names[0], ChatRoomName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasMemberCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MemberCount);
        }
        foreach (global::mm.command.ChatRoomItem element in MembersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasChatRoomName) {
          size += pb::CodedOutputStream.ComputeStringSize(4, ChatRoomName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DelChatRoomMemberRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DelChatRoomMemberRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DelChatRoomMemberRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DelChatRoomMemberRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DelChatRoomMemberRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DelChatRoomMemberRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DelChatRoomMemberRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DelChatRoomMemberRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DelChatRoomMemberRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DelChatRoomMemberRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DelChatRoomMemberRequest MakeReadOnly() {
      members_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DelChatRoomMemberRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DelChatRoomMemberRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DelChatRoomMemberRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DelChatRoomMemberRequest result;
      
      private DelChatRoomMemberRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          DelChatRoomMemberRequest original = result;
          result = new DelChatRoomMemberRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DelChatRoomMemberRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.DelChatRoomMemberRequest.Descriptor; }
      }
      
      public override DelChatRoomMemberRequest DefaultInstanceForType {
        get { return global::mm.command.DelChatRoomMemberRequest.DefaultInstance; }
      }
      
      public override DelChatRoomMemberRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DelChatRoomMemberRequest) {
          return MergeFrom((DelChatRoomMemberRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DelChatRoomMemberRequest other) {
        if (other == global::mm.command.DelChatRoomMemberRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasMemberCount) {
          MemberCount = other.MemberCount;
        }
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        if (other.HasChatRoomName) {
          ChatRoomName = other.ChatRoomName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_delChatRoomMemberRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _delChatRoomMemberRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasMemberCount = input.ReadInt32(ref result.memberCount_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.members_, global::mm.command.ChatRoomItem.DefaultInstance, extensionRegistry);
              break;
            }
            case 34: {
              result.hasChatRoomName = input.ReadString(ref result.chatRoomName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasMemberCount {
        get { return result.hasMemberCount; }
      }
      public int MemberCount {
        get { return result.MemberCount; }
        set { SetMemberCount(value); }
      }
      public Builder SetMemberCount(int value) {
        PrepareBuilder();
        result.hasMemberCount = true;
        result.memberCount_ = value;
        return this;
      }
      public Builder ClearMemberCount() {
        PrepareBuilder();
        result.hasMemberCount = false;
        result.memberCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.ChatRoomItem> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public global::mm.command.ChatRoomItem GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, global::mm.command.ChatRoomItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder SetMembers(int index, global::mm.command.ChatRoomItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMembers(global::mm.command.ChatRoomItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddMembers(global::mm.command.ChatRoomItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<global::mm.command.ChatRoomItem> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
      
      public bool HasChatRoomName {
        get { return result.hasChatRoomName; }
      }
      public string ChatRoomName {
        get { return result.ChatRoomName; }
        set { SetChatRoomName(value); }
      }
      public Builder SetChatRoomName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChatRoomName = true;
        result.chatRoomName_ = value;
        return this;
      }
      public Builder ClearChatRoomName() {
        PrepareBuilder();
        result.hasChatRoomName = false;
        result.chatRoomName_ = "";
        return this;
      }
    }
    static DelChatRoomMemberRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DelChatRoomMemberResponse : pb::GeneratedMessage<DelChatRoomMemberResponse, DelChatRoomMemberResponse.Builder> {
    private DelChatRoomMemberResponse() { }
    private static readonly DelChatRoomMemberResponse defaultInstance = new DelChatRoomMemberResponse().MakeReadOnly();
    private static readonly string[] _delChatRoomMemberResponseFieldNames = new string[] { "MemberCount", "Members", "base" };
    private static readonly uint[] _delChatRoomMemberResponseFieldTags = new uint[] { 16, 26, 10 };
    public static DelChatRoomMemberResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override DelChatRoomMemberResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override DelChatRoomMemberResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_DelChatRoomMemberResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<DelChatRoomMemberResponse, DelChatRoomMemberResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_DelChatRoomMemberResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int MemberCountFieldNumber = 2;
    private bool hasMemberCount;
    private int memberCount_;
    public bool HasMemberCount {
      get { return hasMemberCount; }
    }
    public int MemberCount {
      get { return memberCount_; }
    }
    
    public const int MembersFieldNumber = 3;
    private pbc::PopsicleList<global::mm.command.ChatRoomItem> members_ = new pbc::PopsicleList<global::mm.command.ChatRoomItem>();
    public scg::IList<global::mm.command.ChatRoomItem> MembersList {
      get { return members_; }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public global::mm.command.ChatRoomItem GetMembers(int index) {
      return members_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasMemberCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.ChatRoomItem element in MembersList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _delChatRoomMemberResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasMemberCount) {
        output.WriteInt32(2, field_names[0], MemberCount);
      }
      if (members_.Count > 0) {
        output.WriteMessageArray(3, field_names[1], members_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasMemberCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, MemberCount);
        }
        foreach (global::mm.command.ChatRoomItem element in MembersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static DelChatRoomMemberResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DelChatRoomMemberResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DelChatRoomMemberResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static DelChatRoomMemberResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static DelChatRoomMemberResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DelChatRoomMemberResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static DelChatRoomMemberResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static DelChatRoomMemberResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static DelChatRoomMemberResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static DelChatRoomMemberResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private DelChatRoomMemberResponse MakeReadOnly() {
      members_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(DelChatRoomMemberResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<DelChatRoomMemberResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(DelChatRoomMemberResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private DelChatRoomMemberResponse result;
      
      private DelChatRoomMemberResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          DelChatRoomMemberResponse original = result;
          result = new DelChatRoomMemberResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override DelChatRoomMemberResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.DelChatRoomMemberResponse.Descriptor; }
      }
      
      public override DelChatRoomMemberResponse DefaultInstanceForType {
        get { return global::mm.command.DelChatRoomMemberResponse.DefaultInstance; }
      }
      
      public override DelChatRoomMemberResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is DelChatRoomMemberResponse) {
          return MergeFrom((DelChatRoomMemberResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(DelChatRoomMemberResponse other) {
        if (other == global::mm.command.DelChatRoomMemberResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasMemberCount) {
          MemberCount = other.MemberCount;
        }
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_delChatRoomMemberResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _delChatRoomMemberResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasMemberCount = input.ReadInt32(ref result.memberCount_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.members_, global::mm.command.ChatRoomItem.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasMemberCount {
        get { return result.hasMemberCount; }
      }
      public int MemberCount {
        get { return result.MemberCount; }
        set { SetMemberCount(value); }
      }
      public Builder SetMemberCount(int value) {
        PrepareBuilder();
        result.hasMemberCount = true;
        result.memberCount_ = value;
        return this;
      }
      public Builder ClearMemberCount() {
        PrepareBuilder();
        result.hasMemberCount = false;
        result.memberCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.ChatRoomItem> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public global::mm.command.ChatRoomItem GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, global::mm.command.ChatRoomItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder SetMembers(int index, global::mm.command.ChatRoomItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMembers(global::mm.command.ChatRoomItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddMembers(global::mm.command.ChatRoomItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<global::mm.command.ChatRoomItem> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
    }
    static DelChatRoomMemberResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetChatRoomMemberDetailRequest : pb::GeneratedMessage<GetChatRoomMemberDetailRequest, GetChatRoomMemberDetailRequest.Builder> {
    private GetChatRoomMemberDetailRequest() { }
    private static readonly GetChatRoomMemberDetailRequest defaultInstance = new GetChatRoomMemberDetailRequest().MakeReadOnly();
    private static readonly string[] _getChatRoomMemberDetailRequestFieldNames = new string[] { "base", "chatroomUserName", "clientVersion" };
    private static readonly uint[] _getChatRoomMemberDetailRequestFieldTags = new uint[] { 10, 18, 24 };
    public static GetChatRoomMemberDetailRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetChatRoomMemberDetailRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetChatRoomMemberDetailRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetChatRoomMemberDetailRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetChatRoomMemberDetailRequest, GetChatRoomMemberDetailRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetChatRoomMemberDetailRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int ChatroomUserNameFieldNumber = 2;
    private bool hasChatroomUserName;
    private string chatroomUserName_ = "";
    public bool HasChatroomUserName {
      get { return hasChatroomUserName; }
    }
    public string ChatroomUserName {
      get { return chatroomUserName_; }
    }
    
    public const int ClientVersionFieldNumber = 3;
    private bool hasClientVersion;
    private uint clientVersion_;
    public bool HasClientVersion {
      get { return hasClientVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClientVersion {
      get { return clientVersion_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasChatroomUserName) return false;
        if (!hasClientVersion) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getChatRoomMemberDetailRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      if (hasChatroomUserName) {
        output.WriteString(2, field_names[1], ChatroomUserName);
      }
      if (hasClientVersion) {
        output.WriteUInt32(3, field_names[2], ClientVersion);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasChatroomUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ChatroomUserName);
        }
        if (hasClientVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, ClientVersion);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetChatRoomMemberDetailRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChatRoomMemberDetailRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChatRoomMemberDetailRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChatRoomMemberDetailRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChatRoomMemberDetailRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChatRoomMemberDetailRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetChatRoomMemberDetailRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetChatRoomMemberDetailRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetChatRoomMemberDetailRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChatRoomMemberDetailRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetChatRoomMemberDetailRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetChatRoomMemberDetailRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetChatRoomMemberDetailRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetChatRoomMemberDetailRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetChatRoomMemberDetailRequest result;
      
      private GetChatRoomMemberDetailRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetChatRoomMemberDetailRequest original = result;
          result = new GetChatRoomMemberDetailRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetChatRoomMemberDetailRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetChatRoomMemberDetailRequest.Descriptor; }
      }
      
      public override GetChatRoomMemberDetailRequest DefaultInstanceForType {
        get { return global::mm.command.GetChatRoomMemberDetailRequest.DefaultInstance; }
      }
      
      public override GetChatRoomMemberDetailRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetChatRoomMemberDetailRequest) {
          return MergeFrom((GetChatRoomMemberDetailRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetChatRoomMemberDetailRequest other) {
        if (other == global::mm.command.GetChatRoomMemberDetailRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasChatroomUserName) {
          ChatroomUserName = other.ChatroomUserName;
        }
        if (other.HasClientVersion) {
          ClientVersion = other.ClientVersion;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getChatRoomMemberDetailRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getChatRoomMemberDetailRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasChatroomUserName = input.ReadString(ref result.chatroomUserName_);
              break;
            }
            case 24: {
              result.hasClientVersion = input.ReadUInt32(ref result.clientVersion_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasChatroomUserName {
        get { return result.hasChatroomUserName; }
      }
      public string ChatroomUserName {
        get { return result.ChatroomUserName; }
        set { SetChatroomUserName(value); }
      }
      public Builder SetChatroomUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChatroomUserName = true;
        result.chatroomUserName_ = value;
        return this;
      }
      public Builder ClearChatroomUserName() {
        PrepareBuilder();
        result.hasChatroomUserName = false;
        result.chatroomUserName_ = "";
        return this;
      }
      
      public bool HasClientVersion {
        get { return result.hasClientVersion; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClientVersion {
        get { return result.ClientVersion; }
        set { SetClientVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClientVersion(uint value) {
        PrepareBuilder();
        result.hasClientVersion = true;
        result.clientVersion_ = value;
        return this;
      }
      public Builder ClearClientVersion() {
        PrepareBuilder();
        result.hasClientVersion = false;
        result.clientVersion_ = 0;
        return this;
      }
    }
    static GetChatRoomMemberDetailRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetChatRoomMemberDetailResponse : pb::GeneratedMessage<GetChatRoomMemberDetailResponse, GetChatRoomMemberDetailResponse.Builder> {
    private GetChatRoomMemberDetailResponse() { }
    private static readonly GetChatRoomMemberDetailResponse defaultInstance = new GetChatRoomMemberDetailResponse().MakeReadOnly();
    private static readonly string[] _getChatRoomMemberDetailResponseFieldNames = new string[] { "base", "chatroomUserName", "clientVersion", "newChatroomData" };
    private static readonly uint[] _getChatRoomMemberDetailResponseFieldTags = new uint[] { 10, 18, 24, 34 };
    public static GetChatRoomMemberDetailResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetChatRoomMemberDetailResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetChatRoomMemberDetailResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetChatRoomMemberDetailResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetChatRoomMemberDetailResponse, GetChatRoomMemberDetailResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetChatRoomMemberDetailResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int ChatroomUserNameFieldNumber = 2;
    private bool hasChatroomUserName;
    private string chatroomUserName_ = "";
    public bool HasChatroomUserName {
      get { return hasChatroomUserName; }
    }
    public string ChatroomUserName {
      get { return chatroomUserName_; }
    }
    
    public const int ClientVersionFieldNumber = 3;
    private bool hasClientVersion;
    private uint clientVersion_;
    public bool HasClientVersion {
      get { return hasClientVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClientVersion {
      get { return clientVersion_; }
    }
    
    public const int NewChatroomDataFieldNumber = 4;
    private bool hasNewChatroomData;
    private global::mm.command.ChatRoomMemberData newChatroomData_;
    public bool HasNewChatroomData {
      get { return hasNewChatroomData; }
    }
    public global::mm.command.ChatRoomMemberData NewChatroomData {
      get { return newChatroomData_ ?? global::mm.command.ChatRoomMemberData.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasNewChatroomData) {
          if (!NewChatroomData.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getChatRoomMemberDetailResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      if (hasChatroomUserName) {
        output.WriteString(2, field_names[1], ChatroomUserName);
      }
      if (hasClientVersion) {
        output.WriteUInt32(3, field_names[2], ClientVersion);
      }
      if (hasNewChatroomData) {
        output.WriteMessage(4, field_names[3], NewChatroomData);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasChatroomUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ChatroomUserName);
        }
        if (hasClientVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, ClientVersion);
        }
        if (hasNewChatroomData) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, NewChatroomData);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetChatRoomMemberDetailResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChatRoomMemberDetailResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChatRoomMemberDetailResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetChatRoomMemberDetailResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetChatRoomMemberDetailResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChatRoomMemberDetailResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetChatRoomMemberDetailResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetChatRoomMemberDetailResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetChatRoomMemberDetailResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetChatRoomMemberDetailResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetChatRoomMemberDetailResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetChatRoomMemberDetailResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetChatRoomMemberDetailResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetChatRoomMemberDetailResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetChatRoomMemberDetailResponse result;
      
      private GetChatRoomMemberDetailResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetChatRoomMemberDetailResponse original = result;
          result = new GetChatRoomMemberDetailResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetChatRoomMemberDetailResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetChatRoomMemberDetailResponse.Descriptor; }
      }
      
      public override GetChatRoomMemberDetailResponse DefaultInstanceForType {
        get { return global::mm.command.GetChatRoomMemberDetailResponse.DefaultInstance; }
      }
      
      public override GetChatRoomMemberDetailResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetChatRoomMemberDetailResponse) {
          return MergeFrom((GetChatRoomMemberDetailResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetChatRoomMemberDetailResponse other) {
        if (other == global::mm.command.GetChatRoomMemberDetailResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasChatroomUserName) {
          ChatroomUserName = other.ChatroomUserName;
        }
        if (other.HasClientVersion) {
          ClientVersion = other.ClientVersion;
        }
        if (other.HasNewChatroomData) {
          MergeNewChatroomData(other.NewChatroomData);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getChatRoomMemberDetailResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getChatRoomMemberDetailResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasChatroomUserName = input.ReadString(ref result.chatroomUserName_);
              break;
            }
            case 24: {
              result.hasClientVersion = input.ReadUInt32(ref result.clientVersion_);
              break;
            }
            case 34: {
              global::mm.command.ChatRoomMemberData.Builder subBuilder = global::mm.command.ChatRoomMemberData.CreateBuilder();
              if (result.hasNewChatroomData) {
                subBuilder.MergeFrom(NewChatroomData);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              NewChatroomData = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasChatroomUserName {
        get { return result.hasChatroomUserName; }
      }
      public string ChatroomUserName {
        get { return result.ChatroomUserName; }
        set { SetChatroomUserName(value); }
      }
      public Builder SetChatroomUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasChatroomUserName = true;
        result.chatroomUserName_ = value;
        return this;
      }
      public Builder ClearChatroomUserName() {
        PrepareBuilder();
        result.hasChatroomUserName = false;
        result.chatroomUserName_ = "";
        return this;
      }
      
      public bool HasClientVersion {
        get { return result.hasClientVersion; }
      }
      [global::System.CLSCompliant(false)]
      public uint ClientVersion {
        get { return result.ClientVersion; }
        set { SetClientVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetClientVersion(uint value) {
        PrepareBuilder();
        result.hasClientVersion = true;
        result.clientVersion_ = value;
        return this;
      }
      public Builder ClearClientVersion() {
        PrepareBuilder();
        result.hasClientVersion = false;
        result.clientVersion_ = 0;
        return this;
      }
      
      public bool HasNewChatroomData {
       get { return result.hasNewChatroomData; }
      }
      public global::mm.command.ChatRoomMemberData NewChatroomData {
        get { return result.NewChatroomData; }
        set { SetNewChatroomData(value); }
      }
      public Builder SetNewChatroomData(global::mm.command.ChatRoomMemberData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNewChatroomData = true;
        result.newChatroomData_ = value;
        return this;
      }
      public Builder SetNewChatroomData(global::mm.command.ChatRoomMemberData.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNewChatroomData = true;
        result.newChatroomData_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNewChatroomData(global::mm.command.ChatRoomMemberData value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNewChatroomData &&
            result.newChatroomData_ != global::mm.command.ChatRoomMemberData.DefaultInstance) {
            result.newChatroomData_ = global::mm.command.ChatRoomMemberData.CreateBuilder(result.newChatroomData_).MergeFrom(value).BuildPartial();
        } else {
          result.newChatroomData_ = value;
        }
        result.hasNewChatroomData = true;
        return this;
      }
      public Builder ClearNewChatroomData() {
        PrepareBuilder();
        result.hasNewChatroomData = false;
        result.newChatroomData_ = null;
        return this;
      }
    }
    static GetChatRoomMemberDetailResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UploadvoiceRequest : pb::GeneratedMessage<UploadvoiceRequest, UploadvoiceRequest.Builder> {
    private UploadvoiceRequest() { }
    private static readonly UploadvoiceRequest defaultInstance = new UploadvoiceRequest().MakeReadOnly();
    private static readonly string[] _uploadvoiceRequestFieldNames = new string[] { "CancelFlag", "ClientMsgId", "Data", "EndFlag", "ForwardFlag", "FromUserName", "Length", "MsgId", "MsgSource", "Offset", "ToUserName", "UICreateTime", "VoiceFormat", "VoiceLength", "base" };
    private static readonly uint[] _uploadvoiceRequestFieldTags = new uint[] { 88, 42, 66, 72, 120, 10, 32, 48, 98, 24, 18, 112, 104, 56, 82 };
    public static UploadvoiceRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UploadvoiceRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UploadvoiceRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadvoiceRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UploadvoiceRequest, UploadvoiceRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadvoiceRequest__FieldAccessorTable; }
    }
    
    public const int FromUserNameFieldNumber = 1;
    private bool hasFromUserName;
    private string fromUserName_ = "";
    public bool HasFromUserName {
      get { return hasFromUserName; }
    }
    public string FromUserName {
      get { return fromUserName_; }
    }
    
    public const int ToUserNameFieldNumber = 2;
    private bool hasToUserName;
    private string toUserName_ = "";
    public bool HasToUserName {
      get { return hasToUserName; }
    }
    public string ToUserName {
      get { return toUserName_; }
    }
    
    public const int OffsetFieldNumber = 3;
    private bool hasOffset;
    private int offset_;
    public bool HasOffset {
      get { return hasOffset; }
    }
    public int Offset {
      get { return offset_; }
    }
    
    public const int LengthFieldNumber = 4;
    private bool hasLength;
    private int length_;
    public bool HasLength {
      get { return hasLength; }
    }
    public int Length {
      get { return length_; }
    }
    
    public const int ClientMsgIdFieldNumber = 5;
    private bool hasClientMsgId;
    private string clientMsgId_ = "";
    public bool HasClientMsgId {
      get { return hasClientMsgId; }
    }
    public string ClientMsgId {
      get { return clientMsgId_; }
    }
    
    public const int MsgIdFieldNumber = 6;
    private bool hasMsgId;
    private int msgId_;
    public bool HasMsgId {
      get { return hasMsgId; }
    }
    public int MsgId {
      get { return msgId_; }
    }
    
    public const int VoiceLengthFieldNumber = 7;
    private bool hasVoiceLength;
    private int voiceLength_;
    public bool HasVoiceLength {
      get { return hasVoiceLength; }
    }
    public int VoiceLength {
      get { return voiceLength_; }
    }
    
    public const int DataFieldNumber = 8;
    private bool hasData;
    private global::mm.command.SKBuiltinBuffer_t data_;
    public bool HasData {
      get { return hasData; }
    }
    public global::mm.command.SKBuiltinBuffer_t Data {
      get { return data_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int EndFlagFieldNumber = 9;
    private bool hasEndFlag;
    private int endFlag_;
    public bool HasEndFlag {
      get { return hasEndFlag; }
    }
    public int EndFlag {
      get { return endFlag_; }
    }
    
    public const int BaseFieldNumber = 10;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int CancelFlagFieldNumber = 11;
    private bool hasCancelFlag;
    private int cancelFlag_;
    public bool HasCancelFlag {
      get { return hasCancelFlag; }
    }
    public int CancelFlag {
      get { return cancelFlag_; }
    }
    
    public const int MsgSourceFieldNumber = 12;
    private bool hasMsgSource;
    private string msgSource_ = "";
    public bool HasMsgSource {
      get { return hasMsgSource; }
    }
    public string MsgSource {
      get { return msgSource_; }
    }
    
    public const int VoiceFormatFieldNumber = 13;
    private bool hasVoiceFormat;
    private int voiceFormat_;
    public bool HasVoiceFormat {
      get { return hasVoiceFormat; }
    }
    public int VoiceFormat {
      get { return voiceFormat_; }
    }
    
    public const int UICreateTimeFieldNumber = 14;
    private bool hasUICreateTime;
    private int uICreateTime_;
    public bool HasUICreateTime {
      get { return hasUICreateTime; }
    }
    public int UICreateTime {
      get { return uICreateTime_; }
    }
    
    public const int ForwardFlagFieldNumber = 15;
    private bool hasForwardFlag;
    private int forwardFlag_;
    public bool HasForwardFlag {
      get { return hasForwardFlag; }
    }
    public int ForwardFlag {
      get { return forwardFlag_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOffset) return false;
        if (!hasLength) return false;
        if (!hasMsgId) return false;
        if (!hasVoiceLength) return false;
        if (!hasData) return false;
        if (!hasEndFlag) return false;
        if (!hasBase) return false;
        if (!Data.IsInitialized) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _uploadvoiceRequestFieldNames;
      if (hasFromUserName) {
        output.WriteString(1, field_names[5], FromUserName);
      }
      if (hasToUserName) {
        output.WriteString(2, field_names[10], ToUserName);
      }
      if (hasOffset) {
        output.WriteInt32(3, field_names[9], Offset);
      }
      if (hasLength) {
        output.WriteInt32(4, field_names[6], Length);
      }
      if (hasClientMsgId) {
        output.WriteString(5, field_names[1], ClientMsgId);
      }
      if (hasMsgId) {
        output.WriteInt32(6, field_names[7], MsgId);
      }
      if (hasVoiceLength) {
        output.WriteInt32(7, field_names[13], VoiceLength);
      }
      if (hasData) {
        output.WriteMessage(8, field_names[2], Data);
      }
      if (hasEndFlag) {
        output.WriteInt32(9, field_names[3], EndFlag);
      }
      if (hasBase) {
        output.WriteMessage(10, field_names[14], Base);
      }
      if (hasCancelFlag) {
        output.WriteInt32(11, field_names[0], CancelFlag);
      }
      if (hasMsgSource) {
        output.WriteString(12, field_names[8], MsgSource);
      }
      if (hasVoiceFormat) {
        output.WriteInt32(13, field_names[12], VoiceFormat);
      }
      if (hasUICreateTime) {
        output.WriteInt32(14, field_names[11], UICreateTime);
      }
      if (hasForwardFlag) {
        output.WriteInt32(15, field_names[4], ForwardFlag);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFromUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FromUserName);
        }
        if (hasToUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ToUserName);
        }
        if (hasOffset) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Offset);
        }
        if (hasLength) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Length);
        }
        if (hasClientMsgId) {
          size += pb::CodedOutputStream.ComputeStringSize(5, ClientMsgId);
        }
        if (hasMsgId) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, MsgId);
        }
        if (hasVoiceLength) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, VoiceLength);
        }
        if (hasData) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, Data);
        }
        if (hasEndFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, EndFlag);
        }
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, Base);
        }
        if (hasCancelFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, CancelFlag);
        }
        if (hasMsgSource) {
          size += pb::CodedOutputStream.ComputeStringSize(12, MsgSource);
        }
        if (hasVoiceFormat) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, VoiceFormat);
        }
        if (hasUICreateTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, UICreateTime);
        }
        if (hasForwardFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, ForwardFlag);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UploadvoiceRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadvoiceRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadvoiceRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadvoiceRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadvoiceRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadvoiceRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UploadvoiceRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UploadvoiceRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UploadvoiceRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadvoiceRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UploadvoiceRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UploadvoiceRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UploadvoiceRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UploadvoiceRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UploadvoiceRequest result;
      
      private UploadvoiceRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          UploadvoiceRequest original = result;
          result = new UploadvoiceRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UploadvoiceRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.UploadvoiceRequest.Descriptor; }
      }
      
      public override UploadvoiceRequest DefaultInstanceForType {
        get { return global::mm.command.UploadvoiceRequest.DefaultInstance; }
      }
      
      public override UploadvoiceRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UploadvoiceRequest) {
          return MergeFrom((UploadvoiceRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UploadvoiceRequest other) {
        if (other == global::mm.command.UploadvoiceRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFromUserName) {
          FromUserName = other.FromUserName;
        }
        if (other.HasToUserName) {
          ToUserName = other.ToUserName;
        }
        if (other.HasOffset) {
          Offset = other.Offset;
        }
        if (other.HasLength) {
          Length = other.Length;
        }
        if (other.HasClientMsgId) {
          ClientMsgId = other.ClientMsgId;
        }
        if (other.HasMsgId) {
          MsgId = other.MsgId;
        }
        if (other.HasVoiceLength) {
          VoiceLength = other.VoiceLength;
        }
        if (other.HasData) {
          MergeData(other.Data);
        }
        if (other.HasEndFlag) {
          EndFlag = other.EndFlag;
        }
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCancelFlag) {
          CancelFlag = other.CancelFlag;
        }
        if (other.HasMsgSource) {
          MsgSource = other.MsgSource;
        }
        if (other.HasVoiceFormat) {
          VoiceFormat = other.VoiceFormat;
        }
        if (other.HasUICreateTime) {
          UICreateTime = other.UICreateTime;
        }
        if (other.HasForwardFlag) {
          ForwardFlag = other.ForwardFlag;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_uploadvoiceRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _uploadvoiceRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFromUserName = input.ReadString(ref result.fromUserName_);
              break;
            }
            case 18: {
              result.hasToUserName = input.ReadString(ref result.toUserName_);
              break;
            }
            case 24: {
              result.hasOffset = input.ReadInt32(ref result.offset_);
              break;
            }
            case 32: {
              result.hasLength = input.ReadInt32(ref result.length_);
              break;
            }
            case 42: {
              result.hasClientMsgId = input.ReadString(ref result.clientMsgId_);
              break;
            }
            case 48: {
              result.hasMsgId = input.ReadInt32(ref result.msgId_);
              break;
            }
            case 56: {
              result.hasVoiceLength = input.ReadInt32(ref result.voiceLength_);
              break;
            }
            case 66: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasData) {
                subBuilder.MergeFrom(Data);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Data = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              result.hasEndFlag = input.ReadInt32(ref result.endFlag_);
              break;
            }
            case 82: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 88: {
              result.hasCancelFlag = input.ReadInt32(ref result.cancelFlag_);
              break;
            }
            case 98: {
              result.hasMsgSource = input.ReadString(ref result.msgSource_);
              break;
            }
            case 104: {
              result.hasVoiceFormat = input.ReadInt32(ref result.voiceFormat_);
              break;
            }
            case 112: {
              result.hasUICreateTime = input.ReadInt32(ref result.uICreateTime_);
              break;
            }
            case 120: {
              result.hasForwardFlag = input.ReadInt32(ref result.forwardFlag_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFromUserName {
        get { return result.hasFromUserName; }
      }
      public string FromUserName {
        get { return result.FromUserName; }
        set { SetFromUserName(value); }
      }
      public Builder SetFromUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFromUserName = true;
        result.fromUserName_ = value;
        return this;
      }
      public Builder ClearFromUserName() {
        PrepareBuilder();
        result.hasFromUserName = false;
        result.fromUserName_ = "";
        return this;
      }
      
      public bool HasToUserName {
        get { return result.hasToUserName; }
      }
      public string ToUserName {
        get { return result.ToUserName; }
        set { SetToUserName(value); }
      }
      public Builder SetToUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToUserName = true;
        result.toUserName_ = value;
        return this;
      }
      public Builder ClearToUserName() {
        PrepareBuilder();
        result.hasToUserName = false;
        result.toUserName_ = "";
        return this;
      }
      
      public bool HasOffset {
        get { return result.hasOffset; }
      }
      public int Offset {
        get { return result.Offset; }
        set { SetOffset(value); }
      }
      public Builder SetOffset(int value) {
        PrepareBuilder();
        result.hasOffset = true;
        result.offset_ = value;
        return this;
      }
      public Builder ClearOffset() {
        PrepareBuilder();
        result.hasOffset = false;
        result.offset_ = 0;
        return this;
      }
      
      public bool HasLength {
        get { return result.hasLength; }
      }
      public int Length {
        get { return result.Length; }
        set { SetLength(value); }
      }
      public Builder SetLength(int value) {
        PrepareBuilder();
        result.hasLength = true;
        result.length_ = value;
        return this;
      }
      public Builder ClearLength() {
        PrepareBuilder();
        result.hasLength = false;
        result.length_ = 0;
        return this;
      }
      
      public bool HasClientMsgId {
        get { return result.hasClientMsgId; }
      }
      public string ClientMsgId {
        get { return result.ClientMsgId; }
        set { SetClientMsgId(value); }
      }
      public Builder SetClientMsgId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientMsgId = true;
        result.clientMsgId_ = value;
        return this;
      }
      public Builder ClearClientMsgId() {
        PrepareBuilder();
        result.hasClientMsgId = false;
        result.clientMsgId_ = "";
        return this;
      }
      
      public bool HasMsgId {
        get { return result.hasMsgId; }
      }
      public int MsgId {
        get { return result.MsgId; }
        set { SetMsgId(value); }
      }
      public Builder SetMsgId(int value) {
        PrepareBuilder();
        result.hasMsgId = true;
        result.msgId_ = value;
        return this;
      }
      public Builder ClearMsgId() {
        PrepareBuilder();
        result.hasMsgId = false;
        result.msgId_ = 0;
        return this;
      }
      
      public bool HasVoiceLength {
        get { return result.hasVoiceLength; }
      }
      public int VoiceLength {
        get { return result.VoiceLength; }
        set { SetVoiceLength(value); }
      }
      public Builder SetVoiceLength(int value) {
        PrepareBuilder();
        result.hasVoiceLength = true;
        result.voiceLength_ = value;
        return this;
      }
      public Builder ClearVoiceLength() {
        PrepareBuilder();
        result.hasVoiceLength = false;
        result.voiceLength_ = 0;
        return this;
      }
      
      public bool HasData {
       get { return result.hasData; }
      }
      public global::mm.command.SKBuiltinBuffer_t Data {
        get { return result.Data; }
        set { SetData(value); }
      }
      public Builder SetData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = value;
        return this;
      }
      public Builder SetData(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasData = true;
        result.data_ = builderForValue.Build();
        return this;
      }
      public Builder MergeData(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasData &&
            result.data_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.data_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.data_).MergeFrom(value).BuildPartial();
        } else {
          result.data_ = value;
        }
        result.hasData = true;
        return this;
      }
      public Builder ClearData() {
        PrepareBuilder();
        result.hasData = false;
        result.data_ = null;
        return this;
      }
      
      public bool HasEndFlag {
        get { return result.hasEndFlag; }
      }
      public int EndFlag {
        get { return result.EndFlag; }
        set { SetEndFlag(value); }
      }
      public Builder SetEndFlag(int value) {
        PrepareBuilder();
        result.hasEndFlag = true;
        result.endFlag_ = value;
        return this;
      }
      public Builder ClearEndFlag() {
        PrepareBuilder();
        result.hasEndFlag = false;
        result.endFlag_ = 0;
        return this;
      }
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCancelFlag {
        get { return result.hasCancelFlag; }
      }
      public int CancelFlag {
        get { return result.CancelFlag; }
        set { SetCancelFlag(value); }
      }
      public Builder SetCancelFlag(int value) {
        PrepareBuilder();
        result.hasCancelFlag = true;
        result.cancelFlag_ = value;
        return this;
      }
      public Builder ClearCancelFlag() {
        PrepareBuilder();
        result.hasCancelFlag = false;
        result.cancelFlag_ = 0;
        return this;
      }
      
      public bool HasMsgSource {
        get { return result.hasMsgSource; }
      }
      public string MsgSource {
        get { return result.MsgSource; }
        set { SetMsgSource(value); }
      }
      public Builder SetMsgSource(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsgSource = true;
        result.msgSource_ = value;
        return this;
      }
      public Builder ClearMsgSource() {
        PrepareBuilder();
        result.hasMsgSource = false;
        result.msgSource_ = "";
        return this;
      }
      
      public bool HasVoiceFormat {
        get { return result.hasVoiceFormat; }
      }
      public int VoiceFormat {
        get { return result.VoiceFormat; }
        set { SetVoiceFormat(value); }
      }
      public Builder SetVoiceFormat(int value) {
        PrepareBuilder();
        result.hasVoiceFormat = true;
        result.voiceFormat_ = value;
        return this;
      }
      public Builder ClearVoiceFormat() {
        PrepareBuilder();
        result.hasVoiceFormat = false;
        result.voiceFormat_ = 0;
        return this;
      }
      
      public bool HasUICreateTime {
        get { return result.hasUICreateTime; }
      }
      public int UICreateTime {
        get { return result.UICreateTime; }
        set { SetUICreateTime(value); }
      }
      public Builder SetUICreateTime(int value) {
        PrepareBuilder();
        result.hasUICreateTime = true;
        result.uICreateTime_ = value;
        return this;
      }
      public Builder ClearUICreateTime() {
        PrepareBuilder();
        result.hasUICreateTime = false;
        result.uICreateTime_ = 0;
        return this;
      }
      
      public bool HasForwardFlag {
        get { return result.hasForwardFlag; }
      }
      public int ForwardFlag {
        get { return result.ForwardFlag; }
        set { SetForwardFlag(value); }
      }
      public Builder SetForwardFlag(int value) {
        PrepareBuilder();
        result.hasForwardFlag = true;
        result.forwardFlag_ = value;
        return this;
      }
      public Builder ClearForwardFlag() {
        PrepareBuilder();
        result.hasForwardFlag = false;
        result.forwardFlag_ = 0;
        return this;
      }
    }
    static UploadvoiceRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UploadvoiceResponse : pb::GeneratedMessage<UploadvoiceResponse, UploadvoiceResponse.Builder> {
    private UploadvoiceResponse() { }
    private static readonly UploadvoiceResponse defaultInstance = new UploadvoiceResponse().MakeReadOnly();
    private static readonly string[] _uploadvoiceResponseFieldNames = new string[] { "CancelFlag", "ClientMsgId", "CreateTime", "EndFlag", "FromUserName", "Length", "MsgId", "Offset", "ToUserName", "VoiceLength", "base" };
    private static readonly uint[] _uploadvoiceResponseFieldTags = new uint[] { 88, 50, 40, 72, 10, 32, 56, 24, 18, 64, 82 };
    public static UploadvoiceResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UploadvoiceResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UploadvoiceResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadvoiceResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UploadvoiceResponse, UploadvoiceResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_UploadvoiceResponse__FieldAccessorTable; }
    }
    
    public const int FromUserNameFieldNumber = 1;
    private bool hasFromUserName;
    private string fromUserName_ = "";
    public bool HasFromUserName {
      get { return hasFromUserName; }
    }
    public string FromUserName {
      get { return fromUserName_; }
    }
    
    public const int ToUserNameFieldNumber = 2;
    private bool hasToUserName;
    private string toUserName_ = "";
    public bool HasToUserName {
      get { return hasToUserName; }
    }
    public string ToUserName {
      get { return toUserName_; }
    }
    
    public const int OffsetFieldNumber = 3;
    private bool hasOffset;
    private int offset_;
    public bool HasOffset {
      get { return hasOffset; }
    }
    public int Offset {
      get { return offset_; }
    }
    
    public const int LengthFieldNumber = 4;
    private bool hasLength;
    private int length_;
    public bool HasLength {
      get { return hasLength; }
    }
    public int Length {
      get { return length_; }
    }
    
    public const int CreateTimeFieldNumber = 5;
    private bool hasCreateTime;
    private int createTime_;
    public bool HasCreateTime {
      get { return hasCreateTime; }
    }
    public int CreateTime {
      get { return createTime_; }
    }
    
    public const int ClientMsgIdFieldNumber = 6;
    private bool hasClientMsgId;
    private string clientMsgId_ = "";
    public bool HasClientMsgId {
      get { return hasClientMsgId; }
    }
    public string ClientMsgId {
      get { return clientMsgId_; }
    }
    
    public const int MsgIdFieldNumber = 7;
    private bool hasMsgId;
    private int msgId_;
    public bool HasMsgId {
      get { return hasMsgId; }
    }
    public int MsgId {
      get { return msgId_; }
    }
    
    public const int VoiceLengthFieldNumber = 8;
    private bool hasVoiceLength;
    private int voiceLength_;
    public bool HasVoiceLength {
      get { return hasVoiceLength; }
    }
    public int VoiceLength {
      get { return voiceLength_; }
    }
    
    public const int EndFlagFieldNumber = 9;
    private bool hasEndFlag;
    private int endFlag_;
    public bool HasEndFlag {
      get { return hasEndFlag; }
    }
    public int EndFlag {
      get { return endFlag_; }
    }
    
    public const int BaseFieldNumber = 10;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int CancelFlagFieldNumber = 11;
    private bool hasCancelFlag;
    private int cancelFlag_;
    public bool HasCancelFlag {
      get { return hasCancelFlag; }
    }
    public int CancelFlag {
      get { return cancelFlag_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasOffset) return false;
        if (!hasLength) return false;
        if (!hasCreateTime) return false;
        if (!hasMsgId) return false;
        if (!hasVoiceLength) return false;
        if (!hasEndFlag) return false;
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _uploadvoiceResponseFieldNames;
      if (hasFromUserName) {
        output.WriteString(1, field_names[4], FromUserName);
      }
      if (hasToUserName) {
        output.WriteString(2, field_names[8], ToUserName);
      }
      if (hasOffset) {
        output.WriteInt32(3, field_names[7], Offset);
      }
      if (hasLength) {
        output.WriteInt32(4, field_names[5], Length);
      }
      if (hasCreateTime) {
        output.WriteInt32(5, field_names[2], CreateTime);
      }
      if (hasClientMsgId) {
        output.WriteString(6, field_names[1], ClientMsgId);
      }
      if (hasMsgId) {
        output.WriteInt32(7, field_names[6], MsgId);
      }
      if (hasVoiceLength) {
        output.WriteInt32(8, field_names[9], VoiceLength);
      }
      if (hasEndFlag) {
        output.WriteInt32(9, field_names[3], EndFlag);
      }
      if (hasBase) {
        output.WriteMessage(10, field_names[10], Base);
      }
      if (hasCancelFlag) {
        output.WriteInt32(11, field_names[0], CancelFlag);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasFromUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, FromUserName);
        }
        if (hasToUserName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ToUserName);
        }
        if (hasOffset) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Offset);
        }
        if (hasLength) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Length);
        }
        if (hasCreateTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, CreateTime);
        }
        if (hasClientMsgId) {
          size += pb::CodedOutputStream.ComputeStringSize(6, ClientMsgId);
        }
        if (hasMsgId) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, MsgId);
        }
        if (hasVoiceLength) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, VoiceLength);
        }
        if (hasEndFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, EndFlag);
        }
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, Base);
        }
        if (hasCancelFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, CancelFlag);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static UploadvoiceResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadvoiceResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadvoiceResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UploadvoiceResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UploadvoiceResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadvoiceResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UploadvoiceResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UploadvoiceResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UploadvoiceResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UploadvoiceResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UploadvoiceResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UploadvoiceResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UploadvoiceResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UploadvoiceResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UploadvoiceResponse result;
      
      private UploadvoiceResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          UploadvoiceResponse original = result;
          result = new UploadvoiceResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UploadvoiceResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.UploadvoiceResponse.Descriptor; }
      }
      
      public override UploadvoiceResponse DefaultInstanceForType {
        get { return global::mm.command.UploadvoiceResponse.DefaultInstance; }
      }
      
      public override UploadvoiceResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UploadvoiceResponse) {
          return MergeFrom((UploadvoiceResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UploadvoiceResponse other) {
        if (other == global::mm.command.UploadvoiceResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasFromUserName) {
          FromUserName = other.FromUserName;
        }
        if (other.HasToUserName) {
          ToUserName = other.ToUserName;
        }
        if (other.HasOffset) {
          Offset = other.Offset;
        }
        if (other.HasLength) {
          Length = other.Length;
        }
        if (other.HasCreateTime) {
          CreateTime = other.CreateTime;
        }
        if (other.HasClientMsgId) {
          ClientMsgId = other.ClientMsgId;
        }
        if (other.HasMsgId) {
          MsgId = other.MsgId;
        }
        if (other.HasVoiceLength) {
          VoiceLength = other.VoiceLength;
        }
        if (other.HasEndFlag) {
          EndFlag = other.EndFlag;
        }
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasCancelFlag) {
          CancelFlag = other.CancelFlag;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_uploadvoiceResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _uploadvoiceResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasFromUserName = input.ReadString(ref result.fromUserName_);
              break;
            }
            case 18: {
              result.hasToUserName = input.ReadString(ref result.toUserName_);
              break;
            }
            case 24: {
              result.hasOffset = input.ReadInt32(ref result.offset_);
              break;
            }
            case 32: {
              result.hasLength = input.ReadInt32(ref result.length_);
              break;
            }
            case 40: {
              result.hasCreateTime = input.ReadInt32(ref result.createTime_);
              break;
            }
            case 50: {
              result.hasClientMsgId = input.ReadString(ref result.clientMsgId_);
              break;
            }
            case 56: {
              result.hasMsgId = input.ReadInt32(ref result.msgId_);
              break;
            }
            case 64: {
              result.hasVoiceLength = input.ReadInt32(ref result.voiceLength_);
              break;
            }
            case 72: {
              result.hasEndFlag = input.ReadInt32(ref result.endFlag_);
              break;
            }
            case 82: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 88: {
              result.hasCancelFlag = input.ReadInt32(ref result.cancelFlag_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasFromUserName {
        get { return result.hasFromUserName; }
      }
      public string FromUserName {
        get { return result.FromUserName; }
        set { SetFromUserName(value); }
      }
      public Builder SetFromUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFromUserName = true;
        result.fromUserName_ = value;
        return this;
      }
      public Builder ClearFromUserName() {
        PrepareBuilder();
        result.hasFromUserName = false;
        result.fromUserName_ = "";
        return this;
      }
      
      public bool HasToUserName {
        get { return result.hasToUserName; }
      }
      public string ToUserName {
        get { return result.ToUserName; }
        set { SetToUserName(value); }
      }
      public Builder SetToUserName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasToUserName = true;
        result.toUserName_ = value;
        return this;
      }
      public Builder ClearToUserName() {
        PrepareBuilder();
        result.hasToUserName = false;
        result.toUserName_ = "";
        return this;
      }
      
      public bool HasOffset {
        get { return result.hasOffset; }
      }
      public int Offset {
        get { return result.Offset; }
        set { SetOffset(value); }
      }
      public Builder SetOffset(int value) {
        PrepareBuilder();
        result.hasOffset = true;
        result.offset_ = value;
        return this;
      }
      public Builder ClearOffset() {
        PrepareBuilder();
        result.hasOffset = false;
        result.offset_ = 0;
        return this;
      }
      
      public bool HasLength {
        get { return result.hasLength; }
      }
      public int Length {
        get { return result.Length; }
        set { SetLength(value); }
      }
      public Builder SetLength(int value) {
        PrepareBuilder();
        result.hasLength = true;
        result.length_ = value;
        return this;
      }
      public Builder ClearLength() {
        PrepareBuilder();
        result.hasLength = false;
        result.length_ = 0;
        return this;
      }
      
      public bool HasCreateTime {
        get { return result.hasCreateTime; }
      }
      public int CreateTime {
        get { return result.CreateTime; }
        set { SetCreateTime(value); }
      }
      public Builder SetCreateTime(int value) {
        PrepareBuilder();
        result.hasCreateTime = true;
        result.createTime_ = value;
        return this;
      }
      public Builder ClearCreateTime() {
        PrepareBuilder();
        result.hasCreateTime = false;
        result.createTime_ = 0;
        return this;
      }
      
      public bool HasClientMsgId {
        get { return result.hasClientMsgId; }
      }
      public string ClientMsgId {
        get { return result.ClientMsgId; }
        set { SetClientMsgId(value); }
      }
      public Builder SetClientMsgId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasClientMsgId = true;
        result.clientMsgId_ = value;
        return this;
      }
      public Builder ClearClientMsgId() {
        PrepareBuilder();
        result.hasClientMsgId = false;
        result.clientMsgId_ = "";
        return this;
      }
      
      public bool HasMsgId {
        get { return result.hasMsgId; }
      }
      public int MsgId {
        get { return result.MsgId; }
        set { SetMsgId(value); }
      }
      public Builder SetMsgId(int value) {
        PrepareBuilder();
        result.hasMsgId = true;
        result.msgId_ = value;
        return this;
      }
      public Builder ClearMsgId() {
        PrepareBuilder();
        result.hasMsgId = false;
        result.msgId_ = 0;
        return this;
      }
      
      public bool HasVoiceLength {
        get { return result.hasVoiceLength; }
      }
      public int VoiceLength {
        get { return result.VoiceLength; }
        set { SetVoiceLength(value); }
      }
      public Builder SetVoiceLength(int value) {
        PrepareBuilder();
        result.hasVoiceLength = true;
        result.voiceLength_ = value;
        return this;
      }
      public Builder ClearVoiceLength() {
        PrepareBuilder();
        result.hasVoiceLength = false;
        result.voiceLength_ = 0;
        return this;
      }
      
      public bool HasEndFlag {
        get { return result.hasEndFlag; }
      }
      public int EndFlag {
        get { return result.EndFlag; }
        set { SetEndFlag(value); }
      }
      public Builder SetEndFlag(int value) {
        PrepareBuilder();
        result.hasEndFlag = true;
        result.endFlag_ = value;
        return this;
      }
      public Builder ClearEndFlag() {
        PrepareBuilder();
        result.hasEndFlag = false;
        result.endFlag_ = 0;
        return this;
      }
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasCancelFlag {
        get { return result.hasCancelFlag; }
      }
      public int CancelFlag {
        get { return result.CancelFlag; }
        set { SetCancelFlag(value); }
      }
      public Builder SetCancelFlag(int value) {
        PrepareBuilder();
        result.hasCancelFlag = true;
        result.cancelFlag_ = value;
        return this;
      }
      public Builder ClearCancelFlag() {
        PrepareBuilder();
        result.hasCancelFlag = false;
        result.cancelFlag_ = 0;
        return this;
      }
    }
    static UploadvoiceResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExtDeviceLoginConfirmGetRequest : pb::GeneratedMessage<ExtDeviceLoginConfirmGetRequest, ExtDeviceLoginConfirmGetRequest.Builder> {
    private ExtDeviceLoginConfirmGetRequest() { }
    private static readonly ExtDeviceLoginConfirmGetRequest defaultInstance = new ExtDeviceLoginConfirmGetRequest().MakeReadOnly();
    private static readonly string[] _extDeviceLoginConfirmGetRequestFieldNames = new string[] { "deviceName", "loginUrl" };
    private static readonly uint[] _extDeviceLoginConfirmGetRequestFieldTags = new uint[] { 18, 10 };
    public static ExtDeviceLoginConfirmGetRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExtDeviceLoginConfirmGetRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExtDeviceLoginConfirmGetRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ExtDeviceLoginConfirmGetRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExtDeviceLoginConfirmGetRequest, ExtDeviceLoginConfirmGetRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ExtDeviceLoginConfirmGetRequest__FieldAccessorTable; }
    }
    
    public const int LoginUrlFieldNumber = 1;
    private bool hasLoginUrl;
    private string loginUrl_ = "";
    public bool HasLoginUrl {
      get { return hasLoginUrl; }
    }
    public string LoginUrl {
      get { return loginUrl_; }
    }
    
    public const int DeviceNameFieldNumber = 2;
    private bool hasDeviceName;
    private string deviceName_ = "";
    public bool HasDeviceName {
      get { return hasDeviceName; }
    }
    public string DeviceName {
      get { return deviceName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLoginUrl) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _extDeviceLoginConfirmGetRequestFieldNames;
      if (hasLoginUrl) {
        output.WriteString(1, field_names[1], LoginUrl);
      }
      if (hasDeviceName) {
        output.WriteString(2, field_names[0], DeviceName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLoginUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(1, LoginUrl);
        }
        if (hasDeviceName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, DeviceName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExtDeviceLoginConfirmGetRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExtDeviceLoginConfirmGetRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExtDeviceLoginConfirmGetRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ExtDeviceLoginConfirmGetRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExtDeviceLoginConfirmGetRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExtDeviceLoginConfirmGetRequest result;
      
      private ExtDeviceLoginConfirmGetRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ExtDeviceLoginConfirmGetRequest original = result;
          result = new ExtDeviceLoginConfirmGetRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExtDeviceLoginConfirmGetRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ExtDeviceLoginConfirmGetRequest.Descriptor; }
      }
      
      public override ExtDeviceLoginConfirmGetRequest DefaultInstanceForType {
        get { return global::mm.command.ExtDeviceLoginConfirmGetRequest.DefaultInstance; }
      }
      
      public override ExtDeviceLoginConfirmGetRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExtDeviceLoginConfirmGetRequest) {
          return MergeFrom((ExtDeviceLoginConfirmGetRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExtDeviceLoginConfirmGetRequest other) {
        if (other == global::mm.command.ExtDeviceLoginConfirmGetRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLoginUrl) {
          LoginUrl = other.LoginUrl;
        }
        if (other.HasDeviceName) {
          DeviceName = other.DeviceName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_extDeviceLoginConfirmGetRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _extDeviceLoginConfirmGetRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasLoginUrl = input.ReadString(ref result.loginUrl_);
              break;
            }
            case 18: {
              result.hasDeviceName = input.ReadString(ref result.deviceName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLoginUrl {
        get { return result.hasLoginUrl; }
      }
      public string LoginUrl {
        get { return result.LoginUrl; }
        set { SetLoginUrl(value); }
      }
      public Builder SetLoginUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLoginUrl = true;
        result.loginUrl_ = value;
        return this;
      }
      public Builder ClearLoginUrl() {
        PrepareBuilder();
        result.hasLoginUrl = false;
        result.loginUrl_ = "";
        return this;
      }
      
      public bool HasDeviceName {
        get { return result.hasDeviceName; }
      }
      public string DeviceName {
        get { return result.DeviceName; }
        set { SetDeviceName(value); }
      }
      public Builder SetDeviceName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceName = true;
        result.deviceName_ = value;
        return this;
      }
      public Builder ClearDeviceName() {
        PrepareBuilder();
        result.hasDeviceName = false;
        result.deviceName_ = "";
        return this;
      }
    }
    static ExtDeviceLoginConfirmGetRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExtDeviceLoginConfirmGetResponse : pb::GeneratedMessage<ExtDeviceLoginConfirmGetResponse, ExtDeviceLoginConfirmGetResponse.Builder> {
    private ExtDeviceLoginConfirmGetResponse() { }
    private static readonly ExtDeviceLoginConfirmGetResponse defaultInstance = new ExtDeviceLoginConfirmGetResponse().MakeReadOnly();
    private static readonly string[] _extDeviceLoginConfirmGetResponseFieldNames = new string[] { "baseResponse", "deviceNameStr", "errorRet", "expiredRet", "funcCtrl", "loginClientVersion", "okret" };
    private static readonly uint[] _extDeviceLoginConfirmGetResponseFieldTags = new uint[] { 10, 42, 26, 34, 56, 48, 18 };
    public static ExtDeviceLoginConfirmGetResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExtDeviceLoginConfirmGetResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExtDeviceLoginConfirmGetResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ExtDeviceLoginConfirmGetResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExtDeviceLoginConfirmGetResponse, ExtDeviceLoginConfirmGetResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ExtDeviceLoginConfirmGetResponse__FieldAccessorTable; }
    }
    
    public const int BaseResponseFieldNumber = 1;
    private bool hasBaseResponse;
    private global::mm.command.BaseResponse baseResponse_;
    public bool HasBaseResponse {
      get { return hasBaseResponse; }
    }
    public global::mm.command.BaseResponse BaseResponse {
      get { return baseResponse_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int OkretFieldNumber = 2;
    private bool hasOkret;
    private global::mm.command.ExtDeviceLoginConfirmOKRet okret_;
    public bool HasOkret {
      get { return hasOkret; }
    }
    public global::mm.command.ExtDeviceLoginConfirmOKRet Okret {
      get { return okret_ ?? global::mm.command.ExtDeviceLoginConfirmOKRet.DefaultInstance; }
    }
    
    public const int ErrorRetFieldNumber = 3;
    private bool hasErrorRet;
    private global::mm.command.ExtDeviceLoginConfirmErrorRet errorRet_;
    public bool HasErrorRet {
      get { return hasErrorRet; }
    }
    public global::mm.command.ExtDeviceLoginConfirmErrorRet ErrorRet {
      get { return errorRet_ ?? global::mm.command.ExtDeviceLoginConfirmErrorRet.DefaultInstance; }
    }
    
    public const int ExpiredRetFieldNumber = 4;
    private bool hasExpiredRet;
    private global::mm.command.ExtDeviceLoginConfirmExpiredRet expiredRet_;
    public bool HasExpiredRet {
      get { return hasExpiredRet; }
    }
    public global::mm.command.ExtDeviceLoginConfirmExpiredRet ExpiredRet {
      get { return expiredRet_ ?? global::mm.command.ExtDeviceLoginConfirmExpiredRet.DefaultInstance; }
    }
    
    public const int DeviceNameStrFieldNumber = 5;
    private bool hasDeviceNameStr;
    private string deviceNameStr_ = "";
    public bool HasDeviceNameStr {
      get { return hasDeviceNameStr; }
    }
    public string DeviceNameStr {
      get { return deviceNameStr_; }
    }
    
    public const int LoginClientVersionFieldNumber = 6;
    private bool hasLoginClientVersion;
    private uint loginClientVersion_;
    public bool HasLoginClientVersion {
      get { return hasLoginClientVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint LoginClientVersion {
      get { return loginClientVersion_; }
    }
    
    public const int FuncCtrlFieldNumber = 7;
    private bool hasFuncCtrl;
    private uint funcCtrl_;
    public bool HasFuncCtrl {
      get { return hasFuncCtrl; }
    }
    [global::System.CLSCompliant(false)]
    public uint FuncCtrl {
      get { return funcCtrl_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBaseResponse) return false;
        if (!BaseResponse.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _extDeviceLoginConfirmGetResponseFieldNames;
      if (hasBaseResponse) {
        output.WriteMessage(1, field_names[0], BaseResponse);
      }
      if (hasOkret) {
        output.WriteMessage(2, field_names[6], Okret);
      }
      if (hasErrorRet) {
        output.WriteMessage(3, field_names[2], ErrorRet);
      }
      if (hasExpiredRet) {
        output.WriteMessage(4, field_names[3], ExpiredRet);
      }
      if (hasDeviceNameStr) {
        output.WriteString(5, field_names[1], DeviceNameStr);
      }
      if (hasLoginClientVersion) {
        output.WriteUInt32(6, field_names[5], LoginClientVersion);
      }
      if (hasFuncCtrl) {
        output.WriteUInt32(7, field_names[4], FuncCtrl);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBaseResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BaseResponse);
        }
        if (hasOkret) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Okret);
        }
        if (hasErrorRet) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, ErrorRet);
        }
        if (hasExpiredRet) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, ExpiredRet);
        }
        if (hasDeviceNameStr) {
          size += pb::CodedOutputStream.ComputeStringSize(5, DeviceNameStr);
        }
        if (hasLoginClientVersion) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, LoginClientVersion);
        }
        if (hasFuncCtrl) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, FuncCtrl);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExtDeviceLoginConfirmGetResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmGetResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExtDeviceLoginConfirmGetResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExtDeviceLoginConfirmGetResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ExtDeviceLoginConfirmGetResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExtDeviceLoginConfirmGetResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExtDeviceLoginConfirmGetResponse result;
      
      private ExtDeviceLoginConfirmGetResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ExtDeviceLoginConfirmGetResponse original = result;
          result = new ExtDeviceLoginConfirmGetResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExtDeviceLoginConfirmGetResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ExtDeviceLoginConfirmGetResponse.Descriptor; }
      }
      
      public override ExtDeviceLoginConfirmGetResponse DefaultInstanceForType {
        get { return global::mm.command.ExtDeviceLoginConfirmGetResponse.DefaultInstance; }
      }
      
      public override ExtDeviceLoginConfirmGetResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExtDeviceLoginConfirmGetResponse) {
          return MergeFrom((ExtDeviceLoginConfirmGetResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExtDeviceLoginConfirmGetResponse other) {
        if (other == global::mm.command.ExtDeviceLoginConfirmGetResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseResponse) {
          MergeBaseResponse(other.BaseResponse);
        }
        if (other.HasOkret) {
          MergeOkret(other.Okret);
        }
        if (other.HasErrorRet) {
          MergeErrorRet(other.ErrorRet);
        }
        if (other.HasExpiredRet) {
          MergeExpiredRet(other.ExpiredRet);
        }
        if (other.HasDeviceNameStr) {
          DeviceNameStr = other.DeviceNameStr;
        }
        if (other.HasLoginClientVersion) {
          LoginClientVersion = other.LoginClientVersion;
        }
        if (other.HasFuncCtrl) {
          FuncCtrl = other.FuncCtrl;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_extDeviceLoginConfirmGetResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _extDeviceLoginConfirmGetResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBaseResponse) {
                subBuilder.MergeFrom(BaseResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseResponse = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.ExtDeviceLoginConfirmOKRet.Builder subBuilder = global::mm.command.ExtDeviceLoginConfirmOKRet.CreateBuilder();
              if (result.hasOkret) {
                subBuilder.MergeFrom(Okret);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Okret = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::mm.command.ExtDeviceLoginConfirmErrorRet.Builder subBuilder = global::mm.command.ExtDeviceLoginConfirmErrorRet.CreateBuilder();
              if (result.hasErrorRet) {
                subBuilder.MergeFrom(ErrorRet);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ErrorRet = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::mm.command.ExtDeviceLoginConfirmExpiredRet.Builder subBuilder = global::mm.command.ExtDeviceLoginConfirmExpiredRet.CreateBuilder();
              if (result.hasExpiredRet) {
                subBuilder.MergeFrom(ExpiredRet);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ExpiredRet = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              result.hasDeviceNameStr = input.ReadString(ref result.deviceNameStr_);
              break;
            }
            case 48: {
              result.hasLoginClientVersion = input.ReadUInt32(ref result.loginClientVersion_);
              break;
            }
            case 56: {
              result.hasFuncCtrl = input.ReadUInt32(ref result.funcCtrl_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBaseResponse {
       get { return result.hasBaseResponse; }
      }
      public global::mm.command.BaseResponse BaseResponse {
        get { return result.BaseResponse; }
        set { SetBaseResponse(value); }
      }
      public Builder SetBaseResponse(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseResponse = true;
        result.baseResponse_ = value;
        return this;
      }
      public Builder SetBaseResponse(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseResponse = true;
        result.baseResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseResponse(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseResponse &&
            result.baseResponse_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.baseResponse_ = global::mm.command.BaseResponse.CreateBuilder(result.baseResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.baseResponse_ = value;
        }
        result.hasBaseResponse = true;
        return this;
      }
      public Builder ClearBaseResponse() {
        PrepareBuilder();
        result.hasBaseResponse = false;
        result.baseResponse_ = null;
        return this;
      }
      
      public bool HasOkret {
       get { return result.hasOkret; }
      }
      public global::mm.command.ExtDeviceLoginConfirmOKRet Okret {
        get { return result.Okret; }
        set { SetOkret(value); }
      }
      public Builder SetOkret(global::mm.command.ExtDeviceLoginConfirmOKRet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasOkret = true;
        result.okret_ = value;
        return this;
      }
      public Builder SetOkret(global::mm.command.ExtDeviceLoginConfirmOKRet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasOkret = true;
        result.okret_ = builderForValue.Build();
        return this;
      }
      public Builder MergeOkret(global::mm.command.ExtDeviceLoginConfirmOKRet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasOkret &&
            result.okret_ != global::mm.command.ExtDeviceLoginConfirmOKRet.DefaultInstance) {
            result.okret_ = global::mm.command.ExtDeviceLoginConfirmOKRet.CreateBuilder(result.okret_).MergeFrom(value).BuildPartial();
        } else {
          result.okret_ = value;
        }
        result.hasOkret = true;
        return this;
      }
      public Builder ClearOkret() {
        PrepareBuilder();
        result.hasOkret = false;
        result.okret_ = null;
        return this;
      }
      
      public bool HasErrorRet {
       get { return result.hasErrorRet; }
      }
      public global::mm.command.ExtDeviceLoginConfirmErrorRet ErrorRet {
        get { return result.ErrorRet; }
        set { SetErrorRet(value); }
      }
      public Builder SetErrorRet(global::mm.command.ExtDeviceLoginConfirmErrorRet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasErrorRet = true;
        result.errorRet_ = value;
        return this;
      }
      public Builder SetErrorRet(global::mm.command.ExtDeviceLoginConfirmErrorRet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasErrorRet = true;
        result.errorRet_ = builderForValue.Build();
        return this;
      }
      public Builder MergeErrorRet(global::mm.command.ExtDeviceLoginConfirmErrorRet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasErrorRet &&
            result.errorRet_ != global::mm.command.ExtDeviceLoginConfirmErrorRet.DefaultInstance) {
            result.errorRet_ = global::mm.command.ExtDeviceLoginConfirmErrorRet.CreateBuilder(result.errorRet_).MergeFrom(value).BuildPartial();
        } else {
          result.errorRet_ = value;
        }
        result.hasErrorRet = true;
        return this;
      }
      public Builder ClearErrorRet() {
        PrepareBuilder();
        result.hasErrorRet = false;
        result.errorRet_ = null;
        return this;
      }
      
      public bool HasExpiredRet {
       get { return result.hasExpiredRet; }
      }
      public global::mm.command.ExtDeviceLoginConfirmExpiredRet ExpiredRet {
        get { return result.ExpiredRet; }
        set { SetExpiredRet(value); }
      }
      public Builder SetExpiredRet(global::mm.command.ExtDeviceLoginConfirmExpiredRet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasExpiredRet = true;
        result.expiredRet_ = value;
        return this;
      }
      public Builder SetExpiredRet(global::mm.command.ExtDeviceLoginConfirmExpiredRet.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasExpiredRet = true;
        result.expiredRet_ = builderForValue.Build();
        return this;
      }
      public Builder MergeExpiredRet(global::mm.command.ExtDeviceLoginConfirmExpiredRet value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasExpiredRet &&
            result.expiredRet_ != global::mm.command.ExtDeviceLoginConfirmExpiredRet.DefaultInstance) {
            result.expiredRet_ = global::mm.command.ExtDeviceLoginConfirmExpiredRet.CreateBuilder(result.expiredRet_).MergeFrom(value).BuildPartial();
        } else {
          result.expiredRet_ = value;
        }
        result.hasExpiredRet = true;
        return this;
      }
      public Builder ClearExpiredRet() {
        PrepareBuilder();
        result.hasExpiredRet = false;
        result.expiredRet_ = null;
        return this;
      }
      
      public bool HasDeviceNameStr {
        get { return result.hasDeviceNameStr; }
      }
      public string DeviceNameStr {
        get { return result.DeviceNameStr; }
        set { SetDeviceNameStr(value); }
      }
      public Builder SetDeviceNameStr(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasDeviceNameStr = true;
        result.deviceNameStr_ = value;
        return this;
      }
      public Builder ClearDeviceNameStr() {
        PrepareBuilder();
        result.hasDeviceNameStr = false;
        result.deviceNameStr_ = "";
        return this;
      }
      
      public bool HasLoginClientVersion {
        get { return result.hasLoginClientVersion; }
      }
      [global::System.CLSCompliant(false)]
      public uint LoginClientVersion {
        get { return result.LoginClientVersion; }
        set { SetLoginClientVersion(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLoginClientVersion(uint value) {
        PrepareBuilder();
        result.hasLoginClientVersion = true;
        result.loginClientVersion_ = value;
        return this;
      }
      public Builder ClearLoginClientVersion() {
        PrepareBuilder();
        result.hasLoginClientVersion = false;
        result.loginClientVersion_ = 0;
        return this;
      }
      
      public bool HasFuncCtrl {
        get { return result.hasFuncCtrl; }
      }
      [global::System.CLSCompliant(false)]
      public uint FuncCtrl {
        get { return result.FuncCtrl; }
        set { SetFuncCtrl(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetFuncCtrl(uint value) {
        PrepareBuilder();
        result.hasFuncCtrl = true;
        result.funcCtrl_ = value;
        return this;
      }
      public Builder ClearFuncCtrl() {
        PrepareBuilder();
        result.hasFuncCtrl = false;
        result.funcCtrl_ = 0;
        return this;
      }
    }
    static ExtDeviceLoginConfirmGetResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExtDeviceLoginConfirmOKRequest : pb::GeneratedMessage<ExtDeviceLoginConfirmOKRequest, ExtDeviceLoginConfirmOKRequest.Builder> {
    private ExtDeviceLoginConfirmOKRequest() { }
    private static readonly ExtDeviceLoginConfirmOKRequest defaultInstance = new ExtDeviceLoginConfirmOKRequest().MakeReadOnly();
    private static readonly string[] _extDeviceLoginConfirmOKRequestFieldNames = new string[] { "loginUrl", "sessionList", "syncMsg", "unReadChatContactList" };
    private static readonly uint[] _extDeviceLoginConfirmOKRequestFieldTags = new uint[] { 10, 18, 32, 26 };
    public static ExtDeviceLoginConfirmOKRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExtDeviceLoginConfirmOKRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExtDeviceLoginConfirmOKRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ExtDeviceLoginConfirmOKRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExtDeviceLoginConfirmOKRequest, ExtDeviceLoginConfirmOKRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ExtDeviceLoginConfirmOKRequest__FieldAccessorTable; }
    }
    
    public const int LoginUrlFieldNumber = 1;
    private bool hasLoginUrl;
    private string loginUrl_ = "";
    public bool HasLoginUrl {
      get { return hasLoginUrl; }
    }
    public string LoginUrl {
      get { return loginUrl_; }
    }
    
    public const int SessionListFieldNumber = 2;
    private bool hasSessionList;
    private string sessionList_ = "";
    public bool HasSessionList {
      get { return hasSessionList; }
    }
    public string SessionList {
      get { return sessionList_; }
    }
    
    public const int UnReadChatContactListFieldNumber = 3;
    private pbc::PopsicleList<string> unReadChatContactList_ = new pbc::PopsicleList<string>();
    public scg::IList<string> UnReadChatContactListList {
      get { return pbc::Lists.AsReadOnly(unReadChatContactList_); }
    }
    public int UnReadChatContactListCount {
      get { return unReadChatContactList_.Count; }
    }
    public string GetUnReadChatContactList(int index) {
      return unReadChatContactList_[index];
    }
    
    public const int SyncMsgFieldNumber = 4;
    private bool hasSyncMsg;
    private uint syncMsg_;
    public bool HasSyncMsg {
      get { return hasSyncMsg; }
    }
    [global::System.CLSCompliant(false)]
    public uint SyncMsg {
      get { return syncMsg_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLoginUrl) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _extDeviceLoginConfirmOKRequestFieldNames;
      if (hasLoginUrl) {
        output.WriteString(1, field_names[0], LoginUrl);
      }
      if (hasSessionList) {
        output.WriteString(2, field_names[1], SessionList);
      }
      if (unReadChatContactList_.Count > 0) {
        output.WriteStringArray(3, field_names[3], unReadChatContactList_);
      }
      if (hasSyncMsg) {
        output.WriteUInt32(4, field_names[2], SyncMsg);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLoginUrl) {
          size += pb::CodedOutputStream.ComputeStringSize(1, LoginUrl);
        }
        if (hasSessionList) {
          size += pb::CodedOutputStream.ComputeStringSize(2, SessionList);
        }
        {
          int dataSize = 0;
          foreach (string element in UnReadChatContactListList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * unReadChatContactList_.Count;
        }
        if (hasSyncMsg) {
          size += pb::CodedOutputStream.ComputeUInt32Size(4, SyncMsg);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExtDeviceLoginConfirmOKRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExtDeviceLoginConfirmOKRequest MakeReadOnly() {
      unReadChatContactList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExtDeviceLoginConfirmOKRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ExtDeviceLoginConfirmOKRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExtDeviceLoginConfirmOKRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExtDeviceLoginConfirmOKRequest result;
      
      private ExtDeviceLoginConfirmOKRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ExtDeviceLoginConfirmOKRequest original = result;
          result = new ExtDeviceLoginConfirmOKRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExtDeviceLoginConfirmOKRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ExtDeviceLoginConfirmOKRequest.Descriptor; }
      }
      
      public override ExtDeviceLoginConfirmOKRequest DefaultInstanceForType {
        get { return global::mm.command.ExtDeviceLoginConfirmOKRequest.DefaultInstance; }
      }
      
      public override ExtDeviceLoginConfirmOKRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExtDeviceLoginConfirmOKRequest) {
          return MergeFrom((ExtDeviceLoginConfirmOKRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExtDeviceLoginConfirmOKRequest other) {
        if (other == global::mm.command.ExtDeviceLoginConfirmOKRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLoginUrl) {
          LoginUrl = other.LoginUrl;
        }
        if (other.HasSessionList) {
          SessionList = other.SessionList;
        }
        if (other.unReadChatContactList_.Count != 0) {
          result.unReadChatContactList_.Add(other.unReadChatContactList_);
        }
        if (other.HasSyncMsg) {
          SyncMsg = other.SyncMsg;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_extDeviceLoginConfirmOKRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _extDeviceLoginConfirmOKRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasLoginUrl = input.ReadString(ref result.loginUrl_);
              break;
            }
            case 18: {
              result.hasSessionList = input.ReadString(ref result.sessionList_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.unReadChatContactList_);
              break;
            }
            case 32: {
              result.hasSyncMsg = input.ReadUInt32(ref result.syncMsg_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLoginUrl {
        get { return result.hasLoginUrl; }
      }
      public string LoginUrl {
        get { return result.LoginUrl; }
        set { SetLoginUrl(value); }
      }
      public Builder SetLoginUrl(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLoginUrl = true;
        result.loginUrl_ = value;
        return this;
      }
      public Builder ClearLoginUrl() {
        PrepareBuilder();
        result.hasLoginUrl = false;
        result.loginUrl_ = "";
        return this;
      }
      
      public bool HasSessionList {
        get { return result.hasSessionList; }
      }
      public string SessionList {
        get { return result.SessionList; }
        set { SetSessionList(value); }
      }
      public Builder SetSessionList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSessionList = true;
        result.sessionList_ = value;
        return this;
      }
      public Builder ClearSessionList() {
        PrepareBuilder();
        result.hasSessionList = false;
        result.sessionList_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> UnReadChatContactListList {
        get { return PrepareBuilder().unReadChatContactList_; }
      }
      public int UnReadChatContactListCount {
        get { return result.UnReadChatContactListCount; }
      }
      public string GetUnReadChatContactList(int index) {
        return result.GetUnReadChatContactList(index);
      }
      public Builder SetUnReadChatContactList(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unReadChatContactList_[index] = value;
        return this;
      }
      public Builder AddUnReadChatContactList(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.unReadChatContactList_.Add(value);
        return this;
      }
      public Builder AddRangeUnReadChatContactList(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.unReadChatContactList_.Add(values);
        return this;
      }
      public Builder ClearUnReadChatContactList() {
        PrepareBuilder();
        result.unReadChatContactList_.Clear();
        return this;
      }
      
      public bool HasSyncMsg {
        get { return result.hasSyncMsg; }
      }
      [global::System.CLSCompliant(false)]
      public uint SyncMsg {
        get { return result.SyncMsg; }
        set { SetSyncMsg(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSyncMsg(uint value) {
        PrepareBuilder();
        result.hasSyncMsg = true;
        result.syncMsg_ = value;
        return this;
      }
      public Builder ClearSyncMsg() {
        PrepareBuilder();
        result.hasSyncMsg = false;
        result.syncMsg_ = 0;
        return this;
      }
    }
    static ExtDeviceLoginConfirmOKRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ExtDeviceLoginConfirmOKResponse : pb::GeneratedMessage<ExtDeviceLoginConfirmOKResponse, ExtDeviceLoginConfirmOKResponse.Builder> {
    private ExtDeviceLoginConfirmOKResponse() { }
    private static readonly ExtDeviceLoginConfirmOKResponse defaultInstance = new ExtDeviceLoginConfirmOKResponse().MakeReadOnly();
    private static readonly string[] _extDeviceLoginConfirmOKResponseFieldNames = new string[] { "baseResponse", "msgContextPubKey" };
    private static readonly uint[] _extDeviceLoginConfirmOKResponseFieldTags = new uint[] { 10, 18 };
    public static ExtDeviceLoginConfirmOKResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ExtDeviceLoginConfirmOKResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ExtDeviceLoginConfirmOKResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ExtDeviceLoginConfirmOKResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ExtDeviceLoginConfirmOKResponse, ExtDeviceLoginConfirmOKResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_ExtDeviceLoginConfirmOKResponse__FieldAccessorTable; }
    }
    
    public const int BaseResponseFieldNumber = 1;
    private bool hasBaseResponse;
    private global::mm.command.BaseResponse baseResponse_;
    public bool HasBaseResponse {
      get { return hasBaseResponse; }
    }
    public global::mm.command.BaseResponse BaseResponse {
      get { return baseResponse_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int MsgContextPubKeyFieldNumber = 2;
    private bool hasMsgContextPubKey;
    private pb::ByteString msgContextPubKey_ = pb::ByteString.Empty;
    public bool HasMsgContextPubKey {
      get { return hasMsgContextPubKey; }
    }
    public pb::ByteString MsgContextPubKey {
      get { return msgContextPubKey_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBaseResponse) return false;
        if (!BaseResponse.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _extDeviceLoginConfirmOKResponseFieldNames;
      if (hasBaseResponse) {
        output.WriteMessage(1, field_names[0], BaseResponse);
      }
      if (hasMsgContextPubKey) {
        output.WriteBytes(2, field_names[1], MsgContextPubKey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBaseResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BaseResponse);
        }
        if (hasMsgContextPubKey) {
          size += pb::CodedOutputStream.ComputeBytesSize(2, MsgContextPubKey);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ExtDeviceLoginConfirmOKResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ExtDeviceLoginConfirmOKResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ExtDeviceLoginConfirmOKResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ExtDeviceLoginConfirmOKResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ExtDeviceLoginConfirmOKResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ExtDeviceLoginConfirmOKResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ExtDeviceLoginConfirmOKResponse result;
      
      private ExtDeviceLoginConfirmOKResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ExtDeviceLoginConfirmOKResponse original = result;
          result = new ExtDeviceLoginConfirmOKResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ExtDeviceLoginConfirmOKResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.ExtDeviceLoginConfirmOKResponse.Descriptor; }
      }
      
      public override ExtDeviceLoginConfirmOKResponse DefaultInstanceForType {
        get { return global::mm.command.ExtDeviceLoginConfirmOKResponse.DefaultInstance; }
      }
      
      public override ExtDeviceLoginConfirmOKResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ExtDeviceLoginConfirmOKResponse) {
          return MergeFrom((ExtDeviceLoginConfirmOKResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ExtDeviceLoginConfirmOKResponse other) {
        if (other == global::mm.command.ExtDeviceLoginConfirmOKResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseResponse) {
          MergeBaseResponse(other.BaseResponse);
        }
        if (other.HasMsgContextPubKey) {
          MsgContextPubKey = other.MsgContextPubKey;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_extDeviceLoginConfirmOKResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _extDeviceLoginConfirmOKResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBaseResponse) {
                subBuilder.MergeFrom(BaseResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseResponse = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasMsgContextPubKey = input.ReadBytes(ref result.msgContextPubKey_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBaseResponse {
       get { return result.hasBaseResponse; }
      }
      public global::mm.command.BaseResponse BaseResponse {
        get { return result.BaseResponse; }
        set { SetBaseResponse(value); }
      }
      public Builder SetBaseResponse(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseResponse = true;
        result.baseResponse_ = value;
        return this;
      }
      public Builder SetBaseResponse(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseResponse = true;
        result.baseResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseResponse(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseResponse &&
            result.baseResponse_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.baseResponse_ = global::mm.command.BaseResponse.CreateBuilder(result.baseResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.baseResponse_ = value;
        }
        result.hasBaseResponse = true;
        return this;
      }
      public Builder ClearBaseResponse() {
        PrepareBuilder();
        result.hasBaseResponse = false;
        result.baseResponse_ = null;
        return this;
      }
      
      public bool HasMsgContextPubKey {
        get { return result.hasMsgContextPubKey; }
      }
      public pb::ByteString MsgContextPubKey {
        get { return result.MsgContextPubKey; }
        set { SetMsgContextPubKey(value); }
      }
      public Builder SetMsgContextPubKey(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasMsgContextPubKey = true;
        result.msgContextPubKey_ = value;
        return this;
      }
      public Builder ClearMsgContextPubKey() {
        PrepareBuilder();
        result.hasMsgContextPubKey = false;
        result.msgContextPubKey_ = pb::ByteString.Empty;
        return this;
      }
    }
    static ExtDeviceLoginConfirmOKResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LogOutWebWxRequest : pb::GeneratedMessage<LogOutWebWxRequest, LogOutWebWxRequest.Builder> {
    private LogOutWebWxRequest() { }
    private static readonly LogOutWebWxRequest defaultInstance = new LogOutWebWxRequest().MakeReadOnly();
    private static readonly string[] _logOutWebWxRequestFieldNames = new string[] { "base", "opCode" };
    private static readonly uint[] _logOutWebWxRequestFieldTags = new uint[] { 10, 16 };
    public static LogOutWebWxRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LogOutWebWxRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LogOutWebWxRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LogOutWebWxRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LogOutWebWxRequest, LogOutWebWxRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LogOutWebWxRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int OpCodeFieldNumber = 2;
    private bool hasOpCode;
    private uint opCode_;
    public bool HasOpCode {
      get { return hasOpCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint OpCode {
      get { return opCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _logOutWebWxRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      if (hasOpCode) {
        output.WriteUInt32(2, field_names[1], OpCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasOpCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, OpCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LogOutWebWxRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogOutWebWxRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogOutWebWxRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogOutWebWxRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogOutWebWxRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogOutWebWxRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LogOutWebWxRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LogOutWebWxRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LogOutWebWxRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogOutWebWxRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LogOutWebWxRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LogOutWebWxRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LogOutWebWxRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LogOutWebWxRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LogOutWebWxRequest result;
      
      private LogOutWebWxRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LogOutWebWxRequest original = result;
          result = new LogOutWebWxRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LogOutWebWxRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.LogOutWebWxRequest.Descriptor; }
      }
      
      public override LogOutWebWxRequest DefaultInstanceForType {
        get { return global::mm.command.LogOutWebWxRequest.DefaultInstance; }
      }
      
      public override LogOutWebWxRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LogOutWebWxRequest) {
          return MergeFrom((LogOutWebWxRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LogOutWebWxRequest other) {
        if (other == global::mm.command.LogOutWebWxRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasOpCode) {
          OpCode = other.OpCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_logOutWebWxRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _logOutWebWxRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOpCode = input.ReadUInt32(ref result.opCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasOpCode {
        get { return result.hasOpCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint OpCode {
        get { return result.OpCode; }
        set { SetOpCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpCode(uint value) {
        PrepareBuilder();
        result.hasOpCode = true;
        result.opCode_ = value;
        return this;
      }
      public Builder ClearOpCode() {
        PrepareBuilder();
        result.hasOpCode = false;
        result.opCode_ = 0;
        return this;
      }
    }
    static LogOutWebWxRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class LogOutWebWxResponse : pb::GeneratedMessage<LogOutWebWxResponse, LogOutWebWxResponse.Builder> {
    private LogOutWebWxResponse() { }
    private static readonly LogOutWebWxResponse defaultInstance = new LogOutWebWxResponse().MakeReadOnly();
    private static readonly string[] _logOutWebWxResponseFieldNames = new string[] { "baseResponse", "opCode" };
    private static readonly uint[] _logOutWebWxResponseFieldTags = new uint[] { 10, 16 };
    public static LogOutWebWxResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LogOutWebWxResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LogOutWebWxResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LogOutWebWxResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LogOutWebWxResponse, LogOutWebWxResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_LogOutWebWxResponse__FieldAccessorTable; }
    }
    
    public const int BaseResponseFieldNumber = 1;
    private bool hasBaseResponse;
    private global::mm.command.BaseResponse baseResponse_;
    public bool HasBaseResponse {
      get { return hasBaseResponse; }
    }
    public global::mm.command.BaseResponse BaseResponse {
      get { return baseResponse_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int OpCodeFieldNumber = 2;
    private bool hasOpCode;
    private uint opCode_;
    public bool HasOpCode {
      get { return hasOpCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint OpCode {
      get { return opCode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBaseResponse) return false;
        if (!BaseResponse.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _logOutWebWxResponseFieldNames;
      if (hasBaseResponse) {
        output.WriteMessage(1, field_names[0], BaseResponse);
      }
      if (hasOpCode) {
        output.WriteUInt32(2, field_names[1], OpCode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBaseResponse) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BaseResponse);
        }
        if (hasOpCode) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, OpCode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LogOutWebWxResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogOutWebWxResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogOutWebWxResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LogOutWebWxResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LogOutWebWxResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogOutWebWxResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LogOutWebWxResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LogOutWebWxResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LogOutWebWxResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LogOutWebWxResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LogOutWebWxResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LogOutWebWxResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<LogOutWebWxResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LogOutWebWxResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LogOutWebWxResponse result;
      
      private LogOutWebWxResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          LogOutWebWxResponse original = result;
          result = new LogOutWebWxResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LogOutWebWxResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.LogOutWebWxResponse.Descriptor; }
      }
      
      public override LogOutWebWxResponse DefaultInstanceForType {
        get { return global::mm.command.LogOutWebWxResponse.DefaultInstance; }
      }
      
      public override LogOutWebWxResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LogOutWebWxResponse) {
          return MergeFrom((LogOutWebWxResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LogOutWebWxResponse other) {
        if (other == global::mm.command.LogOutWebWxResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseResponse) {
          MergeBaseResponse(other.BaseResponse);
        }
        if (other.HasOpCode) {
          OpCode = other.OpCode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_logOutWebWxResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _logOutWebWxResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBaseResponse) {
                subBuilder.MergeFrom(BaseResponse);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseResponse = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasOpCode = input.ReadUInt32(ref result.opCode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBaseResponse {
       get { return result.hasBaseResponse; }
      }
      public global::mm.command.BaseResponse BaseResponse {
        get { return result.BaseResponse; }
        set { SetBaseResponse(value); }
      }
      public Builder SetBaseResponse(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseResponse = true;
        result.baseResponse_ = value;
        return this;
      }
      public Builder SetBaseResponse(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseResponse = true;
        result.baseResponse_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseResponse(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseResponse &&
            result.baseResponse_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.baseResponse_ = global::mm.command.BaseResponse.CreateBuilder(result.baseResponse_).MergeFrom(value).BuildPartial();
        } else {
          result.baseResponse_ = value;
        }
        result.hasBaseResponse = true;
        return this;
      }
      public Builder ClearBaseResponse() {
        PrepareBuilder();
        result.hasBaseResponse = false;
        result.baseResponse_ = null;
        return this;
      }
      
      public bool HasOpCode {
        get { return result.hasOpCode; }
      }
      [global::System.CLSCompliant(false)]
      public uint OpCode {
        get { return result.OpCode; }
        set { SetOpCode(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetOpCode(uint value) {
        PrepareBuilder();
        result.hasOpCode = true;
        result.opCode_ = value;
        return this;
      }
      public Builder ClearOpCode() {
        PrepareBuilder();
        result.hasOpCode = false;
        result.opCode_ = 0;
        return this;
      }
    }
    static LogOutWebWxResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetBioConfigRequest : pb::GeneratedMessage<GetBioConfigRequest, GetBioConfigRequest.Builder> {
    private GetBioConfigRequest() { }
    private static readonly GetBioConfigRequest defaultInstance = new GetBioConfigRequest().MakeReadOnly();
    private static readonly string[] _getBioConfigRequestFieldNames = new string[] { "RandomEncryKey", "UserTicket", "base", "scene", "type" };
    private static readonly uint[] _getBioConfigRequestFieldTags = new uint[] { 42, 34, 10, 24, 16 };
    public static GetBioConfigRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetBioConfigRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetBioConfigRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetBioConfigRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetBioConfigRequest, GetBioConfigRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetBioConfigRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private uint type_;
    public bool HasType {
      get { return hasType; }
    }
    [global::System.CLSCompliant(false)]
    public uint Type {
      get { return type_; }
    }
    
    public const int SceneFieldNumber = 3;
    private bool hasScene;
    private uint scene_;
    public bool HasScene {
      get { return hasScene; }
    }
    [global::System.CLSCompliant(false)]
    public uint Scene {
      get { return scene_; }
    }
    
    public const int UserTicketFieldNumber = 4;
    private bool hasUserTicket;
    private string userTicket_ = "";
    public bool HasUserTicket {
      get { return hasUserTicket; }
    }
    public string UserTicket {
      get { return userTicket_; }
    }
    
    public const int RandomEncryKeyFieldNumber = 5;
    private bool hasRandomEncryKey;
    private global::mm.command.SKBuiltinBuffer_t randomEncryKey_;
    public bool HasRandomEncryKey {
      get { return hasRandomEncryKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
      get { return randomEncryKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasRandomEncryKey) {
          if (!RandomEncryKey.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getBioConfigRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasType) {
        output.WriteUInt32(2, field_names[4], Type);
      }
      if (hasScene) {
        output.WriteUInt32(3, field_names[3], Scene);
      }
      if (hasUserTicket) {
        output.WriteString(4, field_names[1], UserTicket);
      }
      if (hasRandomEncryKey) {
        output.WriteMessage(5, field_names[0], RandomEncryKey);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeUInt32Size(2, Type);
        }
        if (hasScene) {
          size += pb::CodedOutputStream.ComputeUInt32Size(3, Scene);
        }
        if (hasUserTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(4, UserTicket);
        }
        if (hasRandomEncryKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, RandomEncryKey);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetBioConfigRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetBioConfigRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetBioConfigRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetBioConfigRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetBioConfigRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetBioConfigRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetBioConfigRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetBioConfigRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetBioConfigRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetBioConfigRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetBioConfigRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetBioConfigRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetBioConfigRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetBioConfigRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetBioConfigRequest result;
      
      private GetBioConfigRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetBioConfigRequest original = result;
          result = new GetBioConfigRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetBioConfigRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetBioConfigRequest.Descriptor; }
      }
      
      public override GetBioConfigRequest DefaultInstanceForType {
        get { return global::mm.command.GetBioConfigRequest.DefaultInstance; }
      }
      
      public override GetBioConfigRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetBioConfigRequest) {
          return MergeFrom((GetBioConfigRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetBioConfigRequest other) {
        if (other == global::mm.command.GetBioConfigRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasScene) {
          Scene = other.Scene;
        }
        if (other.HasUserTicket) {
          UserTicket = other.UserTicket;
        }
        if (other.HasRandomEncryKey) {
          MergeRandomEncryKey(other.RandomEncryKey);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getBioConfigRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getBioConfigRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasType = input.ReadUInt32(ref result.type_);
              break;
            }
            case 24: {
              result.hasScene = input.ReadUInt32(ref result.scene_);
              break;
            }
            case 34: {
              result.hasUserTicket = input.ReadString(ref result.userTicket_);
              break;
            }
            case 42: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasRandomEncryKey) {
                subBuilder.MergeFrom(RandomEncryKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RandomEncryKey = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      [global::System.CLSCompliant(false)]
      public uint Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetType(uint value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasScene {
        get { return result.hasScene; }
      }
      [global::System.CLSCompliant(false)]
      public uint Scene {
        get { return result.Scene; }
        set { SetScene(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetScene(uint value) {
        PrepareBuilder();
        result.hasScene = true;
        result.scene_ = value;
        return this;
      }
      public Builder ClearScene() {
        PrepareBuilder();
        result.hasScene = false;
        result.scene_ = 0;
        return this;
      }
      
      public bool HasUserTicket {
        get { return result.hasUserTicket; }
      }
      public string UserTicket {
        get { return result.UserTicket; }
        set { SetUserTicket(value); }
      }
      public Builder SetUserTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserTicket = true;
        result.userTicket_ = value;
        return this;
      }
      public Builder ClearUserTicket() {
        PrepareBuilder();
        result.hasUserTicket = false;
        result.userTicket_ = "";
        return this;
      }
      
      public bool HasRandomEncryKey {
       get { return result.hasRandomEncryKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
        get { return result.RandomEncryKey; }
        set { SetRandomEncryKey(value); }
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = value;
        return this;
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRandomEncryKey &&
            result.randomEncryKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.randomEncryKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.randomEncryKey_).MergeFrom(value).BuildPartial();
        } else {
          result.randomEncryKey_ = value;
        }
        result.hasRandomEncryKey = true;
        return this;
      }
      public Builder ClearRandomEncryKey() {
        PrepareBuilder();
        result.hasRandomEncryKey = false;
        result.randomEncryKey_ = null;
        return this;
      }
    }
    static GetBioConfigRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetBioConfigResponse : pb::GeneratedMessage<GetBioConfigResponse, GetBioConfigResponse.Builder> {
    private GetBioConfigResponse() { }
    private static readonly GetBioConfigResponse defaultInstance = new GetBioConfigResponse().MakeReadOnly();
    private static readonly string[] _getBioConfigResponseFieldNames = new string[] { "BioID", "base", "cdnInfo", "cfgBuffer", "server" };
    private static readonly uint[] _getBioConfigResponseFieldTags = new uint[] { 16, 10, 42, 26, 34 };
    public static GetBioConfigResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetBioConfigResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetBioConfigResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetBioConfigResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetBioConfigResponse, GetBioConfigResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetBioConfigResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int BioIDFieldNumber = 2;
    private bool hasBioID;
    private ulong bioID_;
    public bool HasBioID {
      get { return hasBioID; }
    }
    [global::System.CLSCompliant(false)]
    public ulong BioID {
      get { return bioID_; }
    }
    
    public const int CfgBufferFieldNumber = 3;
    private bool hasCfgBuffer;
    private pb::ByteString cfgBuffer_ = pb::ByteString.Empty;
    public bool HasCfgBuffer {
      get { return hasCfgBuffer; }
    }
    public pb::ByteString CfgBuffer {
      get { return cfgBuffer_; }
    }
    
    public const int ServerFieldNumber = 4;
    private bool hasServer;
    private global::mm.command.ServerInfo server_;
    public bool HasServer {
      get { return hasServer; }
    }
    public global::mm.command.ServerInfo Server {
      get { return server_ ?? global::mm.command.ServerInfo.DefaultInstance; }
    }
    
    public const int CdnInfoFieldNumber = 5;
    private bool hasCdnInfo;
    private global::mm.command.CdnInfo cdnInfo_;
    public bool HasCdnInfo {
      get { return hasCdnInfo; }
    }
    public global::mm.command.CdnInfo CdnInfo {
      get { return cdnInfo_ ?? global::mm.command.CdnInfo.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasServer) {
          if (!Server.IsInitialized) return false;
        }
        if (HasCdnInfo) {
          if (!CdnInfo.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getBioConfigResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[1], Base);
      }
      if (hasBioID) {
        output.WriteUInt64(2, field_names[0], BioID);
      }
      if (hasCfgBuffer) {
        output.WriteBytes(3, field_names[3], CfgBuffer);
      }
      if (hasServer) {
        output.WriteMessage(4, field_names[4], Server);
      }
      if (hasCdnInfo) {
        output.WriteMessage(5, field_names[2], CdnInfo);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasBioID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, BioID);
        }
        if (hasCfgBuffer) {
          size += pb::CodedOutputStream.ComputeBytesSize(3, CfgBuffer);
        }
        if (hasServer) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Server);
        }
        if (hasCdnInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, CdnInfo);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetBioConfigResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetBioConfigResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetBioConfigResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetBioConfigResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetBioConfigResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetBioConfigResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetBioConfigResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetBioConfigResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetBioConfigResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetBioConfigResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetBioConfigResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetBioConfigResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetBioConfigResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetBioConfigResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetBioConfigResponse result;
      
      private GetBioConfigResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetBioConfigResponse original = result;
          result = new GetBioConfigResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetBioConfigResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetBioConfigResponse.Descriptor; }
      }
      
      public override GetBioConfigResponse DefaultInstanceForType {
        get { return global::mm.command.GetBioConfigResponse.DefaultInstance; }
      }
      
      public override GetBioConfigResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetBioConfigResponse) {
          return MergeFrom((GetBioConfigResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetBioConfigResponse other) {
        if (other == global::mm.command.GetBioConfigResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasBioID) {
          BioID = other.BioID;
        }
        if (other.HasCfgBuffer) {
          CfgBuffer = other.CfgBuffer;
        }
        if (other.HasServer) {
          MergeServer(other.Server);
        }
        if (other.HasCdnInfo) {
          MergeCdnInfo(other.CdnInfo);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getBioConfigResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getBioConfigResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasBioID = input.ReadUInt64(ref result.bioID_);
              break;
            }
            case 26: {
              result.hasCfgBuffer = input.ReadBytes(ref result.cfgBuffer_);
              break;
            }
            case 34: {
              global::mm.command.ServerInfo.Builder subBuilder = global::mm.command.ServerInfo.CreateBuilder();
              if (result.hasServer) {
                subBuilder.MergeFrom(Server);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Server = subBuilder.BuildPartial();
              break;
            }
            case 42: {
              global::mm.command.CdnInfo.Builder subBuilder = global::mm.command.CdnInfo.CreateBuilder();
              if (result.hasCdnInfo) {
                subBuilder.MergeFrom(CdnInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CdnInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasBioID {
        get { return result.hasBioID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong BioID {
        get { return result.BioID; }
        set { SetBioID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBioID(ulong value) {
        PrepareBuilder();
        result.hasBioID = true;
        result.bioID_ = value;
        return this;
      }
      public Builder ClearBioID() {
        PrepareBuilder();
        result.hasBioID = false;
        result.bioID_ = 0UL;
        return this;
      }
      
      public bool HasCfgBuffer {
        get { return result.hasCfgBuffer; }
      }
      public pb::ByteString CfgBuffer {
        get { return result.CfgBuffer; }
        set { SetCfgBuffer(value); }
      }
      public Builder SetCfgBuffer(pb::ByteString value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCfgBuffer = true;
        result.cfgBuffer_ = value;
        return this;
      }
      public Builder ClearCfgBuffer() {
        PrepareBuilder();
        result.hasCfgBuffer = false;
        result.cfgBuffer_ = pb::ByteString.Empty;
        return this;
      }
      
      public bool HasServer {
       get { return result.hasServer; }
      }
      public global::mm.command.ServerInfo Server {
        get { return result.Server; }
        set { SetServer(value); }
      }
      public Builder SetServer(global::mm.command.ServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServer = true;
        result.server_ = value;
        return this;
      }
      public Builder SetServer(global::mm.command.ServerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasServer = true;
        result.server_ = builderForValue.Build();
        return this;
      }
      public Builder MergeServer(global::mm.command.ServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasServer &&
            result.server_ != global::mm.command.ServerInfo.DefaultInstance) {
            result.server_ = global::mm.command.ServerInfo.CreateBuilder(result.server_).MergeFrom(value).BuildPartial();
        } else {
          result.server_ = value;
        }
        result.hasServer = true;
        return this;
      }
      public Builder ClearServer() {
        PrepareBuilder();
        result.hasServer = false;
        result.server_ = null;
        return this;
      }
      
      public bool HasCdnInfo {
       get { return result.hasCdnInfo; }
      }
      public global::mm.command.CdnInfo CdnInfo {
        get { return result.CdnInfo; }
        set { SetCdnInfo(value); }
      }
      public Builder SetCdnInfo(global::mm.command.CdnInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCdnInfo = true;
        result.cdnInfo_ = value;
        return this;
      }
      public Builder SetCdnInfo(global::mm.command.CdnInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCdnInfo = true;
        result.cdnInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCdnInfo(global::mm.command.CdnInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCdnInfo &&
            result.cdnInfo_ != global::mm.command.CdnInfo.DefaultInstance) {
            result.cdnInfo_ = global::mm.command.CdnInfo.CreateBuilder(result.cdnInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.cdnInfo_ = value;
        }
        result.hasCdnInfo = true;
        return this;
      }
      public Builder ClearCdnInfo() {
        PrepareBuilder();
        result.hasCdnInfo = false;
        result.cdnInfo_ = null;
        return this;
      }
    }
    static GetBioConfigResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RegisterFaceRequest : pb::GeneratedMessage<RegisterFaceRequest, RegisterFaceRequest.Builder> {
    private RegisterFaceRequest() { }
    private static readonly RegisterFaceRequest defaultInstance = new RegisterFaceRequest().MakeReadOnly();
    private static readonly string[] _registerFaceRequestFieldNames = new string[] { "BioID", "CDNFileID", "CDNKey", "RandomEncryKey", "UserTicket", "base", "scene" };
    private static readonly uint[] _registerFaceRequestFieldTags = new uint[] { 16, 26, 34, 50, 42, 10, 56 };
    public static RegisterFaceRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RegisterFaceRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RegisterFaceRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_RegisterFaceRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RegisterFaceRequest, RegisterFaceRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_RegisterFaceRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int BioIDFieldNumber = 2;
    private bool hasBioID;
    private ulong bioID_;
    public bool HasBioID {
      get { return hasBioID; }
    }
    [global::System.CLSCompliant(false)]
    public ulong BioID {
      get { return bioID_; }
    }
    
    public const int CDNFileIDFieldNumber = 3;
    private bool hasCDNFileID;
    private string cDNFileID_ = "";
    public bool HasCDNFileID {
      get { return hasCDNFileID; }
    }
    public string CDNFileID {
      get { return cDNFileID_; }
    }
    
    public const int CDNKeyFieldNumber = 4;
    private bool hasCDNKey;
    private string cDNKey_ = "";
    public bool HasCDNKey {
      get { return hasCDNKey; }
    }
    public string CDNKey {
      get { return cDNKey_; }
    }
    
    public const int UserTicketFieldNumber = 5;
    private bool hasUserTicket;
    private string userTicket_ = "";
    public bool HasUserTicket {
      get { return hasUserTicket; }
    }
    public string UserTicket {
      get { return userTicket_; }
    }
    
    public const int RandomEncryKeyFieldNumber = 6;
    private bool hasRandomEncryKey;
    private global::mm.command.SKBuiltinBuffer_t randomEncryKey_;
    public bool HasRandomEncryKey {
      get { return hasRandomEncryKey; }
    }
    public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
      get { return randomEncryKey_ ?? global::mm.command.SKBuiltinBuffer_t.DefaultInstance; }
    }
    
    public const int SceneFieldNumber = 7;
    private bool hasScene;
    private uint scene_;
    public bool HasScene {
      get { return hasScene; }
    }
    [global::System.CLSCompliant(false)]
    public uint Scene {
      get { return scene_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasBioID) return false;
        if (!Base.IsInitialized) return false;
        if (HasRandomEncryKey) {
          if (!RandomEncryKey.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _registerFaceRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[5], Base);
      }
      if (hasBioID) {
        output.WriteUInt64(2, field_names[0], BioID);
      }
      if (hasCDNFileID) {
        output.WriteString(3, field_names[1], CDNFileID);
      }
      if (hasCDNKey) {
        output.WriteString(4, field_names[2], CDNKey);
      }
      if (hasUserTicket) {
        output.WriteString(5, field_names[4], UserTicket);
      }
      if (hasRandomEncryKey) {
        output.WriteMessage(6, field_names[3], RandomEncryKey);
      }
      if (hasScene) {
        output.WriteUInt32(7, field_names[6], Scene);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasBioID) {
          size += pb::CodedOutputStream.ComputeUInt64Size(2, BioID);
        }
        if (hasCDNFileID) {
          size += pb::CodedOutputStream.ComputeStringSize(3, CDNFileID);
        }
        if (hasCDNKey) {
          size += pb::CodedOutputStream.ComputeStringSize(4, CDNKey);
        }
        if (hasUserTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(5, UserTicket);
        }
        if (hasRandomEncryKey) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, RandomEncryKey);
        }
        if (hasScene) {
          size += pb::CodedOutputStream.ComputeUInt32Size(7, Scene);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RegisterFaceRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterFaceRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterFaceRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterFaceRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterFaceRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterFaceRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RegisterFaceRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RegisterFaceRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RegisterFaceRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterFaceRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegisterFaceRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RegisterFaceRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RegisterFaceRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegisterFaceRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RegisterFaceRequest result;
      
      private RegisterFaceRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RegisterFaceRequest original = result;
          result = new RegisterFaceRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RegisterFaceRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.RegisterFaceRequest.Descriptor; }
      }
      
      public override RegisterFaceRequest DefaultInstanceForType {
        get { return global::mm.command.RegisterFaceRequest.DefaultInstance; }
      }
      
      public override RegisterFaceRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RegisterFaceRequest) {
          return MergeFrom((RegisterFaceRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RegisterFaceRequest other) {
        if (other == global::mm.command.RegisterFaceRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasBioID) {
          BioID = other.BioID;
        }
        if (other.HasCDNFileID) {
          CDNFileID = other.CDNFileID;
        }
        if (other.HasCDNKey) {
          CDNKey = other.CDNKey;
        }
        if (other.HasUserTicket) {
          UserTicket = other.UserTicket;
        }
        if (other.HasRandomEncryKey) {
          MergeRandomEncryKey(other.RandomEncryKey);
        }
        if (other.HasScene) {
          Scene = other.Scene;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registerFaceRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registerFaceRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasBioID = input.ReadUInt64(ref result.bioID_);
              break;
            }
            case 26: {
              result.hasCDNFileID = input.ReadString(ref result.cDNFileID_);
              break;
            }
            case 34: {
              result.hasCDNKey = input.ReadString(ref result.cDNKey_);
              break;
            }
            case 42: {
              result.hasUserTicket = input.ReadString(ref result.userTicket_);
              break;
            }
            case 50: {
              global::mm.command.SKBuiltinBuffer_t.Builder subBuilder = global::mm.command.SKBuiltinBuffer_t.CreateBuilder();
              if (result.hasRandomEncryKey) {
                subBuilder.MergeFrom(RandomEncryKey);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              RandomEncryKey = subBuilder.BuildPartial();
              break;
            }
            case 56: {
              result.hasScene = input.ReadUInt32(ref result.scene_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasBioID {
        get { return result.hasBioID; }
      }
      [global::System.CLSCompliant(false)]
      public ulong BioID {
        get { return result.BioID; }
        set { SetBioID(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetBioID(ulong value) {
        PrepareBuilder();
        result.hasBioID = true;
        result.bioID_ = value;
        return this;
      }
      public Builder ClearBioID() {
        PrepareBuilder();
        result.hasBioID = false;
        result.bioID_ = 0UL;
        return this;
      }
      
      public bool HasCDNFileID {
        get { return result.hasCDNFileID; }
      }
      public string CDNFileID {
        get { return result.CDNFileID; }
        set { SetCDNFileID(value); }
      }
      public Builder SetCDNFileID(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCDNFileID = true;
        result.cDNFileID_ = value;
        return this;
      }
      public Builder ClearCDNFileID() {
        PrepareBuilder();
        result.hasCDNFileID = false;
        result.cDNFileID_ = "";
        return this;
      }
      
      public bool HasCDNKey {
        get { return result.hasCDNKey; }
      }
      public string CDNKey {
        get { return result.CDNKey; }
        set { SetCDNKey(value); }
      }
      public Builder SetCDNKey(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCDNKey = true;
        result.cDNKey_ = value;
        return this;
      }
      public Builder ClearCDNKey() {
        PrepareBuilder();
        result.hasCDNKey = false;
        result.cDNKey_ = "";
        return this;
      }
      
      public bool HasUserTicket {
        get { return result.hasUserTicket; }
      }
      public string UserTicket {
        get { return result.UserTicket; }
        set { SetUserTicket(value); }
      }
      public Builder SetUserTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserTicket = true;
        result.userTicket_ = value;
        return this;
      }
      public Builder ClearUserTicket() {
        PrepareBuilder();
        result.hasUserTicket = false;
        result.userTicket_ = "";
        return this;
      }
      
      public bool HasRandomEncryKey {
       get { return result.hasRandomEncryKey; }
      }
      public global::mm.command.SKBuiltinBuffer_t RandomEncryKey {
        get { return result.RandomEncryKey; }
        set { SetRandomEncryKey(value); }
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = value;
        return this;
      }
      public Builder SetRandomEncryKey(global::mm.command.SKBuiltinBuffer_t.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRandomEncryKey = true;
        result.randomEncryKey_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRandomEncryKey(global::mm.command.SKBuiltinBuffer_t value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRandomEncryKey &&
            result.randomEncryKey_ != global::mm.command.SKBuiltinBuffer_t.DefaultInstance) {
            result.randomEncryKey_ = global::mm.command.SKBuiltinBuffer_t.CreateBuilder(result.randomEncryKey_).MergeFrom(value).BuildPartial();
        } else {
          result.randomEncryKey_ = value;
        }
        result.hasRandomEncryKey = true;
        return this;
      }
      public Builder ClearRandomEncryKey() {
        PrepareBuilder();
        result.hasRandomEncryKey = false;
        result.randomEncryKey_ = null;
        return this;
      }
      
      public bool HasScene {
        get { return result.hasScene; }
      }
      [global::System.CLSCompliant(false)]
      public uint Scene {
        get { return result.Scene; }
        set { SetScene(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetScene(uint value) {
        PrepareBuilder();
        result.hasScene = true;
        result.scene_ = value;
        return this;
      }
      public Builder ClearScene() {
        PrepareBuilder();
        result.hasScene = false;
        result.scene_ = 0;
        return this;
      }
    }
    static RegisterFaceRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RegisterFaceResponse : pb::GeneratedMessage<RegisterFaceResponse, RegisterFaceResponse.Builder> {
    private RegisterFaceResponse() { }
    private static readonly RegisterFaceResponse defaultInstance = new RegisterFaceResponse().MakeReadOnly();
    private static readonly string[] _registerFaceResponseFieldNames = new string[] { "DetailRet", "PassTicket", "base", "server" };
    private static readonly uint[] _registerFaceResponseFieldTags = new uint[] { 32, 18, 10, 26 };
    public static RegisterFaceResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RegisterFaceResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RegisterFaceResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_RegisterFaceResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RegisterFaceResponse, RegisterFaceResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_RegisterFaceResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int PassTicketFieldNumber = 2;
    private bool hasPassTicket;
    private string passTicket_ = "";
    public bool HasPassTicket {
      get { return hasPassTicket; }
    }
    public string PassTicket {
      get { return passTicket_; }
    }
    
    public const int ServerFieldNumber = 3;
    private bool hasServer;
    private global::mm.command.ServerInfo server_;
    public bool HasServer {
      get { return hasServer; }
    }
    public global::mm.command.ServerInfo Server {
      get { return server_ ?? global::mm.command.ServerInfo.DefaultInstance; }
    }
    
    public const int DetailRetFieldNumber = 4;
    private bool hasDetailRet;
    private int detailRet_;
    public bool HasDetailRet {
      get { return hasDetailRet; }
    }
    public int DetailRet {
      get { return detailRet_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasServer) {
          if (!Server.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _registerFaceResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[2], Base);
      }
      if (hasPassTicket) {
        output.WriteString(2, field_names[1], PassTicket);
      }
      if (hasServer) {
        output.WriteMessage(3, field_names[3], Server);
      }
      if (hasDetailRet) {
        output.WriteInt32(4, field_names[0], DetailRet);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasPassTicket) {
          size += pb::CodedOutputStream.ComputeStringSize(2, PassTicket);
        }
        if (hasServer) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Server);
        }
        if (hasDetailRet) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, DetailRet);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RegisterFaceResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterFaceResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterFaceResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RegisterFaceResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RegisterFaceResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterFaceResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RegisterFaceResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RegisterFaceResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RegisterFaceResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RegisterFaceResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegisterFaceResponse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RegisterFaceResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RegisterFaceResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegisterFaceResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RegisterFaceResponse result;
      
      private RegisterFaceResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RegisterFaceResponse original = result;
          result = new RegisterFaceResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RegisterFaceResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.RegisterFaceResponse.Descriptor; }
      }
      
      public override RegisterFaceResponse DefaultInstanceForType {
        get { return global::mm.command.RegisterFaceResponse.DefaultInstance; }
      }
      
      public override RegisterFaceResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RegisterFaceResponse) {
          return MergeFrom((RegisterFaceResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RegisterFaceResponse other) {
        if (other == global::mm.command.RegisterFaceResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasPassTicket) {
          PassTicket = other.PassTicket;
        }
        if (other.HasServer) {
          MergeServer(other.Server);
        }
        if (other.HasDetailRet) {
          DetailRet = other.DetailRet;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registerFaceResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registerFaceResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasPassTicket = input.ReadString(ref result.passTicket_);
              break;
            }
            case 26: {
              global::mm.command.ServerInfo.Builder subBuilder = global::mm.command.ServerInfo.CreateBuilder();
              if (result.hasServer) {
                subBuilder.MergeFrom(Server);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Server = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasDetailRet = input.ReadInt32(ref result.detailRet_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasPassTicket {
        get { return result.hasPassTicket; }
      }
      public string PassTicket {
        get { return result.PassTicket; }
        set { SetPassTicket(value); }
      }
      public Builder SetPassTicket(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassTicket = true;
        result.passTicket_ = value;
        return this;
      }
      public Builder ClearPassTicket() {
        PrepareBuilder();
        result.hasPassTicket = false;
        result.passTicket_ = "";
        return this;
      }
      
      public bool HasServer {
       get { return result.hasServer; }
      }
      public global::mm.command.ServerInfo Server {
        get { return result.Server; }
        set { SetServer(value); }
      }
      public Builder SetServer(global::mm.command.ServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServer = true;
        result.server_ = value;
        return this;
      }
      public Builder SetServer(global::mm.command.ServerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasServer = true;
        result.server_ = builderForValue.Build();
        return this;
      }
      public Builder MergeServer(global::mm.command.ServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasServer &&
            result.server_ != global::mm.command.ServerInfo.DefaultInstance) {
            result.server_ = global::mm.command.ServerInfo.CreateBuilder(result.server_).MergeFrom(value).BuildPartial();
        } else {
          result.server_ = value;
        }
        result.hasServer = true;
        return this;
      }
      public Builder ClearServer() {
        PrepareBuilder();
        result.hasServer = false;
        result.server_ = null;
        return this;
      }
      
      public bool HasDetailRet {
        get { return result.hasDetailRet; }
      }
      public int DetailRet {
        get { return result.DetailRet; }
        set { SetDetailRet(value); }
      }
      public Builder SetDetailRet(int value) {
        PrepareBuilder();
        result.hasDetailRet = true;
        result.detailRet_ = value;
        return this;
      }
      public Builder ClearDetailRet() {
        PrepareBuilder();
        result.hasDetailRet = false;
        result.detailRet_ = 0;
        return this;
      }
    }
    static RegisterFaceResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetSafetyInfoRequest : pb::GeneratedMessage<GetSafetyInfoRequest, GetSafetyInfoRequest.Builder> {
    private GetSafetyInfoRequest() { }
    private static readonly GetSafetyInfoRequest defaultInstance = new GetSafetyInfoRequest().MakeReadOnly();
    private static readonly string[] _getSafetyInfoRequestFieldNames = new string[] { "base" };
    private static readonly uint[] _getSafetyInfoRequestFieldTags = new uint[] { 10 };
    public static GetSafetyInfoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetSafetyInfoRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetSafetyInfoRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetSafetyInfoRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetSafetyInfoRequest, GetSafetyInfoRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetSafetyInfoRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getSafetyInfoRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetSafetyInfoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSafetyInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSafetyInfoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSafetyInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSafetyInfoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSafetyInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetSafetyInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetSafetyInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetSafetyInfoRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSafetyInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetSafetyInfoRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetSafetyInfoRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetSafetyInfoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetSafetyInfoRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetSafetyInfoRequest result;
      
      private GetSafetyInfoRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetSafetyInfoRequest original = result;
          result = new GetSafetyInfoRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetSafetyInfoRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetSafetyInfoRequest.Descriptor; }
      }
      
      public override GetSafetyInfoRequest DefaultInstanceForType {
        get { return global::mm.command.GetSafetyInfoRequest.DefaultInstance; }
      }
      
      public override GetSafetyInfoRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetSafetyInfoRequest) {
          return MergeFrom((GetSafetyInfoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetSafetyInfoRequest other) {
        if (other == global::mm.command.GetSafetyInfoRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getSafetyInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getSafetyInfoRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
    }
    static GetSafetyInfoRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GetSafetyInfoRespsonse : pb::GeneratedMessage<GetSafetyInfoRespsonse, GetSafetyInfoRespsonse.Builder> {
    private GetSafetyInfoRespsonse() { }
    private static readonly GetSafetyInfoRespsonse defaultInstance = new GetSafetyInfoRespsonse().MakeReadOnly();
    private static readonly string[] _getSafetyInfoRespsonseFieldNames = new string[] { "base", "info" };
    private static readonly uint[] _getSafetyInfoRespsonseFieldTags = new uint[] { 10, 18 };
    public static GetSafetyInfoRespsonse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GetSafetyInfoRespsonse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetSafetyInfoRespsonse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetSafetyInfoRespsonse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GetSafetyInfoRespsonse, GetSafetyInfoRespsonse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_GetSafetyInfoRespsonse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int InfoFieldNumber = 2;
    private bool hasInfo;
    private global::mm.command.SafetyInfo info_;
    public bool HasInfo {
      get { return hasInfo; }
    }
    public global::mm.command.SafetyInfo Info {
      get { return info_ ?? global::mm.command.SafetyInfo.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!Base.IsInitialized) return false;
        if (HasInfo) {
          if (!Info.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getSafetyInfoRespsonseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[0], Base);
      }
      if (hasInfo) {
        output.WriteMessage(2, field_names[1], Info);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Info);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static GetSafetyInfoRespsonse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSafetyInfoRespsonse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSafetyInfoRespsonse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GetSafetyInfoRespsonse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GetSafetyInfoRespsonse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSafetyInfoRespsonse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GetSafetyInfoRespsonse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GetSafetyInfoRespsonse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GetSafetyInfoRespsonse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GetSafetyInfoRespsonse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetSafetyInfoRespsonse MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GetSafetyInfoRespsonse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GetSafetyInfoRespsonse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetSafetyInfoRespsonse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetSafetyInfoRespsonse result;
      
      private GetSafetyInfoRespsonse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetSafetyInfoRespsonse original = result;
          result = new GetSafetyInfoRespsonse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetSafetyInfoRespsonse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.GetSafetyInfoRespsonse.Descriptor; }
      }
      
      public override GetSafetyInfoRespsonse DefaultInstanceForType {
        get { return global::mm.command.GetSafetyInfoRespsonse.DefaultInstance; }
      }
      
      public override GetSafetyInfoRespsonse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GetSafetyInfoRespsonse) {
          return MergeFrom((GetSafetyInfoRespsonse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetSafetyInfoRespsonse other) {
        if (other == global::mm.command.GetSafetyInfoRespsonse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasInfo) {
          MergeInfo(other.Info);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getSafetyInfoRespsonseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getSafetyInfoRespsonseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::mm.command.SafetyInfo.Builder subBuilder = global::mm.command.SafetyInfo.CreateBuilder();
              if (result.hasInfo) {
                subBuilder.MergeFrom(Info);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Info = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasInfo {
       get { return result.hasInfo; }
      }
      public global::mm.command.SafetyInfo Info {
        get { return result.Info; }
        set { SetInfo(value); }
      }
      public Builder SetInfo(global::mm.command.SafetyInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = value;
        return this;
      }
      public Builder SetInfo(global::mm.command.SafetyInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasInfo = true;
        result.info_ = builderForValue.Build();
        return this;
      }
      public Builder MergeInfo(global::mm.command.SafetyInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasInfo &&
            result.info_ != global::mm.command.SafetyInfo.DefaultInstance) {
            result.info_ = global::mm.command.SafetyInfo.CreateBuilder(result.info_).MergeFrom(value).BuildPartial();
        } else {
          result.info_ = value;
        }
        result.hasInfo = true;
        return this;
      }
      public Builder ClearInfo() {
        PrepareBuilder();
        result.hasInfo = false;
        result.info_ = null;
        return this;
      }
    }
    static GetSafetyInfoRespsonse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MmsnsuserpageRequest : pb::GeneratedMessage<MmsnsuserpageRequest, MmsnsuserpageRequest.Builder> {
    private MmsnsuserpageRequest() { }
    private static readonly MmsnsuserpageRequest defaultInstance = new MmsnsuserpageRequest().MakeReadOnly();
    private static readonly string[] _mmsnsuserpageRequestFieldNames = new string[] { "FirstPageMd5", "LastRequestTime", "MaxId", "MinFilterId", "Source", "Username", "base" };
    private static readonly uint[] _mmsnsuserpageRequestFieldTags = new uint[] { 18, 56, 32, 48, 40, 26, 10 };
    public static MmsnsuserpageRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MmsnsuserpageRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MmsnsuserpageRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MmsnsuserpageRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MmsnsuserpageRequest, MmsnsuserpageRequest.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MmsnsuserpageRequest__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseRequest base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseRequest Base {
      get { return base_ ?? global::mm.command.BaseRequest.DefaultInstance; }
    }
    
    public const int FirstPageMd5FieldNumber = 2;
    private bool hasFirstPageMd5;
    private string firstPageMd5_ = "";
    public bool HasFirstPageMd5 {
      get { return hasFirstPageMd5; }
    }
    public string FirstPageMd5 {
      get { return firstPageMd5_; }
    }
    
    public const int UsernameFieldNumber = 3;
    private bool hasUsername;
    private string username_ = "";
    public bool HasUsername {
      get { return hasUsername; }
    }
    public string Username {
      get { return username_; }
    }
    
    public const int MaxIdFieldNumber = 4;
    private bool hasMaxId;
    private ulong maxId_;
    public bool HasMaxId {
      get { return hasMaxId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MaxId {
      get { return maxId_; }
    }
    
    public const int SourceFieldNumber = 5;
    private bool hasSource;
    private int source_;
    public bool HasSource {
      get { return hasSource; }
    }
    public int Source {
      get { return source_; }
    }
    
    public const int MinFilterIdFieldNumber = 6;
    private bool hasMinFilterId;
    private ulong minFilterId_;
    public bool HasMinFilterId {
      get { return hasMinFilterId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MinFilterId {
      get { return minFilterId_; }
    }
    
    public const int LastRequestTimeFieldNumber = 7;
    private bool hasLastRequestTime;
    private int lastRequestTime_;
    public bool HasLastRequestTime {
      get { return hasLastRequestTime; }
    }
    public int LastRequestTime {
      get { return lastRequestTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasMaxId) return false;
        if (!Base.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mmsnsuserpageRequestFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[6], Base);
      }
      if (hasFirstPageMd5) {
        output.WriteString(2, field_names[0], FirstPageMd5);
      }
      if (hasUsername) {
        output.WriteString(3, field_names[5], Username);
      }
      if (hasMaxId) {
        output.WriteUInt64(4, field_names[2], MaxId);
      }
      if (hasSource) {
        output.WriteInt32(5, field_names[4], Source);
      }
      if (hasMinFilterId) {
        output.WriteUInt64(6, field_names[3], MinFilterId);
      }
      if (hasLastRequestTime) {
        output.WriteInt32(7, field_names[1], LastRequestTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasFirstPageMd5) {
          size += pb::CodedOutputStream.ComputeStringSize(2, FirstPageMd5);
        }
        if (hasUsername) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Username);
        }
        if (hasMaxId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(4, MaxId);
        }
        if (hasSource) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Source);
        }
        if (hasMinFilterId) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, MinFilterId);
        }
        if (hasLastRequestTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, LastRequestTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MmsnsuserpageRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MmsnsuserpageRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuserpageRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MmsnsuserpageRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuserpageRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MmsnsuserpageRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuserpageRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MmsnsuserpageRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MmsnsuserpageRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MmsnsuserpageRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MmsnsuserpageRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MmsnsuserpageRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MmsnsuserpageRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MmsnsuserpageRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MmsnsuserpageRequest result;
      
      private MmsnsuserpageRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          MmsnsuserpageRequest original = result;
          result = new MmsnsuserpageRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MmsnsuserpageRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.MmsnsuserpageRequest.Descriptor; }
      }
      
      public override MmsnsuserpageRequest DefaultInstanceForType {
        get { return global::mm.command.MmsnsuserpageRequest.DefaultInstance; }
      }
      
      public override MmsnsuserpageRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MmsnsuserpageRequest) {
          return MergeFrom((MmsnsuserpageRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MmsnsuserpageRequest other) {
        if (other == global::mm.command.MmsnsuserpageRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasFirstPageMd5) {
          FirstPageMd5 = other.FirstPageMd5;
        }
        if (other.HasUsername) {
          Username = other.Username;
        }
        if (other.HasMaxId) {
          MaxId = other.MaxId;
        }
        if (other.HasSource) {
          Source = other.Source;
        }
        if (other.HasMinFilterId) {
          MinFilterId = other.MinFilterId;
        }
        if (other.HasLastRequestTime) {
          LastRequestTime = other.LastRequestTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mmsnsuserpageRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mmsnsuserpageRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseRequest.Builder subBuilder = global::mm.command.BaseRequest.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasFirstPageMd5 = input.ReadString(ref result.firstPageMd5_);
              break;
            }
            case 26: {
              result.hasUsername = input.ReadString(ref result.username_);
              break;
            }
            case 32: {
              result.hasMaxId = input.ReadUInt64(ref result.maxId_);
              break;
            }
            case 40: {
              result.hasSource = input.ReadInt32(ref result.source_);
              break;
            }
            case 48: {
              result.hasMinFilterId = input.ReadUInt64(ref result.minFilterId_);
              break;
            }
            case 56: {
              result.hasLastRequestTime = input.ReadInt32(ref result.lastRequestTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseRequest Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseRequest.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseRequest value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseRequest.DefaultInstance) {
            result.base_ = global::mm.command.BaseRequest.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasFirstPageMd5 {
        get { return result.hasFirstPageMd5; }
      }
      public string FirstPageMd5 {
        get { return result.FirstPageMd5; }
        set { SetFirstPageMd5(value); }
      }
      public Builder SetFirstPageMd5(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFirstPageMd5 = true;
        result.firstPageMd5_ = value;
        return this;
      }
      public Builder ClearFirstPageMd5() {
        PrepareBuilder();
        result.hasFirstPageMd5 = false;
        result.firstPageMd5_ = "";
        return this;
      }
      
      public bool HasUsername {
        get { return result.hasUsername; }
      }
      public string Username {
        get { return result.Username; }
        set { SetUsername(value); }
      }
      public Builder SetUsername(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUsername = true;
        result.username_ = value;
        return this;
      }
      public Builder ClearUsername() {
        PrepareBuilder();
        result.hasUsername = false;
        result.username_ = "";
        return this;
      }
      
      public bool HasMaxId {
        get { return result.hasMaxId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong MaxId {
        get { return result.MaxId; }
        set { SetMaxId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMaxId(ulong value) {
        PrepareBuilder();
        result.hasMaxId = true;
        result.maxId_ = value;
        return this;
      }
      public Builder ClearMaxId() {
        PrepareBuilder();
        result.hasMaxId = false;
        result.maxId_ = 0UL;
        return this;
      }
      
      public bool HasSource {
        get { return result.hasSource; }
      }
      public int Source {
        get { return result.Source; }
        set { SetSource(value); }
      }
      public Builder SetSource(int value) {
        PrepareBuilder();
        result.hasSource = true;
        result.source_ = value;
        return this;
      }
      public Builder ClearSource() {
        PrepareBuilder();
        result.hasSource = false;
        result.source_ = 0;
        return this;
      }
      
      public bool HasMinFilterId {
        get { return result.hasMinFilterId; }
      }
      [global::System.CLSCompliant(false)]
      public ulong MinFilterId {
        get { return result.MinFilterId; }
        set { SetMinFilterId(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetMinFilterId(ulong value) {
        PrepareBuilder();
        result.hasMinFilterId = true;
        result.minFilterId_ = value;
        return this;
      }
      public Builder ClearMinFilterId() {
        PrepareBuilder();
        result.hasMinFilterId = false;
        result.minFilterId_ = 0UL;
        return this;
      }
      
      public bool HasLastRequestTime {
        get { return result.hasLastRequestTime; }
      }
      public int LastRequestTime {
        get { return result.LastRequestTime; }
        set { SetLastRequestTime(value); }
      }
      public Builder SetLastRequestTime(int value) {
        PrepareBuilder();
        result.hasLastRequestTime = true;
        result.lastRequestTime_ = value;
        return this;
      }
      public Builder ClearLastRequestTime() {
        PrepareBuilder();
        result.hasLastRequestTime = false;
        result.lastRequestTime_ = 0;
        return this;
      }
    }
    static MmsnsuserpageRequest() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MmsnsuserpageResponse : pb::GeneratedMessage<MmsnsuserpageResponse, MmsnsuserpageResponse.Builder> {
    private MmsnsuserpageResponse() { }
    private static readonly MmsnsuserpageResponse defaultInstance = new MmsnsuserpageResponse().MakeReadOnly();
    private static readonly string[] _mmsnsuserpageResponseFieldNames = new string[] { "FirstPageMd5", "NewRequestTime", "ObjectCount", "ObjectCountForSameMd5", "ObjectList", "ObjectTotalCount", "SnsUserInfo", "base" };
    private static readonly uint[] _mmsnsuserpageResponseFieldTags = new uint[] { 18, 56, 24, 64, 34, 40, 50, 10 };
    public static MmsnsuserpageResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MmsnsuserpageResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MmsnsuserpageResponse ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MmsnsuserpageResponse__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MmsnsuserpageResponse, MmsnsuserpageResponse.Builder> InternalFieldAccessors {
      get { return global::mm.command.MicroMsg.internal__static_mm_command_MmsnsuserpageResponse__FieldAccessorTable; }
    }
    
    public const int BaseFieldNumber = 1;
    private bool hasBase;
    private global::mm.command.BaseResponse base_;
    public bool HasBase {
      get { return hasBase; }
    }
    public global::mm.command.BaseResponse Base {
      get { return base_ ?? global::mm.command.BaseResponse.DefaultInstance; }
    }
    
    public const int FirstPageMd5FieldNumber = 2;
    private bool hasFirstPageMd5;
    private string firstPageMd5_ = "";
    public bool HasFirstPageMd5 {
      get { return hasFirstPageMd5; }
    }
    public string FirstPageMd5 {
      get { return firstPageMd5_; }
    }
    
    public const int ObjectCountFieldNumber = 3;
    private bool hasObjectCount;
    private int objectCount_;
    public bool HasObjectCount {
      get { return hasObjectCount; }
    }
    public int ObjectCount {
      get { return objectCount_; }
    }
    
    public const int ObjectListFieldNumber = 4;
    private pbc::PopsicleList<global::mm.command.PageObject> objectList_ = new pbc::PopsicleList<global::mm.command.PageObject>();
    public scg::IList<global::mm.command.PageObject> ObjectListList {
      get { return objectList_; }
    }
    public int ObjectListCount {
      get { return objectList_.Count; }
    }
    public global::mm.command.PageObject GetObjectList(int index) {
      return objectList_[index];
    }
    
    public const int ObjectTotalCountFieldNumber = 5;
    private bool hasObjectTotalCount;
    private int objectTotalCount_;
    public bool HasObjectTotalCount {
      get { return hasObjectTotalCount; }
    }
    public int ObjectTotalCount {
      get { return objectTotalCount_; }
    }
    
    public const int SnsUserInfoFieldNumber = 6;
    private bool hasSnsUserInfo;
    private global::mm.command.SnsUser snsUserInfo_;
    public bool HasSnsUserInfo {
      get { return hasSnsUserInfo; }
    }
    public global::mm.command.SnsUser SnsUserInfo {
      get { return snsUserInfo_ ?? global::mm.command.SnsUser.DefaultInstance; }
    }
    
    public const int NewRequestTimeFieldNumber = 7;
    private bool hasNewRequestTime;
    private int newRequestTime_;
    public bool HasNewRequestTime {
      get { return hasNewRequestTime; }
    }
    public int NewRequestTime {
      get { return newRequestTime_; }
    }
    
    public const int ObjectCountForSameMd5FieldNumber = 8;
    private bool hasObjectCountForSameMd5;
    private int objectCountForSameMd5_;
    public bool HasObjectCountForSameMd5 {
      get { return hasObjectCountForSameMd5; }
    }
    public int ObjectCountForSameMd5 {
      get { return objectCountForSameMd5_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBase) return false;
        if (!hasObjectCount) return false;
        if (!hasObjectTotalCount) return false;
        if (!Base.IsInitialized) return false;
        foreach (global::mm.command.PageObject element in ObjectListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasSnsUserInfo) {
          if (!SnsUserInfo.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mmsnsuserpageResponseFieldNames;
      if (hasBase) {
        output.WriteMessage(1, field_names[7], Base);
      }
      if (hasFirstPageMd5) {
        output.WriteString(2, field_names[0], FirstPageMd5);
      }
      if (hasObjectCount) {
        output.WriteInt32(3, field_names[2], ObjectCount);
      }
      if (objectList_.Count > 0) {
        output.WriteMessageArray(4, field_names[4], objectList_);
      }
      if (hasObjectTotalCount) {
        output.WriteInt32(5, field_names[5], ObjectTotalCount);
      }
      if (hasSnsUserInfo) {
        output.WriteMessage(6, field_names[6], SnsUserInfo);
      }
      if (hasNewRequestTime) {
        output.WriteInt32(7, field_names[1], NewRequestTime);
      }
      if (hasObjectCountForSameMd5) {
        output.WriteInt32(8, field_names[3], ObjectCountForSameMd5);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBase) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Base);
        }
        if (hasFirstPageMd5) {
          size += pb::CodedOutputStream.ComputeStringSize(2, FirstPageMd5);
        }
        if (hasObjectCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ObjectCount);
        }
        foreach (global::mm.command.PageObject element in ObjectListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (hasObjectTotalCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, ObjectTotalCount);
        }
        if (hasSnsUserInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, SnsUserInfo);
        }
        if (hasNewRequestTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, NewRequestTime);
        }
        if (hasObjectCountForSameMd5) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, ObjectCountForSameMd5);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MmsnsuserpageResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MmsnsuserpageResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuserpageResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MmsnsuserpageResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuserpageResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MmsnsuserpageResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MmsnsuserpageResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MmsnsuserpageResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MmsnsuserpageResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MmsnsuserpageResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MmsnsuserpageResponse MakeReadOnly() {
      objectList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MmsnsuserpageResponse prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<MmsnsuserpageResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MmsnsuserpageResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MmsnsuserpageResponse result;
      
      private MmsnsuserpageResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          MmsnsuserpageResponse original = result;
          result = new MmsnsuserpageResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MmsnsuserpageResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::mm.command.MmsnsuserpageResponse.Descriptor; }
      }
      
      public override MmsnsuserpageResponse DefaultInstanceForType {
        get { return global::mm.command.MmsnsuserpageResponse.DefaultInstance; }
      }
      
      public override MmsnsuserpageResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MmsnsuserpageResponse) {
          return MergeFrom((MmsnsuserpageResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MmsnsuserpageResponse other) {
        if (other == global::mm.command.MmsnsuserpageResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBase) {
          MergeBase(other.Base);
        }
        if (other.HasFirstPageMd5) {
          FirstPageMd5 = other.FirstPageMd5;
        }
        if (other.HasObjectCount) {
          ObjectCount = other.ObjectCount;
        }
        if (other.objectList_.Count != 0) {
          result.objectList_.Add(other.objectList_);
        }
        if (other.HasObjectTotalCount) {
          ObjectTotalCount = other.ObjectTotalCount;
        }
        if (other.HasSnsUserInfo) {
          MergeSnsUserInfo(other.SnsUserInfo);
        }
        if (other.HasNewRequestTime) {
          NewRequestTime = other.NewRequestTime;
        }
        if (other.HasObjectCountForSameMd5) {
          ObjectCountForSameMd5 = other.ObjectCountForSameMd5;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mmsnsuserpageResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mmsnsuserpageResponseFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::mm.command.BaseResponse.Builder subBuilder = global::mm.command.BaseResponse.CreateBuilder();
              if (result.hasBase) {
                subBuilder.MergeFrom(Base);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Base = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              result.hasFirstPageMd5 = input.ReadString(ref result.firstPageMd5_);
              break;
            }
            case 24: {
              result.hasObjectCount = input.ReadInt32(ref result.objectCount_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.objectList_, global::mm.command.PageObject.DefaultInstance, extensionRegistry);
              break;
            }
            case 40: {
              result.hasObjectTotalCount = input.ReadInt32(ref result.objectTotalCount_);
              break;
            }
            case 50: {
              global::mm.command.SnsUser.Builder subBuilder = global::mm.command.SnsUser.CreateBuilder();
              if (result.hasSnsUserInfo) {
                subBuilder.MergeFrom(SnsUserInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SnsUserInfo = subBuilder.BuildPartial();
              break;
            }
            case 56: {
              result.hasNewRequestTime = input.ReadInt32(ref result.newRequestTime_);
              break;
            }
            case 64: {
              result.hasObjectCountForSameMd5 = input.ReadInt32(ref result.objectCountForSameMd5_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBase {
       get { return result.hasBase; }
      }
      public global::mm.command.BaseResponse Base {
        get { return result.Base; }
        set { SetBase(value); }
      }
      public Builder SetBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = value;
        return this;
      }
      public Builder SetBase(global::mm.command.BaseResponse.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBase = true;
        result.base_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBase(global::mm.command.BaseResponse value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBase &&
            result.base_ != global::mm.command.BaseResponse.DefaultInstance) {
            result.base_ = global::mm.command.BaseResponse.CreateBuilder(result.base_).MergeFrom(value).BuildPartial();
        } else {
          result.base_ = value;
        }
        result.hasBase = true;
        return this;
      }
      public Builder ClearBase() {
        PrepareBuilder();
        result.hasBase = false;
        result.base_ = null;
        return this;
      }
      
      public bool HasFirstPageMd5 {
        get { return result.hasFirstPageMd5; }
      }
      public string FirstPageMd5 {
        get { return result.FirstPageMd5; }
        set { SetFirstPageMd5(value); }
      }
      public Builder SetFirstPageMd5(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFirstPageMd5 = true;
        result.firstPageMd5_ = value;
        return this;
      }
      public Builder ClearFirstPageMd5() {
        PrepareBuilder();
        result.hasFirstPageMd5 = false;
        result.firstPageMd5_ = "";
        return this;
      }
      
      public bool HasObjectCount {
        get { return result.hasObjectCount; }
      }
      public int ObjectCount {
        get { return result.ObjectCount; }
        set { SetObjectCount(value); }
      }
      public Builder SetObjectCount(int value) {
        PrepareBuilder();
        result.hasObjectCount = true;
        result.objectCount_ = value;
        return this;
      }
      public Builder ClearObjectCount() {
        PrepareBuilder();
        result.hasObjectCount = false;
        result.objectCount_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::mm.command.PageObject> ObjectListList {
        get { return PrepareBuilder().objectList_; }
      }
      public int ObjectListCount {
        get { return result.ObjectListCount; }
      }
      public global::mm.command.PageObject GetObjectList(int index) {
        return result.GetObjectList(index);
      }
      public Builder SetObjectList(int index, global::mm.command.PageObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.objectList_[index] = value;
        return this;
      }
      public Builder SetObjectList(int index, global::mm.command.PageObject.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.objectList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddObjectList(global::mm.command.PageObject value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.objectList_.Add(value);
        return this;
      }
      public Builder AddObjectList(global::mm.command.PageObject.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.objectList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeObjectList(scg::IEnumerable<global::mm.command.PageObject> values) {
        PrepareBuilder();
        result.objectList_.Add(values);
        return this;
      }
      public Builder ClearObjectList() {
        PrepareBuilder();
        result.objectList_.Clear();
        return this;
      }
      
      public bool HasObjectTotalCount {
        get { return result.hasObjectTotalCount; }
      }
      public int ObjectTotalCount {
        get { return result.ObjectTotalCount; }
        set { SetObjectTotalCount(value); }
      }
      public Builder SetObjectTotalCount(int value) {
        PrepareBuilder();
        result.hasObjectTotalCount = true;
        result.objectTotalCount_ = value;
        return this;
      }
      public Builder ClearObjectTotalCount() {
        PrepareBuilder();
        result.hasObjectTotalCount = false;
        result.objectTotalCount_ = 0;
        return this;
      }
      
      public bool HasSnsUserInfo {
       get { return result.hasSnsUserInfo; }
      }
      public global::mm.command.SnsUser SnsUserInfo {
        get { return result.SnsUserInfo; }
        set { SetSnsUserInfo(value); }
      }
      public Builder SetSnsUserInfo(global::mm.command.SnsUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSnsUserInfo = true;
        result.snsUserInfo_ = value;
        return this;
      }
      public Builder SetSnsUserInfo(global::mm.command.SnsUser.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSnsUserInfo = true;
        result.snsUserInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSnsUserInfo(global::mm.command.SnsUser value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSnsUserInfo &&
            result.snsUserInfo_ != global::mm.command.SnsUser.DefaultInstance) {
            result.snsUserInfo_ = global::mm.command.SnsUser.CreateBuilder(result.snsUserInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.snsUserInfo_ = value;
        }
        result.hasSnsUserInfo = true;
        return this;
      }
      public Builder ClearSnsUserInfo() {
        PrepareBuilder();
        result.hasSnsUserInfo = false;
        result.snsUserInfo_ = null;
        return this;
      }
      
      public bool HasNewRequestTime {
        get { return result.hasNewRequestTime; }
      }
      public int NewRequestTime {
        get { return result.NewRequestTime; }
        set { SetNewRequestTime(value); }
      }
      public Builder SetNewRequestTime(int value) {
        PrepareBuilder();
        result.hasNewRequestTime = true;
        result.newRequestTime_ = value;
        return this;
      }
      public Builder ClearNewRequestTime() {
        PrepareBuilder();
        result.hasNewRequestTime = false;
        result.newRequestTime_ = 0;
        return this;
      }
      
      public bool HasObjectCountForSameMd5 {
        get { return result.hasObjectCountForSameMd5; }
      }
      public int ObjectCountForSameMd5 {
        get { return result.ObjectCountForSameMd5; }
        set { SetObjectCountForSameMd5(value); }
      }
      public Builder SetObjectCountForSameMd5(int value) {
        PrepareBuilder();
        result.hasObjectCountForSameMd5 = true;
        result.objectCountForSameMd5_ = value;
        return this;
      }
      public Builder ClearObjectCountForSameMd5() {
        PrepareBuilder();
        result.hasObjectCountForSameMd5 = false;
        result.objectCountForSameMd5_ = 0;
        return this;
      }
    }
    static MmsnsuserpageResponse() {
      object.ReferenceEquals(global::mm.command.MicroMsg.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
